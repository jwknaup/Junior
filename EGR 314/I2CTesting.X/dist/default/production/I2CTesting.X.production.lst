

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Apr 24 12:01:19 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F47K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,inline
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,inline
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,inline
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,inline
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,inline
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1,inline
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1,inline
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1,inline
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1,inline
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1,inline
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1,inline
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1,inline
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1,inline
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1,inline
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1,inline
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1,inline
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1,inline
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1,inline
    71                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1
    75                           	psect	text63,global,reloc=2,class=CODE,delta=1
    76                           	psect	text64,global,reloc=2,class=CODE,delta=1
    77                           	psect	text65,global,reloc=2,class=CODE,delta=1
    78                           	psect	text66,global,reloc=2,class=CODE,delta=1
    79                           	psect	text67,global,reloc=2,class=CODE,delta=1
    80                           	psect	text68,global,reloc=2,class=CODE,delta=1
    81                           	psect	text69,global,reloc=2,class=CODE,delta=1
    82                           	psect	text70,global,reloc=2,class=CODE,delta=1
    83                           	psect	text71,global,reloc=2,class=CODE,delta=1
    84                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    85                           	psect	text73,global,reloc=2,class=CODE,delta=1
    86                           	psect	text74,global,reloc=2,class=CODE,delta=1,inline
    87                           	psect	text75,global,reloc=2,class=CODE,delta=1
    88                           	psect	text76,global,reloc=2,class=CODE,delta=1
    89                           	psect	text77,global,reloc=2,class=CODE,delta=1
    90                           	psect	text78,global,reloc=2,class=CODE,delta=1
    91                           	psect	text79,global,reloc=2,class=CODE,delta=1
    92                           	psect	text80,global,reloc=2,class=CODE,delta=1
    93                           	psect	text81,global,reloc=2,class=CODE,delta=1
    94                           	psect	text82,global,reloc=2,class=CODE,delta=1
    95                           	psect	text83,global,reloc=2,class=CODE,delta=1
    96                           	psect	text84,global,reloc=2,class=CODE,delta=1
    97                           	psect	text85,global,reloc=2,class=CODE,delta=1
    98                           	psect	text86,global,reloc=2,class=CODE,delta=1
    99                           	psect	text87,global,reloc=2,class=CODE,delta=1
   100                           	psect	text88,global,reloc=2,class=CODE,delta=1
   101                           	psect	text89,global,reloc=2,class=CODE,delta=1
   102                           	psect	text90,global,reloc=2,class=CODE,delta=1
   103                           	psect	text91,global,reloc=2,class=CODE,delta=1,inline
   104                           	psect	text92,global,reloc=2,class=CODE,delta=1,inline
   105                           	psect	text93,global,reloc=2,class=CODE,delta=1,inline
   106                           	psect	text94,global,reloc=2,class=CODE,delta=1,inline
   107                           	psect	text95,global,reloc=2,class=CODE,delta=1,inline
   108                           	psect	text96,global,reloc=2,class=CODE,delta=1,inline
   109                           	psect	text97,global,reloc=2,class=CODE,delta=1,inline
   110                           	psect	text98,global,reloc=2,class=CODE,delta=1
   111                           	psect	text99,global,reloc=2,class=CODE,delta=1
   112                           	psect	text100,global,reloc=2,class=CODE,delta=1
   113                           	psect	text101,global,reloc=2,class=CODE,delta=1
   114                           	psect	text102,global,reloc=2,class=CODE,delta=1
   115                           	psect	text103,global,reloc=2,class=CODE,delta=1
   116                           	psect	text104,global,reloc=2,class=CODE,delta=1
   117                           	psect	text105,global,reloc=2,class=CODE,delta=1
   118                           	psect	text106,global,reloc=2,class=CODE,delta=1
   119                           	psect	text107,global,reloc=2,class=CODE,delta=1
   120                           	psect	text108,global,reloc=2,class=CODE,delta=1
   121                           	psect	text109,global,reloc=2,class=CODE,delta=1,inline
   122                           	psect	text110,global,reloc=2,class=CODE,delta=1,inline
   123                           	psect	text111,global,reloc=2,class=CODE,delta=1,inline
   124                           	psect	text112,global,reloc=2,class=CODE,delta=1
   125                           	psect	text113,global,reloc=2,class=CODE,delta=1,inline
   126                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   127                           	psect	text114,global,reloc=2,class=CODE,delta=1,inline
   128                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   129                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   130  0000                     
   131                           ; Version 1.45
   132                           ; Generated 16/11/2017 GMT
   133                           ; 
   134                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   135                           ; All rights reserved.
   136                           ; 
   137                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   138                           ; 
   139                           ; Redistribution and use in source and binary forms, with or without modification, are
   140                           ; permitted provided that the following conditions are met:
   141                           ; 
   142                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   143                           ;        conditions and the following disclaimer.
   144                           ; 
   145                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   146                           ;        of conditions and the following disclaimer in the documentation and/or other
   147                           ;        materials provided with the distribution.
   148                           ; 
   149                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   150                           ;        software without specific prior written permission.
   151                           ; 
   152                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   153                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   154                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   155                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   156                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   157                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   158                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   159                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   160                           ; 
   161                           ; 
   162                           ; Code-generator required, PIC18F47K40 Definitions
   163                           ; 
   164                           ; SFR Addresses
   165  0000                     
   166                           	psect	idataBANK0
   167  000F64                     __pidataBANK0:
   168                           	opt stack 0
   169                           
   170                           ;initializer for _fsmStateTable
   171  000F64  76                 	db	low _do_I2C_IDLE
   172  000F65  12                 	db	high _do_I2C_IDLE
   173  000F66  00                 	db	low (_do_I2C_IDLE shr (0+16))
   174  000F67  E4                 	db	low _do_I2C_SEND_ADR_READ
   175  000F68  11                 	db	high _do_I2C_SEND_ADR_READ
   176  000F69  00                 	db	low (_do_I2C_SEND_ADR_READ shr (0+16))
   177  000F6A  CE                 	db	low _do_I2C_SEND_ADR_WRITE
   178  000F6B  11                 	db	high _do_I2C_SEND_ADR_WRITE
   179  000F6C  00                 	db	low (_do_I2C_SEND_ADR_WRITE shr (0+16))
   180  000F6D  28                 	db	low _do_I2C_TX
   181  000F6E  08                 	db	high _do_I2C_TX
   182  000F6F  00                 	db	low (_do_I2C_TX shr (0+16))
   183  000F70  4E                 	db	low _do_I2C_RX
   184  000F71  09                 	db	high _do_I2C_RX
   185  000F72  00                 	db	low (_do_I2C_RX shr (0+16))
   186  000F73  64                 	db	low _do_I2C_RCEN
   187  000F74  12                 	db	high _do_I2C_RCEN
   188  000F75  00                 	db	low (_do_I2C_RCEN shr (0+16))
   189  000F76  2C                 	db	low _do_I2C_TX_EMPTY
   190  000F77  0B                 	db	high _do_I2C_TX_EMPTY
   191  000F78  00                 	db	low (_do_I2C_TX_EMPTY shr (0+16))
   192  000F79  3A                 	db	low _do_I2C_SEND_RESTART_READ
   193  000F7A  13                 	db	high _do_I2C_SEND_RESTART_READ
   194  000F7B  00                 	db	low (_do_I2C_SEND_RESTART_READ shr (0+16))
   195  000F7C  2C                 	db	low _do_I2C_SEND_RESTART_WRITE
   196  000F7D  13                 	db	high _do_I2C_SEND_RESTART_WRITE
   197  000F7E  00                 	db	low (_do_I2C_SEND_RESTART_WRITE shr (0+16))
   198  000F7F  1E                 	db	low _do_I2C_SEND_RESTART
   199  000F80  13                 	db	high _do_I2C_SEND_RESTART
   200  000F81  00                 	db	low (_do_I2C_SEND_RESTART shr (0+16))
   201  000F82  10                 	db	low _do_I2C_SEND_STOP
   202  000F83  13                 	db	high _do_I2C_SEND_STOP
   203  000F84  00                 	db	low (_do_I2C_SEND_STOP shr (0+16))
   204  000F85  02                 	db	low _do_I2C_DO_ACK
   205  000F86  13                 	db	high _do_I2C_DO_ACK
   206  000F87  00                 	db	low (_do_I2C_DO_ACK shr (0+16))
   207  000F88  F4                 	db	low _do_I2C_DO_NACK_STOP
   208  000F89  12                 	db	high _do_I2C_DO_NACK_STOP
   209  000F8A  00                 	db	low (_do_I2C_DO_NACK_STOP shr (0+16))
   210  000F8B  E6                 	db	low _do_I2C_DO_NACK_RESTART
   211  000F8C  12                 	db	high _do_I2C_DO_NACK_RESTART
   212  000F8D  00                 	db	low (_do_I2C_DO_NACK_RESTART shr (0+16))
   213  000F8E  FA                 	db	low _do_I2C_RESET
   214  000F8F  11                 	db	high _do_I2C_RESET
   215  000F90  00                 	db	low (_do_I2C_RESET shr (0+16))
   216  000F91  30                 	db	low _do_I2C_DO_ADDRESS_NACK
   217  000F92  0C                 	db	high _do_I2C_DO_ADDRESS_NACK
   218  000F93  00                 	db	low (_do_I2C_DO_ADDRESS_NACK shr (0+16))
   219  0000                     _TX2REG	set	3738
   220  0000                     _RC2REG	set	3737
   221  0000                     _RC2STAbits	set	3741
   222  0000                     _TX2STAbits	set	3742
   223  0000                     _SP2BRGH	set	3740
   224  0000                     _SP2BRGL	set	3739
   225  0000                     _TX2STA	set	3742
   226  0000                     _RC2STA	set	3741
   227  0000                     _BAUD2CON	set	3743
   228  0000                     _SSP1DATPPSbits	set	3768
   229  0000                     _RX2PPSbits	set	3725
   230  0000                     _SSP1CLKPPSbits	set	3767
   231  0000                     _RC6PPS	set	3837
   232  0000                     _RX1PPSbits	set	3765
   233  0000                     _RD0PPS	set	3839
   234  0000                     _RC4PPS	set	3835
   235  0000                     _RC3PPS	set	3834
   236  0000                     _PIR3bits	set	3789
   237  0000                     _PIE3bits	set	3781
   238  0000                     _PMD5	set	3814
   239  0000                     _PMD4	set	3813
   240  0000                     _PMD3	set	3812
   241  0000                     _PMD2	set	3811
   242  0000                     _PMD1	set	3810
   243  0000                     _PMD0	set	3809
   244  0000                     _OSCTUNE	set	3805
   245  0000                     _OSCFRQ	set	3806
   246  0000                     _OSCEN	set	3804
   247  0000                     _OSCCON3	set	3802
   248  0000                     _OSCCON1	set	3800
   249  0000                     _RD7PPS	set	3846
   250  0000                     _ODCOND	set	3876
   251  0000                     _ODCONC	set	3871
   252  0000                     _ODCONB	set	3863
   253  0000                     _ODCONA	set	3855
   254  0000                     _ODCONE	set	3884
   255  0000                     _WPUC	set	3872
   256  0000                     _WPUA	set	3856
   257  0000                     _WPUB	set	3864
   258  0000                     _WPUE	set	3885
   259  0000                     _WPUD	set	3877
   260  0000                     _ANSELA	set	3857
   261  0000                     _ANSELE	set	3886
   262  0000                     _ANSELD	set	3878
   263  0000                     _ANSELB	set	3865
   264  0000                     _ANSELC	set	3873
   265  0000                     _LATAbits	set	3971
   266  0000                     _TX1REG	set	3994
   267  0000                     _RC1REG	set	3993
   268  0000                     _RC1STAbits	set	3997
   269  0000                     _TX1STAbits	set	3998
   270  0000                     _SP1BRGH	set	3996
   271  0000                     _SP1BRGL	set	3995
   272  0000                     _TX1STA	set	3998
   273  0000                     _RC1STA	set	3997
   274  0000                     _BAUD1CON	set	3999
   275  0000                     _INTCONbits	set	4082
   276  0000                     _TRISD	set	3979
   277  0000                     _TRISC	set	3978
   278  0000                     _TRISB	set	3977
   279  0000                     _TRISA	set	3976
   280  0000                     _TRISE	set	3980
   281  0000                     _LATC	set	3973
   282  0000                     _LATB	set	3972
   283  0000                     _LATA	set	3971
   284  0000                     _LATD	set	3974
   285  0000                     _LATE	set	3975
   286  0000                     _SSP1STATbits	set	3989
   287  0000                     _SSP1MSK	set	3988
   288  0000                     _SSP1BUF	set	3986
   289  0000                     _SSP1CON2bits	set	3991
   290  0000                     _SSP1ADD	set	3987
   291  0000                     _SSP1CON2	set	3991
   292  0000                     _SSP1CON1	set	3990
   293  0000                     _SSP1STAT	set	3989
   294  0000                     _SSP1CON1bits	set	3990
   295                           
   296                           ; #config settings
   297  0000                     
   298                           	psect	cinit
   299  000DE6                     __pcinit:
   300                           	opt stack 0
   301  000DE6                     start_initialization:
   302                           	opt stack 0
   303  000DE6                     __initialization:
   304                           	opt stack 0
   305                           
   306                           ; Initialize objects allocated to BANK0 (48 bytes)
   307                           ; load TBLPTR registers with __pidataBANK0
   308  000DE6  0E64               	movlw	low __pidataBANK0
   309  000DE8  6EF6               	movwf	tblptrl,c
   310  000DEA  0E0F               	movlw	high __pidataBANK0
   311  000DEC  6EF7               	movwf	tblptrh,c
   312  000DEE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   313  000DF0  6EF8               	movwf	tblptru,c
   314  000DF2  EE00  F0C7         	lfsr	0,__pdataBANK0
   315  000DF6  EE10 F030          	lfsr	1,48
   316  000DFA                     copy_data0:
   317  000DFA  0009               	tblrd		*+
   318  000DFC  CFF5 FFEE          	movff	tablat,postinc0
   319  000E00  50E5               	movf	postdec1,w,c
   320  000E02  50E1               	movf	fsr1l,w,c
   321  000E04  E1FA               	bnz	copy_data0
   322                           
   323                           ; Clear objects allocated to BANK0 (52 bytes)
   324  000E06  EE00  F060         	lfsr	0,__pbssBANK0
   325  000E0A  0E34               	movlw	52
   326  000E0C                     clear_0:
   327  000E0C  6AEE               	clrf	postinc0,c
   328  000E0E  06E8               	decf	wreg,f,c
   329  000E10  E1FD               	bnz	clear_0
   330                           
   331                           ; Clear objects allocated to COMRAM (6 bytes)
   332  000E12  6A46               	clrf	(__pbssCOMRAM+5)& (0+255),c
   333  000E14  6A45               	clrf	(__pbssCOMRAM+4)& (0+255),c
   334  000E16  6A44               	clrf	(__pbssCOMRAM+3)& (0+255),c
   335  000E18  6A43               	clrf	(__pbssCOMRAM+2)& (0+255),c
   336  000E1A  6A42               	clrf	(__pbssCOMRAM+1)& (0+255),c
   337  000E1C  6A41               	clrf	__pbssCOMRAM& (0+255),c
   338  000E1E                     end_of_initialization:
   339                           	opt stack 0
   340  000E1E                     __end_of__initialization:
   341                           	opt stack 0
   342  000E1E  9047               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   343  000E20  9247               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   344  000E22  0100               	movlb	0
   345  000E24  EF70  F000         	goto	_main	;jump to C main() function
   346                           tblptru	equ	0xFF8
   347                           tblptrh	equ	0xFF7
   348                           tblptrl	equ	0xFF6
   349                           tablat	equ	0xFF5
   350                           postinc0	equ	0xFEE
   351                           wreg	equ	0xFE8
   352                           postdec1	equ	0xFE5
   353                           fsr1l	equ	0xFE1
   354                           
   355                           	psect	bssCOMRAM
   356  000041                     __pbssCOMRAM:
   357                           	opt stack 0
   358  000041                     _i2c1_driver_i2cISR:
   359                           	opt stack 0
   360  000041                     	ds	3
   361  000044                     _i2c1_driver_busCollisionISR:
   362                           	opt stack 0
   363  000044                     	ds	3
   364                           tblptru	equ	0xFF8
   365                           tblptrh	equ	0xFF7
   366                           tblptrl	equ	0xFF6
   367                           tablat	equ	0xFF5
   368                           postinc0	equ	0xFEE
   369                           wreg	equ	0xFE8
   370                           postdec1	equ	0xFE5
   371                           fsr1l	equ	0xFE1
   372                           
   373                           	psect	bssBANK0
   374  000060                     __pbssBANK0:
   375                           	opt stack 0
   376  000060                     _i2c_status:
   377                           	opt stack 0
   378  000060                     	ds	42
   379  00008A                     main@F12066:
   380                           	opt stack 0
   381  00008A                     	ds	8
   382  000092                     main@F12062:
   383                           	opt stack 0
   384  000092                     	ds	2
   385                           tblptru	equ	0xFF8
   386                           tblptrh	equ	0xFF7
   387                           tblptrl	equ	0xFF6
   388                           tablat	equ	0xFF5
   389                           postinc0	equ	0xFEE
   390                           wreg	equ	0xFE8
   391                           postdec1	equ	0xFE5
   392                           fsr1l	equ	0xFE1
   393                           
   394                           	psect	dataBANK0
   395  0000C7                     __pdataBANK0:
   396                           	opt stack 0
   397  0000C7                     _fsmStateTable:
   398                           	opt stack 0
   399  0000C7                     	ds	48
   400                           tblptru	equ	0xFF8
   401                           tblptrh	equ	0xFF7
   402                           tblptrl	equ	0xFF6
   403                           tablat	equ	0xFF5
   404                           postinc0	equ	0xFEE
   405                           wreg	equ	0xFE8
   406                           postdec1	equ	0xFE5
   407                           fsr1l	equ	0xFE1
   408                           
   409                           	psect	cstackBANK0
   410  000094                     __pcstackBANK0:
   411                           	opt stack 0
   412  000094                     updateExpanders@spaces:
   413                           	opt stack 0
   414                           
   415                           ; 4 bytes @ 0x0
   416  000094                     	ds	4
   417  000098                     updateExpanders@lL:
   418                           	opt stack 0
   419                           
   420                           ; 1 bytes @ 0x4
   421  000098                     	ds	1
   422  000099                     updateExpanders@lR:
   423                           	opt stack 0
   424                           
   425                           ; 1 bytes @ 0x5
   426  000099                     	ds	1
   427  00009A                     updateExpanders@mL:
   428                           	opt stack 0
   429                           
   430                           ; 1 bytes @ 0x6
   431  00009A                     	ds	1
   432  00009B                     updateExpanders@mR:
   433                           	opt stack 0
   434                           
   435                           ; 1 bytes @ 0x7
   436  00009B                     	ds	1
   437  00009C                     updateExpanders@rL:
   438                           	opt stack 0
   439                           
   440                           ; 1 bytes @ 0x8
   441  00009C                     	ds	1
   442  00009D                     updateExpanders@rR:
   443                           	opt stack 0
   444                           
   445                           ; 1 bytes @ 0x9
   446  00009D                     	ds	1
   447  00009E                     getSpaces@spaceLast:
   448                           	opt stack 0
   449                           
   450                           ; 1 bytes @ 0xA
   451  00009E                     	ds	1
   452  00009F                     getSpaces@i:
   453                           	opt stack 0
   454                           
   455                           ; 2 bytes @ 0xB
   456  00009F                     	ds	2
   457  0000A1                     getSpaces@space:
   458                           	opt stack 0
   459                           
   460                           ; 1 bytes @ 0xD
   461  0000A1                     	ds	1
   462  0000A2                     ??_main:
   463                           
   464                           ; 1 bytes @ 0xE
   465  0000A2                     	ds	15
   466  0000B1                     main@gamerScore:
   467                           	opt stack 0
   468                           
   469                           ; 2 bytes @ 0x1D
   470  0000B1                     	ds	2
   471  0000B3                     main@receivedScore:
   472                           	opt stack 0
   473                           
   474                           ; 7 bytes @ 0x1F
   475  0000B3                     	ds	7
   476  0000BA                     main@photonAddress:
   477                           	opt stack 0
   478                           
   479                           ; 1 bytes @ 0x26
   480  0000BA                     	ds	1
   481  0000BB                     main@i:
   482                           	opt stack 0
   483                           
   484                           ; 2 bytes @ 0x27
   485  0000BB                     	ds	2
   486  0000BD                     main@spot:
   487                           	opt stack 0
   488                           
   489                           ; 8 bytes @ 0x29
   490  0000BD                     	ds	8
   491  0000C5                     main@player:
   492                           	opt stack 0
   493                           
   494                           ; 2 bytes @ 0x31
   495  0000C5                     	ds	2
   496                           tblptru	equ	0xFF8
   497                           tblptrh	equ	0xFF7
   498                           tblptrl	equ	0xFF6
   499                           tablat	equ	0xFF5
   500                           postinc0	equ	0xFEE
   501                           wreg	equ	0xFE8
   502                           postdec1	equ	0xFE5
   503                           fsr1l	equ	0xFE1
   504                           
   505                           	psect	cstackCOMRAM
   506  000001                     __pcstackCOMRAM:
   507                           	opt stack 0
   508  000001                     ??i2_i2c1_driver_isNACK:
   509  000001                     i2i2c1_driver_TXData@d:
   510                           	opt stack 0
   511  000001                     i2i2c_setBuffer@buffer:
   512                           	opt stack 0
   513  000001                     i2setCallBack@cb:
   514                           	opt stack 0
   515                           
   516                           ; 3 bytes @ 0x0
   517  000001                     	ds	1
   518  000002                     i2_do_I2C_TX$1050:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x1
   522  000002                     	ds	1
   523  000003                     i2i2c_setBuffer@bufferSize:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x2
   527  000003                     	ds	1
   528  000004                     ??_INTERRUPT_InterruptManager:
   529  000004                     i2setCallBack@p:
   530                           	opt stack 0
   531                           
   532                           ; 2 bytes @ 0x3
   533  000004                     	ds	1
   534  000005                     
   535                           ; 1 bytes @ 0x4
   536  000005                     	ds	1
   537  000006                     i2setCallBack@idx:
   538                           	opt stack 0
   539                           
   540                           ; 1 bytes @ 0x5
   541  000006                     	ds	1
   542  000007                     i2i2c_setDataCompleteCallback@cb:
   543                           	opt stack 0
   544                           
   545                           ; 3 bytes @ 0x6
   546  000007                     	ds	3
   547  00000A                     i2i2c_setDataCompleteCallback@p:
   548                           	opt stack 0
   549                           
   550                           ; 2 bytes @ 0x9
   551  00000A                     	ds	2
   552  00000C                     i2returnStop@p:
   553                           	opt stack 0
   554  00000C                     i2wr1RegCompleteHandler@p:
   555                           	opt stack 0
   556  00000C                     i2rd1RegCompleteHandler@p:
   557                           	opt stack 0
   558  00000C                     i2rd2RegCompleteHandler@p:
   559                           	opt stack 0
   560  00000C                     i2wr2RegCompleteHandler@p:
   561                           	opt stack 0
   562  00000C                     i2rdBlkRegCompleteHandler@p:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0xB
   566  00000C                     	ds	2
   567  00000E                     
   568                           ; 1 bytes @ 0xD
   569  00000E                     	ds	8
   570  000016                     ??_mssp1_IRQisEnabled:
   571  000016                     ??_i2c1_driver_isNACK:
   572  000016                     ?_abs:
   573                           	opt stack 0
   574  000016                     ?___aldiv:
   575                           	opt stack 0
   576  000016                     i2c1_driver_TXData@d:
   577                           	opt stack 0
   578  000016                     i2c_close@ret:
   579                           	opt stack 0
   580  000016                     EUSART2_Write@txData:
   581                           	opt stack 0
   582  000016                     EUSART1_Write@txData:
   583                           	opt stack 0
   584  000016                     mssp1_waitForEvent@timeout:
   585                           	opt stack 0
   586  000016                     i2c_setBuffer@buffer:
   587                           	opt stack 0
   588  000016                     abs@a:
   589                           	opt stack 0
   590  000016                     i2c1_driver_setBusCollisionISR@f:
   591                           	opt stack 0
   592  000016                     i2c1_driver_setI2cISR@f:
   593                           	opt stack 0
   594  000016                     setCallBack@cb:
   595                           	opt stack 0
   596  000016                     ___aldiv@dividend:
   597                           	opt stack 0
   598                           
   599                           ; 4 bytes @ 0x15
   600  000016                     	ds	1
   601  000017                     _do_I2C_TX$1050:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x16
   605  000017                     	ds	1
   606  000018                     ??_abs:
   607  000018                     i2c_setBuffer@bufferSize:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0x17
   611  000018                     	ds	1
   612  000019                     i2c_open@address:
   613                           	opt stack 0
   614  000019                     i2c_masterOperation@read:
   615                           	opt stack 0
   616  000019                     setCallBack@p:
   617                           	opt stack 0
   618                           
   619                           ; 2 bytes @ 0x18
   620  000019                     	ds	1
   621  00001A                     i2c_open@ret:
   622                           	opt stack 0
   623  00001A                     i2c_masterOperation@ret:
   624                           	opt stack 0
   625  00001A                     ___aldiv@divisor:
   626                           	opt stack 0
   627                           
   628                           ; 4 bytes @ 0x19
   629  00001A                     	ds	1
   630  00001B                     setCallBack@idx:
   631                           	opt stack 0
   632  00001B                     i2c_readNBytes@data:
   633                           	opt stack 0
   634                           
   635                           ; 2 bytes @ 0x1A
   636  00001B                     	ds	1
   637  00001C                     i2c_setDataCompleteCallback@cb:
   638                           	opt stack 0
   639  00001C                     i2c_setAddressNACKCallback@cb:
   640                           	opt stack 0
   641                           
   642                           ; 3 bytes @ 0x1B
   643  00001C                     	ds	1
   644  00001D                     i2c_readNBytes@len:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0x1C
   648  00001D                     	ds	1
   649  00001E                     ___aldiv@counter:
   650                           	opt stack 0
   651                           
   652                           ; 1 bytes @ 0x1D
   653  00001E                     	ds	1
   654  00001F                     i2c_readNBytes@address:
   655                           	opt stack 0
   656  00001F                     ___aldiv@sign:
   657                           	opt stack 0
   658  00001F                     i2c_setDataCompleteCallback@p:
   659                           	opt stack 0
   660  00001F                     i2c_setAddressNACKCallback@p:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0x1E
   664  00001F                     	ds	1
   665  000020                     ___aldiv@quotient:
   666                           	opt stack 0
   667                           
   668                           ; 4 bytes @ 0x1F
   669  000020                     	ds	1
   670  000021                     returnStop@p:
   671                           	opt stack 0
   672  000021                     wr1RegCompleteHandler@p:
   673                           	opt stack 0
   674  000021                     i2c_writeNBytes@data:
   675                           	opt stack 0
   676  000021                     rd1RegCompleteHandler@p:
   677                           	opt stack 0
   678  000021                     rd2RegCompleteHandler@p:
   679                           	opt stack 0
   680  000021                     wr2RegCompleteHandler@p:
   681                           	opt stack 0
   682  000021                     rdBlkRegCompleteHandler@p:
   683                           	opt stack 0
   684                           
   685                           ; 2 bytes @ 0x20
   686  000021                     	ds	2
   687  000023                     i2c_writeNBytes@len:
   688                           	opt stack 0
   689                           
   690                           ; 2 bytes @ 0x22
   691  000023                     	ds	2
   692  000025                     i2c_writeNBytes@address:
   693                           	opt stack 0
   694                           
   695                           ; 1 bytes @ 0x24
   696  000025                     	ds	1
   697  000026                     readIoExpander@bank:
   698                           	opt stack 0
   699                           
   700                           ; 1 bytes @ 0x25
   701  000026                     	ds	1
   702  000027                     readIoExpander@index:
   703                           	opt stack 0
   704                           
   705                           ; 1 bytes @ 0x26
   706  000027                     	ds	1
   707  000028                     ??_readIoExpander:
   708                           
   709                           ; 1 bytes @ 0x27
   710  000028                     	ds	2
   711  00002A                     readIoExpander@spots:
   712                           	opt stack 0
   713                           
   714                           ; 8 bytes @ 0x29
   715  00002A                     	ds	8
   716  000032                     readIoExpander@data:
   717                           	opt stack 0
   718                           
   719                           ; 2 bytes @ 0x31
   720  000032                     	ds	2
   721  000034                     readIoExpander@spaces:
   722                           	opt stack 0
   723                           
   724                           ; 1 bytes @ 0x33
   725  000034                     	ds	1
   726  000035                     readIoExpander@addr:
   727                           	opt stack 0
   728                           
   729                           ; 1 bytes @ 0x34
   730  000035                     	ds	1
   731  000036                     readIoExpander@rec:
   732                           	opt stack 0
   733                           
   734                           ; 1 bytes @ 0x35
   735  000036                     	ds	1
   736  000037                     readIoExpander@i:
   737                           	opt stack 0
   738                           
   739                           ; 2 bytes @ 0x36
   740  000037                     	ds	2
   741  000039                     ?_updateExpanders:
   742                           	opt stack 0
   743                           
   744                           ; 4 bytes @ 0x38
   745  000039                     	ds	4
   746  00003D                     ??_updateExpanders:
   747                           
   748                           ; 1 bytes @ 0x3C
   749  00003D                     	ds	2
   750  00003F                     ??_getSpaces:
   751                           
   752                           ; 1 bytes @ 0x3E
   753  00003F                     	ds	2
   754                           tblptru	equ	0xFF8
   755                           tblptrh	equ	0xFF7
   756                           tblptrl	equ	0xFF6
   757                           tablat	equ	0xFF5
   758                           postinc0	equ	0xFEE
   759                           wreg	equ	0xFE8
   760                           postdec1	equ	0xFE5
   761                           fsr1l	equ	0xFE1
   762                           
   763 ;;
   764 ;;Main: autosize = 0, tempsize = 15, incstack = 0, save=0
   765 ;;
   766 ;; *************** function _main *****************
   767 ;; Defined at:
   768 ;;		line 141 in file "main.c"
   769 ;; Parameters:    Size  Location     Type
   770 ;;		None
   771 ;; Auto vars:     Size  Location     Type
   772 ;;  i               2   39[BANK0 ] int 
   773 ;;  spot            8   41[BANK0 ] long [2]
   774 ;;  receivedScor    7   31[BANK0 ] unsigned char [7]
   775 ;;  player          2   49[BANK0 ] int 
   776 ;;  gamerScore      2   29[BANK0 ] unsigned char [2]
   777 ;;  plainScore      2    0        int 
   778 ;;  photonAddres    1   38[BANK0 ] unsigned char 
   779 ;; Return value:  Size  Location     Type
   780 ;;                  1    wreg      void 
   781 ;; Registers used:
   782 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
   783 ;; Tracked objects:
   784 ;;		On entry : 0/0
   785 ;;		On exit  : 0/0
   786 ;;		Unchanged: 0/0
   787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   789 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   790 ;;      Temps:          0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   791 ;;      Totals:         0      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   792 ;;Total ram usage:       37 bytes
   793 ;; Hardware stack levels required when called:   18
   794 ;; This function calls:
   795 ;;		_EUSART1_Initialize
   796 ;;		_EUSART1_Write
   797 ;;		_EUSART2_Initialize
   798 ;;		_EUSART2_Read
   799 ;;		_EUSART2_Write
   800 ;;		_EUSART2_is_rx_ready
   801 ;;		_SYSTEM_Initialize
   802 ;;		___aldiv
   803 ;;		_abs
   804 ;;		_getSpaces
   805 ;;		_i2c_writeNBytes
   806 ;; This function is called by:
   807 ;;		Startup code after reset
   808 ;; This function uses a non-reentrant model
   809 ;;
   810                           
   811                           	psect	text0
   812  0000E0                     __ptext0:
   813                           	opt stack 0
   814  0000E0                     _main:
   815                           	opt stack 13
   816                           
   817                           ;main.c: 144: SYSTEM_Initialize();
   818                           
   819                           ;incstack = 0
   820  0000E0  EC9F  F008         	call	_SYSTEM_Initialize	;wreg free
   821                           
   822                           ;main.c: 151: (INTCONbits.GIE = 1);
   823  0000E4  8EF2               	bsf	intcon,7,c	;volatile
   824                           
   825                           ;main.c: 157: (INTCONbits.PEIE = 1);
   826  0000E6  8CF2               	bsf	intcon,6,c	;volatile
   827                           
   828                           ;main.c: 173: uint8_t gamerScore[] = {0,0};
   829  0000E8  C092  F0B1         	movff	main@F12062,main@gamerScore
   830  0000EC  C093  F0B2         	movff	main@F12062+1,main@gamerScore+1
   831                           
   832                           ;main.c: 174: uint8_t photonAddress = 2;
   833  0000F0  0E02               	movlw	2
   834  0000F2  0100               	movlb	0	; () banked
   835  0000F4  6FBA               	movwf	main@photonAddress& (0+255),b
   836                           
   837                           ; BSR set to: 0
   838                           ;main.c: 198: EUSART1_Initialize();
   839  0000F6  EC13  F009         	call	_EUSART1_Initialize	;wreg free
   840                           
   841                           ;main.c: 199: EUSART2_Initialize();
   842  0000FA  ECC5  F008         	call	_EUSART2_Initialize	;wreg free
   843                           
   844                           ;main.c: 203: int player = 0;
   845  0000FE  0E00               	movlw	0
   846  000100  0100               	movlb	0	; () banked
   847  000102  6FC6               	movwf	(main@player+1)& (0+255),b
   848  000104  0E00               	movlw	0
   849  000106  6FC5               	movwf	main@player& (0+255),b
   850                           
   851                           ; BSR set to: 0
   852                           ;main.c: 204: long spot[2] = {0,0};
   853  000108  EE20  F08A         	lfsr	2,main@F12066
   854  00010C  EE10  F0BD         	lfsr	1,main@spot
   855  000110  0E07               	movlw	7
   856  000112                     u2641:
   857  000112  CFDB FFE3          	movff	plusw2,plusw1
   858  000116  06E8               	decf	wreg,f,c
   859  000118  E2FC               	bc	u2641
   860  00011A                     
   861                           ; BSR set to: 0
   862                           ;main.c: 209: {
   863                           ;main.c: 227: spot[player] = getSpaces()-26- spot[abs(player-1)];
   864                           
   865                           ; BSR set to: 0
   866  00011A  0EFF               	movlw	255
   867  00011C  25C5               	addwf	main@player& (0+255),w,b
   868  00011E  6E16               	movwf	abs@a,c
   869  000120  0EFF               	movlw	255
   870  000122  21C6               	addwfc	(main@player+1)& (0+255),w,b
   871  000124  6E17               	movwf	abs@a+1,c
   872  000126  EC2A  F008         	call	_abs	;wreg free
   873  00012A  90D8               	bcf	status,0,c
   874  00012C  3616               	rlcf	?_abs,f,c
   875  00012E  3617               	rlcf	?_abs+1,f,c
   876  000130  90D8               	bcf	status,0,c
   877  000132  3616               	rlcf	?_abs,f,c
   878  000134  3617               	rlcf	?_abs+1,f,c
   879  000136  0EBD               	movlw	low main@spot
   880  000138  2416               	addwf	?_abs,w,c
   881  00013A  6ED9               	movwf	fsr2l,c
   882  00013C  0E00               	movlw	high main@spot
   883  00013E  2017               	addwfc	?_abs+1,w,c
   884  000140  6EDA               	movwf	fsr2h,c
   885  000142  CFDE F0A2          	movff	postinc2,??_main
   886  000146  CFDE F0A3          	movff	postinc2,??_main+1
   887  00014A  CFDE F0A4          	movff	postinc2,??_main+2
   888  00014E  CFDE F0A5          	movff	postinc2,??_main+3
   889  000152  0100               	movlb	0	; () banked
   890  000154  1FA2               	comf	??_main& (0+255),f,b
   891  000156  1FA3               	comf	(??_main+1)& (0+255),f,b
   892  000158  1FA4               	comf	(??_main+2)& (0+255),f,b
   893  00015A  1FA5               	comf	(??_main+3)& (0+255),f,b
   894  00015C  2BA2               	incf	??_main& (0+255),f,b
   895  00015E  0E00               	movlw	0
   896  000160  23A3               	addwfc	(??_main+1)& (0+255),f,b
   897  000162  23A4               	addwfc	(??_main+2)& (0+255),f,b
   898  000164  23A5               	addwfc	(??_main+3)& (0+255),f,b
   899  000166  ECC8  F003         	call	_getSpaces	;wreg free
   900  00016A  0100               	movlb	0	; () banked
   901  00016C  6FA6               	movwf	(??_main+4)& (0+255),b
   902  00016E  0EE6               	movlw	230
   903  000170  25A6               	addwf	(??_main+4)& (0+255),w,b
   904  000172  6FA7               	movwf	(??_main+5)& (0+255),b
   905  000174  6BA8               	clrf	(??_main+6)& (0+255),b
   906  000176  0EFF               	movlw	255
   907  000178  23A8               	addwfc	(??_main+6)& (0+255),f,b
   908  00017A  6BA9               	clrf	(??_main+7)& (0+255),b
   909  00017C  BFA8               	btfsc	(??_main+6)& (0+255),7,b
   910  00017E  07A9               	decf	(??_main+7)& (0+255),f,b
   911  000180  51A9               	movf	(??_main+7)& (0+255),w,b
   912  000182  6FAA               	movwf	(??_main+8)& (0+255),b
   913  000184  51A2               	movf	??_main& (0+255),w,b
   914  000186  25A7               	addwf	(??_main+5)& (0+255),w,b
   915  000188  6FAB               	movwf	(??_main+9)& (0+255),b
   916  00018A  51A3               	movf	(??_main+1)& (0+255),w,b
   917  00018C  21A8               	addwfc	(??_main+6)& (0+255),w,b
   918  00018E  6FAC               	movwf	(??_main+10)& (0+255),b
   919  000190  51A4               	movf	(??_main+2)& (0+255),w,b
   920  000192  21A9               	addwfc	(??_main+7)& (0+255),w,b
   921  000194  6FAD               	movwf	(??_main+11)& (0+255),b
   922  000196  51A5               	movf	(??_main+3)& (0+255),w,b
   923  000198  21AA               	addwfc	(??_main+8)& (0+255),w,b
   924  00019A  6FAE               	movwf	(??_main+12)& (0+255),b
   925  00019C  0EBD               	movlw	low main@spot
   926  00019E  6FAF               	movwf	(??_main+13)& (0+255),b
   927  0001A0  0E00               	movlw	high main@spot
   928  0001A2  6FB0               	movwf	(??_main+14)& (0+255),b
   929  0001A4  90D8               	bcf	status,0,c
   930  0001A6  35C5               	rlcf	main@player& (0+255),w,b
   931  0001A8  6ED9               	movwf	fsr2l,c
   932  0001AA  35C6               	rlcf	(main@player+1)& (0+255),w,b
   933  0001AC  6EDA               	movwf	fsr2h,c
   934  0001AE  90D8               	bcf	status,0,c
   935  0001B0  36D9               	rlcf	fsr2l,f,c
   936  0001B2  36DA               	rlcf	fsr2h,f,c
   937  0001B4  51AF               	movf	(??_main+13)& (0+255),w,b
   938  0001B6  26D9               	addwf	fsr2l,f,c
   939  0001B8  51B0               	movf	(??_main+14)& (0+255),w,b
   940  0001BA  22DA               	addwfc	fsr2h,f,c
   941  0001BC  C0AB  FFDE         	movff	??_main+9,postinc2
   942  0001C0  C0AC  FFDE         	movff	??_main+10,postinc2
   943  0001C4  C0AD  FFDE         	movff	??_main+11,postinc2
   944  0001C8  C0AE  FFDE         	movff	??_main+12,postinc2
   945                           
   946                           ; BSR set to: 0
   947                           ;main.c: 228: if(spot[player] > 47)
   948  0001CC  0EBD               	movlw	low main@spot
   949  0001CE  6FA2               	movwf	??_main& (0+255),b
   950  0001D0  0E00               	movlw	high main@spot
   951  0001D2  6FA3               	movwf	(??_main+1)& (0+255),b
   952  0001D4  90D8               	bcf	status,0,c
   953  0001D6  35C5               	rlcf	main@player& (0+255),w,b
   954  0001D8  6ED9               	movwf	fsr2l,c
   955  0001DA  35C6               	rlcf	(main@player+1)& (0+255),w,b
   956  0001DC  6EDA               	movwf	fsr2h,c
   957  0001DE  90D8               	bcf	status,0,c
   958  0001E0  36D9               	rlcf	fsr2l,f,c
   959  0001E2  36DA               	rlcf	fsr2h,f,c
   960  0001E4  51A2               	movf	??_main& (0+255),w,b
   961  0001E6  26D9               	addwf	fsr2l,f,c
   962  0001E8  51A3               	movf	(??_main+1)& (0+255),w,b
   963  0001EA  22DA               	addwfc	fsr2h,f,c
   964  0001EC  0E03               	movlw	3
   965  0001EE  BEDB               	btfsc	plusw2,7,c
   966  0001F0  D048               	goto	l782
   967  0001F2  0E03               	movlw	3
   968  0001F4  50DB               	movf	plusw2,w,c
   969  0001F6  E10A               	bnz	u2650
   970  0001F8  0E02               	movlw	2
   971  0001FA  50DB               	movf	plusw2,w,c
   972  0001FC  E107               	bnz	u2650
   973  0001FE  0E01               	movlw	1
   974  000200  50DB               	movf	plusw2,w,c
   975  000202  E104               	bnz	u2650
   976  000204  0E30               	movlw	48
   977  000206  5CDE               	subwf	postinc2,w,c
   978  000208  A0D8               	btfss	status,0,c
   979  00020A  D03B               	goto	l782
   980  00020C                     u2650:
   981                           
   982                           ; BSR set to: 0
   983                           ;main.c: 229: spot[player] = spot[player]/2;
   984  00020C  0EBD               	movlw	low main@spot
   985  00020E  6FA2               	movwf	??_main& (0+255),b
   986  000210  0E00               	movlw	high main@spot
   987  000212  6FA3               	movwf	(??_main+1)& (0+255),b
   988  000214  90D8               	bcf	status,0,c
   989  000216  35C5               	rlcf	main@player& (0+255),w,b
   990  000218  6ED9               	movwf	fsr2l,c
   991  00021A  35C6               	rlcf	(main@player+1)& (0+255),w,b
   992  00021C  6EDA               	movwf	fsr2h,c
   993  00021E  90D8               	bcf	status,0,c
   994  000220  36D9               	rlcf	fsr2l,f,c
   995  000222  36DA               	rlcf	fsr2h,f,c
   996  000224  51A2               	movf	??_main& (0+255),w,b
   997  000226  26D9               	addwf	fsr2l,f,c
   998  000228  51A3               	movf	(??_main+1)& (0+255),w,b
   999  00022A  22DA               	addwfc	fsr2h,f,c
  1000  00022C  CFDE F016          	movff	postinc2,___aldiv@dividend
  1001  000230  CFDE F017          	movff	postinc2,___aldiv@dividend+1
  1002  000234  CFDE F018          	movff	postinc2,___aldiv@dividend+2
  1003  000238  CFDE F019          	movff	postinc2,___aldiv@dividend+3
  1004  00023C  0E02               	movlw	2
  1005  00023E  6E1A               	movwf	___aldiv@divisor,c
  1006  000240  0E00               	movlw	0
  1007  000242  6E1B               	movwf	___aldiv@divisor+1,c
  1008  000244  0E00               	movlw	0
  1009  000246  6E1C               	movwf	___aldiv@divisor+2,c
  1010  000248  0E00               	movlw	0
  1011  00024A  6E1D               	movwf	___aldiv@divisor+3,c
  1012  00024C  ECB8  F002         	call	___aldiv	;wreg free
  1013  000250  0EBD               	movlw	low main@spot
  1014  000252  0100               	movlb	0	; () banked
  1015  000254  6FA4               	movwf	(??_main+2)& (0+255),b
  1016  000256  0E00               	movlw	high main@spot
  1017  000258  6FA5               	movwf	(??_main+3)& (0+255),b
  1018  00025A  90D8               	bcf	status,0,c
  1019  00025C  35C5               	rlcf	main@player& (0+255),w,b
  1020  00025E  6ED9               	movwf	fsr2l,c
  1021  000260  35C6               	rlcf	(main@player+1)& (0+255),w,b
  1022  000262  6EDA               	movwf	fsr2h,c
  1023  000264  90D8               	bcf	status,0,c
  1024  000266  36D9               	rlcf	fsr2l,f,c
  1025  000268  36DA               	rlcf	fsr2h,f,c
  1026  00026A  51A4               	movf	(??_main+2)& (0+255),w,b
  1027  00026C  26D9               	addwf	fsr2l,f,c
  1028  00026E  51A5               	movf	(??_main+3)& (0+255),w,b
  1029  000270  22DA               	addwfc	fsr2h,f,c
  1030  000272  C016  FFDE         	movff	?___aldiv,postinc2
  1031  000276  C017  FFDE         	movff	?___aldiv+1,postinc2
  1032  00027A  C018  FFDE         	movff	?___aldiv+2,postinc2
  1033  00027E  C019  FFDE         	movff	?___aldiv+3,postinc2
  1034  000282                     l782:
  1035                           
  1036                           ; BSR set to: 0
  1037                           ;main.c: 233: if(player == 0)
  1038                           
  1039                           ; BSR set to: 0
  1040  000282  51C5               	movf	main@player& (0+255),w,b
  1041  000284  11C6               	iorwf	(main@player+1)& (0+255),w,b
  1042  000286  A4D8               	btfss	status,2,c
  1043  000288  D014               	goto	l783
  1044                           
  1045                           ; BSR set to: 0
  1046                           ;main.c: 234: EUSART1_Write(spot[player]);
  1047  00028A  0EBD               	movlw	low main@spot
  1048  00028C  6FA2               	movwf	??_main& (0+255),b
  1049  00028E  0E00               	movlw	high main@spot
  1050  000290  6FA3               	movwf	(??_main+1)& (0+255),b
  1051  000292  90D8               	bcf	status,0,c
  1052  000294  35C5               	rlcf	main@player& (0+255),w,b
  1053  000296  6ED9               	movwf	fsr2l,c
  1054  000298  35C6               	rlcf	(main@player+1)& (0+255),w,b
  1055  00029A  6EDA               	movwf	fsr2h,c
  1056  00029C  90D8               	bcf	status,0,c
  1057  00029E  36D9               	rlcf	fsr2l,f,c
  1058  0002A0  36DA               	rlcf	fsr2h,f,c
  1059  0002A2  51A2               	movf	??_main& (0+255),w,b
  1060  0002A4  26D9               	addwf	fsr2l,f,c
  1061  0002A6  51A3               	movf	(??_main+1)& (0+255),w,b
  1062  0002A8  22DA               	addwfc	fsr2h,f,c
  1063  0002AA  50DF               	movf	indf2,w,c
  1064  0002AC  ECB2  F009         	call	_EUSART1_Write
  1065  0002B0  D014               	goto	l784
  1066  0002B2                     l783:
  1067                           
  1068                           ;main.c: 235: else
  1069                           ;main.c: 236: EUSART2_Write(spot[player]);
  1070  0002B2  0EBD               	movlw	low main@spot
  1071  0002B4  0100               	movlb	0	; () banked
  1072  0002B6  6FA2               	movwf	??_main& (0+255),b
  1073  0002B8  0E00               	movlw	high main@spot
  1074  0002BA  6FA3               	movwf	(??_main+1)& (0+255),b
  1075  0002BC  90D8               	bcf	status,0,c
  1076  0002BE  35C5               	rlcf	main@player& (0+255),w,b
  1077  0002C0  6ED9               	movwf	fsr2l,c
  1078  0002C2  35C6               	rlcf	(main@player+1)& (0+255),w,b
  1079  0002C4  6EDA               	movwf	fsr2h,c
  1080  0002C6  90D8               	bcf	status,0,c
  1081  0002C8  36D9               	rlcf	fsr2l,f,c
  1082  0002CA  36DA               	rlcf	fsr2h,f,c
  1083  0002CC  51A2               	movf	??_main& (0+255),w,b
  1084  0002CE  26D9               	addwf	fsr2l,f,c
  1085  0002D0  51A3               	movf	(??_main+1)& (0+255),w,b
  1086  0002D2  22DA               	addwfc	fsr2h,f,c
  1087  0002D4  50DF               	movf	indf2,w,c
  1088  0002D6  ECAB  F009         	call	_EUSART2_Write
  1089  0002DA                     l784:
  1090                           
  1091                           ;main.c: 238: if(spot[player] == 40){
  1092  0002DA  0EBD               	movlw	low main@spot
  1093  0002DC  0100               	movlb	0	; () banked
  1094  0002DE  6FA2               	movwf	??_main& (0+255),b
  1095  0002E0  0E00               	movlw	high main@spot
  1096  0002E2  6FA3               	movwf	(??_main+1)& (0+255),b
  1097  0002E4  90D8               	bcf	status,0,c
  1098  0002E6  35C5               	rlcf	main@player& (0+255),w,b
  1099  0002E8  6ED9               	movwf	fsr2l,c
  1100  0002EA  35C6               	rlcf	(main@player+1)& (0+255),w,b
  1101  0002EC  6EDA               	movwf	fsr2h,c
  1102  0002EE  90D8               	bcf	status,0,c
  1103  0002F0  36D9               	rlcf	fsr2l,f,c
  1104  0002F2  36DA               	rlcf	fsr2h,f,c
  1105  0002F4  51A2               	movf	??_main& (0+255),w,b
  1106  0002F6  26D9               	addwf	fsr2l,f,c
  1107  0002F8  51A3               	movf	(??_main+1)& (0+255),w,b
  1108  0002FA  22DA               	addwfc	fsr2h,f,c
  1109  0002FC  0E28               	movlw	40
  1110  0002FE  18DE               	xorwf	postinc2,w,c
  1111  000300  10DE               	iorwf	postinc2,w,c
  1112  000302  10DE               	iorwf	postinc2,w,c
  1113  000304  10DE               	iorwf	postinc2,w,c
  1114  000306  B4D8               	btfsc	status,2,c
  1115  000308  D00A               	goto	l786
  1116  00030A  D021               	goto	l785
  1117  00030C                     
  1118                           ;main.c: 243: _delay((unsigned long)((50)*(2000000/4000.0)));
  1119                           
  1120                           ; BSR set to: 0
  1121  00030C  0E21               	movlw	33
  1122  00030E  0100               	movlb	0	; () banked
  1123  000310  6FA2               	movwf	??_main& (0+255),b
  1124  000312  0E76               	movlw	118
  1125  000314                     u2727:
  1126  000314  2EE8               	decfsz	wreg,f,c
  1127  000316  D7FE               	bra	u2727
  1128  000318  2FA2               	decfsz	??_main& (0+255),f,b
  1129  00031A  D7FC               	bra	u2727
  1130  00031C  F000               	nop	
  1131  00031E                     l786:
  1132  00031E  ECA4  F009         	call	_EUSART2_is_rx_ready	;wreg free
  1133  000322  0900               	iorlw	0
  1134  000324  B4D8               	btfsc	status,2,c
  1135  000326  D7F2               	goto	l787
  1136                           
  1137                           ;main.c: 244: }
  1138                           ;main.c: 245: receivedScore[0] = EUSART2_Read();
  1139  000328  EC44  F009         	call	_EUSART2_Read	;wreg free
  1140  00032C  0100               	movlb	0	; () banked
  1141  00032E  6FB3               	movwf	main@receivedScore& (0+255),b
  1142                           
  1143                           ; BSR set to: 0
  1144                           ;main.c: 246: if(receivedScore[0] == 9)
  1145  000330  0E09               	movlw	9
  1146  000332  19B3               	xorwf	main@receivedScore& (0+255),w,b
  1147  000334  B4D8               	btfsc	status,2,c
  1148                           
  1149                           ; BSR set to: 0
  1150                           
  1151                           ;main.c: 247: do { LATAbits.LATA2 = 0; } while(0);
  1152  000336  9483               	bcf	3971,2,c	;volatile
  1153                           
  1154                           ; BSR set to: 0
  1155                           ;main.c: 248: i2c_writeNBytes(photonAddress, &receivedScore[0], 1);
  1156                           
  1157                           ; BSR set to: 0
  1158                           
  1159                           ; BSR set to: 0
  1160  000338  0EB3               	movlw	low main@receivedScore
  1161  00033A  6E21               	movwf	i2c_writeNBytes@data,c
  1162  00033C  0E00               	movlw	high main@receivedScore
  1163  00033E  6E22               	movwf	i2c_writeNBytes@data+1,c
  1164  000340  0E00               	movlw	0
  1165  000342  6E24               	movwf	i2c_writeNBytes@len+1,c
  1166  000344  0E01               	movlw	1
  1167  000346  6E23               	movwf	i2c_writeNBytes@len,c
  1168  000348  51BA               	movf	main@photonAddress& (0+255),w,b
  1169  00034A  EC3F  F006         	call	_i2c_writeNBytes
  1170  00034E                     l785:
  1171                           
  1172                           ;main.c: 249: }
  1173                           ;main.c: 251: player = abs(player-1);
  1174  00034E  0EFF               	movlw	255
  1175  000350  0100               	movlb	0	; () banked
  1176  000352  25C5               	addwf	main@player& (0+255),w,b
  1177  000354  6E16               	movwf	abs@a,c
  1178  000356  0EFF               	movlw	255
  1179  000358  21C6               	addwfc	(main@player+1)& (0+255),w,b
  1180  00035A  6E17               	movwf	abs@a+1,c
  1181  00035C  EC2A  F008         	call	_abs	;wreg free
  1182  000360  C016  F0C5         	movff	?_abs,main@player
  1183  000364  C017  F0C6         	movff	?_abs+1,main@player+1
  1184                           
  1185                           ;main.c: 263: for(int i=0; i<20; i++)
  1186  000368  0E00               	movlw	0
  1187  00036A  0100               	movlb	0	; () banked
  1188  00036C  6FBC               	movwf	(main@i+1)& (0+255),b
  1189  00036E  0E00               	movlw	0
  1190  000370  6FBB               	movwf	main@i& (0+255),b
  1191                           
  1192                           ; BSR set to: 0
  1193  000372  BFBC               	btfsc	(main@i+1)& (0+255),7,b
  1194  000374  D008               	goto	l792
  1195  000376  51BC               	movf	(main@i+1)& (0+255),w,b
  1196  000378  E105               	bnz	u2700
  1197  00037A  0E14               	movlw	20
  1198  00037C  5DBB               	subwf	main@i& (0+255),w,b
  1199  00037E  B0D8               	btfsc	status,0,c
  1200  000380  D6CC               	goto	l781
  1201  000382  D001               	goto	l792
  1202  000384                     u2700:
  1203                           
  1204                           ; BSR set to: 0
  1205  000384  D6CA               	goto	l781
  1206  000386                     l792:
  1207                           
  1208                           ; BSR set to: 0
  1209                           ;main.c: 264: _delay((unsigned long)((50)*(2000000/4000.0)));
  1210                           
  1211                           ; BSR set to: 0
  1212  000386  0E21               	movlw	33
  1213  000388  0100               	movlb	0	; () banked
  1214  00038A  6FA2               	movwf	??_main& (0+255),b
  1215  00038C  0E76               	movlw	118
  1216  00038E                     u2737:
  1217  00038E  2EE8               	decfsz	wreg,f,c
  1218  000390  D7FE               	bra	u2737
  1219  000392  2FA2               	decfsz	??_main& (0+255),f,b
  1220  000394  D7FC               	bra	u2737
  1221  000396  F000               	nop	
  1222  000398  0100               	movlb	0	; () banked
  1223  00039A  4BBB               	infsnz	main@i& (0+255),f,b
  1224  00039C  2BBC               	incf	(main@i+1)& (0+255),f,b
  1225  00039E  BFBC               	btfsc	(main@i+1)& (0+255),7,b
  1226  0003A0  D7F2               	goto	l792
  1227  0003A2  51BC               	movf	(main@i+1)& (0+255),w,b
  1228  0003A4  E101               	bnz	u2710
  1229  0003A6  D7E9               	goto	L1
  1230  0003A8                     u2710:
  1231                           
  1232                           ; BSR set to: 0
  1233                           
  1234                           ; BSR set to: 0
  1235  0003A8  D6B8               	goto	l781
  1236  0003AA                     __end_of_main:
  1237                           	opt stack 0
  1238                           tblptru	equ	0xFF8
  1239                           tblptrh	equ	0xFF7
  1240                           tblptrl	equ	0xFF6
  1241                           tablat	equ	0xFF5
  1242                           intcon	equ	0xFF2
  1243                           postinc0	equ	0xFEE
  1244                           wreg	equ	0xFE8
  1245                           postdec1	equ	0xFE5
  1246                           plusw1	equ	0xFE3
  1247                           fsr1l	equ	0xFE1
  1248                           indf2	equ	0xFDF
  1249                           postinc2	equ	0xFDE
  1250                           plusw2	equ	0xFDB
  1251                           fsr2h	equ	0xFDA
  1252                           fsr2l	equ	0xFD9
  1253                           status	equ	0xFD8
  1254                           
  1255 ;; *************** function _getSpaces *****************
  1256 ;; Defined at:
  1257 ;;		line 79 in file "main.c"
  1258 ;; Parameters:    Size  Location     Type
  1259 ;;		None
  1260 ;; Auto vars:     Size  Location     Type
  1261 ;;  i               2   11[BANK0 ] int 
  1262 ;;  space           1   13[BANK0 ] unsigned char 
  1263 ;;  spaceLast       1   10[BANK0 ] unsigned char 
  1264 ;; Return value:  Size  Location     Type
  1265 ;;                  1    wreg      unsigned char 
  1266 ;; Registers used:
  1267 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1268 ;; Tracked objects:
  1269 ;;		On entry : 0/0
  1270 ;;		On exit  : 0/0
  1271 ;;		Unchanged: 0/0
  1272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1274 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1275 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1276 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1277 ;;Total ram usage:        6 bytes
  1278 ;; Hardware stack levels used:    1
  1279 ;; Hardware stack levels required when called:   17
  1280 ;; This function calls:
  1281 ;;		_updateExpanders
  1282 ;; This function is called by:
  1283 ;;		_main
  1284 ;; This function uses a non-reentrant model
  1285 ;;
  1286                           
  1287                           	psect	text1
  1288  000790                     __ptext1:
  1289                           	opt stack 0
  1290  000790                     _getSpaces:
  1291                           	opt stack 13
  1292                           
  1293                           ;main.c: 80: uint8_t space = 0;
  1294                           
  1295                           ; BSR set to: 0
  1296                           ;incstack = 0
  1297  000790  0E00               	movlw	0
  1298  000792  0100               	movlb	0	; () banked
  1299  000794  6FA1               	movwf	getSpaces@space& (0+255),b
  1300                           
  1301                           ; BSR set to: 0
  1302                           ;main.c: 81: uint8_t spaceLast = updateExpanders();
  1303  000796  EC4C  F002         	call	_updateExpanders	;wreg free
  1304  00079A  5039               	movf	?_updateExpanders,w,c
  1305  00079C  0100               	movlb	0	; () banked
  1306  00079E  6F9E               	movwf	getSpaces@spaceLast& (0+255),b
  1307                           
  1308                           ; BSR set to: 0
  1309                           ;main.c: 82: space = updateExpanders();
  1310  0007A0  EC4C  F002         	call	_updateExpanders	;wreg free
  1311  0007A4  5039               	movf	?_updateExpanders,w,c
  1312  0007A6  0100               	movlb	0	; () banked
  1313  0007A8  6FA1               	movwf	getSpaces@space& (0+255),b
  1314                           
  1315                           ;main.c: 83: while(space == spaceLast){
  1316  0007AA  D010               	goto	l746
  1317  0007AC                     
  1318                           ; BSR set to: 0
  1319                           ;main.c: 84: space = updateExpanders();
  1320                           
  1321                           ; BSR set to: 0
  1322  0007AC  EC4C  F002         	call	_updateExpanders	;wreg free
  1323  0007B0  5039               	movf	?_updateExpanders,w,c
  1324  0007B2  0100               	movlb	0	; () banked
  1325  0007B4  6FA1               	movwf	getSpaces@space& (0+255),b
  1326                           
  1327                           ; BSR set to: 0
  1328                           ;main.c: 85: _delay((unsigned long)((500)*(2000000/4000.0)));
  1329  0007B6  0E02               	movlw	2
  1330  0007B8  6E40               	movwf	(??_getSpaces+1)& (0+255),c
  1331  0007BA  0E45               	movlw	69
  1332  0007BC  6E3F               	movwf	??_getSpaces& (0+255),c
  1333  0007BE  0EAA               	movlw	170
  1334  0007C0                     u2747:
  1335  0007C0  2EE8               	decfsz	wreg,f,c
  1336  0007C2  D7FE               	bra	u2747
  1337  0007C4  2E3F               	decfsz	??_getSpaces& (0+255),f,c
  1338  0007C6  D7FC               	bra	u2747
  1339  0007C8  2E40               	decfsz	(??_getSpaces+1)& (0+255),f,c
  1340  0007CA  D7FA               	bra	u2747
  1341  0007CC                     l746:
  1342  0007CC  0100               	movlb	0	; () banked
  1343  0007CE  519E               	movf	getSpaces@spaceLast& (0+255),w,b
  1344  0007D0  19A1               	xorwf	getSpaces@space& (0+255),w,b
  1345  0007D2  B4D8               	btfsc	status,2,c
  1346  0007D4  D7EB               	goto	l747
  1347                           
  1348                           ; BSR set to: 0
  1349                           ;main.c: 86: }
  1350                           ;main.c: 87: for(int i=0;i<40;i++){
  1351                           
  1352                           ; BSR set to: 0
  1353  0007D6  0E00               	movlw	0
  1354  0007D8  6FA0               	movwf	(getSpaces@i+1)& (0+255),b
  1355  0007DA  0E00               	movlw	0
  1356  0007DC  6F9F               	movwf	getSpaces@i& (0+255),b
  1357  0007DE                     l4378:
  1358                           
  1359                           ; BSR set to: 0
  1360  0007DE  BFA0               	btfsc	(getSpaces@i+1)& (0+255),7,b
  1361  0007E0  D006               	goto	l749
  1362  0007E2  51A0               	movf	(getSpaces@i+1)& (0+255),w,b
  1363  0007E4  E11F               	bnz	l4396
  1364  0007E6  0E28               	movlw	40
  1365  0007E8  5D9F               	subwf	getSpaces@i& (0+255),w,b
  1366  0007EA  B0D8               	btfsc	status,0,c
  1367  0007EC  D01B               	goto	u2400
  1368  0007EE                     l749:
  1369                           
  1370                           ; BSR set to: 0
  1371                           ;main.c: 88: space = updateExpanders();
  1372                           
  1373                           ; BSR set to: 0
  1374  0007EE  EC4C  F002         	call	_updateExpanders	;wreg free
  1375  0007F2  5039               	movf	?_updateExpanders,w,c
  1376  0007F4  0100               	movlb	0	; () banked
  1377  0007F6  6FA1               	movwf	getSpaces@space& (0+255),b
  1378                           
  1379                           ; BSR set to: 0
  1380                           ;main.c: 89: if(space != spaceLast)
  1381  0007F8  519E               	movf	getSpaces@spaceLast& (0+255),w,b
  1382  0007FA  19A1               	xorwf	getSpaces@space& (0+255),w,b
  1383  0007FC  B4D8               	btfsc	status,2,c
  1384  0007FE  D004               	goto	l751
  1385                           
  1386                           ; BSR set to: 0
  1387                           ;main.c: 90: i=0;
  1388  000800  0E00               	movlw	0
  1389  000802  6FA0               	movwf	(getSpaces@i+1)& (0+255),b
  1390  000804  0E00               	movlw	0
  1391  000806  6F9F               	movwf	getSpaces@i& (0+255),b
  1392  000808                     l751:
  1393                           
  1394                           ; BSR set to: 0
  1395                           ;main.c: 91: spaceLast = space;
  1396                           
  1397                           ; BSR set to: 0
  1398  000808  C0A1  F09E         	movff	getSpaces@space,getSpaces@spaceLast
  1399                           
  1400                           ; BSR set to: 0
  1401                           ;main.c: 92: _delay((unsigned long)((50)*(2000000/4000.0)));
  1402  00080C  0E21               	movlw	33
  1403  00080E  6E3F               	movwf	??_getSpaces& (0+255),c
  1404  000810  0E76               	movlw	118
  1405  000812                     u2757:
  1406  000812  2EE8               	decfsz	wreg,f,c
  1407  000814  D7FE               	bra	u2757
  1408  000816  2E3F               	decfsz	??_getSpaces& (0+255),f,c
  1409  000818  D7FC               	bra	u2757
  1410  00081A  D000               	nop2	
  1411  00081C  0100               	movlb	0	; () banked
  1412  00081E  4B9F               	infsnz	getSpaces@i& (0+255),f,b
  1413  000820  2BA0               	incf	(getSpaces@i+1)& (0+255),f,b
  1414  000822  D7DD               	goto	l4378
  1415  000824                     u2400:
  1416  000824                     l4396:
  1417                           
  1418                           ; BSR set to: 0
  1419                           ;main.c: 93: }
  1420                           ;main.c: 94: return space;
  1421  000824  51A1               	movf	getSpaces@space& (0+255),w,b
  1422  000826  0012               	return	
  1423  000828                     __end_of_getSpaces:
  1424                           	opt stack 0
  1425                           tblptru	equ	0xFF8
  1426                           tblptrh	equ	0xFF7
  1427                           tblptrl	equ	0xFF6
  1428                           tablat	equ	0xFF5
  1429                           intcon	equ	0xFF2
  1430                           postinc0	equ	0xFEE
  1431                           wreg	equ	0xFE8
  1432                           postdec1	equ	0xFE5
  1433                           plusw1	equ	0xFE3
  1434                           fsr1l	equ	0xFE1
  1435                           indf2	equ	0xFDF
  1436                           postinc2	equ	0xFDE
  1437                           plusw2	equ	0xFDB
  1438                           fsr2h	equ	0xFDA
  1439                           fsr2l	equ	0xFD9
  1440                           status	equ	0xFD8
  1441                           
  1442 ;; *************** function _updateExpanders *****************
  1443 ;; Defined at:
  1444 ;;		line 66 in file "main.c"
  1445 ;; Parameters:    Size  Location     Type
  1446 ;;		None
  1447 ;; Auto vars:     Size  Location     Type
  1448 ;;  spaces          4    0[BANK0 ] long 
  1449 ;;  rR              1    9[BANK0 ] unsigned char 
  1450 ;;  rL              1    8[BANK0 ] unsigned char 
  1451 ;;  mR              1    7[BANK0 ] unsigned char 
  1452 ;;  mL              1    6[BANK0 ] unsigned char 
  1453 ;;  lR              1    5[BANK0 ] unsigned char 
  1454 ;;  lL              1    4[BANK0 ] unsigned char 
  1455 ;; Return value:  Size  Location     Type
  1456 ;;                  4   56[COMRAM] long 
  1457 ;; Registers used:
  1458 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1459 ;; Tracked objects:
  1460 ;;		On entry : 0/0
  1461 ;;		On exit  : 0/0
  1462 ;;		Unchanged: 0/0
  1463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1464 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1465 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1466 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1467 ;;      Totals:         6      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1468 ;;Total ram usage:       16 bytes
  1469 ;; Hardware stack levels used:    1
  1470 ;; Hardware stack levels required when called:   16
  1471 ;; This function calls:
  1472 ;;		_readIoExpander
  1473 ;; This function is called by:
  1474 ;;		_getSpaces
  1475 ;; This function uses a non-reentrant model
  1476 ;;
  1477                           
  1478                           	psect	text2
  1479  000498                     __ptext2:
  1480                           	opt stack 0
  1481  000498                     _updateExpanders:
  1482                           	opt stack 13
  1483                           
  1484                           ;main.c: 67: uint8_t lL=0, lR=0, mL=0, mR=0, rL=0, rR=0;
  1485                           
  1486                           ; BSR set to: 0
  1487                           ;incstack = 0
  1488  000498  0E00               	movlw	0
  1489  00049A  0100               	movlb	0	; () banked
  1490  00049C  6F98               	movwf	updateExpanders@lL& (0+255),b
  1491  00049E  0E00               	movlw	0
  1492  0004A0  6F99               	movwf	updateExpanders@lR& (0+255),b
  1493  0004A2  0E00               	movlw	0
  1494  0004A4  6F9A               	movwf	updateExpanders@mL& (0+255),b
  1495  0004A6  0E00               	movlw	0
  1496  0004A8  6F9B               	movwf	updateExpanders@mR& (0+255),b
  1497  0004AA  0E00               	movlw	0
  1498  0004AC  6F9C               	movwf	updateExpanders@rL& (0+255),b
  1499  0004AE  0E00               	movlw	0
  1500  0004B0  6F9D               	movwf	updateExpanders@rR& (0+255),b
  1501                           
  1502                           ; BSR set to: 0
  1503                           ;main.c: 68: lL = readIoExpander(0x20, 'l',40);
  1504  0004B2  0E6C               	movlw	108
  1505  0004B4  6E26               	movwf	readIoExpander@bank,c
  1506  0004B6  0E28               	movlw	40
  1507  0004B8  6E27               	movwf	readIoExpander@index,c
  1508  0004BA  0E20               	movlw	32
  1509  0004BC  ECD5  F001         	call	_readIoExpander
  1510  0004C0  0100               	movlb	0	; () banked
  1511  0004C2  6F98               	movwf	updateExpanders@lL& (0+255),b
  1512                           
  1513                           ; BSR set to: 0
  1514                           ;main.c: 69: lR = readIoExpander(0x20, 'r',32);
  1515  0004C4  0E72               	movlw	114
  1516  0004C6  6E26               	movwf	readIoExpander@bank,c
  1517  0004C8  0E20               	movlw	32
  1518  0004CA  6E27               	movwf	readIoExpander@index,c
  1519  0004CC  0E20               	movlw	32
  1520  0004CE  ECD5  F001         	call	_readIoExpander
  1521  0004D2  0100               	movlb	0	; () banked
  1522  0004D4  6F99               	movwf	updateExpanders@lR& (0+255),b
  1523                           
  1524                           ; BSR set to: 0
  1525                           ;main.c: 70: mL = readIoExpander(0x21, 'l',24);
  1526  0004D6  0E6C               	movlw	108
  1527  0004D8  6E26               	movwf	readIoExpander@bank,c
  1528  0004DA  0E18               	movlw	24
  1529  0004DC  6E27               	movwf	readIoExpander@index,c
  1530  0004DE  0E21               	movlw	33
  1531  0004E0  ECD5  F001         	call	_readIoExpander
  1532  0004E4  0100               	movlb	0	; () banked
  1533  0004E6  6F9A               	movwf	updateExpanders@mL& (0+255),b
  1534                           
  1535                           ; BSR set to: 0
  1536                           ;main.c: 71: mR = readIoExpander(0x21, 'r',16);
  1537  0004E8  0E72               	movlw	114
  1538  0004EA  6E26               	movwf	readIoExpander@bank,c
  1539  0004EC  0E10               	movlw	16
  1540  0004EE  6E27               	movwf	readIoExpander@index,c
  1541  0004F0  0E21               	movlw	33
  1542  0004F2  ECD5  F001         	call	_readIoExpander
  1543  0004F6  0100               	movlb	0	; () banked
  1544  0004F8  6F9B               	movwf	updateExpanders@mR& (0+255),b
  1545                           
  1546                           ; BSR set to: 0
  1547                           ;main.c: 72: rL = readIoExpander(0x22, 'l',0);
  1548  0004FA  0E6C               	movlw	108
  1549  0004FC  6E26               	movwf	readIoExpander@bank,c
  1550  0004FE  0E00               	movlw	0
  1551  000500  6E27               	movwf	readIoExpander@index,c
  1552  000502  0E22               	movlw	34
  1553  000504  ECD5  F001         	call	_readIoExpander
  1554  000508  0100               	movlb	0	; () banked
  1555  00050A  6F9C               	movwf	updateExpanders@rL& (0+255),b
  1556                           
  1557                           ; BSR set to: 0
  1558                           ;main.c: 73: rR = readIoExpander(0x22, 'r',8);
  1559  00050C  0E72               	movlw	114
  1560  00050E  6E26               	movwf	readIoExpander@bank,c
  1561  000510  0E08               	movlw	8
  1562  000512  6E27               	movwf	readIoExpander@index,c
  1563  000514  0E22               	movlw	34
  1564  000516  ECD5  F001         	call	_readIoExpander
  1565  00051A  0100               	movlb	0	; () banked
  1566  00051C  6F9D               	movwf	updateExpanders@rR& (0+255),b
  1567                           
  1568                           ; BSR set to: 0
  1569                           ;main.c: 75: long spaces = lL+lR+mL+mR+rL+rR;
  1570  00051E  5199               	movf	updateExpanders@lR& (0+255),w,b
  1571  000520  C098  F03D         	movff	updateExpanders@lL,??_updateExpanders
  1572  000524  6A3E               	clrf	(??_updateExpanders+1)& (0+255),c
  1573  000526  263D               	addwf	??_updateExpanders,f,c
  1574  000528  0E00               	movlw	0
  1575  00052A  223E               	addwfc	??_updateExpanders+1,f,c
  1576  00052C  519A               	movf	updateExpanders@mL& (0+255),w,b
  1577  00052E  263D               	addwf	??_updateExpanders,f,c
  1578  000530  0E00               	movlw	0
  1579  000532  223E               	addwfc	??_updateExpanders+1,f,c
  1580  000534  519B               	movf	updateExpanders@mR& (0+255),w,b
  1581  000536  263D               	addwf	??_updateExpanders,f,c
  1582  000538  0E00               	movlw	0
  1583  00053A  223E               	addwfc	??_updateExpanders+1,f,c
  1584  00053C  519C               	movf	updateExpanders@rL& (0+255),w,b
  1585  00053E  263D               	addwf	??_updateExpanders,f,c
  1586  000540  0E00               	movlw	0
  1587  000542  223E               	addwfc	??_updateExpanders+1,f,c
  1588  000544  519D               	movf	updateExpanders@rR& (0+255),w,b
  1589  000546  263D               	addwf	??_updateExpanders,f,c
  1590  000548  0E00               	movlw	0
  1591  00054A  223E               	addwfc	??_updateExpanders+1,f,c
  1592  00054C  C03D  F094         	movff	??_updateExpanders,updateExpanders@spaces
  1593  000550  C03E  F095         	movff	??_updateExpanders+1,updateExpanders@spaces+1
  1594  000554  0E00               	movlw	0
  1595  000556  BF95               	btfsc	(updateExpanders@spaces+1)& (0+255),7,b
  1596  000558  0EFF               	movlw	-1
  1597  00055A  6F96               	movwf	(updateExpanders@spaces+2)& (0+255),b
  1598  00055C  6F97               	movwf	(updateExpanders@spaces+3)& (0+255),b
  1599                           
  1600                           ; BSR set to: 0
  1601                           ;main.c: 76: return spaces;
  1602  00055E  C094  F039         	movff	updateExpanders@spaces,?_updateExpanders
  1603  000562  C095  F03A         	movff	updateExpanders@spaces+1,?_updateExpanders+1
  1604  000566  C096  F03B         	movff	updateExpanders@spaces+2,?_updateExpanders+2
  1605  00056A  C097  F03C         	movff	updateExpanders@spaces+3,?_updateExpanders+3
  1606  00056E  0012               	return	
  1607  000570                     __end_of_updateExpanders:
  1608                           	opt stack 0
  1609                           tblptru	equ	0xFF8
  1610                           tblptrh	equ	0xFF7
  1611                           tblptrl	equ	0xFF6
  1612                           tablat	equ	0xFF5
  1613                           intcon	equ	0xFF2
  1614                           postinc0	equ	0xFEE
  1615                           wreg	equ	0xFE8
  1616                           postdec1	equ	0xFE5
  1617                           plusw1	equ	0xFE3
  1618                           fsr1l	equ	0xFE1
  1619                           indf2	equ	0xFDF
  1620                           postinc2	equ	0xFDE
  1621                           plusw2	equ	0xFDB
  1622                           fsr2h	equ	0xFDA
  1623                           fsr2l	equ	0xFD9
  1624                           status	equ	0xFD8
  1625                           
  1626 ;; *************** function _readIoExpander *****************
  1627 ;; Defined at:
  1628 ;;		line 46 in file "main.c"
  1629 ;; Parameters:    Size  Location     Type
  1630 ;;  addr            1    wreg     unsigned char 
  1631 ;;  bank            1   37[COMRAM] unsigned char 
  1632 ;;  index           1   38[COMRAM] unsigned char 
  1633 ;; Auto vars:     Size  Location     Type
  1634 ;;  addr            1   52[COMRAM] unsigned char 
  1635 ;;  i               2   54[COMRAM] int 
  1636 ;;  spots           8   41[COMRAM] unsigned char [8]
  1637 ;;  data            2   49[COMRAM] unsigned char [2]
  1638 ;;  rec             1   53[COMRAM] unsigned char 
  1639 ;;  spaces          1   51[COMRAM] unsigned char 
  1640 ;; Return value:  Size  Location     Type
  1641 ;;                  1    wreg      unsigned char 
  1642 ;; Registers used:
  1643 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1644 ;; Tracked objects:
  1645 ;;		On entry : 0/0
  1646 ;;		On exit  : 0/0
  1647 ;;		Unchanged: 0/0
  1648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1649 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1650 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1651 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1652 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1653 ;;Total ram usage:       19 bytes
  1654 ;; Hardware stack levels used:    1
  1655 ;; Hardware stack levels required when called:   15
  1656 ;; This function calls:
  1657 ;;		_i2c_readNBytes
  1658 ;;		_i2c_writeNBytes
  1659 ;; This function is called by:
  1660 ;;		_updateExpanders
  1661 ;;		_checkEnd
  1662 ;; This function uses a non-reentrant model
  1663 ;;
  1664                           
  1665                           	psect	text3
  1666  0003AA                     __ptext3:
  1667                           	opt stack 0
  1668  0003AA                     _readIoExpander:
  1669                           	opt stack 13
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;incstack = 0
  1673                           ;readIoExpander@addr stored from wreg
  1674  0003AA  6E35               	movwf	readIoExpander@addr,c
  1675                           
  1676                           ;main.c: 47: uint8_t data[2];
  1677                           ;main.c: 48: if(bank == 'A' || bank == 'a' || bank == 'r' || bank == 'R')
  1678  0003AC  0E41               	movlw	65
  1679  0003AE  1826               	xorwf	readIoExpander@bank,w,c
  1680  0003B0  B4D8               	btfsc	status,2,c
  1681  0003B2  D00C               	goto	u2250
  1682  0003B4  0E61               	movlw	97
  1683  0003B6  1826               	xorwf	readIoExpander@bank,w,c
  1684  0003B8  B4D8               	btfsc	status,2,c
  1685  0003BA  D008               	goto	u2250
  1686  0003BC  0E72               	movlw	114
  1687  0003BE  1826               	xorwf	readIoExpander@bank,w,c
  1688  0003C0  B4D8               	btfsc	status,2,c
  1689  0003C2  D004               	goto	u2250
  1690  0003C4  0E52               	movlw	82
  1691  0003C6  1826               	xorwf	readIoExpander@bank,w,c
  1692  0003C8  A4D8               	btfss	status,2,c
  1693  0003CA  D002               	goto	l734
  1694  0003CC                     u2250:
  1695                           
  1696                           ;main.c: 49: data[0]=0x12;
  1697  0003CC  0E12               	movlw	18
  1698  0003CE  D001               	goto	L2
  1699  0003D0                     l734:
  1700                           
  1701                           ;main.c: 50: else
  1702                           ;main.c: 51: data[0]=0x13;
  1703  0003D0  0E13               	movlw	19
  1704  0003D2                     L2:
  1705  0003D2  6E32               	movwf	readIoExpander@data,c
  1706                           
  1707                           ;main.c: 52: i2c_writeNBytes(addr, &data[0], 1);
  1708  0003D4  0E32               	movlw	low readIoExpander@data
  1709  0003D6  6E21               	movwf	i2c_writeNBytes@data,c
  1710  0003D8  0E00               	movlw	high readIoExpander@data
  1711  0003DA  6E22               	movwf	i2c_writeNBytes@data+1,c
  1712  0003DC  0E00               	movlw	0
  1713  0003DE  6E24               	movwf	i2c_writeNBytes@len+1,c
  1714  0003E0  0E01               	movlw	1
  1715  0003E2  6E23               	movwf	i2c_writeNBytes@len,c
  1716  0003E4  5035               	movf	readIoExpander@addr,w,c
  1717  0003E6  EC3F  F006         	call	_i2c_writeNBytes
  1718                           
  1719                           ;main.c: 53: uint8_t rec;
  1720                           ;main.c: 54: i2c_readNBytes(addr, &rec, 1);
  1721  0003EA  0E36               	movlw	low readIoExpander@rec
  1722  0003EC  6E1B               	movwf	i2c_readNBytes@data,c
  1723  0003EE  0E00               	movlw	high readIoExpander@rec
  1724  0003F0  6E1C               	movwf	i2c_readNBytes@data+1,c
  1725  0003F2  0E00               	movlw	0
  1726  0003F4  6E1E               	movwf	i2c_readNBytes@len+1,c
  1727  0003F6  0E01               	movlw	1
  1728  0003F8  6E1D               	movwf	i2c_readNBytes@len,c
  1729  0003FA  5035               	movf	readIoExpander@addr,w,c
  1730  0003FC  EC80  F007         	call	_i2c_readNBytes
  1731                           
  1732                           ;main.c: 55: rec = ~rec;
  1733  000400  1E36               	comf	readIoExpander@rec,f,c
  1734                           
  1735                           ;main.c: 56: uint8_t spots[8];
  1736                           ;main.c: 57: uint8_t spaces=0;
  1737  000402  0E00               	movlw	0
  1738  000404  6E34               	movwf	readIoExpander@spaces,c
  1739                           
  1740                           ;main.c: 58: for(int i=0;i<8;i++){
  1741  000406  0E00               	movlw	0
  1742  000408  6E38               	movwf	readIoExpander@i+1,c
  1743  00040A  0E00               	movlw	0
  1744  00040C  6E37               	movwf	readIoExpander@i,c
  1745  00040E                     l4234:
  1746  00040E  BE38               	btfsc	readIoExpander@i+1,7,c
  1747  000410  D006               	goto	l738
  1748  000412  5038               	movf	readIoExpander@i+1,w,c
  1749  000414  E13F               	bnz	l4248
  1750  000416  0E08               	movlw	8
  1751  000418  5C37               	subwf	readIoExpander@i,w,c
  1752  00041A  B0D8               	btfsc	status,0,c
  1753  00041C  D03B               	goto	u2290
  1754  00041E                     l738:
  1755                           
  1756                           ;main.c: 59: spots[i] = rec & 1<<i;
  1757  00041E  0E2A               	movlw	low readIoExpander@spots
  1758  000420  2437               	addwf	readIoExpander@i,w,c
  1759  000422  6ED9               	movwf	fsr2l,c
  1760  000424  0E00               	movlw	high readIoExpander@spots
  1761  000426  2038               	addwfc	readIoExpander@i+1,w,c
  1762  000428  6EDA               	movwf	fsr2h,c
  1763  00042A  C037  F028         	movff	readIoExpander@i,??_readIoExpander
  1764  00042E  0E01               	movlw	1
  1765  000430  6E29               	movwf	(??_readIoExpander+1)& (0+255),c
  1766  000432  2A28               	incf	??_readIoExpander,f,c
  1767  000434  D002               	goto	u2274
  1768  000436                     u2275:
  1769  000436  90D8               	bcf	status,0,c
  1770  000438  3629               	rlcf	??_readIoExpander+1,f,c
  1771  00043A                     u2274:
  1772  00043A  2E28               	decfsz	??_readIoExpander,f,c
  1773  00043C  D7FC               	goto	u2275
  1774  00043E  5029               	movf	??_readIoExpander+1,w,c
  1775  000440  1436               	andwf	readIoExpander@rec,w,c
  1776  000442  6EDF               	movwf	indf2,c
  1777                           
  1778                           ;main.c: 60: spots[i] = spots[i] >> i;
  1779  000444  0E2A               	movlw	low readIoExpander@spots
  1780  000446  2437               	addwf	readIoExpander@i,w,c
  1781  000448  6ED9               	movwf	fsr2l,c
  1782  00044A  0E00               	movlw	high readIoExpander@spots
  1783  00044C  2038               	addwfc	readIoExpander@i+1,w,c
  1784  00044E  6EDA               	movwf	fsr2h,c
  1785  000450  C037  F028         	movff	readIoExpander@i,??_readIoExpander
  1786  000454  0E2A               	movlw	low readIoExpander@spots
  1787  000456  2437               	addwf	readIoExpander@i,w,c
  1788  000458  6EE1               	movwf	fsr1l,c
  1789  00045A  0E00               	movlw	high readIoExpander@spots
  1790  00045C  2038               	addwfc	readIoExpander@i+1,w,c
  1791  00045E  6EE2               	movwf	fsr1h,c
  1792  000460  50E7               	movf	indf1,w,c
  1793  000462  6E29               	movwf	(??_readIoExpander+1)& (0+255),c
  1794  000464  2A28               	incf	??_readIoExpander,f,c
  1795  000466  D002               	goto	u2284
  1796  000468                     u2285:
  1797  000468  90D8               	bcf	status,0,c
  1798  00046A  3229               	rrcf	??_readIoExpander+1,f,c
  1799  00046C                     u2284:
  1800  00046C  2E28               	decfsz	??_readIoExpander,f,c
  1801  00046E  D7FC               	goto	u2285
  1802  000470  5029               	movf	??_readIoExpander+1,w,c
  1803  000472  6EDF               	movwf	indf2,c
  1804                           
  1805                           ;main.c: 61: spaces+=spots[i]*(i+index);
  1806  000474  0E2A               	movlw	low readIoExpander@spots
  1807  000476  2437               	addwf	readIoExpander@i,w,c
  1808  000478  6ED9               	movwf	fsr2l,c
  1809  00047A  0E00               	movlw	high readIoExpander@spots
  1810  00047C  2038               	addwfc	readIoExpander@i+1,w,c
  1811  00047E  6EDA               	movwf	fsr2h,c
  1812  000480  50DF               	movf	indf2,w,c
  1813  000482  6E28               	movwf	??_readIoExpander& (0+255),c
  1814  000484  5027               	movf	readIoExpander@index,w,c
  1815  000486  2437               	addwf	readIoExpander@i,w,c
  1816  000488  0228               	mulwf	??_readIoExpander,c
  1817  00048A  50F3               	movf	prodl,w,c
  1818  00048C  2634               	addwf	readIoExpander@spaces,f,c
  1819  00048E  4A37               	infsnz	readIoExpander@i,f,c
  1820  000490  2A38               	incf	readIoExpander@i+1,f,c
  1821  000492  D7BD               	goto	l4234
  1822  000494                     u2290:
  1823  000494                     l4248:
  1824                           
  1825                           ;main.c: 62: }
  1826                           ;main.c: 63: return spaces;
  1827  000494  5034               	movf	readIoExpander@spaces,w,c
  1828  000496  0012               	return	
  1829  000498                     __end_of_readIoExpander:
  1830                           	opt stack 0
  1831                           tblptru	equ	0xFF8
  1832                           tblptrh	equ	0xFF7
  1833                           tblptrl	equ	0xFF6
  1834                           tablat	equ	0xFF5
  1835                           prodl	equ	0xFF3
  1836                           intcon	equ	0xFF2
  1837                           postinc0	equ	0xFEE
  1838                           wreg	equ	0xFE8
  1839                           indf1	equ	0xFE7
  1840                           postdec1	equ	0xFE5
  1841                           plusw1	equ	0xFE3
  1842                           fsr1h	equ	0xFE2
  1843                           fsr1l	equ	0xFE1
  1844                           indf2	equ	0xFDF
  1845                           postinc2	equ	0xFDE
  1846                           plusw2	equ	0xFDB
  1847                           fsr2h	equ	0xFDA
  1848                           fsr2l	equ	0xFD9
  1849                           status	equ	0xFD8
  1850                           
  1851 ;; *************** function _i2c_writeNBytes *****************
  1852 ;; Defined at:
  1853 ;;		line 48 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  1854 ;; Parameters:    Size  Location     Type
  1855 ;;  address         1    wreg     unsigned char 
  1856 ;;  data            2   32[COMRAM] PTR void 
  1857 ;;		 -> main@receivedScore(7), readIoExpander@data(2), 
  1858 ;;  len             2   34[COMRAM] unsigned int 
  1859 ;; Auto vars:     Size  Location     Type
  1860 ;;  address         1   36[COMRAM] unsigned char 
  1861 ;; Return value:  Size  Location     Type
  1862 ;;                  1    wreg      void 
  1863 ;; Registers used:
  1864 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1865 ;; Tracked objects:
  1866 ;;		On entry : 0/0
  1867 ;;		On exit  : 0/0
  1868 ;;		Unchanged: 0/0
  1869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1870 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1871 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1873 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1874 ;;Total ram usage:        5 bytes
  1875 ;; Hardware stack levels used:    1
  1876 ;; Hardware stack levels required when called:   14
  1877 ;; This function calls:
  1878 ;;		_i2c_close
  1879 ;;		_i2c_masterWrite
  1880 ;;		_i2c_open
  1881 ;;		_i2c_setAddressNACKCallback
  1882 ;;		_i2c_setBuffer
  1883 ;; This function is called by:
  1884 ;;		_readIoExpander
  1885 ;;		_main
  1886 ;; This function uses a non-reentrant model
  1887 ;;
  1888                           
  1889                           	psect	text4
  1890  000C7E                     __ptext4:
  1891                           	opt stack 0
  1892  000C7E                     _i2c_writeNBytes:
  1893                           	opt stack 16
  1894                           
  1895                           ;incstack = 0
  1896                           ;i2c_writeNBytes@address stored from wreg
  1897  000C7E  6E25               	movwf	i2c_writeNBytes@address,c
  1898  000C80                     
  1899                           ;i2c_simple_master.c: 50: while(!i2c_open(address));
  1900  000C80  5025               	movf	i2c_writeNBytes@address,w,c
  1901  000C82  EC1E  F003         	call	_i2c_open
  1902  000C86  0900               	iorlw	0
  1903  000C88  B4D8               	btfsc	status,2,c
  1904  000C8A  D7FA               	goto	l4190
  1905                           
  1906                           ;i2c_simple_master.c: 51: i2c_setBuffer(data,len);
  1907  000C8C  C021  F016         	movff	i2c_writeNBytes@data,i2c_setBuffer@buffer
  1908  000C90  C022  F017         	movff	i2c_writeNBytes@data+1,i2c_setBuffer@buffer+1
  1909  000C94  C023  F018         	movff	i2c_writeNBytes@len,i2c_setBuffer@bufferSize
  1910  000C98  C024  F019         	movff	i2c_writeNBytes@len+1,i2c_setBuffer@bufferSize+1
  1911  000C9C  EC92  F008         	call	_i2c_setBuffer	;wreg free
  1912                           
  1913                           ;i2c_simple_master.c: 52: i2c_setAddressNACKCallback(i2c_restartWrite,(0));
  1914  000CA0  0E8A               	movlw	low _i2c_restartWrite
  1915  000CA2  6E1C               	movwf	i2c_setAddressNACKCallback@cb,c
  1916  000CA4  0E13               	movlw	high _i2c_restartWrite
  1917  000CA6  6E1D               	movwf	i2c_setAddressNACKCallback@cb+1,c
  1918  000CA8  0E00               	movlw	low (_i2c_restartWrite shr (0+16))
  1919  000CAA  6E1E               	movwf	i2c_setAddressNACKCallback@cb+2,c
  1920  000CAC  0E00               	movlw	0
  1921  000CAE  6E1F               	movwf	i2c_setAddressNACKCallback@p,c
  1922  000CB0  0E00               	movlw	0
  1923  000CB2  6E20               	movwf	i2c_setAddressNACKCallback@p+1,c
  1924  000CB4  EC4D  F008         	call	_i2c_setAddressNACKCallback	;wreg free
  1925                           
  1926                           ;i2c_simple_master.c: 53: i2c_masterWrite();
  1927  000CB8  ECD4  F009         	call	_i2c_masterWrite	;wreg free
  1928  000CBC  EC3E  F008         	call	_i2c_close	;wreg free
  1929  000CC0  06E8               	decf	wreg,f,c
  1930  000CC2  A4D8               	btfss	status,2,c
  1931  000CC4  0012               	return	
  1932  000CC6  D7FA               	goto	l545
  1933  000CC8                     __end_of_i2c_writeNBytes:
  1934                           	opt stack 0
  1935                           tblptru	equ	0xFF8
  1936                           tblptrh	equ	0xFF7
  1937                           tblptrl	equ	0xFF6
  1938                           tablat	equ	0xFF5
  1939                           prodl	equ	0xFF3
  1940                           intcon	equ	0xFF2
  1941                           postinc0	equ	0xFEE
  1942                           wreg	equ	0xFE8
  1943                           indf1	equ	0xFE7
  1944                           postdec1	equ	0xFE5
  1945                           plusw1	equ	0xFE3
  1946                           fsr1h	equ	0xFE2
  1947                           fsr1l	equ	0xFE1
  1948                           indf2	equ	0xFDF
  1949                           postinc2	equ	0xFDE
  1950                           plusw2	equ	0xFDB
  1951                           fsr2h	equ	0xFDA
  1952                           fsr2l	equ	0xFD9
  1953                           status	equ	0xFD8
  1954                           
  1955 ;; *************** function _i2c_setAddressNACKCallback *****************
  1956 ;; Defined at:
  1957 ;;		line 99 in file "mcc_generated_files/drivers/i2c_master.c"
  1958 ;; Parameters:    Size  Location     Type
  1959 ;;  cb              3   27[COMRAM] PTR FTN(PTR void ,)enum 
  1960 ;;		 -> i2c_restartWrite(1), 
  1961 ;;  p               2   30[COMRAM] PTR void 
  1962 ;;		 -> NULL(0), 
  1963 ;; Auto vars:     Size  Location     Type
  1964 ;;		None
  1965 ;; Return value:  Size  Location     Type
  1966 ;;                  1    wreg      void 
  1967 ;; Registers used:
  1968 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1969 ;; Tracked objects:
  1970 ;;		On entry : 0/0
  1971 ;;		On exit  : 0/0
  1972 ;;		Unchanged: 0/0
  1973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1974 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1977 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1978 ;;Total ram usage:        5 bytes
  1979 ;; Hardware stack levels used:    1
  1980 ;; Hardware stack levels required when called:    7
  1981 ;; This function calls:
  1982 ;;		_setCallBack
  1983 ;; This function is called by:
  1984 ;;		_i2c_writeNBytes
  1985 ;;		_i2c_write1ByteRegister
  1986 ;;		_i2c_read1ByteRegister
  1987 ;;		_i2c_read2ByteRegister
  1988 ;;		_i2c_write2ByteRegister
  1989 ;;		_i2c_readDataBlock
  1990 ;; This function uses a non-reentrant model
  1991 ;;
  1992                           
  1993                           	psect	text5
  1994  00109A                     __ptext5:
  1995                           	opt stack 0
  1996  00109A                     _i2c_setAddressNACKCallback:
  1997                           	opt stack 22
  1998                           
  1999                           ;i2c_master.c: 101: setCallBack(i2c_addressNACK,cb,p);
  2000                           
  2001                           ;incstack = 0
  2002  00109A  C01C  F016         	movff	i2c_setAddressNACKCallback@cb,setCallBack@cb
  2003  00109E  C01D  F017         	movff	i2c_setAddressNACKCallback@cb+1,setCallBack@cb+1
  2004  0010A2  C01E  F018         	movff	i2c_setAddressNACKCallback@cb+2,setCallBack@cb+2
  2005  0010A6  C01F  F019         	movff	i2c_setAddressNACKCallback@p,setCallBack@p
  2006  0010AA  C020  F01A         	movff	i2c_setAddressNACKCallback@p+1,setCallBack@p+1
  2007  0010AE  0E02               	movlw	2
  2008  0010B0  ECE4  F004         	call	_setCallBack
  2009  0010B4  0012               	return		;funcret
  2010  0010B6                     __end_of_i2c_setAddressNACKCallback:
  2011                           	opt stack 0
  2012                           tblptru	equ	0xFF8
  2013                           tblptrh	equ	0xFF7
  2014                           tblptrl	equ	0xFF6
  2015                           tablat	equ	0xFF5
  2016                           prodl	equ	0xFF3
  2017                           intcon	equ	0xFF2
  2018                           postinc0	equ	0xFEE
  2019                           wreg	equ	0xFE8
  2020                           indf1	equ	0xFE7
  2021                           postdec1	equ	0xFE5
  2022                           plusw1	equ	0xFE3
  2023                           fsr1h	equ	0xFE2
  2024                           fsr1l	equ	0xFE1
  2025                           indf2	equ	0xFDF
  2026                           postinc2	equ	0xFDE
  2027                           plusw2	equ	0xFDB
  2028                           fsr2h	equ	0xFDA
  2029                           fsr2l	equ	0xFD9
  2030                           status	equ	0xFD8
  2031                           
  2032 ;; *************** function _i2c_masterWrite *****************
  2033 ;; Defined at:
  2034 ;;		line 222 in file "mcc_generated_files/drivers/i2c_master.c"
  2035 ;; Parameters:    Size  Location     Type
  2036 ;;		None
  2037 ;; Auto vars:     Size  Location     Type
  2038 ;;		None
  2039 ;; Return value:  Size  Location     Type
  2040 ;;                  1    wreg      enum E11785
  2041 ;; Registers used:
  2042 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2043 ;; Tracked objects:
  2044 ;;		On entry : 0/0
  2045 ;;		On exit  : 0/0
  2046 ;;		Unchanged: 0/0
  2047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2052 ;;Total ram usage:        0 bytes
  2053 ;; Hardware stack levels used:    1
  2054 ;; Hardware stack levels required when called:   13
  2055 ;; This function calls:
  2056 ;;		_i2c_masterOperation
  2057 ;; This function is called by:
  2058 ;;		_i2c_writeNBytes
  2059 ;;		_i2c_write1ByteRegister
  2060 ;;		_i2c_read1ByteRegister
  2061 ;;		_i2c_read2ByteRegister
  2062 ;;		_i2c_write2ByteRegister
  2063 ;;		_i2c_readDataBlock
  2064 ;; This function uses a non-reentrant model
  2065 ;;
  2066                           
  2067                           	psect	text6
  2068  0013A8                     __ptext6:
  2069                           	opt stack 0
  2070  0013A8                     _i2c_masterWrite:
  2071                           	opt stack 16
  2072                           
  2073                           ;i2c_master.c: 224: return i2c_masterOperation(0);
  2074                           ;	Return value of _i2c_masterWrite is never used
  2075                           
  2076                           ;incstack = 0
  2077  0013A8  0E00               	movlw	0
  2078  0013AA  EC99  F007         	call	_i2c_masterOperation
  2079  0013AE  0012               	return	
  2080  0013B0                     __end_of_i2c_masterWrite:
  2081                           	opt stack 0
  2082                           tblptru	equ	0xFF8
  2083                           tblptrh	equ	0xFF7
  2084                           tblptrl	equ	0xFF6
  2085                           tablat	equ	0xFF5
  2086                           prodl	equ	0xFF3
  2087                           intcon	equ	0xFF2
  2088                           postinc0	equ	0xFEE
  2089                           wreg	equ	0xFE8
  2090                           indf1	equ	0xFE7
  2091                           postdec1	equ	0xFE5
  2092                           plusw1	equ	0xFE3
  2093                           fsr1h	equ	0xFE2
  2094                           fsr1l	equ	0xFE1
  2095                           indf2	equ	0xFDF
  2096                           postinc2	equ	0xFDE
  2097                           plusw2	equ	0xFDB
  2098                           fsr2h	equ	0xFDA
  2099                           fsr2l	equ	0xFD9
  2100                           status	equ	0xFD8
  2101                           
  2102 ;; *************** function _i2c_readNBytes *****************
  2103 ;; Defined at:
  2104 ;;		line 156 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;  address         1    wreg     unsigned char 
  2107 ;;  data            2   26[COMRAM] PTR void 
  2108 ;;		 -> readIoExpander@rec(1), 
  2109 ;;  len             2   28[COMRAM] unsigned int 
  2110 ;; Auto vars:     Size  Location     Type
  2111 ;;  address         1   30[COMRAM] unsigned char 
  2112 ;; Return value:  Size  Location     Type
  2113 ;;                  1    wreg      void 
  2114 ;; Registers used:
  2115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2116 ;; Tracked objects:
  2117 ;;		On entry : 0/0
  2118 ;;		On exit  : 0/0
  2119 ;;		Unchanged: 0/0
  2120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2121 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2122 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2124 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2125 ;;Total ram usage:        5 bytes
  2126 ;; Hardware stack levels used:    1
  2127 ;; Hardware stack levels required when called:   14
  2128 ;; This function calls:
  2129 ;;		_i2c_close
  2130 ;;		_i2c_masterRead
  2131 ;;		_i2c_open
  2132 ;;		_i2c_setBuffer
  2133 ;; This function is called by:
  2134 ;;		_readIoExpander
  2135 ;; This function uses a non-reentrant model
  2136 ;;
  2137                           
  2138                           	psect	text7
  2139  000F00                     __ptext7:
  2140                           	opt stack 0
  2141  000F00                     _i2c_readNBytes:
  2142                           	opt stack 13
  2143                           
  2144                           ;incstack = 0
  2145                           ;i2c_readNBytes@address stored from wreg
  2146  000F00  6E1F               	movwf	i2c_readNBytes@address,c
  2147  000F02                     
  2148                           ;i2c_simple_master.c: 158: while(!i2c_open(address));
  2149  000F02  501F               	movf	i2c_readNBytes@address,w,c
  2150  000F04  EC1E  F003         	call	_i2c_open
  2151  000F08  0900               	iorlw	0
  2152  000F0A  B4D8               	btfsc	status,2,c
  2153  000F0C  D7FA               	goto	l4202
  2154                           
  2155                           ;i2c_simple_master.c: 159: i2c_setBuffer(data,len);
  2156  000F0E  C01B  F016         	movff	i2c_readNBytes@data,i2c_setBuffer@buffer
  2157  000F12  C01C  F017         	movff	i2c_readNBytes@data+1,i2c_setBuffer@buffer+1
  2158  000F16  C01D  F018         	movff	i2c_readNBytes@len,i2c_setBuffer@bufferSize
  2159  000F1A  C01E  F019         	movff	i2c_readNBytes@len+1,i2c_setBuffer@bufferSize+1
  2160  000F1E  EC92  F008         	call	_i2c_setBuffer	;wreg free
  2161                           
  2162                           ;i2c_simple_master.c: 160: i2c_masterRead();
  2163  000F22  ECD8  F009         	call	_i2c_masterRead	;wreg free
  2164  000F26  EC3E  F008         	call	_i2c_close	;wreg free
  2165  000F2A  06E8               	decf	wreg,f,c
  2166  000F2C  A4D8               	btfss	status,2,c
  2167  000F2E  0012               	return	
  2168  000F30  D7FA               	goto	l605
  2169  000F32                     __end_of_i2c_readNBytes:
  2170                           	opt stack 0
  2171                           tblptru	equ	0xFF8
  2172                           tblptrh	equ	0xFF7
  2173                           tblptrl	equ	0xFF6
  2174                           tablat	equ	0xFF5
  2175                           prodl	equ	0xFF3
  2176                           intcon	equ	0xFF2
  2177                           postinc0	equ	0xFEE
  2178                           wreg	equ	0xFE8
  2179                           indf1	equ	0xFE7
  2180                           postdec1	equ	0xFE5
  2181                           plusw1	equ	0xFE3
  2182                           fsr1h	equ	0xFE2
  2183                           fsr1l	equ	0xFE1
  2184                           indf2	equ	0xFDF
  2185                           postinc2	equ	0xFDE
  2186                           plusw2	equ	0xFDB
  2187                           fsr2h	equ	0xFDA
  2188                           fsr2l	equ	0xFD9
  2189                           status	equ	0xFD8
  2190                           
  2191 ;; *************** function _i2c_open *****************
  2192 ;; Defined at:
  2193 ;;		line 116 in file "mcc_generated_files/drivers/i2c_master.c"
  2194 ;; Parameters:    Size  Location     Type
  2195 ;;  address         1    wreg     unsigned char 
  2196 ;; Auto vars:     Size  Location     Type
  2197 ;;  address         1   24[COMRAM] unsigned char 
  2198 ;;  ret             1   25[COMRAM] enum E11785
  2199 ;; Return value:  Size  Location     Type
  2200 ;;                  1    wreg      enum E11785
  2201 ;; Registers used:
  2202 ;;		wreg, status,2, status,0, cstack
  2203 ;; Tracked objects:
  2204 ;;		On entry : 0/0
  2205 ;;		On exit  : 0/0
  2206 ;;		Unchanged: 0/0
  2207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2209 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2211 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2212 ;;Total ram usage:        2 bytes
  2213 ;; Hardware stack levels used:    1
  2214 ;; Hardware stack levels required when called:    7
  2215 ;; This function calls:
  2216 ;;		_i2c1_driver_open
  2217 ;;		_i2c1_driver_setBusCollisionISR
  2218 ;;		_i2c1_driver_setI2cISR
  2219 ;;		_mssp1_clearIRQ
  2220 ;; This function is called by:
  2221 ;;		_i2c_writeNBytes
  2222 ;;		_i2c_readNBytes
  2223 ;;		_i2c_write1ByteRegister
  2224 ;;		_i2c_read1ByteRegister
  2225 ;;		_i2c_read2ByteRegister
  2226 ;;		_i2c_write2ByteRegister
  2227 ;;		_i2c_readDataBlock
  2228 ;; This function uses a non-reentrant model
  2229 ;;
  2230                           
  2231                           	psect	text8
  2232  00063C                     __ptext8:
  2233                           	opt stack 0
  2234  00063C                     _i2c_open:
  2235                           	opt stack 22
  2236                           
  2237                           ;incstack = 0
  2238                           ;i2c_open@address stored from wreg
  2239  00063C  6E19               	movwf	i2c_open@address,c
  2240                           
  2241                           ;i2c_master.c: 118: i2c_error_t ret = I2C_BUSY;
  2242  00063E  0E01               	movlw	1
  2243  000640  6E1A               	movwf	i2c_open@ret,c
  2244                           
  2245                           ;i2c_master.c: 120: if(!i2c_status.inUse)
  2246  000642  0100               	movlb	0	; () banked
  2247  000644  B360               	btfsc	_i2c_status& (0+255),1,b
  2248  000646  D050               	goto	l362
  2249                           
  2250                           ; BSR set to: 0
  2251                           ;i2c_master.c: 121: {
  2252                           ;i2c_master.c: 122: i2c_status.address = address;
  2253  000648  C019  F061         	movff	i2c_open@address,_i2c_status+1
  2254                           
  2255                           ; BSR set to: 0
  2256                           ;i2c_master.c: 123: i2c_status.busy = 0;
  2257  00064C  9160               	bcf	_i2c_status& (0+255),0,b
  2258                           
  2259                           ; BSR set to: 0
  2260                           ;i2c_master.c: 124: i2c_status.inUse = 1;
  2261  00064E  8360               	bsf	_i2c_status& (0+255),1,b
  2262                           
  2263                           ; BSR set to: 0
  2264                           ;i2c_master.c: 125: i2c_status.addressNACKCheck = 0;
  2265  000650  9760               	bcf	_i2c_status& (0+255),3,b
  2266                           
  2267                           ; BSR set to: 0
  2268                           ;i2c_master.c: 126: i2c_status.state = I2C_RESET;
  2269  000652  0E0E               	movlw	14
  2270  000654  6F6A               	movwf	(_i2c_status+10)& (0+255),b
  2271                           
  2272                           ; BSR set to: 0
  2273                           ;i2c_master.c: 127: i2c_status.time_out_value = 500;
  2274  000656  0E01               	movlw	1
  2275  000658  6F69               	movwf	(_i2c_status+9)& (0+255),b
  2276  00065A  0EF4               	movlw	244
  2277  00065C  6F68               	movwf	(_i2c_status+8)& (0+255),b
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;i2c_master.c: 128: i2c_status.bufferFree = 1;
  2281  00065E  8560               	bsf	_i2c_status& (0+255),2,b
  2282                           
  2283                           ; BSR set to: 0
  2284                           ;i2c_master.c: 131: i2c_status.callbackTable[i2c_dataComplete]=returnStop;
  2285  000660  0E9E               	movlw	low _returnStop
  2286  000662  6F6C               	movwf	(_i2c_status+12)& (0+255),b
  2287  000664  0E13               	movlw	high _returnStop
  2288  000666  6F6D               	movwf	(_i2c_status+13)& (0+255),b
  2289  000668  0E00               	movlw	low (_returnStop shr (0+16))
  2290  00066A  6F6E               	movwf	(_i2c_status+14)& (0+255),b
  2291                           
  2292                           ; BSR set to: 0
  2293                           ;i2c_master.c: 132: i2c_status.callbackPayload[i2c_dataComplete] = (0);
  2294  00066C  0E00               	movlw	0
  2295  00066E  6F7E               	movwf	(_i2c_status+30)& (0+255),b
  2296  000670  0E00               	movlw	0
  2297  000672  6F7F               	movwf	(_i2c_status+31)& (0+255),b
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;i2c_master.c: 133: i2c_status.callbackTable[i2c_writeCollision]=returnStop;
  2301  000674  0E9E               	movlw	low _returnStop
  2302  000676  6F6F               	movwf	(_i2c_status+15)& (0+255),b
  2303  000678  0E13               	movlw	high _returnStop
  2304  00067A  6F70               	movwf	(_i2c_status+16)& (0+255),b
  2305  00067C  0E00               	movlw	low (_returnStop shr (0+16))
  2306  00067E  6F71               	movwf	(_i2c_status+17)& (0+255),b
  2307                           
  2308                           ; BSR set to: 0
  2309                           ;i2c_master.c: 134: i2c_status.callbackPayload[i2c_writeCollision] = (0);
  2310  000680  0E00               	movlw	0
  2311  000682  6F80               	movwf	(_i2c_status+32)& (0+255),b
  2312  000684  0E00               	movlw	0
  2313  000686  6F81               	movwf	(_i2c_status+33)& (0+255),b
  2314                           
  2315                           ; BSR set to: 0
  2316                           ;i2c_master.c: 135: i2c_status.callbackTable[i2c_addressNACK]=returnStop;
  2317  000688  0E9E               	movlw	low _returnStop
  2318  00068A  6F72               	movwf	(_i2c_status+18)& (0+255),b
  2319  00068C  0E13               	movlw	high _returnStop
  2320  00068E  6F73               	movwf	(_i2c_status+19)& (0+255),b
  2321  000690  0E00               	movlw	low (_returnStop shr (0+16))
  2322  000692  6F74               	movwf	(_i2c_status+20)& (0+255),b
  2323                           
  2324                           ; BSR set to: 0
  2325                           ;i2c_master.c: 136: i2c_status.callbackPayload[i2c_addressNACK] = (0);
  2326  000694  0E00               	movlw	0
  2327  000696  6F82               	movwf	(_i2c_status+34)& (0+255),b
  2328  000698  0E00               	movlw	0
  2329  00069A  6F83               	movwf	(_i2c_status+35)& (0+255),b
  2330                           
  2331                           ; BSR set to: 0
  2332                           ;i2c_master.c: 137: i2c_status.callbackTable[i2c_dataNACK]=returnStop;
  2333  00069C  0E9E               	movlw	low _returnStop
  2334  00069E  6F75               	movwf	(_i2c_status+21)& (0+255),b
  2335  0006A0  0E13               	movlw	high _returnStop
  2336  0006A2  6F76               	movwf	(_i2c_status+22)& (0+255),b
  2337  0006A4  0E00               	movlw	low (_returnStop shr (0+16))
  2338  0006A6  6F77               	movwf	(_i2c_status+23)& (0+255),b
  2339                           
  2340                           ; BSR set to: 0
  2341                           ;i2c_master.c: 138: i2c_status.callbackPayload[i2c_dataNACK] = (0);
  2342  0006A8  0E00               	movlw	0
  2343  0006AA  6F84               	movwf	(_i2c_status+36)& (0+255),b
  2344  0006AC  0E00               	movlw	0
  2345  0006AE  6F85               	movwf	(_i2c_status+37)& (0+255),b
  2346                           
  2347                           ; BSR set to: 0
  2348                           ;i2c_master.c: 139: i2c_status.callbackTable[i2c_timeOut]=returnReset;
  2349  0006B0  0E94               	movlw	low _returnReset
  2350  0006B2  6F78               	movwf	(_i2c_status+24)& (0+255),b
  2351  0006B4  0E13               	movlw	high _returnReset
  2352  0006B6  6F79               	movwf	(_i2c_status+25)& (0+255),b
  2353  0006B8  0E00               	movlw	low (_returnReset shr (0+16))
  2354  0006BA  6F7A               	movwf	(_i2c_status+26)& (0+255),b
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;i2c_master.c: 140: i2c_status.callbackPayload[i2c_timeOut] = (0);
  2358  0006BC  0E00               	movlw	0
  2359  0006BE  6F86               	movwf	(_i2c_status+38)& (0+255),b
  2360  0006C0  0E00               	movlw	0
  2361  0006C2  6F87               	movwf	(_i2c_status+39)& (0+255),b
  2362                           
  2363                           ; BSR set to: 0
  2364                           ;i2c_master.c: 142: i2c1_driver_open();
  2365  0006C4  ECD1  F008         	call	_i2c1_driver_open	;wreg free
  2366                           
  2367                           ;i2c_master.c: 143: mssp1_clearIRQ();
  2368  0006C8  EC0C  F00A         	call	_mssp1_clearIRQ	;wreg free
  2369                           
  2370                           ;i2c_master.c: 145: i2c1_driver_setBusCollisionISR(i2c_busCollisionISR);
  2371  0006CC  0E36               	movlw	low _i2c_busCollisionISR
  2372  0006CE  6E16               	movwf	i2c1_driver_setBusCollisionISR@f,c
  2373  0006D0  0E14               	movlw	high _i2c_busCollisionISR
  2374  0006D2  6E17               	movwf	i2c1_driver_setBusCollisionISR@f+1,c
  2375  0006D4  EC6C  F009         	call	_i2c1_driver_setBusCollisionISR	;wreg free
  2376                           
  2377                           ;i2c_master.c: 146: i2c1_driver_setI2cISR(i2c_ISR);
  2378  0006D8  0EE2               	movlw	low _i2c_ISR
  2379  0006DA  6E16               	movwf	i2c1_driver_setI2cISR@f,c
  2380  0006DC  0E0B               	movlw	high _i2c_ISR
  2381  0006DE  6E17               	movwf	i2c1_driver_setI2cISR@f+1,c
  2382  0006E0  EC65  F009         	call	_i2c1_driver_setI2cISR	;wreg free
  2383                           
  2384                           ;i2c_master.c: 151: ret = I2C_NOERR;
  2385  0006E4  0E00               	movlw	0
  2386  0006E6  6E1A               	movwf	i2c_open@ret,c
  2387  0006E8                     l362:
  2388                           
  2389                           ;i2c_master.c: 152: }
  2390                           ;i2c_master.c: 153: return ret;
  2391  0006E8  501A               	movf	i2c_open@ret,w,c
  2392  0006EA  0012               	return	
  2393  0006EC                     __end_of_i2c_open:
  2394                           	opt stack 0
  2395                           tblptru	equ	0xFF8
  2396                           tblptrh	equ	0xFF7
  2397                           tblptrl	equ	0xFF6
  2398                           tablat	equ	0xFF5
  2399                           prodl	equ	0xFF3
  2400                           intcon	equ	0xFF2
  2401                           postinc0	equ	0xFEE
  2402                           wreg	equ	0xFE8
  2403                           indf1	equ	0xFE7
  2404                           postdec1	equ	0xFE5
  2405                           plusw1	equ	0xFE3
  2406                           fsr1h	equ	0xFE2
  2407                           fsr1l	equ	0xFE1
  2408                           indf2	equ	0xFDF
  2409                           postinc2	equ	0xFDE
  2410                           plusw2	equ	0xFDB
  2411                           fsr2h	equ	0xFDA
  2412                           fsr2l	equ	0xFD9
  2413                           status	equ	0xFD8
  2414                           
  2415 ;; *************** function _i2c1_driver_setI2cISR *****************
  2416 ;; Defined at:
  2417 ;;		line 262 in file "mcc_generated_files/i2c1_driver.c"
  2418 ;; Parameters:    Size  Location     Type
  2419 ;;  f               3   21[COMRAM] PTR void 
  2420 ;;		 -> i2c_ISR(1), 
  2421 ;; Auto vars:     Size  Location     Type
  2422 ;;		None
  2423 ;; Return value:  Size  Location     Type
  2424 ;;                  1    wreg      void 
  2425 ;; Registers used:
  2426 ;;		wreg, status,2, status,0
  2427 ;; Tracked objects:
  2428 ;;		On entry : 0/0
  2429 ;;		On exit  : 0/0
  2430 ;;		Unchanged: 0/0
  2431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2432 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2435 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2436 ;;Total ram usage:        3 bytes
  2437 ;; Hardware stack levels used:    1
  2438 ;; Hardware stack levels required when called:    6
  2439 ;; This function calls:
  2440 ;;		Nothing
  2441 ;; This function is called by:
  2442 ;;		_i2c_open
  2443 ;; This function uses a non-reentrant model
  2444 ;;
  2445                           
  2446                           	psect	text9
  2447  0012CA                     __ptext9:
  2448                           	opt stack 0
  2449  0012CA                     _i2c1_driver_setI2cISR:
  2450                           	opt stack 22
  2451                           
  2452                           ;i2c1_driver.c: 263: i2c1_driver_i2cISR = f;
  2453                           
  2454                           ;incstack = 0
  2455  0012CA  C016  F041         	movff	i2c1_driver_setI2cISR@f,_i2c1_driver_i2cISR
  2456  0012CE  C017  F042         	movff	i2c1_driver_setI2cISR@f+1,_i2c1_driver_i2cISR+1
  2457  0012D2  C018  F043         	movff	i2c1_driver_setI2cISR@f+2,_i2c1_driver_i2cISR+2
  2458  0012D6  0012               	return		;funcret
  2459  0012D8                     __end_of_i2c1_driver_setI2cISR:
  2460                           	opt stack 0
  2461                           tblptru	equ	0xFF8
  2462                           tblptrh	equ	0xFF7
  2463                           tblptrl	equ	0xFF6
  2464                           tablat	equ	0xFF5
  2465                           prodl	equ	0xFF3
  2466                           intcon	equ	0xFF2
  2467                           postinc0	equ	0xFEE
  2468                           wreg	equ	0xFE8
  2469                           indf1	equ	0xFE7
  2470                           postdec1	equ	0xFE5
  2471                           plusw1	equ	0xFE3
  2472                           fsr1h	equ	0xFE2
  2473                           fsr1l	equ	0xFE1
  2474                           indf2	equ	0xFDF
  2475                           postinc2	equ	0xFDE
  2476                           plusw2	equ	0xFDB
  2477                           fsr2h	equ	0xFDA
  2478                           fsr2l	equ	0xFD9
  2479                           status	equ	0xFD8
  2480                           
  2481 ;; *************** function _i2c1_driver_setBusCollisionISR *****************
  2482 ;; Defined at:
  2483 ;;		line 258 in file "mcc_generated_files/i2c1_driver.c"
  2484 ;; Parameters:    Size  Location     Type
  2485 ;;  f               3   21[COMRAM] PTR void 
  2486 ;;		 -> i2c_busCollisionISR(1), 
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;		None
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  1    wreg      void 
  2491 ;; Registers used:
  2492 ;;		wreg, status,2, status,0
  2493 ;; Tracked objects:
  2494 ;;		On entry : 0/0
  2495 ;;		On exit  : 0/0
  2496 ;;		Unchanged: 0/0
  2497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2498 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2501 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2502 ;;Total ram usage:        3 bytes
  2503 ;; Hardware stack levels used:    1
  2504 ;; Hardware stack levels required when called:    6
  2505 ;; This function calls:
  2506 ;;		Nothing
  2507 ;; This function is called by:
  2508 ;;		_i2c_open
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           	psect	text10
  2513  0012D8                     __ptext10:
  2514                           	opt stack 0
  2515  0012D8                     _i2c1_driver_setBusCollisionISR:
  2516                           	opt stack 22
  2517                           
  2518                           ;i2c1_driver.c: 259: i2c1_driver_busCollisionISR = f;
  2519                           
  2520                           ;incstack = 0
  2521  0012D8  C016  F044         	movff	i2c1_driver_setBusCollisionISR@f,_i2c1_driver_busCollisionISR
  2522  0012DC  C017  F045         	movff	i2c1_driver_setBusCollisionISR@f+1,_i2c1_driver_busCollisionISR+1
  2523  0012E0  C018  F046         	movff	i2c1_driver_setBusCollisionISR@f+2,_i2c1_driver_busCollisionISR+2
  2524  0012E4  0012               	return		;funcret
  2525  0012E6                     __end_of_i2c1_driver_setBusCollisionISR:
  2526                           	opt stack 0
  2527                           tblptru	equ	0xFF8
  2528                           tblptrh	equ	0xFF7
  2529                           tblptrl	equ	0xFF6
  2530                           tablat	equ	0xFF5
  2531                           prodl	equ	0xFF3
  2532                           intcon	equ	0xFF2
  2533                           postinc0	equ	0xFEE
  2534                           wreg	equ	0xFE8
  2535                           indf1	equ	0xFE7
  2536                           postdec1	equ	0xFE5
  2537                           plusw1	equ	0xFE3
  2538                           fsr1h	equ	0xFE2
  2539                           fsr1l	equ	0xFE1
  2540                           indf2	equ	0xFDF
  2541                           postinc2	equ	0xFDE
  2542                           plusw2	equ	0xFDB
  2543                           fsr2h	equ	0xFDA
  2544                           fsr2l	equ	0xFD9
  2545                           status	equ	0xFD8
  2546                           
  2547 ;; *************** function _i2c1_driver_open *****************
  2548 ;; Defined at:
  2549 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
  2550 ;; Parameters:    Size  Location     Type
  2551 ;;		None
  2552 ;; Auto vars:     Size  Location     Type
  2553 ;;		None
  2554 ;; Return value:  Size  Location     Type
  2555 ;;		None               void
  2556 ;; Registers used:
  2557 ;;		wreg, status,2
  2558 ;; Tracked objects:
  2559 ;;		On entry : 0/0
  2560 ;;		On exit  : 0/0
  2561 ;;		Unchanged: 0/0
  2562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2567 ;;Total ram usage:        0 bytes
  2568 ;; Hardware stack levels used:    1
  2569 ;; Hardware stack levels required when called:    6
  2570 ;; This function calls:
  2571 ;;		Nothing
  2572 ;; This function is called by:
  2573 ;;		_i2c_open
  2574 ;; This function uses a non-reentrant model
  2575 ;;
  2576                           
  2577                           	psect	text11
  2578  0011A2                     __ptext11:
  2579                           	opt stack 0
  2580  0011A2                     _i2c1_driver_open:
  2581                           	opt stack 22
  2582                           
  2583                           ;i2c1_driver.c: 85: if(!SSP1CON1bits.SSPEN)
  2584                           
  2585                           ;incstack = 0
  2586  0011A2  BA96               	btfsc	3990,5,c	;volatile
  2587  0011A4  0012               	return	
  2588                           
  2589                           ;i2c1_driver.c: 86: {
  2590                           ;i2c1_driver.c: 87: SSP1STAT = 0x00;
  2591  0011A6  0E00               	movlw	0
  2592  0011A8  6E95               	movwf	3989,c	;volatile
  2593                           
  2594                           ;i2c1_driver.c: 88: SSP1CON1 = 0x28;
  2595  0011AA  0E28               	movlw	40
  2596  0011AC  6E96               	movwf	3990,c	;volatile
  2597                           
  2598                           ;i2c1_driver.c: 89: SSP1CON2 = 0x00;
  2599  0011AE  0E00               	movlw	0
  2600  0011B0  6E97               	movwf	3991,c	;volatile
  2601                           
  2602                           ;i2c1_driver.c: 90: SSP1ADD = 0x4;
  2603  0011B2  0E04               	movlw	4
  2604  0011B4  6E93               	movwf	3987,c	;volatile
  2605                           
  2606                           ;i2c1_driver.c: 93: else
  2607                           ;i2c1_driver.c: 94: return 0;
  2608                           ;	Return value of _i2c1_driver_open is never used
  2609                           
  2610                           ;i2c1_driver.c: 92: }
  2611                           
  2612                           ;i2c1_driver.c: 91: return 1;
  2613                           ;	Return value of _i2c1_driver_open is never used
  2614  0011B6  0012               	return	
  2615  0011B8                     __end_of_i2c1_driver_open:
  2616                           	opt stack 0
  2617                           tblptru	equ	0xFF8
  2618                           tblptrh	equ	0xFF7
  2619                           tblptrl	equ	0xFF6
  2620                           tablat	equ	0xFF5
  2621                           prodl	equ	0xFF3
  2622                           intcon	equ	0xFF2
  2623                           postinc0	equ	0xFEE
  2624                           wreg	equ	0xFE8
  2625                           indf1	equ	0xFE7
  2626                           postdec1	equ	0xFE5
  2627                           plusw1	equ	0xFE3
  2628                           fsr1h	equ	0xFE2
  2629                           fsr1l	equ	0xFE1
  2630                           indf2	equ	0xFDF
  2631                           postinc2	equ	0xFDE
  2632                           plusw2	equ	0xFDB
  2633                           fsr2h	equ	0xFDA
  2634                           fsr2l	equ	0xFD9
  2635                           status	equ	0xFD8
  2636                           
  2637 ;; *************** function _i2c_masterRead *****************
  2638 ;; Defined at:
  2639 ;;		line 217 in file "mcc_generated_files/drivers/i2c_master.c"
  2640 ;; Parameters:    Size  Location     Type
  2641 ;;		None
  2642 ;; Auto vars:     Size  Location     Type
  2643 ;;		None
  2644 ;; Return value:  Size  Location     Type
  2645 ;;                  1    wreg      enum E11785
  2646 ;; Registers used:
  2647 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2648 ;; Tracked objects:
  2649 ;;		On entry : 0/0
  2650 ;;		On exit  : 0/0
  2651 ;;		Unchanged: 0/0
  2652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2656 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2657 ;;Total ram usage:        0 bytes
  2658 ;; Hardware stack levels used:    1
  2659 ;; Hardware stack levels required when called:   13
  2660 ;; This function calls:
  2661 ;;		_i2c_masterOperation
  2662 ;; This function is called by:
  2663 ;;		_i2c_readNBytes
  2664 ;; This function uses a non-reentrant model
  2665 ;;
  2666                           
  2667                           	psect	text12
  2668  0013B0                     __ptext12:
  2669                           	opt stack 0
  2670  0013B0                     _i2c_masterRead:
  2671                           	opt stack 13
  2672                           
  2673                           ;i2c_master.c: 219: return i2c_masterOperation(1);
  2674                           ;	Return value of _i2c_masterRead is never used
  2675                           
  2676                           ;incstack = 0
  2677  0013B0  0E01               	movlw	1
  2678  0013B2  EC99  F007         	call	_i2c_masterOperation
  2679  0013B6  0012               	return	
  2680  0013B8                     __end_of_i2c_masterRead:
  2681                           	opt stack 0
  2682                           tblptru	equ	0xFF8
  2683                           tblptrh	equ	0xFF7
  2684                           tblptrl	equ	0xFF6
  2685                           tablat	equ	0xFF5
  2686                           prodl	equ	0xFF3
  2687                           intcon	equ	0xFF2
  2688                           postinc0	equ	0xFEE
  2689                           wreg	equ	0xFE8
  2690                           indf1	equ	0xFE7
  2691                           postdec1	equ	0xFE5
  2692                           plusw1	equ	0xFE3
  2693                           fsr1h	equ	0xFE2
  2694                           fsr1l	equ	0xFE1
  2695                           indf2	equ	0xFDF
  2696                           postinc2	equ	0xFDE
  2697                           plusw2	equ	0xFDB
  2698                           fsr2h	equ	0xFDA
  2699                           fsr2l	equ	0xFD9
  2700                           status	equ	0xFD8
  2701                           
  2702 ;; *************** function _i2c_masterOperation *****************
  2703 ;; Defined at:
  2704 ;;		line 193 in file "mcc_generated_files/drivers/i2c_master.c"
  2705 ;; Parameters:    Size  Location     Type
  2706 ;;  read            1    wreg     unsigned char 
  2707 ;; Auto vars:     Size  Location     Type
  2708 ;;  read            1   24[COMRAM] unsigned char 
  2709 ;;  ret             1   25[COMRAM] enum E11785
  2710 ;; Return value:  Size  Location     Type
  2711 ;;                  1    wreg      enum E11785
  2712 ;; Registers used:
  2713 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2714 ;; Tracked objects:
  2715 ;;		On entry : 0/0
  2716 ;;		On exit  : 0/0
  2717 ;;		Unchanged: 0/0
  2718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2720 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2722 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2723 ;;Total ram usage:        2 bytes
  2724 ;; Hardware stack levels used:    1
  2725 ;; Hardware stack levels required when called:   12
  2726 ;; This function calls:
  2727 ;;		_i2c1_driver_start
  2728 ;;		_i2c_poller
  2729 ;;		_mssp1_IRQisEnabled
  2730 ;; This function is called by:
  2731 ;;		_i2c_masterRead
  2732 ;;		_i2c_masterWrite
  2733 ;; This function uses a non-reentrant model
  2734 ;;
  2735                           
  2736                           	psect	text13
  2737  000F32                     __ptext13:
  2738                           	opt stack 0
  2739  000F32                     _i2c_masterOperation:
  2740                           	opt stack 16
  2741                           
  2742                           ;incstack = 0
  2743                           ;i2c_masterOperation@read stored from wreg
  2744  000F32  6E19               	movwf	i2c_masterOperation@read,c
  2745                           
  2746                           ;i2c_master.c: 195: i2c_error_t ret = I2C_BUSY;
  2747  000F34  0E01               	movlw	1
  2748  000F36  6E1A               	movwf	i2c_masterOperation@ret,c
  2749                           
  2750                           ;i2c_master.c: 196: if(!i2c_status.busy)
  2751  000F38  0100               	movlb	0	; () banked
  2752  000F3A  B160               	btfsc	_i2c_status& (0+255),0,b
  2753  000F3C  D011               	goto	l383
  2754                           
  2755                           ; BSR set to: 0
  2756                           ;i2c_master.c: 197: {
  2757                           ;i2c_master.c: 198: i2c_status.busy = 1;
  2758  000F3E  8160               	bsf	_i2c_status& (0+255),0,b
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;i2c_master.c: 199: ret = I2C_NOERR;
  2762  000F40  0E00               	movlw	0
  2763  000F42  6E1A               	movwf	i2c_masterOperation@ret,c
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;i2c_master.c: 201: if(read)
  2767  000F44  5019               	movf	i2c_masterOperation@read,w,c
  2768  000F46  B4D8               	btfsc	status,2,c
  2769  000F48  D002               	goto	l381
  2770                           
  2771                           ; BSR set to: 0
  2772                           ;i2c_master.c: 202: {
  2773                           ;i2c_master.c: 203: i2c_status.state = I2C_SEND_ADR_READ;
  2774  000F4A  0E01               	movlw	1
  2775  000F4C  D001               	goto	L3
  2776  000F4E                     l381:
  2777                           
  2778                           ; BSR set to: 0
  2779                           ;i2c_master.c: 205: else
  2780                           ;i2c_master.c: 206: {
  2781                           ;i2c_master.c: 207: i2c_status.state = I2C_SEND_ADR_WRITE;
  2782                           
  2783                           ; BSR set to: 0
  2784  000F4E  0E02               	movlw	2
  2785  000F50                     L3:
  2786  000F50  6F6A               	movwf	(_i2c_status+10)& (0+255),b
  2787                           
  2788                           ; BSR set to: 0
  2789                           ;i2c_master.c: 208: }
  2790                           ;i2c_master.c: 209: i2c1_driver_start();
  2791                           
  2792                           ; BSR set to: 0
  2793  000F52  EC29  F00A         	call	_i2c1_driver_start	;wreg free
  2794                           
  2795                           ;i2c_master.c: 211: if(! mssp1_IRQisEnabled())
  2796  000F56  EC29  F009         	call	_mssp1_IRQisEnabled	;wreg free
  2797  000F5A  A0D8               	btfss	status,0,c
  2798                           
  2799                           ;i2c_master.c: 212: i2c_poller();
  2800  000F5C  EC85  F008         	call	_i2c_poller	;wreg free
  2801  000F60                     l383:
  2802                           
  2803                           ;i2c_master.c: 213: }
  2804                           ;i2c_master.c: 214: return ret;
  2805  000F60  501A               	movf	i2c_masterOperation@ret,w,c
  2806  000F62  0012               	return	
  2807  000F64                     __end_of_i2c_masterOperation:
  2808                           	opt stack 0
  2809                           tblptru	equ	0xFF8
  2810                           tblptrh	equ	0xFF7
  2811                           tblptrl	equ	0xFF6
  2812                           tablat	equ	0xFF5
  2813                           prodl	equ	0xFF3
  2814                           intcon	equ	0xFF2
  2815                           postinc0	equ	0xFEE
  2816                           wreg	equ	0xFE8
  2817                           indf1	equ	0xFE7
  2818                           postdec1	equ	0xFE5
  2819                           plusw1	equ	0xFE3
  2820                           fsr1h	equ	0xFE2
  2821                           fsr1l	equ	0xFE1
  2822                           indf2	equ	0xFDF
  2823                           postinc2	equ	0xFDE
  2824                           plusw2	equ	0xFDB
  2825                           fsr2h	equ	0xFDA
  2826                           fsr2l	equ	0xFD9
  2827                           status	equ	0xFD8
  2828                           
  2829 ;; *************** function _mssp1_IRQisEnabled *****************
  2830 ;; Defined at:
  2831 ;;		line 43 in file "mcc_generated_files/i2c1_driver.c"
  2832 ;; Parameters:    Size  Location     Type
  2833 ;;		None
  2834 ;; Auto vars:     Size  Location     Type
  2835 ;;		None
  2836 ;; Return value:  Size  Location     Type
  2837 ;;		None               void
  2838 ;; Registers used:
  2839 ;;		wreg, status,0
  2840 ;; Tracked objects:
  2841 ;;		On entry : 0/0
  2842 ;;		On exit  : 0/0
  2843 ;;		Unchanged: 0/0
  2844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2847 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2848 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2849 ;;Total ram usage:        1 bytes
  2850 ;; Hardware stack levels used:    1
  2851 ;; Hardware stack levels required when called:    6
  2852 ;; This function calls:
  2853 ;;		Nothing
  2854 ;; This function is called by:
  2855 ;;		_i2c_masterOperation
  2856 ;; This function uses a non-reentrant model
  2857 ;;
  2858                           
  2859                           	psect	text14
  2860  001252                     __ptext14:
  2861                           	opt stack 0
  2862  001252                     _mssp1_IRQisEnabled:
  2863                           	opt stack 21
  2864                           
  2865                           ;i2c1_driver.c: 45: return PIE3bits.SSP1IE;
  2866                           
  2867                           ;incstack = 0
  2868  001252  010E               	movlb	14	; () banked
  2869  001254  A1C5               	btfss	197,0,b	;volatile
  2870  001256  D003               	goto	u2100
  2871  001258  6A16               	clrf	??_mssp1_IRQisEnabled& (0+255),c
  2872  00125A  2A16               	incf	??_mssp1_IRQisEnabled& (0+255),f,c
  2873  00125C  D001               	goto	u2108
  2874  00125E                     u2100:
  2875  00125E  6A16               	clrf	??_mssp1_IRQisEnabled& (0+255),c
  2876  001260                     u2108:
  2877  001260  3016               	rrcf	??_mssp1_IRQisEnabled,w,c
  2878  001262  0012               	return	
  2879  001264                     __end_of_mssp1_IRQisEnabled:
  2880                           	opt stack 0
  2881                           tblptru	equ	0xFF8
  2882                           tblptrh	equ	0xFF7
  2883                           tblptrl	equ	0xFF6
  2884                           tablat	equ	0xFF5
  2885                           prodl	equ	0xFF3
  2886                           intcon	equ	0xFF2
  2887                           postinc0	equ	0xFEE
  2888                           wreg	equ	0xFE8
  2889                           indf1	equ	0xFE7
  2890                           postdec1	equ	0xFE5
  2891                           plusw1	equ	0xFE3
  2892                           fsr1h	equ	0xFE2
  2893                           fsr1l	equ	0xFE1
  2894                           indf2	equ	0xFDF
  2895                           postinc2	equ	0xFDE
  2896                           plusw2	equ	0xFDB
  2897                           fsr2h	equ	0xFDA
  2898                           fsr2l	equ	0xFD9
  2899                           status	equ	0xFD8
  2900                           
  2901 ;; *************** function _i2c_poller *****************
  2902 ;; Defined at:
  2903 ;;		line 230 in file "mcc_generated_files/drivers/i2c_master.c"
  2904 ;; Parameters:    Size  Location     Type
  2905 ;;		None
  2906 ;; Auto vars:     Size  Location     Type
  2907 ;;		None
  2908 ;; Return value:  Size  Location     Type
  2909 ;;                  1    wreg      void 
  2910 ;; Registers used:
  2911 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2912 ;; Tracked objects:
  2913 ;;		On entry : 0/0
  2914 ;;		On exit  : 0/0
  2915 ;;		Unchanged: 0/0
  2916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2921 ;;Total ram usage:        0 bytes
  2922 ;; Hardware stack levels used:    1
  2923 ;; Hardware stack levels required when called:   11
  2924 ;; This function calls:
  2925 ;;		_i2c_ISR
  2926 ;;		_mssp1_waitForEvent
  2927 ;; This function is called by:
  2928 ;;		_i2c_masterOperation
  2929 ;; This function uses a non-reentrant model
  2930 ;;
  2931                           
  2932                           	psect	text15
  2933  00110A                     __ptext15:
  2934                           	opt stack 0
  2935  00110A                     _i2c_poller:
  2936                           	opt stack 16
  2937                           
  2938                           ;i2c_master.c: 232: while(i2c_status.busy)
  2939                           
  2940                           ;incstack = 0
  2941  00110A  D008               	goto	l393
  2942  00110C                     
  2943                           ;i2c_master.c: 233: {
  2944                           ;i2c_master.c: 234: mssp1_waitForEvent((0));
  2945  00110C  0E00               	movlw	0
  2946  00110E  6E16               	movwf	mssp1_waitForEvent@timeout,c
  2947  001110  0E00               	movlw	0
  2948  001112  6E17               	movwf	mssp1_waitForEvent@timeout+1,c
  2949  001114  ECDC  F008         	call	_mssp1_waitForEvent	;wreg free
  2950                           
  2951                           ;i2c_master.c: 235: i2c_ISR();
  2952  001118  ECF1  F005         	call	_i2c_ISR	;wreg free
  2953  00111C                     l393:
  2954  00111C  0100               	movlb	0	; () banked
  2955  00111E  A160               	btfss	_i2c_status& (0+255),0,b
  2956  001120  0012               	return	
  2957  001122  D7F4               	goto	l394
  2958  001124                     __end_of_i2c_poller:
  2959                           	opt stack 0
  2960                           tblptru	equ	0xFF8
  2961                           tblptrh	equ	0xFF7
  2962                           tblptrl	equ	0xFF6
  2963                           tablat	equ	0xFF5
  2964                           prodl	equ	0xFF3
  2965                           intcon	equ	0xFF2
  2966                           postinc0	equ	0xFEE
  2967                           wreg	equ	0xFE8
  2968                           indf1	equ	0xFE7
  2969                           postdec1	equ	0xFE5
  2970                           plusw1	equ	0xFE3
  2971                           fsr1h	equ	0xFE2
  2972                           fsr1l	equ	0xFE1
  2973                           indf2	equ	0xFDF
  2974                           postinc2	equ	0xFDE
  2975                           plusw2	equ	0xFDB
  2976                           fsr2h	equ	0xFDA
  2977                           fsr2l	equ	0xFD9
  2978                           status	equ	0xFD8
  2979                           
  2980 ;; *************** function _mssp1_waitForEvent *****************
  2981 ;; Defined at:
  2982 ;;		line 68 in file "mcc_generated_files/i2c1_driver.c"
  2983 ;; Parameters:    Size  Location     Type
  2984 ;;  timeout         2   21[COMRAM] PTR unsigned int 
  2985 ;;		 -> NULL(0), 
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;		None
  2988 ;; Return value:  Size  Location     Type
  2989 ;;                  1    wreg      void 
  2990 ;; Registers used:
  2991 ;;		wreg
  2992 ;; Tracked objects:
  2993 ;;		On entry : 0/0
  2994 ;;		On exit  : 0/0
  2995 ;;		Unchanged: 0/0
  2996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2997 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3000 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3001 ;;Total ram usage:        2 bytes
  3002 ;; Hardware stack levels used:    1
  3003 ;; Hardware stack levels required when called:    6
  3004 ;; This function calls:
  3005 ;;		Nothing
  3006 ;; This function is called by:
  3007 ;;		_i2c_poller
  3008 ;; This function uses a non-reentrant model
  3009 ;;
  3010                           
  3011                           	psect	text16
  3012  0011B8                     __ptext16:
  3013                           	opt stack 0
  3014  0011B8                     _mssp1_waitForEvent:
  3015                           	opt stack 20
  3016                           
  3017                           ;i2c1_driver.c: 73: if(PIR3bits.SSP1IF == 0)
  3018                           
  3019                           ; BSR set to: 0
  3020                           ;incstack = 0
  3021  0011B8  010E               	movlb	14	; () banked
  3022  0011BA  B1CD               	btfsc	205,0,b	;volatile
  3023  0011BC  0012               	return	
  3024  0011BE                     u2050:
  3025                           
  3026                           ;i2c1_driver.c: 76: {
  3027                           ;i2c1_driver.c: 77: if(PIR3bits.SSP1IF) break;
  3028                           
  3029                           ;i2c1_driver.c: 74: {
  3030                           ;i2c1_driver.c: 75: while(1)
  3031  0011BE  010E               	movlb	14	; () banked
  3032  0011C0  B1CD               	btfsc	205,0,b	;volatile
  3033  0011C2  0012               	return	
  3034                           
  3035                           ; BSR set to: 14
  3036                           ;i2c1_driver.c: 78: _delay((unsigned long)((100)*(2000000/4000000.0)));
  3037                           
  3038                           ; BSR set to: 14
  3039                           
  3040                           ; BSR set to: 14
  3041  0011C4  0E10               	movlw	16
  3042  0011C6                     u2767:
  3043  0011C6  2EE8               	decfsz	wreg,f,c
  3044  0011C8  D7FE               	bra	u2767
  3045  0011CA  D000               	nop2	
  3046  0011CC  D7F8               	goto	u2050
  3047  0011CE                     __end_of_mssp1_waitForEvent:
  3048                           	opt stack 0
  3049                           tblptru	equ	0xFF8
  3050                           tblptrh	equ	0xFF7
  3051                           tblptrl	equ	0xFF6
  3052                           tablat	equ	0xFF5
  3053                           prodl	equ	0xFF3
  3054                           intcon	equ	0xFF2
  3055                           postinc0	equ	0xFEE
  3056                           wreg	equ	0xFE8
  3057                           indf1	equ	0xFE7
  3058                           postdec1	equ	0xFE5
  3059                           plusw1	equ	0xFE3
  3060                           fsr1h	equ	0xFE2
  3061                           fsr1l	equ	0xFE1
  3062                           indf2	equ	0xFDF
  3063                           postinc2	equ	0xFDE
  3064                           plusw2	equ	0xFDB
  3065                           fsr2h	equ	0xFDA
  3066                           fsr2l	equ	0xFD9
  3067                           status	equ	0xFD8
  3068                           
  3069 ;; *************** function _i2c_ISR *****************
  3070 ;; Defined at:
  3071 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
  3072 ;; Parameters:    Size  Location     Type
  3073 ;;		None
  3074 ;; Auto vars:     Size  Location     Type
  3075 ;;		None
  3076 ;; Return value:  Size  Location     Type
  3077 ;;                  1    wreg      void 
  3078 ;; Registers used:
  3079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3080 ;; Tracked objects:
  3081 ;;		On entry : 0/0
  3082 ;;		On exit  : 0/0
  3083 ;;		Unchanged: 0/0
  3084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3089 ;;Total ram usage:        0 bytes
  3090 ;; Hardware stack levels used:    1
  3091 ;; Hardware stack levels required when called:   10
  3092 ;; This function calls:
  3093 ;;		_do_I2C_DO_ACK
  3094 ;;		_do_I2C_DO_ADDRESS_NACK
  3095 ;;		_do_I2C_DO_NACK_RESTART
  3096 ;;		_do_I2C_DO_NACK_STOP
  3097 ;;		_do_I2C_IDLE
  3098 ;;		_do_I2C_RCEN
  3099 ;;		_do_I2C_RESET
  3100 ;;		_do_I2C_RX
  3101 ;;		_do_I2C_SEND_ADR_READ
  3102 ;;		_do_I2C_SEND_ADR_WRITE
  3103 ;;		_do_I2C_SEND_RESTART
  3104 ;;		_do_I2C_SEND_RESTART_READ
  3105 ;;		_do_I2C_SEND_RESTART_WRITE
  3106 ;;		_do_I2C_SEND_STOP
  3107 ;;		_do_I2C_TX
  3108 ;;		_do_I2C_TX_EMPTY
  3109 ;;		_i2c1_driver_isNACK
  3110 ;;		_mssp1_clearIRQ
  3111 ;; This function is called by:
  3112 ;;		_i2c_open
  3113 ;;		_i2c_poller
  3114 ;;		_INTERRUPT_InterruptManager
  3115 ;; This function uses a non-reentrant model
  3116 ;;
  3117                           
  3118                           	psect	text17
  3119  000BE2                     __ptext17:
  3120                           	opt stack 0
  3121  000BE2                     _i2c_ISR:
  3122                           	opt stack 0
  3123                           
  3124                           ;Skip over the trampoline to the duplicate function for level 2
  3125  000BE2  B247               	btfsc	btemp,1,c
  3126  000BE4  EF89  F006         	goto	i2_i2c_ISR
  3127  000BE8                     _i2c_ISR$intlevel0:
  3128                           	opt stack 16
  3129                           
  3130                           ;i2c_master.c: 421: mssp1_clearIRQ();
  3131                           
  3132                           ;incstack = 0
  3133  000BE8  EC0C  F00A         	call	_mssp1_clearIRQ	;wreg free
  3134                           
  3135                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c1_driver_isNACK())
  3136  000BEC  0100               	movlb	0	; () banked
  3137  000BEE  A760               	btfss	_i2c_status& (0+255),3,b
  3138  000BF0  D007               	goto	l483
  3139                           
  3140                           ; BSR set to: 0
  3141  000BF2  EC08  F009         	call	_i2c1_driver_isNACK	;wreg free
  3142  000BF6  A0D8               	btfss	status,0,c
  3143  000BF8  D003               	goto	l483
  3144                           
  3145                           ;i2c_master.c: 428: {
  3146                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
  3147  000BFA  0E0F               	movlw	15
  3148  000BFC  0100               	movlb	0	; () banked
  3149  000BFE  6F6A               	movwf	(_i2c_status+10)& (0+255),b
  3150  000C00                     l483:
  3151                           
  3152                           ;i2c_master.c: 430: }
  3153                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
  3154                           
  3155                           ; BSR set to: 0
  3156  000C00  0100               	movlb	0	; () banked
  3157  000C02  516A               	movf	(_i2c_status+10)& (0+255),w,b
  3158  000C04  0D03               	mullw	3
  3159  000C06  0EC7               	movlw	low _fsmStateTable
  3160  000C08  24F3               	addwf	prodl,w,c
  3161  000C0A  6ED9               	movwf	fsr2l,c
  3162  000C0C  0E00               	movlw	high _fsmStateTable
  3163  000C0E  20F4               	addwfc	prodh,w,c
  3164  000C10  6EDA               	movwf	fsr2h,c
  3165  000C12  D801               	call	u2098
  3166  000C14  D00A               	goto	u2099
  3167  000C16                     u2098:
  3168  000C16  0005               	push	
  3169  000C18  6EFA               	movwf	pclath,c
  3170  000C1A  50DE               	movf	postinc2,w,c
  3171  000C1C  6EFD               	movwf	tosl,c
  3172  000C1E  50DE               	movf	postinc2,w,c
  3173  000C20  6EFE               	movwf	tosh,c
  3174  000C22  50DE               	movf	postinc2,w,c
  3175  000C24  6EFF               	movwf	tosu,c
  3176  000C26  50FA               	movf	pclath,w,c
  3177  000C28  0012               	return		;indir
  3178  000C2A                     u2099:
  3179  000C2A  0100               	movlb	0	; () banked
  3180  000C2C  6F6A               	movwf	(_i2c_status+10)& (0+255),b
  3181                           
  3182                           ; BSR set to: 0
  3183  000C2E  0012               	return		;funcret
  3184  000C30                     __end_of_i2c_ISR:
  3185                           	opt stack 0
  3186                           tosu	equ	0xFFF
  3187                           tosh	equ	0xFFE
  3188                           tosl	equ	0xFFD
  3189                           pclath	equ	0xFFA
  3190                           tblptru	equ	0xFF8
  3191                           tblptrh	equ	0xFF7
  3192                           tblptrl	equ	0xFF6
  3193                           tablat	equ	0xFF5
  3194                           prodh	equ	0xFF4
  3195                           prodl	equ	0xFF3
  3196                           intcon	equ	0xFF2
  3197                           postinc0	equ	0xFEE
  3198                           wreg	equ	0xFE8
  3199                           indf1	equ	0xFE7
  3200                           postdec1	equ	0xFE5
  3201                           plusw1	equ	0xFE3
  3202                           fsr1h	equ	0xFE2
  3203                           fsr1l	equ	0xFE1
  3204                           indf2	equ	0xFDF
  3205                           postinc2	equ	0xFDE
  3206                           plusw2	equ	0xFDB
  3207                           fsr2h	equ	0xFDA
  3208                           fsr2l	equ	0xFD9
  3209                           status	equ	0xFD8
  3210                           
  3211 ;; *************** function _do_I2C_RX *****************
  3212 ;; Defined at:
  3213 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
  3214 ;; Parameters:    Size  Location     Type
  3215 ;;		None
  3216 ;; Auto vars:     Size  Location     Type
  3217 ;;		None
  3218 ;; Return value:  Size  Location     Type
  3219 ;;                  1    wreg      enum E11956
  3220 ;; Registers used:
  3221 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3222 ;; Tracked objects:
  3223 ;;		On entry : 0/0
  3224 ;;		On exit  : 0/0
  3225 ;;		Unchanged: 0/0
  3226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3231 ;;Total ram usage:        0 bytes
  3232 ;; Hardware stack levels used:    1
  3233 ;; Hardware stack levels required when called:    9
  3234 ;; This function calls:
  3235 ;;		Absolute function
  3236 ;;		_do_I2C_DO_NACK_RESTART
  3237 ;;		_do_I2C_DO_NACK_STOP
  3238 ;;		_i2c1_driver_getRXData
  3239 ;;		_i2c1_driver_sendACK
  3240 ;;		_i2c_restartWrite
  3241 ;;		_rd1RegCompleteHandler
  3242 ;;		_rd2RegCompleteHandler
  3243 ;;		_rdBlkRegCompleteHandler
  3244 ;;		_returnReset
  3245 ;;		_returnStop
  3246 ;;		_wr1RegCompleteHandler
  3247 ;;		_wr2RegCompleteHandler
  3248 ;; This function is called by:
  3249 ;;		_i2c_ISR
  3250 ;;		i2_i2c_ISR
  3251 ;; This function uses a non-reentrant model
  3252 ;;
  3253                           
  3254                           	psect	text18
  3255  00094E                     __ptext18:
  3256                           	opt stack 0
  3257  00094E                     _do_I2C_RX:
  3258                           	opt stack 0
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;Skip over the trampoline to the duplicate function for level 2
  3262  00094E  B247               	btfsc	btemp,1,c
  3263  000950  EF5C  F005         	goto	i2_do_I2C_RX
  3264  000954                     _do_I2C_RX$intlevel0:
  3265                           	opt stack 16
  3266                           
  3267                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c1_driver_getRXData();
  3268                           
  3269                           ;incstack = 0
  3270  000954  EC21  F00A         	call	_i2c1_driver_getRXData	;wreg free
  3271  000958  C062  FFD9         	movff	_i2c_status+2,fsr2l
  3272  00095C  C063  FFDA         	movff	_i2c_status+3,fsr2h
  3273  000960  6EDF               	movwf	indf2,c
  3274  000962  0100               	movlb	0	; () banked
  3275  000964  4B62               	infsnz	(_i2c_status+2)& (0+255),f,b
  3276  000966  2B63               	incf	(_i2c_status+3)& (0+255),f,b
  3277                           
  3278                           ; BSR set to: 0
  3279                           ;i2c_master.c: 360: if(--i2c_status.data_length)
  3280  000968  0764               	decf	(_i2c_status+4)& (0+255),f,b
  3281  00096A  A0D8               	btfss	status,0,c
  3282  00096C  0765               	decf	(_i2c_status+5)& (0+255),f,b
  3283  00096E  5164               	movf	(_i2c_status+4)& (0+255),w,b
  3284  000970  1165               	iorwf	(_i2c_status+5)& (0+255),w,b
  3285  000972  B4D8               	btfsc	status,2,c
  3286  000974  D004               	goto	l459
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;i2c_master.c: 361: {
  3290                           ;i2c_master.c: 362: i2c1_driver_sendACK();
  3291  000976  EC06  F00A         	call	_i2c1_driver_sendACK	;wreg free
  3292                           
  3293                           ;i2c_master.c: 363: return I2C_RCEN;
  3294  00097A  0E05               	movlw	5
  3295                           
  3296                           ;i2c_master.c: 364: }
  3297  00097C  0012               	return	
  3298  00097E                     l459:
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;i2c_master.c: 365: else
  3302                           ;i2c_master.c: 366: {
  3303                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
  3304  00097E  8560               	bsf	_i2c_status& (0+255),2,b
  3305                           
  3306                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  3307  000980  D006               	goto	l462
  3308  000982                     
  3309                           ;i2c_master.c: 371: case i2c_restart_read:
  3310                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
  3311                           
  3312                           ; BSR set to: 0
  3313                           
  3314                           ; BSR set to: 0
  3315  000982  EC73  F009         	call	_do_I2C_DO_NACK_RESTART	;wreg free
  3316  000986  0012               	return	
  3317  000988                     
  3318                           ;i2c_master.c: 375: case i2c_stop:
  3319                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
  3320                           
  3321                           ;i2c_master.c: 374: case i2c_continue:
  3322  000988  EC7A  F009         	call	_do_I2C_DO_NACK_STOP	;wreg free
  3323                           
  3324                           ;i2c_master.c: 377: }
  3325  00098C  0012               	return	
  3326  00098E                     l462:
  3327  00098E  C07E  F021         	movff	_i2c_status+30,returnStop@p
  3328  000992  C07F  F022         	movff	_i2c_status+31,returnStop@p+1
  3329  000996  EE20  F06C         	lfsr	2,_i2c_status+12
  3330  00099A  D801               	call	u2038
  3331  00099C  D00A               	goto	u2039
  3332  00099E                     u2038:
  3333  00099E  0005               	push	
  3334  0009A0  6EFA               	movwf	pclath,c
  3335  0009A2  50DE               	movf	postinc2,w,c
  3336  0009A4  6EFD               	movwf	tosl,c
  3337  0009A6  50DE               	movf	postinc2,w,c
  3338  0009A8  6EFE               	movwf	tosh,c
  3339  0009AA  50DE               	movf	postinc2,w,c
  3340  0009AC  6EFF               	movwf	tosu,c
  3341  0009AE  50FA               	movf	pclath,w,c
  3342  0009B0  0012               	return		;indir
  3343  0009B2                     u2039:
  3344                           
  3345                           ; Switch size 1, requested type "space"
  3346                           ; Number of cases is 4, Range of values is 1 to 4
  3347                           ; switch strategies available:
  3348                           ; Name         Instructions Cycles
  3349                           ; simple_byte           13     7 (average)
  3350                           ;	Chosen strategy is simple_byte
  3351  0009B2  0A01               	xorlw	1	; case 1
  3352  0009B4  B4D8               	btfsc	status,2,c
  3353  0009B6  D7E8               	goto	l465
  3354  0009B8  0A03               	xorlw	3	; case 2
  3355  0009BA  B4D8               	btfsc	status,2,c
  3356  0009BC  D7E2               	goto	l463
  3357  0009BE  0A01               	xorlw	1	; case 3
  3358  0009C0  B4D8               	btfsc	status,2,c
  3359  0009C2  D7DF               	goto	l463
  3360  0009C4  0A07               	xorlw	7	; case 4
  3361  0009C6  D7E0               	goto	l465
  3362  0009C8                     __end_of_do_I2C_RX:
  3363                           	opt stack 0
  3364                           tosu	equ	0xFFF
  3365                           tosh	equ	0xFFE
  3366                           tosl	equ	0xFFD
  3367                           pclath	equ	0xFFA
  3368                           tblptru	equ	0xFF8
  3369                           tblptrh	equ	0xFF7
  3370                           tblptrl	equ	0xFF6
  3371                           tablat	equ	0xFF5
  3372                           prodh	equ	0xFF4
  3373                           prodl	equ	0xFF3
  3374                           intcon	equ	0xFF2
  3375                           postinc0	equ	0xFEE
  3376                           wreg	equ	0xFE8
  3377                           indf1	equ	0xFE7
  3378                           postdec1	equ	0xFE5
  3379                           plusw1	equ	0xFE3
  3380                           fsr1h	equ	0xFE2
  3381                           fsr1l	equ	0xFE1
  3382                           indf2	equ	0xFDF
  3383                           postinc2	equ	0xFDE
  3384                           plusw2	equ	0xFDB
  3385                           fsr2h	equ	0xFDA
  3386                           fsr2l	equ	0xFD9
  3387                           status	equ	0xFD8
  3388                           
  3389 ;; *************** function _do_I2C_TX *****************
  3390 ;; Defined at:
  3391 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;		None
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;		None
  3396 ;; Return value:  Size  Location     Type
  3397 ;;                  1    wreg      enum E11956
  3398 ;; Registers used:
  3399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3400 ;; Tracked objects:
  3401 ;;		On entry : 0/0
  3402 ;;		On exit  : 0/0
  3403 ;;		Unchanged: 0/0
  3404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3406 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3408 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3409 ;;Total ram usage:        2 bytes
  3410 ;; Hardware stack levels used:    1
  3411 ;; Hardware stack levels required when called:    9
  3412 ;; This function calls:
  3413 ;;		Absolute function
  3414 ;;		_do_I2C_SEND_RESTART_READ
  3415 ;;		_do_I2C_SEND_RESTART_WRITE
  3416 ;;		_do_I2C_SEND_STOP
  3417 ;;		_i2c1_driver_TXData
  3418 ;;		_i2c1_driver_isNACK
  3419 ;;		_i2c_restartWrite
  3420 ;;		_rd1RegCompleteHandler
  3421 ;;		_rd2RegCompleteHandler
  3422 ;;		_rdBlkRegCompleteHandler
  3423 ;;		_returnReset
  3424 ;;		_returnStop
  3425 ;;		_wr1RegCompleteHandler
  3426 ;;		_wr2RegCompleteHandler
  3427 ;; This function is called by:
  3428 ;;		_i2c_ISR
  3429 ;;		i2_i2c_ISR
  3430 ;; This function uses a non-reentrant model
  3431 ;;
  3432                           
  3433                           	psect	text19
  3434  000828                     __ptext19:
  3435                           	opt stack 0
  3436  000828                     _do_I2C_TX:
  3437                           	opt stack 0
  3438                           
  3439                           ;Skip over the trampoline to the duplicate function for level 2
  3440  000828  B247               	btfsc	btemp,1,c
  3441  00082A  EF5F  F004         	goto	i2_do_I2C_TX
  3442  00082E                     _do_I2C_TX$intlevel0:
  3443                           	opt stack 16
  3444                           
  3445                           ;i2c_master.c: 335: if(i2c1_driver_isNACK())
  3446                           
  3447                           ;incstack = 0
  3448  00082E  EC08  F009         	call	_i2c1_driver_isNACK	;wreg free
  3449  000832  B0D8               	btfsc	status,0,c
  3450  000834  D00A               	goto	l444
  3451  000836  D026               	goto	l443
  3452  000838                     
  3453                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
  3454  000838  EC9D  F009         	call	_do_I2C_SEND_RESTART_READ	;wreg free
  3455  00083C  0012               	return	
  3456  00083E                     
  3457                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
  3458  00083E  EC96  F009         	call	_do_I2C_SEND_RESTART_WRITE	;wreg free
  3459  000842  0012               	return	
  3460  000844                     
  3461                           ;i2c_master.c: 345: case i2c_stop:
  3462                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
  3463                           
  3464                           ;i2c_master.c: 344: case i2c_continue:
  3465  000844  EC88  F009         	call	_do_I2C_SEND_STOP	;wreg free
  3466                           
  3467                           ;i2c_master.c: 347: }
  3468  000848  0012               	return	
  3469  00084A                     l444:
  3470  00084A  C084  F021         	movff	_i2c_status+36,returnStop@p
  3471  00084E  C085  F022         	movff	_i2c_status+37,returnStop@p+1
  3472  000852  EE20  F075         	lfsr	2,_i2c_status+21
  3473  000856  D801               	call	u2008
  3474  000858  D00A               	goto	u2009
  3475  00085A                     u2008:
  3476  00085A  0005               	push	
  3477  00085C  6EFA               	movwf	pclath,c
  3478  00085E  50DE               	movf	postinc2,w,c
  3479  000860  6EFD               	movwf	tosl,c
  3480  000862  50DE               	movf	postinc2,w,c
  3481  000864  6EFE               	movwf	tosh,c
  3482  000866  50DE               	movf	postinc2,w,c
  3483  000868  6EFF               	movwf	tosu,c
  3484  00086A  50FA               	movf	pclath,w,c
  3485  00086C  0012               	return		;indir
  3486  00086E                     u2009:
  3487                           
  3488                           ; Switch size 1, requested type "space"
  3489                           ; Number of cases is 4, Range of values is 1 to 4
  3490                           ; switch strategies available:
  3491                           ; Name         Instructions Cycles
  3492                           ; simple_byte           13     7 (average)
  3493                           ;	Chosen strategy is simple_byte
  3494  00086E  0A01               	xorlw	1	; case 1
  3495  000870  B4D8               	btfsc	status,2,c
  3496  000872  D7E8               	goto	l448
  3497  000874  0A03               	xorlw	3	; case 2
  3498  000876  B4D8               	btfsc	status,2,c
  3499  000878  D7DF               	goto	l445
  3500  00087A  0A01               	xorlw	1	; case 3
  3501  00087C  B4D8               	btfsc	status,2,c
  3502  00087E  D7DF               	goto	l447
  3503  000880  0A07               	xorlw	7	; case 4
  3504  000882  D7E0               	goto	l448
  3505  000884                     l443:
  3506                           
  3507                           ;i2c_master.c: 349: else
  3508                           ;i2c_master.c: 350: {
  3509                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
  3510  000884  0100               	movlb	0	; () banked
  3511  000886  9760               	bcf	_i2c_status& (0+255),3,b
  3512                           
  3513                           ; BSR set to: 0
  3514                           ;i2c_master.c: 352: i2c1_driver_TXData(*i2c_status.data_ptr++);
  3515  000888  C062  FFD9         	movff	_i2c_status+2,fsr2l
  3516  00088C  C063  FFDA         	movff	_i2c_status+3,fsr2h
  3517  000890  4B62               	infsnz	(_i2c_status+2)& (0+255),f,b
  3518  000892  2B63               	incf	(_i2c_status+3)& (0+255),f,b
  3519  000894  50DF               	movf	indf2,w,c
  3520  000896  ECDC  F009         	call	_i2c1_driver_TXData
  3521                           
  3522                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  3523  00089A  0100               	movlb	0	; () banked
  3524  00089C  0764               	decf	(_i2c_status+4)& (0+255),f,b
  3525  00089E  A0D8               	btfss	status,0,c
  3526  0008A0  0765               	decf	(_i2c_status+5)& (0+255),f,b
  3527  0008A2  5164               	movf	(_i2c_status+4)& (0+255),w,b
  3528  0008A4  1165               	iorwf	(_i2c_status+5)& (0+255),w,b
  3529  0008A6  A4D8               	btfss	status,2,c
  3530  0008A8  D004               	goto	l454
  3531                           
  3532                           ; BSR set to: 0
  3533  0008AA  0E00               	movlw	0
  3534  0008AC  6E18               	movwf	_do_I2C_TX$1050+1,c
  3535  0008AE  0E06               	movlw	6
  3536  0008B0  D003               	goto	L4
  3537  0008B2                     l454:
  3538                           
  3539                           ; BSR set to: 0
  3540                           
  3541                           ; BSR set to: 0
  3542  0008B2  0E00               	movlw	0
  3543  0008B4  6E18               	movwf	_do_I2C_TX$1050+1,c
  3544  0008B6  0E03               	movlw	3
  3545  0008B8                     L4:
  3546  0008B8  6E17               	movwf	_do_I2C_TX$1050,c
  3547                           
  3548                           ; BSR set to: 0
  3549  0008BA  5017               	movf	_do_I2C_TX$1050,w,c
  3550                           
  3551                           ; BSR set to: 0
  3552  0008BC  0012               	return	
  3553  0008BE                     __end_of_do_I2C_TX:
  3554                           	opt stack 0
  3555                           tosu	equ	0xFFF
  3556                           tosh	equ	0xFFE
  3557                           tosl	equ	0xFFD
  3558                           pclath	equ	0xFFA
  3559                           tblptru	equ	0xFF8
  3560                           tblptrh	equ	0xFF7
  3561                           tblptrl	equ	0xFF6
  3562                           tablat	equ	0xFF5
  3563                           prodh	equ	0xFF4
  3564                           prodl	equ	0xFF3
  3565                           intcon	equ	0xFF2
  3566                           postinc0	equ	0xFEE
  3567                           wreg	equ	0xFE8
  3568                           indf1	equ	0xFE7
  3569                           postdec1	equ	0xFE5
  3570                           plusw1	equ	0xFE3
  3571                           fsr1h	equ	0xFE2
  3572                           fsr1l	equ	0xFE1
  3573                           indf2	equ	0xFDF
  3574                           postinc2	equ	0xFDE
  3575                           plusw2	equ	0xFDB
  3576                           fsr2h	equ	0xFDA
  3577                           fsr2l	equ	0xFD9
  3578                           status	equ	0xFD8
  3579                           
  3580 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
  3581 ;; Defined at:
  3582 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
  3583 ;; Parameters:    Size  Location     Type
  3584 ;;		None
  3585 ;; Auto vars:     Size  Location     Type
  3586 ;;		None
  3587 ;; Return value:  Size  Location     Type
  3588 ;;                  1    wreg      enum E11956
  3589 ;; Registers used:
  3590 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3591 ;; Tracked objects:
  3592 ;;		On entry : 0/0
  3593 ;;		On exit  : 0/0
  3594 ;;		Unchanged: 0/0
  3595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3600 ;;Total ram usage:        0 bytes
  3601 ;; Hardware stack levels used:    1
  3602 ;; Hardware stack levels required when called:    9
  3603 ;; This function calls:
  3604 ;;		Absolute function
  3605 ;;		_do_I2C_SEND_RESTART
  3606 ;;		_do_I2C_SEND_STOP
  3607 ;;		_i2c_restartWrite
  3608 ;;		_rd1RegCompleteHandler
  3609 ;;		_rd2RegCompleteHandler
  3610 ;;		_rdBlkRegCompleteHandler
  3611 ;;		_returnReset
  3612 ;;		_returnStop
  3613 ;;		_wr1RegCompleteHandler
  3614 ;;		_wr2RegCompleteHandler
  3615 ;; This function is called by:
  3616 ;;		_i2c_ISR
  3617 ;;		i2_i2c_ISR
  3618 ;; This function uses a non-reentrant model
  3619 ;;
  3620                           
  3621                           	psect	text20
  3622  000C30                     __ptext20:
  3623                           	opt stack 0
  3624  000C30                     _do_I2C_DO_ADDRESS_NACK:
  3625                           	opt stack 0
  3626                           
  3627                           ;Skip over the trampoline to the duplicate function for level 2
  3628  000C30  B247               	btfsc	btemp,1,c
  3629  000C32  EFAD  F006         	goto	i2_do_I2C_DO_ADDRESS_NACK
  3630  000C36                     _do_I2C_DO_ADDRESS_NACK$intlevel0:
  3631                           	opt stack 16
  3632                           
  3633                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
  3634                           
  3635                           ;incstack = 0
  3636  000C36  0100               	movlb	0	; () banked
  3637  000C38  9760               	bcf	_i2c_status& (0+255),3,b
  3638                           
  3639                           ; BSR set to: 0
  3640                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
  3641  000C3A  0E02               	movlw	2
  3642  000C3C  6F6B               	movwf	(_i2c_status+11)& (0+255),b
  3643                           
  3644                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  3645  000C3E  D006               	goto	l435
  3646  000C40                     
  3647                           ;i2c_master.c: 326: case i2c_restart_write:
  3648                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
  3649                           
  3650                           ; BSR set to: 0
  3651                           
  3652                           ; BSR set to: 0
  3653  000C40  EC8F  F009         	call	_do_I2C_SEND_RESTART	;wreg free
  3654  000C44  0012               	return	
  3655  000C46                     
  3656                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
  3657  000C46  EC88  F009         	call	_do_I2C_SEND_STOP	;wreg free
  3658                           
  3659                           ;i2c_master.c: 330: }
  3660  000C4A  0012               	return	
  3661  000C4C                     l435:
  3662  000C4C  C082  F021         	movff	_i2c_status+34,returnStop@p
  3663  000C50  C083  F022         	movff	_i2c_status+35,returnStop@p+1
  3664  000C54  EE20  F072         	lfsr	2,_i2c_status+18
  3665  000C58  D801               	call	u1988
  3666  000C5A  D00A               	goto	u1989
  3667  000C5C                     u1988:
  3668  000C5C  0005               	push	
  3669  000C5E  6EFA               	movwf	pclath,c
  3670  000C60  50DE               	movf	postinc2,w,c
  3671  000C62  6EFD               	movwf	tosl,c
  3672  000C64  50DE               	movf	postinc2,w,c
  3673  000C66  6EFE               	movwf	tosh,c
  3674  000C68  50DE               	movf	postinc2,w,c
  3675  000C6A  6EFF               	movwf	tosu,c
  3676  000C6C  50FA               	movf	pclath,w,c
  3677  000C6E  0012               	return		;indir
  3678  000C70                     u1989:
  3679                           
  3680                           ; Switch size 1, requested type "space"
  3681                           ; Number of cases is 2, Range of values is 2 to 3
  3682                           ; switch strategies available:
  3683                           ; Name         Instructions Cycles
  3684                           ; simple_byte            7     4 (average)
  3685                           ;	Chosen strategy is simple_byte
  3686  000C70  0A02               	xorlw	2	; case 2
  3687  000C72  B4D8               	btfsc	status,2,c
  3688  000C74  D7E5               	goto	l436
  3689  000C76  0A01               	xorlw	1	; case 3
  3690  000C78  B4D8               	btfsc	status,2,c
  3691  000C7A  D7E2               	goto	l436
  3692  000C7C  D7E4               	goto	l439
  3693  000C7E                     __end_of_do_I2C_DO_ADDRESS_NACK:
  3694                           	opt stack 0
  3695                           tosu	equ	0xFFF
  3696                           tosh	equ	0xFFE
  3697                           tosl	equ	0xFFD
  3698                           pclath	equ	0xFFA
  3699                           tblptru	equ	0xFF8
  3700                           tblptrh	equ	0xFF7
  3701                           tblptrl	equ	0xFF6
  3702                           tablat	equ	0xFF5
  3703                           prodh	equ	0xFF4
  3704                           prodl	equ	0xFF3
  3705                           intcon	equ	0xFF2
  3706                           postinc0	equ	0xFEE
  3707                           wreg	equ	0xFE8
  3708                           indf1	equ	0xFE7
  3709                           postdec1	equ	0xFE5
  3710                           plusw1	equ	0xFE3
  3711                           fsr1h	equ	0xFE2
  3712                           fsr1l	equ	0xFE1
  3713                           indf2	equ	0xFDF
  3714                           postinc2	equ	0xFDE
  3715                           plusw2	equ	0xFDB
  3716                           fsr2h	equ	0xFDA
  3717                           fsr2l	equ	0xFD9
  3718                           status	equ	0xFD8
  3719                           
  3720 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
  3721 ;; Defined at:
  3722 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
  3723 ;; Parameters:    Size  Location     Type
  3724 ;;		None
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;		None
  3727 ;; Return value:  Size  Location     Type
  3728 ;;                  1    wreg      enum E11956
  3729 ;; Registers used:
  3730 ;;		wreg, cstack
  3731 ;; Tracked objects:
  3732 ;;		On entry : 0/0
  3733 ;;		On exit  : 0/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3740 ;;Total ram usage:        0 bytes
  3741 ;; Hardware stack levels used:    1
  3742 ;; Hardware stack levels required when called:    7
  3743 ;; This function calls:
  3744 ;;		_i2c1_driver_sendNACK
  3745 ;; This function is called by:
  3746 ;;		_do_I2C_RX
  3747 ;;		_i2c_ISR
  3748 ;;		i2_i2c_ISR
  3749 ;; This function uses a non-reentrant model
  3750 ;;
  3751                           
  3752                           	psect	text21
  3753  0012E6                     __ptext21:
  3754                           	opt stack 0
  3755  0012E6                     _do_I2C_DO_NACK_RESTART:
  3756                           	opt stack 0
  3757                           
  3758                           ;Skip over the trampoline to the duplicate function for level 2
  3759  0012E6  B247               	btfsc	btemp,1,c
  3760  0012E8  EFE0  F009         	goto	i2_do_I2C_DO_NACK_RESTART
  3761  0012EC                     _do_I2C_DO_NACK_RESTART$intlevel0:
  3762                           	opt stack 17
  3763                           
  3764                           ;i2c_master.c: 313: i2c1_driver_sendNACK();
  3765                           
  3766                           ;incstack = 0
  3767  0012EC  EC03  F00A         	call	_i2c1_driver_sendNACK	;wreg free
  3768                           
  3769                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
  3770  0012F0  0E09               	movlw	9
  3771  0012F2  0012               	return	
  3772  0012F4                     __end_of_do_I2C_DO_NACK_RESTART:
  3773                           	opt stack 0
  3774                           tosu	equ	0xFFF
  3775                           tosh	equ	0xFFE
  3776                           tosl	equ	0xFFD
  3777                           pclath	equ	0xFFA
  3778                           tblptru	equ	0xFF8
  3779                           tblptrh	equ	0xFF7
  3780                           tblptrl	equ	0xFF6
  3781                           tablat	equ	0xFF5
  3782                           prodh	equ	0xFF4
  3783                           prodl	equ	0xFF3
  3784                           intcon	equ	0xFF2
  3785                           postinc0	equ	0xFEE
  3786                           wreg	equ	0xFE8
  3787                           indf1	equ	0xFE7
  3788                           postdec1	equ	0xFE5
  3789                           plusw1	equ	0xFE3
  3790                           fsr1h	equ	0xFE2
  3791                           fsr1l	equ	0xFE1
  3792                           indf2	equ	0xFDF
  3793                           postinc2	equ	0xFDE
  3794                           plusw2	equ	0xFDB
  3795                           fsr2h	equ	0xFDA
  3796                           fsr2l	equ	0xFD9
  3797                           status	equ	0xFD8
  3798                           
  3799 ;; *************** function _do_I2C_DO_NACK_STOP *****************
  3800 ;; Defined at:
  3801 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
  3802 ;; Parameters:    Size  Location     Type
  3803 ;;		None
  3804 ;; Auto vars:     Size  Location     Type
  3805 ;;		None
  3806 ;; Return value:  Size  Location     Type
  3807 ;;                  1    wreg      enum E11956
  3808 ;; Registers used:
  3809 ;;		wreg, cstack
  3810 ;; Tracked objects:
  3811 ;;		On entry : 0/0
  3812 ;;		On exit  : 0/0
  3813 ;;		Unchanged: 0/0
  3814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3819 ;;Total ram usage:        0 bytes
  3820 ;; Hardware stack levels used:    1
  3821 ;; Hardware stack levels required when called:    7
  3822 ;; This function calls:
  3823 ;;		_i2c1_driver_sendNACK
  3824 ;; This function is called by:
  3825 ;;		_do_I2C_RX
  3826 ;;		_i2c_ISR
  3827 ;;		i2_i2c_ISR
  3828 ;; This function uses a non-reentrant model
  3829 ;;
  3830                           
  3831                           	psect	text22
  3832  0012F4                     __ptext22:
  3833                           	opt stack 0
  3834  0012F4                     _do_I2C_DO_NACK_STOP:
  3835                           	opt stack 0
  3836                           
  3837                           ;Skip over the trampoline to the duplicate function for level 2
  3838  0012F4  B247               	btfsc	btemp,1,c
  3839  0012F6  EFE4  F009         	goto	i2_do_I2C_DO_NACK_STOP
  3840  0012FA                     _do_I2C_DO_NACK_STOP$intlevel0:
  3841                           	opt stack 17
  3842                           
  3843                           ;i2c_master.c: 307: i2c1_driver_sendNACK();
  3844                           
  3845                           ;incstack = 0
  3846  0012FA  EC03  F00A         	call	_i2c1_driver_sendNACK	;wreg free
  3847                           
  3848                           ;i2c_master.c: 308: return I2C_SEND_STOP;
  3849  0012FE  0E0A               	movlw	10
  3850  001300  0012               	return	
  3851  001302                     __end_of_do_I2C_DO_NACK_STOP:
  3852                           	opt stack 0
  3853                           tosu	equ	0xFFF
  3854                           tosh	equ	0xFFE
  3855                           tosl	equ	0xFFD
  3856                           pclath	equ	0xFFA
  3857                           tblptru	equ	0xFF8
  3858                           tblptrh	equ	0xFF7
  3859                           tblptrl	equ	0xFF6
  3860                           tablat	equ	0xFF5
  3861                           prodh	equ	0xFF4
  3862                           prodl	equ	0xFF3
  3863                           intcon	equ	0xFF2
  3864                           postinc0	equ	0xFEE
  3865                           wreg	equ	0xFE8
  3866                           indf1	equ	0xFE7
  3867                           postdec1	equ	0xFE5
  3868                           plusw1	equ	0xFE3
  3869                           fsr1h	equ	0xFE2
  3870                           fsr1l	equ	0xFE1
  3871                           indf2	equ	0xFDF
  3872                           postinc2	equ	0xFDE
  3873                           plusw2	equ	0xFDB
  3874                           fsr2h	equ	0xFDA
  3875                           fsr2l	equ	0xFD9
  3876                           status	equ	0xFD8
  3877                           
  3878 ;; *************** function _do_I2C_DO_ACK *****************
  3879 ;; Defined at:
  3880 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
  3881 ;; Parameters:    Size  Location     Type
  3882 ;;		None
  3883 ;; Auto vars:     Size  Location     Type
  3884 ;;		None
  3885 ;; Return value:  Size  Location     Type
  3886 ;;                  1    wreg      enum E11956
  3887 ;; Registers used:
  3888 ;;		wreg, cstack
  3889 ;; Tracked objects:
  3890 ;;		On entry : 0/0
  3891 ;;		On exit  : 0/0
  3892 ;;		Unchanged: 0/0
  3893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3898 ;;Total ram usage:        0 bytes
  3899 ;; Hardware stack levels used:    1
  3900 ;; Hardware stack levels required when called:    7
  3901 ;; This function calls:
  3902 ;;		_i2c1_driver_sendACK
  3903 ;; This function is called by:
  3904 ;;		_i2c_ISR
  3905 ;;		i2_i2c_ISR
  3906 ;; This function uses a non-reentrant model
  3907 ;;
  3908                           
  3909                           	psect	text23
  3910  001302                     __ptext23:
  3911                           	opt stack 0
  3912  001302                     _do_I2C_DO_ACK:
  3913                           	opt stack 0
  3914                           
  3915                           ;Skip over the trampoline to the duplicate function for level 2
  3916  001302  B247               	btfsc	btemp,1,c
  3917  001304  EFE8  F009         	goto	i2_do_I2C_DO_ACK
  3918  001308                     _do_I2C_DO_ACK$intlevel0:
  3919                           	opt stack 18
  3920                           
  3921                           ;i2c_master.c: 301: i2c1_driver_sendACK();
  3922                           
  3923                           ;incstack = 0
  3924  001308  EC06  F00A         	call	_i2c1_driver_sendACK	;wreg free
  3925                           
  3926                           ;i2c_master.c: 302: return I2C_RCEN;
  3927  00130C  0E05               	movlw	5
  3928  00130E  0012               	return	
  3929  001310                     __end_of_do_I2C_DO_ACK:
  3930                           	opt stack 0
  3931                           tosu	equ	0xFFF
  3932                           tosh	equ	0xFFE
  3933                           tosl	equ	0xFFD
  3934                           pclath	equ	0xFFA
  3935                           tblptru	equ	0xFF8
  3936                           tblptrh	equ	0xFF7
  3937                           tblptrl	equ	0xFF6
  3938                           tablat	equ	0xFF5
  3939                           prodh	equ	0xFF4
  3940                           prodl	equ	0xFF3
  3941                           intcon	equ	0xFF2
  3942                           postinc0	equ	0xFEE
  3943                           wreg	equ	0xFE8
  3944                           indf1	equ	0xFE7
  3945                           postdec1	equ	0xFE5
  3946                           plusw1	equ	0xFE3
  3947                           fsr1h	equ	0xFE2
  3948                           fsr1l	equ	0xFE1
  3949                           indf2	equ	0xFDF
  3950                           postinc2	equ	0xFDE
  3951                           plusw2	equ	0xFDB
  3952                           fsr2h	equ	0xFDA
  3953                           fsr2l	equ	0xFD9
  3954                           status	equ	0xFD8
  3955                           
  3956 ;; *************** function _do_I2C_RCEN *****************
  3957 ;; Defined at:
  3958 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
  3959 ;; Parameters:    Size  Location     Type
  3960 ;;		None
  3961 ;; Auto vars:     Size  Location     Type
  3962 ;;		None
  3963 ;; Return value:  Size  Location     Type
  3964 ;;                  1    wreg      enum E11956
  3965 ;; Registers used:
  3966 ;;		wreg, cstack
  3967 ;; Tracked objects:
  3968 ;;		On entry : 0/0
  3969 ;;		On exit  : 0/0
  3970 ;;		Unchanged: 0/0
  3971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3976 ;;Total ram usage:        0 bytes
  3977 ;; Hardware stack levels used:    1
  3978 ;; Hardware stack levels required when called:    7
  3979 ;; This function calls:
  3980 ;;		_i2c1_driver_startRX
  3981 ;; This function is called by:
  3982 ;;		_i2c_ISR
  3983 ;;		i2_i2c_ISR
  3984 ;; This function uses a non-reentrant model
  3985 ;;
  3986                           
  3987                           	psect	text24
  3988  001264                     __ptext24:
  3989                           	opt stack 0
  3990  001264                     _do_I2C_RCEN:
  3991                           	opt stack 0
  3992                           
  3993                           ;Skip over the trampoline to the duplicate function for level 2
  3994  001264  B247               	btfsc	btemp,1,c
  3995  001266  EFB9  F009         	goto	i2_do_I2C_RCEN
  3996  00126A                     _do_I2C_RCEN$intlevel0:
  3997                           	opt stack 18
  3998                           
  3999                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
  4000                           
  4001                           ;incstack = 0
  4002  00126A  0100               	movlb	0	; () banked
  4003  00126C  9760               	bcf	_i2c_status& (0+255),3,b
  4004                           
  4005                           ; BSR set to: 0
  4006                           ;i2c_master.c: 295: i2c1_driver_startRX();
  4007  00126E  EC23  F00A         	call	_i2c1_driver_startRX	;wreg free
  4008                           
  4009                           ;i2c_master.c: 296: return I2C_RX;
  4010  001272  0E04               	movlw	4
  4011  001274  0012               	return	
  4012  001276                     __end_of_do_I2C_RCEN:
  4013                           	opt stack 0
  4014                           tosu	equ	0xFFF
  4015                           tosh	equ	0xFFE
  4016                           tosl	equ	0xFFD
  4017                           pclath	equ	0xFFA
  4018                           tblptru	equ	0xFF8
  4019                           tblptrh	equ	0xFF7
  4020                           tblptrl	equ	0xFF6
  4021                           tablat	equ	0xFF5
  4022                           prodh	equ	0xFF4
  4023                           prodl	equ	0xFF3
  4024                           intcon	equ	0xFF2
  4025                           postinc0	equ	0xFEE
  4026                           wreg	equ	0xFE8
  4027                           indf1	equ	0xFE7
  4028                           postdec1	equ	0xFE5
  4029                           plusw1	equ	0xFE3
  4030                           fsr1h	equ	0xFE2
  4031                           fsr1l	equ	0xFE1
  4032                           indf2	equ	0xFDF
  4033                           postinc2	equ	0xFDE
  4034                           plusw2	equ	0xFDB
  4035                           fsr2h	equ	0xFDA
  4036                           fsr2l	equ	0xFD9
  4037                           status	equ	0xFD8
  4038                           
  4039 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
  4040 ;; Defined at:
  4041 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
  4042 ;; Parameters:    Size  Location     Type
  4043 ;;		None
  4044 ;; Auto vars:     Size  Location     Type
  4045 ;;		None
  4046 ;; Return value:  Size  Location     Type
  4047 ;;                  1    wreg      enum E11956
  4048 ;; Registers used:
  4049 ;;		wreg, status,2, status,0, cstack
  4050 ;; Tracked objects:
  4051 ;;		On entry : 0/0
  4052 ;;		On exit  : 0/0
  4053 ;;		Unchanged: 0/0
  4054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4059 ;;Total ram usage:        0 bytes
  4060 ;; Hardware stack levels used:    1
  4061 ;; Hardware stack levels required when called:    7
  4062 ;; This function calls:
  4063 ;;		_i2c1_driver_TXData
  4064 ;; This function is called by:
  4065 ;;		_i2c_ISR
  4066 ;;		i2_i2c_ISR
  4067 ;; This function uses a non-reentrant model
  4068 ;;
  4069                           
  4070                           	psect	text25
  4071  0011CE                     __ptext25:
  4072                           	opt stack 0
  4073  0011CE                     _do_I2C_SEND_ADR_WRITE:
  4074                           	opt stack 0
  4075                           
  4076                           ;Skip over the trampoline to the duplicate function for level 2
  4077  0011CE  B247               	btfsc	btemp,1,c
  4078  0011D0  EF4D  F009         	goto	i2_do_I2C_SEND_ADR_WRITE
  4079  0011D4                     _do_I2C_SEND_ADR_WRITE$intlevel0:
  4080                           	opt stack 18
  4081                           
  4082                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
  4083                           
  4084                           ;incstack = 0
  4085  0011D4  0100               	movlb	0	; () banked
  4086  0011D6  8760               	bsf	_i2c_status& (0+255),3,b
  4087                           
  4088                           ; BSR set to: 0
  4089                           ;i2c_master.c: 288: i2c1_driver_TXData(i2c_status.address << 1);
  4090  0011D8  5161               	movf	(_i2c_status+1)& (0+255),w,b
  4091  0011DA  2561               	addwf	(_i2c_status+1)& (0+255),w,b
  4092  0011DC  ECDC  F009         	call	_i2c1_driver_TXData
  4093                           
  4094                           ;i2c_master.c: 289: return I2C_TX;
  4095  0011E0  0E03               	movlw	3
  4096  0011E2  0012               	return	
  4097  0011E4                     __end_of_do_I2C_SEND_ADR_WRITE:
  4098                           	opt stack 0
  4099                           tosu	equ	0xFFF
  4100                           tosh	equ	0xFFE
  4101                           tosl	equ	0xFFD
  4102                           pclath	equ	0xFFA
  4103                           tblptru	equ	0xFF8
  4104                           tblptrh	equ	0xFF7
  4105                           tblptrl	equ	0xFF6
  4106                           tablat	equ	0xFF5
  4107                           prodh	equ	0xFF4
  4108                           prodl	equ	0xFF3
  4109                           intcon	equ	0xFF2
  4110                           postinc0	equ	0xFEE
  4111                           wreg	equ	0xFE8
  4112                           indf1	equ	0xFE7
  4113                           postdec1	equ	0xFE5
  4114                           plusw1	equ	0xFE3
  4115                           fsr1h	equ	0xFE2
  4116                           fsr1l	equ	0xFE1
  4117                           indf2	equ	0xFDF
  4118                           postinc2	equ	0xFDE
  4119                           plusw2	equ	0xFDB
  4120                           fsr2h	equ	0xFDA
  4121                           fsr2l	equ	0xFD9
  4122                           status	equ	0xFD8
  4123                           
  4124 ;; *************** function _do_I2C_SEND_ADR_READ *****************
  4125 ;; Defined at:
  4126 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
  4127 ;; Parameters:    Size  Location     Type
  4128 ;;		None
  4129 ;; Auto vars:     Size  Location     Type
  4130 ;;		None
  4131 ;; Return value:  Size  Location     Type
  4132 ;;                  1    wreg      enum E11956
  4133 ;; Registers used:
  4134 ;;		wreg, status,0, cstack
  4135 ;; Tracked objects:
  4136 ;;		On entry : 0/0
  4137 ;;		On exit  : 0/0
  4138 ;;		Unchanged: 0/0
  4139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4143 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4144 ;;Total ram usage:        0 bytes
  4145 ;; Hardware stack levels used:    1
  4146 ;; Hardware stack levels required when called:    7
  4147 ;; This function calls:
  4148 ;;		_i2c1_driver_TXData
  4149 ;; This function is called by:
  4150 ;;		_i2c_ISR
  4151 ;;		i2_i2c_ISR
  4152 ;; This function uses a non-reentrant model
  4153 ;;
  4154                           
  4155                           	psect	text26
  4156  0011E4                     __ptext26:
  4157                           	opt stack 0
  4158  0011E4                     _do_I2C_SEND_ADR_READ:
  4159                           	opt stack 0
  4160                           
  4161                           ;Skip over the trampoline to the duplicate function for level 2
  4162  0011E4  B247               	btfsc	btemp,1,c
  4163  0011E6  EF55  F009         	goto	i2_do_I2C_SEND_ADR_READ
  4164  0011EA                     _do_I2C_SEND_ADR_READ$intlevel0:
  4165                           	opt stack 18
  4166                           
  4167                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
  4168                           
  4169                           ;incstack = 0
  4170  0011EA  0100               	movlb	0	; () banked
  4171  0011EC  8760               	bsf	_i2c_status& (0+255),3,b
  4172                           
  4173                           ; BSR set to: 0
  4174                           ;i2c_master.c: 281: i2c1_driver_TXData(i2c_status.address << 1 | 1);
  4175  0011EE  80D8               	bsf	status,0,c
  4176  0011F0  3561               	rlcf	(_i2c_status+1)& (0+255),w,b
  4177  0011F2  ECDC  F009         	call	_i2c1_driver_TXData
  4178                           
  4179                           ;i2c_master.c: 282: return I2C_RCEN;
  4180  0011F6  0E05               	movlw	5
  4181  0011F8  0012               	return	
  4182  0011FA                     __end_of_do_I2C_SEND_ADR_READ:
  4183                           	opt stack 0
  4184                           tosu	equ	0xFFF
  4185                           tosh	equ	0xFFE
  4186                           tosl	equ	0xFFD
  4187                           pclath	equ	0xFFA
  4188                           tblptru	equ	0xFF8
  4189                           tblptrh	equ	0xFF7
  4190                           tblptrl	equ	0xFF6
  4191                           tablat	equ	0xFF5
  4192                           prodh	equ	0xFF4
  4193                           prodl	equ	0xFF3
  4194                           intcon	equ	0xFF2
  4195                           postinc0	equ	0xFEE
  4196                           wreg	equ	0xFE8
  4197                           indf1	equ	0xFE7
  4198                           postdec1	equ	0xFE5
  4199                           plusw1	equ	0xFE3
  4200                           fsr1h	equ	0xFE2
  4201                           fsr1l	equ	0xFE1
  4202                           indf2	equ	0xFDF
  4203                           postinc2	equ	0xFDE
  4204                           plusw2	equ	0xFDB
  4205                           fsr2h	equ	0xFDA
  4206                           fsr2l	equ	0xFD9
  4207                           status	equ	0xFD8
  4208                           
  4209 ;; *************** function _do_I2C_SEND_STOP *****************
  4210 ;; Defined at:
  4211 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  4212 ;; Parameters:    Size  Location     Type
  4213 ;;		None
  4214 ;; Auto vars:     Size  Location     Type
  4215 ;;		None
  4216 ;; Return value:  Size  Location     Type
  4217 ;;                  1    wreg      enum E11956
  4218 ;; Registers used:
  4219 ;;		wreg, cstack
  4220 ;; Tracked objects:
  4221 ;;		On entry : 0/0
  4222 ;;		On exit  : 0/0
  4223 ;;		Unchanged: 0/0
  4224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4228 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4229 ;;Total ram usage:        0 bytes
  4230 ;; Hardware stack levels used:    1
  4231 ;; Hardware stack levels required when called:    7
  4232 ;; This function calls:
  4233 ;;		_i2c1_driver_stop
  4234 ;; This function is called by:
  4235 ;;		_do_I2C_DO_ADDRESS_NACK
  4236 ;;		_do_I2C_TX
  4237 ;;		_do_I2C_TX_EMPTY
  4238 ;;		_i2c_ISR
  4239 ;;		i2_i2c_ISR
  4240 ;; This function uses a non-reentrant model
  4241 ;;
  4242                           
  4243                           	psect	text27
  4244  001310                     __ptext27:
  4245                           	opt stack 0
  4246  001310                     _do_I2C_SEND_STOP:
  4247                           	opt stack 0
  4248                           
  4249                           ;Skip over the trampoline to the duplicate function for level 2
  4250  001310  B247               	btfsc	btemp,1,c
  4251  001312  EFEC  F009         	goto	i2_do_I2C_SEND_STOP
  4252  001316                     _do_I2C_SEND_STOP$intlevel0:
  4253                           	opt stack 17
  4254                           
  4255                           ;i2c_master.c: 274: i2c1_driver_stop();
  4256                           
  4257                           ;incstack = 0
  4258  001316  EC25  F00A         	call	_i2c1_driver_stop	;wreg free
  4259                           
  4260                           ;i2c_master.c: 275: return I2C_IDLE;
  4261  00131A  0E00               	movlw	0
  4262  00131C  0012               	return	
  4263  00131E                     __end_of_do_I2C_SEND_STOP:
  4264                           	opt stack 0
  4265                           tosu	equ	0xFFF
  4266                           tosh	equ	0xFFE
  4267                           tosl	equ	0xFFD
  4268                           pclath	equ	0xFFA
  4269                           tblptru	equ	0xFF8
  4270                           tblptrh	equ	0xFF7
  4271                           tblptrl	equ	0xFF6
  4272                           tablat	equ	0xFF5
  4273                           prodh	equ	0xFF4
  4274                           prodl	equ	0xFF3
  4275                           intcon	equ	0xFF2
  4276                           postinc0	equ	0xFEE
  4277                           wreg	equ	0xFE8
  4278                           indf1	equ	0xFE7
  4279                           postdec1	equ	0xFE5
  4280                           plusw1	equ	0xFE3
  4281                           fsr1h	equ	0xFE2
  4282                           fsr1l	equ	0xFE1
  4283                           indf2	equ	0xFDF
  4284                           postinc2	equ	0xFDE
  4285                           plusw2	equ	0xFDB
  4286                           fsr2h	equ	0xFDA
  4287                           fsr2l	equ	0xFD9
  4288                           status	equ	0xFD8
  4289                           
  4290 ;; *************** function _do_I2C_SEND_RESTART *****************
  4291 ;; Defined at:
  4292 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
  4293 ;; Parameters:    Size  Location     Type
  4294 ;;		None
  4295 ;; Auto vars:     Size  Location     Type
  4296 ;;		None
  4297 ;; Return value:  Size  Location     Type
  4298 ;;                  1    wreg      enum E11956
  4299 ;; Registers used:
  4300 ;;		wreg, cstack
  4301 ;; Tracked objects:
  4302 ;;		On entry : 0/0
  4303 ;;		On exit  : 0/0
  4304 ;;		Unchanged: 0/0
  4305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4310 ;;Total ram usage:        0 bytes
  4311 ;; Hardware stack levels used:    1
  4312 ;; Hardware stack levels required when called:    7
  4313 ;; This function calls:
  4314 ;;		_i2c1_driver_restart
  4315 ;; This function is called by:
  4316 ;;		_do_I2C_DO_ADDRESS_NACK
  4317 ;;		_do_I2C_TX_EMPTY
  4318 ;;		_i2c_ISR
  4319 ;;		i2_i2c_ISR
  4320 ;; This function uses a non-reentrant model
  4321 ;;
  4322                           
  4323                           	psect	text28
  4324  00131E                     __ptext28:
  4325                           	opt stack 0
  4326  00131E                     _do_I2C_SEND_RESTART:
  4327                           	opt stack 0
  4328                           
  4329                           ;Skip over the trampoline to the duplicate function for level 2
  4330  00131E  B247               	btfsc	btemp,1,c
  4331  001320  EFF0  F009         	goto	i2_do_I2C_SEND_RESTART
  4332  001324                     _do_I2C_SEND_RESTART$intlevel0:
  4333                           	opt stack 17
  4334                           
  4335                           ;i2c_master.c: 268: i2c1_driver_restart();
  4336                           
  4337                           ;incstack = 0
  4338  001324  EC27  F00A         	call	_i2c1_driver_restart	;wreg free
  4339                           
  4340                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
  4341  001328  0E01               	movlw	1
  4342  00132A  0012               	return	
  4343  00132C                     __end_of_do_I2C_SEND_RESTART:
  4344                           	opt stack 0
  4345                           tosu	equ	0xFFF
  4346                           tosh	equ	0xFFE
  4347                           tosl	equ	0xFFD
  4348                           pclath	equ	0xFFA
  4349                           tblptru	equ	0xFF8
  4350                           tblptrh	equ	0xFF7
  4351                           tblptrl	equ	0xFF6
  4352                           tablat	equ	0xFF5
  4353                           prodh	equ	0xFF4
  4354                           prodl	equ	0xFF3
  4355                           intcon	equ	0xFF2
  4356                           postinc0	equ	0xFEE
  4357                           wreg	equ	0xFE8
  4358                           indf1	equ	0xFE7
  4359                           postdec1	equ	0xFE5
  4360                           plusw1	equ	0xFE3
  4361                           fsr1h	equ	0xFE2
  4362                           fsr1l	equ	0xFE1
  4363                           indf2	equ	0xFDF
  4364                           postinc2	equ	0xFDE
  4365                           plusw2	equ	0xFDB
  4366                           fsr2h	equ	0xFDA
  4367                           fsr2l	equ	0xFD9
  4368                           status	equ	0xFD8
  4369                           
  4370 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
  4371 ;; Defined at:
  4372 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
  4373 ;; Parameters:    Size  Location     Type
  4374 ;;		None
  4375 ;; Auto vars:     Size  Location     Type
  4376 ;;		None
  4377 ;; Return value:  Size  Location     Type
  4378 ;;                  1    wreg      enum E11956
  4379 ;; Registers used:
  4380 ;;		wreg, cstack
  4381 ;; Tracked objects:
  4382 ;;		On entry : 0/0
  4383 ;;		On exit  : 0/0
  4384 ;;		Unchanged: 0/0
  4385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4390 ;;Total ram usage:        0 bytes
  4391 ;; Hardware stack levels used:    1
  4392 ;; Hardware stack levels required when called:    7
  4393 ;; This function calls:
  4394 ;;		_i2c1_driver_restart
  4395 ;; This function is called by:
  4396 ;;		_do_I2C_TX
  4397 ;;		_i2c_ISR
  4398 ;;		i2_i2c_ISR
  4399 ;; This function uses a non-reentrant model
  4400 ;;
  4401                           
  4402                           	psect	text29
  4403  00132C                     __ptext29:
  4404                           	opt stack 0
  4405  00132C                     _do_I2C_SEND_RESTART_WRITE:
  4406                           	opt stack 0
  4407                           
  4408                           ;Skip over the trampoline to the duplicate function for level 2
  4409  00132C  B247               	btfsc	btemp,1,c
  4410  00132E  EFF4  F009         	goto	i2_do_I2C_SEND_RESTART_WRITE
  4411  001332                     _do_I2C_SEND_RESTART_WRITE$intlevel0:
  4412                           	opt stack 17
  4413                           
  4414                           ;i2c_master.c: 262: i2c1_driver_restart();
  4415                           
  4416                           ;incstack = 0
  4417  001332  EC27  F00A         	call	_i2c1_driver_restart	;wreg free
  4418                           
  4419                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
  4420  001336  0E02               	movlw	2
  4421  001338  0012               	return	
  4422  00133A                     __end_of_do_I2C_SEND_RESTART_WRITE:
  4423                           	opt stack 0
  4424                           tosu	equ	0xFFF
  4425                           tosh	equ	0xFFE
  4426                           tosl	equ	0xFFD
  4427                           pclath	equ	0xFFA
  4428                           tblptru	equ	0xFF8
  4429                           tblptrh	equ	0xFF7
  4430                           tblptrl	equ	0xFF6
  4431                           tablat	equ	0xFF5
  4432                           prodh	equ	0xFF4
  4433                           prodl	equ	0xFF3
  4434                           intcon	equ	0xFF2
  4435                           postinc0	equ	0xFEE
  4436                           wreg	equ	0xFE8
  4437                           indf1	equ	0xFE7
  4438                           postdec1	equ	0xFE5
  4439                           plusw1	equ	0xFE3
  4440                           fsr1h	equ	0xFE2
  4441                           fsr1l	equ	0xFE1
  4442                           indf2	equ	0xFDF
  4443                           postinc2	equ	0xFDE
  4444                           plusw2	equ	0xFDB
  4445                           fsr2h	equ	0xFDA
  4446                           fsr2l	equ	0xFD9
  4447                           status	equ	0xFD8
  4448                           
  4449 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
  4450 ;; Defined at:
  4451 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
  4452 ;; Parameters:    Size  Location     Type
  4453 ;;		None
  4454 ;; Auto vars:     Size  Location     Type
  4455 ;;		None
  4456 ;; Return value:  Size  Location     Type
  4457 ;;                  1    wreg      enum E11956
  4458 ;; Registers used:
  4459 ;;		wreg, cstack
  4460 ;; Tracked objects:
  4461 ;;		On entry : 0/0
  4462 ;;		On exit  : 0/0
  4463 ;;		Unchanged: 0/0
  4464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4469 ;;Total ram usage:        0 bytes
  4470 ;; Hardware stack levels used:    1
  4471 ;; Hardware stack levels required when called:    7
  4472 ;; This function calls:
  4473 ;;		_i2c1_driver_restart
  4474 ;; This function is called by:
  4475 ;;		_do_I2C_TX
  4476 ;;		_i2c_ISR
  4477 ;;		i2_i2c_ISR
  4478 ;; This function uses a non-reentrant model
  4479 ;;
  4480                           
  4481                           	psect	text30
  4482  00133A                     __ptext30:
  4483                           	opt stack 0
  4484  00133A                     _do_I2C_SEND_RESTART_READ:
  4485                           	opt stack 0
  4486                           
  4487                           ;Skip over the trampoline to the duplicate function for level 2
  4488  00133A  B247               	btfsc	btemp,1,c
  4489  00133C  EFF8  F009         	goto	i2_do_I2C_SEND_RESTART_READ
  4490  001340                     _do_I2C_SEND_RESTART_READ$intlevel0:
  4491                           	opt stack 17
  4492                           
  4493                           ;i2c_master.c: 256: i2c1_driver_restart();
  4494                           
  4495                           ;incstack = 0
  4496  001340  EC27  F00A         	call	_i2c1_driver_restart	;wreg free
  4497                           
  4498                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
  4499  001344  0E01               	movlw	1
  4500  001346  0012               	return	
  4501  001348                     __end_of_do_I2C_SEND_RESTART_READ:
  4502                           	opt stack 0
  4503                           tosu	equ	0xFFF
  4504                           tosh	equ	0xFFE
  4505                           tosl	equ	0xFFD
  4506                           pclath	equ	0xFFA
  4507                           tblptru	equ	0xFF8
  4508                           tblptrh	equ	0xFF7
  4509                           tblptrl	equ	0xFF6
  4510                           tablat	equ	0xFF5
  4511                           prodh	equ	0xFF4
  4512                           prodl	equ	0xFF3
  4513                           intcon	equ	0xFF2
  4514                           postinc0	equ	0xFEE
  4515                           wreg	equ	0xFE8
  4516                           indf1	equ	0xFE7
  4517                           postdec1	equ	0xFE5
  4518                           plusw1	equ	0xFE3
  4519                           fsr1h	equ	0xFE2
  4520                           fsr1l	equ	0xFE1
  4521                           indf2	equ	0xFDF
  4522                           postinc2	equ	0xFDE
  4523                           plusw2	equ	0xFDB
  4524                           fsr2h	equ	0xFDA
  4525                           fsr2l	equ	0xFD9
  4526                           status	equ	0xFD8
  4527                           
  4528 ;; *************** function _do_I2C_IDLE *****************
  4529 ;; Defined at:
  4530 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
  4531 ;; Parameters:    Size  Location     Type
  4532 ;;		None
  4533 ;; Auto vars:     Size  Location     Type
  4534 ;;		None
  4535 ;; Return value:  Size  Location     Type
  4536 ;;                  1    wreg      enum E11956
  4537 ;; Registers used:
  4538 ;;		wreg, status,2
  4539 ;; Tracked objects:
  4540 ;;		On entry : 0/0
  4541 ;;		On exit  : 0/0
  4542 ;;		Unchanged: 0/0
  4543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4548 ;;Total ram usage:        0 bytes
  4549 ;; Hardware stack levels used:    1
  4550 ;; Hardware stack levels required when called:    6
  4551 ;; This function calls:
  4552 ;;		Nothing
  4553 ;; This function is called by:
  4554 ;;		_i2c_ISR
  4555 ;;		i2_i2c_ISR
  4556 ;; This function uses a non-reentrant model
  4557 ;;
  4558                           
  4559                           	psect	text31
  4560  001276                     __ptext31:
  4561                           	opt stack 0
  4562  001276                     _do_I2C_IDLE:
  4563                           	opt stack 0
  4564                           
  4565                           ;Skip over the trampoline to the duplicate function for level 2
  4566  001276  B247               	btfsc	btemp,1,c
  4567  001278  EFBF  F009         	goto	i2_do_I2C_IDLE
  4568  00127C                     _do_I2C_IDLE$intlevel0:
  4569                           	opt stack 19
  4570                           
  4571                           ;i2c_master.c: 249: i2c_status.busy = 0;
  4572                           
  4573                           ;incstack = 0
  4574  00127C  0100               	movlb	0	; () banked
  4575  00127E  9160               	bcf	_i2c_status& (0+255),0,b
  4576                           
  4577                           ; BSR set to: 0
  4578                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
  4579  001280  0E00               	movlw	0
  4580  001282  6F6B               	movwf	(_i2c_status+11)& (0+255),b
  4581                           
  4582                           ; BSR set to: 0
  4583                           ;i2c_master.c: 251: return I2C_RESET;
  4584  001284  0E0E               	movlw	14
  4585  001286  0012               	return	
  4586  001288                     __end_of_do_I2C_IDLE:
  4587                           	opt stack 0
  4588                           tosu	equ	0xFFF
  4589                           tosh	equ	0xFFE
  4590                           tosl	equ	0xFFD
  4591                           pclath	equ	0xFFA
  4592                           tblptru	equ	0xFF8
  4593                           tblptrh	equ	0xFF7
  4594                           tblptrl	equ	0xFF6
  4595                           tablat	equ	0xFF5
  4596                           prodh	equ	0xFF4
  4597                           prodl	equ	0xFF3
  4598                           intcon	equ	0xFF2
  4599                           postinc0	equ	0xFEE
  4600                           wreg	equ	0xFE8
  4601                           indf1	equ	0xFE7
  4602                           postdec1	equ	0xFE5
  4603                           plusw1	equ	0xFE3
  4604                           fsr1h	equ	0xFE2
  4605                           fsr1l	equ	0xFE1
  4606                           indf2	equ	0xFDF
  4607                           postinc2	equ	0xFDE
  4608                           plusw2	equ	0xFDB
  4609                           fsr2h	equ	0xFDA
  4610                           fsr2l	equ	0xFD9
  4611                           status	equ	0xFD8
  4612                           
  4613 ;; *************** function _do_I2C_RESET *****************
  4614 ;; Defined at:
  4615 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
  4616 ;; Parameters:    Size  Location     Type
  4617 ;;		None
  4618 ;; Auto vars:     Size  Location     Type
  4619 ;;		None
  4620 ;; Return value:  Size  Location     Type
  4621 ;;                  1    wreg      enum E11956
  4622 ;; Registers used:
  4623 ;;		wreg, status,2, cstack
  4624 ;; Tracked objects:
  4625 ;;		On entry : 0/0
  4626 ;;		On exit  : 0/0
  4627 ;;		Unchanged: 0/0
  4628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4633 ;;Total ram usage:        0 bytes
  4634 ;; Hardware stack levels used:    1
  4635 ;; Hardware stack levels required when called:    7
  4636 ;; This function calls:
  4637 ;;		_i2c1_driver_resetBus
  4638 ;; This function is called by:
  4639 ;;		_i2c_ISR
  4640 ;;		i2_i2c_ISR
  4641 ;; This function uses a non-reentrant model
  4642 ;;
  4643                           
  4644                           	psect	text32
  4645  0011FA                     __ptext32:
  4646                           	opt stack 0
  4647  0011FA                     _do_I2C_RESET:
  4648                           	opt stack 0
  4649                           
  4650                           ; BSR set to: 0
  4651                           ;Skip over the trampoline to the duplicate function for level 2
  4652  0011FA  B247               	btfsc	btemp,1,c
  4653  0011FC  EF5D  F009         	goto	i2_do_I2C_RESET
  4654  001200                     _do_I2C_RESET$intlevel0:
  4655                           	opt stack 18
  4656                           
  4657                           ;i2c_master.c: 241: i2c1_driver_resetBus();
  4658                           
  4659                           ;incstack = 0
  4660  001200  EC3B  F00A         	call	_i2c1_driver_resetBus	;wreg free
  4661                           
  4662                           ;i2c_master.c: 242: i2c_status.busy = 0;
  4663  001204  0100               	movlb	0	; () banked
  4664  001206  9160               	bcf	_i2c_status& (0+255),0,b
  4665                           
  4666                           ; BSR set to: 0
  4667                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
  4668  001208  0E00               	movlw	0
  4669  00120A  6F6B               	movwf	(_i2c_status+11)& (0+255),b
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;i2c_master.c: 244: return I2C_RESET;
  4673  00120C  0E0E               	movlw	14
  4674  00120E  0012               	return	
  4675  001210                     __end_of_do_I2C_RESET:
  4676                           	opt stack 0
  4677                           tosu	equ	0xFFF
  4678                           tosh	equ	0xFFE
  4679                           tosl	equ	0xFFD
  4680                           pclath	equ	0xFFA
  4681                           tblptru	equ	0xFF8
  4682                           tblptrh	equ	0xFF7
  4683                           tblptrl	equ	0xFF6
  4684                           tablat	equ	0xFF5
  4685                           prodh	equ	0xFF4
  4686                           prodl	equ	0xFF3
  4687                           intcon	equ	0xFF2
  4688                           postinc0	equ	0xFEE
  4689                           wreg	equ	0xFE8
  4690                           indf1	equ	0xFE7
  4691                           postdec1	equ	0xFE5
  4692                           plusw1	equ	0xFE3
  4693                           fsr1h	equ	0xFE2
  4694                           fsr1l	equ	0xFE1
  4695                           indf2	equ	0xFDF
  4696                           postinc2	equ	0xFDE
  4697                           plusw2	equ	0xFDB
  4698                           fsr2h	equ	0xFDA
  4699                           fsr2l	equ	0xFD9
  4700                           status	equ	0xFD8
  4701                           
  4702 ;; *************** function _do_I2C_TX_EMPTY *****************
  4703 ;; Defined at:
  4704 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
  4705 ;; Parameters:    Size  Location     Type
  4706 ;;		None
  4707 ;; Auto vars:     Size  Location     Type
  4708 ;;		None
  4709 ;; Return value:  Size  Location     Type
  4710 ;;                  1    wreg      enum E11956
  4711 ;; Registers used:
  4712 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  4713 ;; Tracked objects:
  4714 ;;		On entry : 0/0
  4715 ;;		On exit  : 0/0
  4716 ;;		Unchanged: 0/0
  4717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4722 ;;Total ram usage:        0 bytes
  4723 ;; Hardware stack levels used:    1
  4724 ;; Hardware stack levels required when called:    9
  4725 ;; This function calls:
  4726 ;;		Absolute function
  4727 ;;		_do_I2C_SEND_RESTART
  4728 ;;		_do_I2C_SEND_STOP
  4729 ;;		_i2c_restartWrite
  4730 ;;		_mssp1_setIRQ
  4731 ;;		_rd1RegCompleteHandler
  4732 ;;		_rd2RegCompleteHandler
  4733 ;;		_rdBlkRegCompleteHandler
  4734 ;;		_returnReset
  4735 ;;		_returnStop
  4736 ;;		_wr1RegCompleteHandler
  4737 ;;		_wr2RegCompleteHandler
  4738 ;; This function is called by:
  4739 ;;		_i2c_ISR
  4740 ;;		i2_i2c_ISR
  4741 ;; This function uses a non-reentrant model
  4742 ;;
  4743                           
  4744                           	psect	text33
  4745  000B2C                     __ptext33:
  4746                           	opt stack 0
  4747  000B2C                     _do_I2C_TX_EMPTY:
  4748                           	opt stack 0
  4749                           
  4750                           ; BSR set to: 0
  4751                           ;Skip over the trampoline to the duplicate function for level 2
  4752  000B2C  B247               	btfsc	btemp,1,c
  4753  000B2E  EFC5  F005         	goto	i2_do_I2C_TX_EMPTY
  4754  000B32                     _do_I2C_TX_EMPTY$intlevel0:
  4755                           	opt stack 16
  4756                           
  4757                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
  4758                           
  4759                           ;incstack = 0
  4760  000B32  0100               	movlb	0	; () banked
  4761  000B34  8560               	bsf	_i2c_status& (0+255),2,b
  4762                           
  4763                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  4764  000B36  D00A               	goto	l471
  4765  000B38                     
  4766                           ;i2c_master.c: 388: case i2c_restart_write:
  4767                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
  4768                           
  4769                           ; BSR set to: 0
  4770                           
  4771                           ; BSR set to: 0
  4772  000B38  EC8F  F009         	call	_do_I2C_SEND_RESTART	;wreg free
  4773  000B3C  0012               	return	
  4774  000B3E                     
  4775                           ;i2c_master.c: 391: mssp1_setIRQ();
  4776  000B3E  EC00  F00A         	call	_mssp1_setIRQ	;wreg free
  4777                           
  4778                           ;i2c_master.c: 392: return I2C_TX;
  4779  000B42  0E03               	movlw	3
  4780  000B44  0012               	return	
  4781  000B46                     
  4782                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
  4783                           
  4784                           ;i2c_master.c: 394: case i2c_stop:
  4785  000B46  EC88  F009         	call	_do_I2C_SEND_STOP	;wreg free
  4786                           
  4787                           ;i2c_master.c: 396: }
  4788  000B4A  0012               	return	
  4789  000B4C                     l471:
  4790  000B4C  C07E  F021         	movff	_i2c_status+30,returnStop@p
  4791  000B50  C07F  F022         	movff	_i2c_status+31,returnStop@p+1
  4792  000B54  EE20  F06C         	lfsr	2,_i2c_status+12
  4793  000B58  D801               	call	u2048
  4794  000B5A  D00A               	goto	u2049
  4795  000B5C                     u2048:
  4796  000B5C  0005               	push	
  4797  000B5E  6EFA               	movwf	pclath,c
  4798  000B60  50DE               	movf	postinc2,w,c
  4799  000B62  6EFD               	movwf	tosl,c
  4800  000B64  50DE               	movf	postinc2,w,c
  4801  000B66  6EFE               	movwf	tosh,c
  4802  000B68  50DE               	movf	postinc2,w,c
  4803  000B6A  6EFF               	movwf	tosu,c
  4804  000B6C  50FA               	movf	pclath,w,c
  4805  000B6E  0012               	return		;indir
  4806  000B70                     u2049:
  4807                           
  4808                           ; Switch size 1, requested type "space"
  4809                           ; Number of cases is 4, Range of values is 1 to 4
  4810                           ; switch strategies available:
  4811                           ; Name         Instructions Cycles
  4812                           ; simple_byte           13     7 (average)
  4813                           ;	Chosen strategy is simple_byte
  4814  000B70  0A01               	xorlw	1	; case 1
  4815  000B72  B4D8               	btfsc	status,2,c
  4816  000B74  D7E8               	goto	l476
  4817  000B76  0A03               	xorlw	3	; case 2
  4818  000B78  B4D8               	btfsc	status,2,c
  4819  000B7A  D7DE               	goto	l472
  4820  000B7C  0A01               	xorlw	1	; case 3
  4821  000B7E  B4D8               	btfsc	status,2,c
  4822  000B80  D7DB               	goto	l472
  4823  000B82  0A07               	xorlw	7	; case 4
  4824  000B84  B4D8               	btfsc	status,2,c
  4825  000B86  D7DB               	goto	l475
  4826  000B88  D7DE               	goto	l476
  4827  000B8A                     __end_of_do_I2C_TX_EMPTY:
  4828                           	opt stack 0
  4829                           tosu	equ	0xFFF
  4830                           tosh	equ	0xFFE
  4831                           tosl	equ	0xFFD
  4832                           pclath	equ	0xFFA
  4833                           tblptru	equ	0xFF8
  4834                           tblptrh	equ	0xFF7
  4835                           tblptrl	equ	0xFF6
  4836                           tablat	equ	0xFF5
  4837                           prodh	equ	0xFF4
  4838                           prodl	equ	0xFF3
  4839                           intcon	equ	0xFF2
  4840                           postinc0	equ	0xFEE
  4841                           wreg	equ	0xFE8
  4842                           indf1	equ	0xFE7
  4843                           postdec1	equ	0xFE5
  4844                           plusw1	equ	0xFE3
  4845                           fsr1h	equ	0xFE2
  4846                           fsr1l	equ	0xFE1
  4847                           indf2	equ	0xFDF
  4848                           postinc2	equ	0xFDE
  4849                           plusw2	equ	0xFDB
  4850                           fsr2h	equ	0xFDA
  4851                           fsr2l	equ	0xFD9
  4852                           status	equ	0xFD8
  4853                           
  4854 ;; *************** function _mssp1_setIRQ *****************
  4855 ;; Defined at:
  4856 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
  4857 ;; Parameters:    Size  Location     Type
  4858 ;;		None
  4859 ;; Auto vars:     Size  Location     Type
  4860 ;;		None
  4861 ;; Return value:  Size  Location     Type
  4862 ;;                  1    wreg      void 
  4863 ;; Registers used:
  4864 ;;		None
  4865 ;; Tracked objects:
  4866 ;;		On entry : 0/0
  4867 ;;		On exit  : 0/0
  4868 ;;		Unchanged: 0/0
  4869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4874 ;;Total ram usage:        0 bytes
  4875 ;; Hardware stack levels used:    1
  4876 ;; Hardware stack levels required when called:    6
  4877 ;; This function calls:
  4878 ;;		Nothing
  4879 ;; This function is called by:
  4880 ;;		_do_I2C_TX_EMPTY
  4881 ;; This function uses a non-reentrant model
  4882 ;;
  4883                           
  4884                           	psect	text34
  4885  001400                     __ptext34:
  4886                           	opt stack 0
  4887  001400                     _mssp1_setIRQ:
  4888                           	opt stack 18
  4889                           
  4890                           ;i2c1_driver.c: 60: PIR3bits.SSP1IF = 1;
  4891                           
  4892                           ;incstack = 0
  4893  001400  010E               	movlb	14	; () banked
  4894  001402  81CD               	bsf	205,0,b	;volatile
  4895                           
  4896                           ; BSR set to: 14
  4897  001404  0012               	return		;funcret
  4898  001406                     __end_of_mssp1_setIRQ:
  4899                           	opt stack 0
  4900                           tosu	equ	0xFFF
  4901                           tosh	equ	0xFFE
  4902                           tosl	equ	0xFFD
  4903                           pclath	equ	0xFFA
  4904                           tblptru	equ	0xFF8
  4905                           tblptrh	equ	0xFF7
  4906                           tblptrl	equ	0xFF6
  4907                           tablat	equ	0xFF5
  4908                           prodh	equ	0xFF4
  4909                           prodl	equ	0xFF3
  4910                           intcon	equ	0xFF2
  4911                           postinc0	equ	0xFEE
  4912                           wreg	equ	0xFE8
  4913                           indf1	equ	0xFE7
  4914                           postdec1	equ	0xFE5
  4915                           plusw1	equ	0xFE3
  4916                           fsr1h	equ	0xFE2
  4917                           fsr1l	equ	0xFE1
  4918                           indf2	equ	0xFDF
  4919                           postinc2	equ	0xFDE
  4920                           plusw2	equ	0xFDB
  4921                           fsr2h	equ	0xFDA
  4922                           fsr2l	equ	0xFD9
  4923                           status	equ	0xFD8
  4924                           
  4925 ;; *************** function _i2c1_driver_isNACK *****************
  4926 ;; Defined at:
  4927 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
  4928 ;; Parameters:    Size  Location     Type
  4929 ;;		None
  4930 ;; Auto vars:     Size  Location     Type
  4931 ;;		None
  4932 ;; Return value:  Size  Location     Type
  4933 ;;		None               void
  4934 ;; Registers used:
  4935 ;;		wreg, status,2, status,0
  4936 ;; Tracked objects:
  4937 ;;		On entry : 0/0
  4938 ;;		On exit  : 0/0
  4939 ;;		Unchanged: 0/0
  4940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4943 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4944 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4945 ;;Total ram usage:        1 bytes
  4946 ;; Hardware stack levels used:    1
  4947 ;; Hardware stack levels required when called:    6
  4948 ;; This function calls:
  4949 ;;		Nothing
  4950 ;; This function is called by:
  4951 ;;		_do_I2C_TX
  4952 ;;		_i2c_ISR
  4953 ;; This function uses a non-reentrant model
  4954 ;;
  4955                           
  4956                           	psect	text35
  4957  001210                     __ptext35:
  4958                           	opt stack 0
  4959  001210                     _i2c1_driver_isNACK:
  4960                           	opt stack 19
  4961                           
  4962                           ;i2c1_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
  4963                           
  4964                           ; BSR set to: 14
  4965                           ;incstack = 0
  4966  001210  5097               	movf	3991,w,c	;volatile
  4967  001212  0BBF               	andlw	-65
  4968  001214  0940               	iorlw	64
  4969  001216  6E97               	movwf	3991,c	;volatile
  4970  001218  3897               	swapf	3991,w,c	;volatile
  4971  00121A  32E8               	rrcf	wreg,f,c
  4972  00121C  32E8               	rrcf	wreg,f,c
  4973  00121E  0B01               	andlw	1
  4974  001220  6E16               	movwf	??_i2c1_driver_isNACK& (0+255),c
  4975  001222  3016               	rrcf	??_i2c1_driver_isNACK,w,c
  4976  001224  0012               	return	
  4977  001226                     __end_of_i2c1_driver_isNACK:
  4978                           	opt stack 0
  4979                           tosu	equ	0xFFF
  4980                           tosh	equ	0xFFE
  4981                           tosl	equ	0xFFD
  4982                           pclath	equ	0xFFA
  4983                           tblptru	equ	0xFF8
  4984                           tblptrh	equ	0xFF7
  4985                           tblptrl	equ	0xFF6
  4986                           tablat	equ	0xFF5
  4987                           prodh	equ	0xFF4
  4988                           prodl	equ	0xFF3
  4989                           intcon	equ	0xFF2
  4990                           postinc0	equ	0xFEE
  4991                           wreg	equ	0xFE8
  4992                           indf1	equ	0xFE7
  4993                           postdec1	equ	0xFE5
  4994                           plusw1	equ	0xFE3
  4995                           fsr1h	equ	0xFE2
  4996                           fsr1l	equ	0xFE1
  4997                           indf2	equ	0xFDF
  4998                           postinc2	equ	0xFDE
  4999                           plusw2	equ	0xFDB
  5000                           fsr2h	equ	0xFDA
  5001                           fsr2l	equ	0xFD9
  5002                           status	equ	0xFD8
  5003                           
  5004 ;; *************** function _i2c1_driver_TXData *****************
  5005 ;; Defined at:
  5006 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
  5007 ;; Parameters:    Size  Location     Type
  5008 ;;  d               1    wreg     unsigned char 
  5009 ;; Auto vars:     Size  Location     Type
  5010 ;;  d               1   21[COMRAM] unsigned char 
  5011 ;; Return value:  Size  Location     Type
  5012 ;;                  1    wreg      void 
  5013 ;; Registers used:
  5014 ;;		wreg
  5015 ;; Tracked objects:
  5016 ;;		On entry : 0/0
  5017 ;;		On exit  : 0/0
  5018 ;;		Unchanged: 0/0
  5019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5021 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5023 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5024 ;;Total ram usage:        1 bytes
  5025 ;; Hardware stack levels used:    1
  5026 ;; Hardware stack levels required when called:    6
  5027 ;; This function calls:
  5028 ;;		Nothing
  5029 ;; This function is called by:
  5030 ;;		_do_I2C_SEND_ADR_READ
  5031 ;;		_do_I2C_SEND_ADR_WRITE
  5032 ;;		_do_I2C_TX
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           	psect	text36
  5037  0013B8                     __ptext36:
  5038                           	opt stack 0
  5039  0013B8                     _i2c1_driver_TXData:
  5040                           	opt stack 18
  5041                           
  5042                           ;incstack = 0
  5043                           ;i2c1_driver_TXData@d stored from wreg
  5044  0013B8  6E16               	movwf	i2c1_driver_TXData@d,c
  5045                           
  5046                           ;i2c1_driver.c: 188: SSP1BUF = d;
  5047  0013BA  C016  FF92         	movff	i2c1_driver_TXData@d,3986	;volatile
  5048  0013BE  0012               	return		;funcret
  5049  0013C0                     __end_of_i2c1_driver_TXData:
  5050                           	opt stack 0
  5051                           tosu	equ	0xFFF
  5052                           tosh	equ	0xFFE
  5053                           tosl	equ	0xFFD
  5054                           pclath	equ	0xFFA
  5055                           tblptru	equ	0xFF8
  5056                           tblptrh	equ	0xFF7
  5057                           tblptrl	equ	0xFF6
  5058                           tablat	equ	0xFF5
  5059                           prodh	equ	0xFF4
  5060                           prodl	equ	0xFF3
  5061                           intcon	equ	0xFF2
  5062                           postinc0	equ	0xFEE
  5063                           wreg	equ	0xFE8
  5064                           indf1	equ	0xFE7
  5065                           postdec1	equ	0xFE5
  5066                           plusw1	equ	0xFE3
  5067                           fsr1h	equ	0xFE2
  5068                           fsr1l	equ	0xFE1
  5069                           indf2	equ	0xFDF
  5070                           postinc2	equ	0xFDE
  5071                           plusw2	equ	0xFDB
  5072                           fsr2h	equ	0xFDA
  5073                           fsr2l	equ	0xFD9
  5074                           status	equ	0xFD8
  5075                           
  5076 ;; *************** function _i2c1_driver_getRXData *****************
  5077 ;; Defined at:
  5078 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
  5079 ;; Parameters:    Size  Location     Type
  5080 ;;		None
  5081 ;; Auto vars:     Size  Location     Type
  5082 ;;		None
  5083 ;; Return value:  Size  Location     Type
  5084 ;;                  1    wreg      unsigned char 
  5085 ;; Registers used:
  5086 ;;		wreg, status,2
  5087 ;; Tracked objects:
  5088 ;;		On entry : 0/0
  5089 ;;		On exit  : 0/0
  5090 ;;		Unchanged: 0/0
  5091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5095 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5096 ;;Total ram usage:        0 bytes
  5097 ;; Hardware stack levels used:    1
  5098 ;; Hardware stack levels required when called:    6
  5099 ;; This function calls:
  5100 ;;		Nothing
  5101 ;; This function is called by:
  5102 ;;		_do_I2C_RX
  5103 ;; This function uses a non-reentrant model
  5104 ;;
  5105                           
  5106                           	psect	text37
  5107  001442                     __ptext37:
  5108                           	opt stack 0
  5109  001442                     _i2c1_driver_getRXData:
  5110                           	opt stack 18
  5111                           
  5112                           ;i2c1_driver.c: 173: return SSP1BUF;
  5113                           
  5114                           ;incstack = 0
  5115  001442  5092               	movf	3986,w,c	;volatile
  5116  001444  0012               	return	
  5117  001446                     __end_of_i2c1_driver_getRXData:
  5118                           	opt stack 0
  5119                           tosu	equ	0xFFF
  5120                           tosh	equ	0xFFE
  5121                           tosl	equ	0xFFD
  5122                           pclath	equ	0xFFA
  5123                           tblptru	equ	0xFF8
  5124                           tblptrh	equ	0xFF7
  5125                           tblptrl	equ	0xFF6
  5126                           tablat	equ	0xFF5
  5127                           prodh	equ	0xFF4
  5128                           prodl	equ	0xFF3
  5129                           intcon	equ	0xFF2
  5130                           postinc0	equ	0xFEE
  5131                           wreg	equ	0xFE8
  5132                           indf1	equ	0xFE7
  5133                           postdec1	equ	0xFE5
  5134                           plusw1	equ	0xFE3
  5135                           fsr1h	equ	0xFE2
  5136                           fsr1l	equ	0xFE1
  5137                           indf2	equ	0xFDF
  5138                           postinc2	equ	0xFDE
  5139                           plusw2	equ	0xFDB
  5140                           fsr2h	equ	0xFDA
  5141                           fsr2l	equ	0xFD9
  5142                           status	equ	0xFD8
  5143                           
  5144 ;; *************** function _i2c1_driver_sendNACK *****************
  5145 ;; Defined at:
  5146 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
  5147 ;; Parameters:    Size  Location     Type
  5148 ;;		None
  5149 ;; Auto vars:     Size  Location     Type
  5150 ;;		None
  5151 ;; Return value:  Size  Location     Type
  5152 ;;                  1    wreg      void 
  5153 ;; Registers used:
  5154 ;;		None
  5155 ;; Tracked objects:
  5156 ;;		On entry : 0/0
  5157 ;;		On exit  : 0/0
  5158 ;;		Unchanged: 0/0
  5159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5164 ;;Total ram usage:        0 bytes
  5165 ;; Hardware stack levels used:    1
  5166 ;; Hardware stack levels required when called:    6
  5167 ;; This function calls:
  5168 ;;		Nothing
  5169 ;; This function is called by:
  5170 ;;		_do_I2C_DO_NACK_STOP
  5171 ;;		_do_I2C_DO_NACK_RESTART
  5172 ;; This function uses a non-reentrant model
  5173 ;;
  5174                           
  5175                           	psect	text38
  5176  001406                     __ptext38:
  5177                           	opt stack 0
  5178  001406                     _i2c1_driver_sendNACK:
  5179                           	opt stack 17
  5180                           
  5181                           ;i2c1_driver.c: 204: SSP1CON2bits.ACKDT = 1;
  5182                           
  5183                           ;incstack = 0
  5184  001406  8A97               	bsf	3991,5,c	;volatile
  5185                           
  5186                           ;i2c1_driver.c: 205: SSP1CON2bits.ACKEN = 1;
  5187  001408  8897               	bsf	3991,4,c	;volatile
  5188  00140A  0012               	return		;funcret
  5189  00140C                     __end_of_i2c1_driver_sendNACK:
  5190                           	opt stack 0
  5191                           tosu	equ	0xFFF
  5192                           tosh	equ	0xFFE
  5193                           tosl	equ	0xFFD
  5194                           pclath	equ	0xFFA
  5195                           tblptru	equ	0xFF8
  5196                           tblptrh	equ	0xFF7
  5197                           tblptrl	equ	0xFF6
  5198                           tablat	equ	0xFF5
  5199                           prodh	equ	0xFF4
  5200                           prodl	equ	0xFF3
  5201                           intcon	equ	0xFF2
  5202                           postinc0	equ	0xFEE
  5203                           wreg	equ	0xFE8
  5204                           indf1	equ	0xFE7
  5205                           postdec1	equ	0xFE5
  5206                           plusw1	equ	0xFE3
  5207                           fsr1h	equ	0xFE2
  5208                           fsr1l	equ	0xFE1
  5209                           indf2	equ	0xFDF
  5210                           postinc2	equ	0xFDE
  5211                           plusw2	equ	0xFDB
  5212                           fsr2h	equ	0xFDA
  5213                           fsr2l	equ	0xFD9
  5214                           status	equ	0xFD8
  5215                           
  5216 ;; *************** function _i2c1_driver_resetBus *****************
  5217 ;; Defined at:
  5218 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
  5219 ;; Parameters:    Size  Location     Type
  5220 ;;		None
  5221 ;; Auto vars:     Size  Location     Type
  5222 ;;		None
  5223 ;; Return value:  Size  Location     Type
  5224 ;;                  1    wreg      void 
  5225 ;; Registers used:
  5226 ;;		None
  5227 ;; Tracked objects:
  5228 ;;		On entry : 0/0
  5229 ;;		On exit  : 0/0
  5230 ;;		Unchanged: 0/0
  5231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5235 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5236 ;;Total ram usage:        0 bytes
  5237 ;; Hardware stack levels used:    1
  5238 ;; Hardware stack levels required when called:    6
  5239 ;; This function calls:
  5240 ;;		Nothing
  5241 ;; This function is called by:
  5242 ;;		_do_I2C_RESET
  5243 ;; This function uses a non-reentrant model
  5244 ;;
  5245                           
  5246                           	psect	text39
  5247  001476                     __ptext39:
  5248                           	opt stack 0
  5249  001476                     _i2c1_driver_resetBus:
  5250                           	opt stack 18
  5251                           
  5252                           ;incstack = 0
  5253  001476  0012               	return		;funcret
  5254  001478                     __end_of_i2c1_driver_resetBus:
  5255                           	opt stack 0
  5256                           tosu	equ	0xFFF
  5257                           tosh	equ	0xFFE
  5258                           tosl	equ	0xFFD
  5259                           pclath	equ	0xFFA
  5260                           tblptru	equ	0xFF8
  5261                           tblptrh	equ	0xFF7
  5262                           tblptrl	equ	0xFF6
  5263                           tablat	equ	0xFF5
  5264                           prodh	equ	0xFF4
  5265                           prodl	equ	0xFF3
  5266                           intcon	equ	0xFF2
  5267                           postinc0	equ	0xFEE
  5268                           wreg	equ	0xFE8
  5269                           indf1	equ	0xFE7
  5270                           postdec1	equ	0xFE5
  5271                           plusw1	equ	0xFE3
  5272                           fsr1h	equ	0xFE2
  5273                           fsr1l	equ	0xFE1
  5274                           indf2	equ	0xFDF
  5275                           postinc2	equ	0xFDE
  5276                           plusw2	equ	0xFDB
  5277                           fsr2h	equ	0xFDA
  5278                           fsr2l	equ	0xFD9
  5279                           status	equ	0xFD8
  5280                           
  5281 ;; *************** function _i2c1_driver_startRX *****************
  5282 ;; Defined at:
  5283 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
  5284 ;; Parameters:    Size  Location     Type
  5285 ;;		None
  5286 ;; Auto vars:     Size  Location     Type
  5287 ;;		None
  5288 ;; Return value:  Size  Location     Type
  5289 ;;                  1    wreg      void 
  5290 ;; Registers used:
  5291 ;;		None
  5292 ;; Tracked objects:
  5293 ;;		On entry : 0/0
  5294 ;;		On exit  : 0/0
  5295 ;;		Unchanged: 0/0
  5296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5300 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5301 ;;Total ram usage:        0 bytes
  5302 ;; Hardware stack levels used:    1
  5303 ;; Hardware stack levels required when called:    6
  5304 ;; This function calls:
  5305 ;;		Nothing
  5306 ;; This function is called by:
  5307 ;;		_do_I2C_RCEN
  5308 ;; This function uses a non-reentrant model
  5309 ;;
  5310                           
  5311                           	psect	text40
  5312  001446                     __ptext40:
  5313                           	opt stack 0
  5314  001446                     _i2c1_driver_startRX:
  5315                           	opt stack 18
  5316                           
  5317                           ;i2c1_driver.c: 168: SSP1CON2bits.RCEN = 1;
  5318                           
  5319                           ;incstack = 0
  5320  001446  8697               	bsf	3991,3,c	;volatile
  5321  001448  0012               	return		;funcret
  5322  00144A                     __end_of_i2c1_driver_startRX:
  5323                           	opt stack 0
  5324                           tosu	equ	0xFFF
  5325                           tosh	equ	0xFFE
  5326                           tosl	equ	0xFFD
  5327                           pclath	equ	0xFFA
  5328                           tblptru	equ	0xFF8
  5329                           tblptrh	equ	0xFF7
  5330                           tblptrl	equ	0xFF6
  5331                           tablat	equ	0xFF5
  5332                           prodh	equ	0xFF4
  5333                           prodl	equ	0xFF3
  5334                           intcon	equ	0xFF2
  5335                           postinc0	equ	0xFEE
  5336                           wreg	equ	0xFE8
  5337                           indf1	equ	0xFE7
  5338                           postdec1	equ	0xFE5
  5339                           plusw1	equ	0xFE3
  5340                           fsr1h	equ	0xFE2
  5341                           fsr1l	equ	0xFE1
  5342                           indf2	equ	0xFDF
  5343                           postinc2	equ	0xFDE
  5344                           plusw2	equ	0xFDB
  5345                           fsr2h	equ	0xFDA
  5346                           fsr2l	equ	0xFD9
  5347                           status	equ	0xFD8
  5348                           
  5349 ;; *************** function _rdBlkRegCompleteHandler *****************
  5350 ;; Defined at:
  5351 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  5352 ;; Parameters:    Size  Location     Type
  5353 ;;  p               2   32[COMRAM] PTR void 
  5354 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  5355 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  5356 ;; Auto vars:     Size  Location     Type
  5357 ;;		None
  5358 ;; Return value:  Size  Location     Type
  5359 ;;                  1    wreg      enum E97
  5360 ;; Registers used:
  5361 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5362 ;; Tracked objects:
  5363 ;;		On entry : 0/0
  5364 ;;		On exit  : 0/0
  5365 ;;		Unchanged: 0/0
  5366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5367 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5370 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5371 ;;Total ram usage:        2 bytes
  5372 ;; Hardware stack levels used:    1
  5373 ;; Hardware stack levels required when called:    8
  5374 ;; This function calls:
  5375 ;;		_i2c_setBuffer
  5376 ;;		_i2c_setDataCompleteCallback
  5377 ;; This function is called by:
  5378 ;;		_i2c_readDataBlock
  5379 ;;		_do_I2C_DO_ADDRESS_NACK
  5380 ;;		_do_I2C_TX
  5381 ;;		_do_I2C_RX
  5382 ;;		_do_I2C_TX_EMPTY
  5383 ;;		i2_do_I2C_DO_ADDRESS_NACK
  5384 ;;		i2_do_I2C_TX
  5385 ;;		i2_do_I2C_RX
  5386 ;;		i2_do_I2C_TX_EMPTY
  5387 ;; This function uses a non-reentrant model
  5388 ;;
  5389                           
  5390                           	psect	text41
  5391  000CC8                     __ptext41:
  5392                           	opt stack 0
  5393  000CC8                     _rdBlkRegCompleteHandler:
  5394                           	opt stack 0
  5395                           
  5396                           ;Skip over the trampoline to the duplicate function for level 2
  5397  000CC8  B247               	btfsc	btemp,1,c
  5398  000CCA  EFD1  F006         	goto	i2_rdBlkRegCompleteHandler
  5399  000CCE                     _rdBlkRegCompleteHandler$intlevel0:
  5400                           	opt stack 16
  5401                           
  5402                           ;i2c_simple_master.c: 136: i2c_setBuffer(((buf_t *)p)->data,((buf_t*)p)->len);
  5403                           
  5404                           ;incstack = 0
  5405  000CCE  EE20 F002          	lfsr	2,2
  5406  000CD2  5021               	movf	rdBlkRegCompleteHandler@p,w,c
  5407  000CD4  26D9               	addwf	fsr2l,f,c
  5408  000CD6  5022               	movf	rdBlkRegCompleteHandler@p+1,w,c
  5409  000CD8  22DA               	addwfc	fsr2h,f,c
  5410  000CDA  CFDE F016          	movff	postinc2,i2c_setBuffer@buffer
  5411  000CDE  CFDD F017          	movff	postdec2,i2c_setBuffer@buffer+1
  5412  000CE2  C021  FFD9         	movff	rdBlkRegCompleteHandler@p,fsr2l
  5413  000CE6  C022  FFDA         	movff	rdBlkRegCompleteHandler@p+1,fsr2h
  5414  000CEA  CFDE F018          	movff	postinc2,i2c_setBuffer@bufferSize
  5415  000CEE  CFDD F019          	movff	postdec2,i2c_setBuffer@bufferSize+1
  5416  000CF2  EC92  F008         	call	_i2c_setBuffer	;wreg free
  5417                           
  5418                           ;i2c_simple_master.c: 137: i2c_setDataCompleteCallback((0),(0));
  5419  000CF6  0E00               	movlw	0
  5420  000CF8  6E1C               	movwf	i2c_setDataCompleteCallback@cb,c
  5421  000CFA  0E00               	movlw	0
  5422  000CFC  6E1D               	movwf	i2c_setDataCompleteCallback@cb+1,c
  5423  000CFE  0E00               	movlw	0
  5424  000D00  6E1E               	movwf	i2c_setDataCompleteCallback@cb+2,c
  5425  000D02  0E00               	movlw	0
  5426  000D04  6E1F               	movwf	i2c_setDataCompleteCallback@p,c
  5427  000D06  0E00               	movlw	0
  5428  000D08  6E20               	movwf	i2c_setDataCompleteCallback@p+1,c
  5429  000D0A  EC5B  F008         	call	_i2c_setDataCompleteCallback	;wreg free
  5430                           
  5431                           ;i2c_simple_master.c: 138: return i2c_restart_read;
  5432  000D0E  0E02               	movlw	2
  5433  000D10  0012               	return	
  5434  000D12                     __end_of_rdBlkRegCompleteHandler:
  5435                           	opt stack 0
  5436                           tosu	equ	0xFFF
  5437                           tosh	equ	0xFFE
  5438                           tosl	equ	0xFFD
  5439                           pclath	equ	0xFFA
  5440                           tblptru	equ	0xFF8
  5441                           tblptrh	equ	0xFF7
  5442                           tblptrl	equ	0xFF6
  5443                           tablat	equ	0xFF5
  5444                           prodh	equ	0xFF4
  5445                           prodl	equ	0xFF3
  5446                           intcon	equ	0xFF2
  5447                           postinc0	equ	0xFEE
  5448                           wreg	equ	0xFE8
  5449                           indf1	equ	0xFE7
  5450                           postdec1	equ	0xFE5
  5451                           plusw1	equ	0xFE3
  5452                           fsr1h	equ	0xFE2
  5453                           fsr1l	equ	0xFE1
  5454                           indf2	equ	0xFDF
  5455                           postinc2	equ	0xFDE
  5456                           postdec2	equ	0xFDD
  5457                           plusw2	equ	0xFDB
  5458                           fsr2h	equ	0xFDA
  5459                           fsr2l	equ	0xFD9
  5460                           status	equ	0xFD8
  5461                           
  5462 ;; *************** function _rd2RegCompleteHandler *****************
  5463 ;; Defined at:
  5464 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  5465 ;; Parameters:    Size  Location     Type
  5466 ;;  p               2   32[COMRAM] PTR void 
  5467 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  5468 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;		None
  5471 ;; Return value:  Size  Location     Type
  5472 ;;                  1    wreg      enum E97
  5473 ;; Registers used:
  5474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5480 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5483 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5484 ;;Total ram usage:        2 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; Hardware stack levels required when called:    8
  5487 ;; This function calls:
  5488 ;;		_i2c_setBuffer
  5489 ;;		_i2c_setDataCompleteCallback
  5490 ;; This function is called by:
  5491 ;;		_i2c_read2ByteRegister
  5492 ;;		_do_I2C_DO_ADDRESS_NACK
  5493 ;;		_do_I2C_TX
  5494 ;;		_do_I2C_RX
  5495 ;;		_do_I2C_TX_EMPTY
  5496 ;;		i2_do_I2C_DO_ADDRESS_NACK
  5497 ;;		i2_do_I2C_TX
  5498 ;;		i2_do_I2C_RX
  5499 ;;		i2_do_I2C_TX_EMPTY
  5500 ;; This function uses a non-reentrant model
  5501 ;;
  5502                           
  5503                           	psect	text42
  5504  000E28                     __ptext42:
  5505                           	opt stack 0
  5506  000E28                     _rd2RegCompleteHandler:
  5507                           	opt stack 0
  5508                           
  5509                           ;Skip over the trampoline to the duplicate function for level 2
  5510  000E28  B247               	btfsc	btemp,1,c
  5511  000E2A  EFCA  F007         	goto	i2_rd2RegCompleteHandler
  5512  000E2E                     _rd2RegCompleteHandler$intlevel0:
  5513                           	opt stack 16
  5514                           
  5515                           ;i2c_simple_master.c: 89: i2c_setBuffer(p,2);
  5516                           
  5517                           ;incstack = 0
  5518  000E2E  C021  F016         	movff	rd2RegCompleteHandler@p,i2c_setBuffer@buffer
  5519  000E32  C022  F017         	movff	rd2RegCompleteHandler@p+1,i2c_setBuffer@buffer+1
  5520  000E36  0E00               	movlw	0
  5521  000E38  6E19               	movwf	i2c_setBuffer@bufferSize+1,c
  5522  000E3A  0E02               	movlw	2
  5523  000E3C  6E18               	movwf	i2c_setBuffer@bufferSize,c
  5524  000E3E  EC92  F008         	call	_i2c_setBuffer	;wreg free
  5525                           
  5526                           ;i2c_simple_master.c: 90: i2c_setDataCompleteCallback((0),(0));
  5527  000E42  0E00               	movlw	0
  5528  000E44  6E1C               	movwf	i2c_setDataCompleteCallback@cb,c
  5529  000E46  0E00               	movlw	0
  5530  000E48  6E1D               	movwf	i2c_setDataCompleteCallback@cb+1,c
  5531  000E4A  0E00               	movlw	0
  5532  000E4C  6E1E               	movwf	i2c_setDataCompleteCallback@cb+2,c
  5533  000E4E  0E00               	movlw	0
  5534  000E50  6E1F               	movwf	i2c_setDataCompleteCallback@p,c
  5535  000E52  0E00               	movlw	0
  5536  000E54  6E20               	movwf	i2c_setDataCompleteCallback@p+1,c
  5537  000E56  EC5B  F008         	call	_i2c_setDataCompleteCallback	;wreg free
  5538                           
  5539                           ;i2c_simple_master.c: 91: return i2c_restart_read;
  5540  000E5A  0E02               	movlw	2
  5541  000E5C  0012               	return	
  5542  000E5E                     __end_of_rd2RegCompleteHandler:
  5543                           	opt stack 0
  5544                           tosu	equ	0xFFF
  5545                           tosh	equ	0xFFE
  5546                           tosl	equ	0xFFD
  5547                           pclath	equ	0xFFA
  5548                           tblptru	equ	0xFF8
  5549                           tblptrh	equ	0xFF7
  5550                           tblptrl	equ	0xFF6
  5551                           tablat	equ	0xFF5
  5552                           prodh	equ	0xFF4
  5553                           prodl	equ	0xFF3
  5554                           intcon	equ	0xFF2
  5555                           postinc0	equ	0xFEE
  5556                           wreg	equ	0xFE8
  5557                           indf1	equ	0xFE7
  5558                           postdec1	equ	0xFE5
  5559                           plusw1	equ	0xFE3
  5560                           fsr1h	equ	0xFE2
  5561                           fsr1l	equ	0xFE1
  5562                           indf2	equ	0xFDF
  5563                           postinc2	equ	0xFDE
  5564                           postdec2	equ	0xFDD
  5565                           plusw2	equ	0xFDB
  5566                           fsr2h	equ	0xFDA
  5567                           fsr2l	equ	0xFD9
  5568                           status	equ	0xFD8
  5569                           
  5570 ;; *************** function _rd1RegCompleteHandler *****************
  5571 ;; Defined at:
  5572 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  5573 ;; Parameters:    Size  Location     Type
  5574 ;;  p               2   32[COMRAM] PTR void 
  5575 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  5576 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  5577 ;; Auto vars:     Size  Location     Type
  5578 ;;		None
  5579 ;; Return value:  Size  Location     Type
  5580 ;;                  1    wreg      enum E97
  5581 ;; Registers used:
  5582 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5583 ;; Tracked objects:
  5584 ;;		On entry : 0/0
  5585 ;;		On exit  : 0/0
  5586 ;;		Unchanged: 0/0
  5587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5588 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5591 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5592 ;;Total ram usage:        2 bytes
  5593 ;; Hardware stack levels used:    1
  5594 ;; Hardware stack levels required when called:    8
  5595 ;; This function calls:
  5596 ;;		_i2c_setBuffer
  5597 ;;		_i2c_setDataCompleteCallback
  5598 ;; This function is called by:
  5599 ;;		_i2c_read1ByteRegister
  5600 ;;		_do_I2C_DO_ADDRESS_NACK
  5601 ;;		_do_I2C_TX
  5602 ;;		_do_I2C_RX
  5603 ;;		_do_I2C_TX_EMPTY
  5604 ;;		i2_do_I2C_DO_ADDRESS_NACK
  5605 ;;		i2_do_I2C_TX
  5606 ;;		i2_do_I2C_RX
  5607 ;;		i2_do_I2C_TX_EMPTY
  5608 ;; This function uses a non-reentrant model
  5609 ;;
  5610                           
  5611                           	psect	text43
  5612  000E5E                     __ptext43:
  5613                           	opt stack 0
  5614  000E5E                     _rd1RegCompleteHandler:
  5615                           	opt stack 0
  5616                           
  5617                           ;Skip over the trampoline to the duplicate function for level 2
  5618  000E5E  B247               	btfsc	btemp,1,c
  5619  000E60  EFE2  F007         	goto	i2_rd1RegCompleteHandler
  5620  000E64                     _rd1RegCompleteHandler$intlevel0:
  5621                           	opt stack 16
  5622                           
  5623                           ;i2c_simple_master.c: 60: i2c_setBuffer(p,1);
  5624                           
  5625                           ;incstack = 0
  5626  000E64  C021  F016         	movff	rd1RegCompleteHandler@p,i2c_setBuffer@buffer
  5627  000E68  C022  F017         	movff	rd1RegCompleteHandler@p+1,i2c_setBuffer@buffer+1
  5628  000E6C  0E00               	movlw	0
  5629  000E6E  6E19               	movwf	i2c_setBuffer@bufferSize+1,c
  5630  000E70  0E01               	movlw	1
  5631  000E72  6E18               	movwf	i2c_setBuffer@bufferSize,c
  5632  000E74  EC92  F008         	call	_i2c_setBuffer	;wreg free
  5633                           
  5634                           ;i2c_simple_master.c: 61: i2c_setDataCompleteCallback((0),(0));
  5635  000E78  0E00               	movlw	0
  5636  000E7A  6E1C               	movwf	i2c_setDataCompleteCallback@cb,c
  5637  000E7C  0E00               	movlw	0
  5638  000E7E  6E1D               	movwf	i2c_setDataCompleteCallback@cb+1,c
  5639  000E80  0E00               	movlw	0
  5640  000E82  6E1E               	movwf	i2c_setDataCompleteCallback@cb+2,c
  5641  000E84  0E00               	movlw	0
  5642  000E86  6E1F               	movwf	i2c_setDataCompleteCallback@p,c
  5643  000E88  0E00               	movlw	0
  5644  000E8A  6E20               	movwf	i2c_setDataCompleteCallback@p+1,c
  5645  000E8C  EC5B  F008         	call	_i2c_setDataCompleteCallback	;wreg free
  5646                           
  5647                           ;i2c_simple_master.c: 62: return i2c_restart_read;
  5648  000E90  0E02               	movlw	2
  5649  000E92  0012               	return	
  5650  000E94                     __end_of_rd1RegCompleteHandler:
  5651                           	opt stack 0
  5652                           tosu	equ	0xFFF
  5653                           tosh	equ	0xFFE
  5654                           tosl	equ	0xFFD
  5655                           pclath	equ	0xFFA
  5656                           tblptru	equ	0xFF8
  5657                           tblptrh	equ	0xFF7
  5658                           tblptrl	equ	0xFF6
  5659                           tablat	equ	0xFF5
  5660                           prodh	equ	0xFF4
  5661                           prodl	equ	0xFF3
  5662                           intcon	equ	0xFF2
  5663                           postinc0	equ	0xFEE
  5664                           wreg	equ	0xFE8
  5665                           indf1	equ	0xFE7
  5666                           postdec1	equ	0xFE5
  5667                           plusw1	equ	0xFE3
  5668                           fsr1h	equ	0xFE2
  5669                           fsr1l	equ	0xFE1
  5670                           indf2	equ	0xFDF
  5671                           postinc2	equ	0xFDE
  5672                           postdec2	equ	0xFDD
  5673                           plusw2	equ	0xFDB
  5674                           fsr2h	equ	0xFDA
  5675                           fsr2l	equ	0xFD9
  5676                           status	equ	0xFD8
  5677                           
  5678 ;; *************** function _wr1RegCompleteHandler *****************
  5679 ;; Defined at:
  5680 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  5681 ;; Parameters:    Size  Location     Type
  5682 ;;  p               2   32[COMRAM] PTR void 
  5683 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  5684 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  5685 ;; Auto vars:     Size  Location     Type
  5686 ;;		None
  5687 ;; Return value:  Size  Location     Type
  5688 ;;                  1    wreg      enum E97
  5689 ;; Registers used:
  5690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5691 ;; Tracked objects:
  5692 ;;		On entry : 0/0
  5693 ;;		On exit  : 0/0
  5694 ;;		Unchanged: 0/0
  5695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5696 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5699 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5700 ;;Total ram usage:        2 bytes
  5701 ;; Hardware stack levels used:    1
  5702 ;; Hardware stack levels required when called:    8
  5703 ;; This function calls:
  5704 ;;		_i2c_setBuffer
  5705 ;;		_i2c_setDataCompleteCallback
  5706 ;; This function is called by:
  5707 ;;		_i2c_write1ByteRegister
  5708 ;;		_do_I2C_DO_ADDRESS_NACK
  5709 ;;		_do_I2C_TX
  5710 ;;		_do_I2C_RX
  5711 ;;		_do_I2C_TX_EMPTY
  5712 ;;		i2_do_I2C_DO_ADDRESS_NACK
  5713 ;;		i2_do_I2C_TX
  5714 ;;		i2_do_I2C_RX
  5715 ;;		i2_do_I2C_TX_EMPTY
  5716 ;; This function uses a non-reentrant model
  5717 ;;
  5718                           
  5719                           	psect	text44
  5720  000E94                     __ptext44:
  5721                           	opt stack 0
  5722  000E94                     _wr1RegCompleteHandler:
  5723                           	opt stack 0
  5724                           
  5725                           ;Skip over the trampoline to the duplicate function for level 2
  5726  000E94  B247               	btfsc	btemp,1,c
  5727  000E96  EFFA  F007         	goto	i2_wr1RegCompleteHandler
  5728  000E9A                     _wr1RegCompleteHandler$intlevel0:
  5729                           	opt stack 16
  5730                           
  5731                           ;i2c_simple_master.c: 33: i2c_setBuffer(p,1);
  5732                           
  5733                           ;incstack = 0
  5734  000E9A  C021  F016         	movff	wr1RegCompleteHandler@p,i2c_setBuffer@buffer
  5735  000E9E  C022  F017         	movff	wr1RegCompleteHandler@p+1,i2c_setBuffer@buffer+1
  5736  000EA2  0E00               	movlw	0
  5737  000EA4  6E19               	movwf	i2c_setBuffer@bufferSize+1,c
  5738  000EA6  0E01               	movlw	1
  5739  000EA8  6E18               	movwf	i2c_setBuffer@bufferSize,c
  5740  000EAA  EC92  F008         	call	_i2c_setBuffer	;wreg free
  5741                           
  5742                           ;i2c_simple_master.c: 34: i2c_setDataCompleteCallback((0),(0));
  5743  000EAE  0E00               	movlw	0
  5744  000EB0  6E1C               	movwf	i2c_setDataCompleteCallback@cb,c
  5745  000EB2  0E00               	movlw	0
  5746  000EB4  6E1D               	movwf	i2c_setDataCompleteCallback@cb+1,c
  5747  000EB6  0E00               	movlw	0
  5748  000EB8  6E1E               	movwf	i2c_setDataCompleteCallback@cb+2,c
  5749  000EBA  0E00               	movlw	0
  5750  000EBC  6E1F               	movwf	i2c_setDataCompleteCallback@p,c
  5751  000EBE  0E00               	movlw	0
  5752  000EC0  6E20               	movwf	i2c_setDataCompleteCallback@p+1,c
  5753  000EC2  EC5B  F008         	call	_i2c_setDataCompleteCallback	;wreg free
  5754                           
  5755                           ;i2c_simple_master.c: 35: return i2c_continue;
  5756  000EC6  0E04               	movlw	4
  5757  000EC8  0012               	return	
  5758  000ECA                     __end_of_wr1RegCompleteHandler:
  5759                           	opt stack 0
  5760                           tosu	equ	0xFFF
  5761                           tosh	equ	0xFFE
  5762                           tosl	equ	0xFFD
  5763                           pclath	equ	0xFFA
  5764                           tblptru	equ	0xFF8
  5765                           tblptrh	equ	0xFF7
  5766                           tblptrl	equ	0xFF6
  5767                           tablat	equ	0xFF5
  5768                           prodh	equ	0xFF4
  5769                           prodl	equ	0xFF3
  5770                           intcon	equ	0xFF2
  5771                           postinc0	equ	0xFEE
  5772                           wreg	equ	0xFE8
  5773                           indf1	equ	0xFE7
  5774                           postdec1	equ	0xFE5
  5775                           plusw1	equ	0xFE3
  5776                           fsr1h	equ	0xFE2
  5777                           fsr1l	equ	0xFE1
  5778                           indf2	equ	0xFDF
  5779                           postinc2	equ	0xFDE
  5780                           postdec2	equ	0xFDD
  5781                           plusw2	equ	0xFDB
  5782                           fsr2h	equ	0xFDA
  5783                           fsr2l	equ	0xFD9
  5784                           status	equ	0xFD8
  5785                           
  5786 ;; *************** function _i2c_restartWrite *****************
  5787 ;; Defined at:
  5788 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
  5789 ;; Parameters:    Size  Location     Type
  5790 ;;  p               2   32[COMRAM] PTR void 
  5791 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  5792 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  5793 ;; Auto vars:     Size  Location     Type
  5794 ;;		None
  5795 ;; Return value:  Size  Location     Type
  5796 ;;                  1    wreg      enum E96
  5797 ;; Registers used:
  5798 ;;		wreg
  5799 ;; Tracked objects:
  5800 ;;		On entry : 0/0
  5801 ;;		On exit  : 0/0
  5802 ;;		Unchanged: 0/0
  5803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5804 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5807 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5808 ;;Total ram usage:        2 bytes
  5809 ;; Hardware stack levels used:    1
  5810 ;; Hardware stack levels required when called:    6
  5811 ;; This function calls:
  5812 ;;		Nothing
  5813 ;; This function is called by:
  5814 ;;		_i2c_writeNBytes
  5815 ;;		_i2c_write1ByteRegister
  5816 ;;		_i2c_read1ByteRegister
  5817 ;;		_i2c_read2ByteRegister
  5818 ;;		_i2c_write2ByteRegister
  5819 ;;		_i2c_readDataBlock
  5820 ;;		_do_I2C_DO_ADDRESS_NACK
  5821 ;;		_do_I2C_TX
  5822 ;;		_do_I2C_RX
  5823 ;;		_do_I2C_TX_EMPTY
  5824 ;;		i2_do_I2C_DO_ADDRESS_NACK
  5825 ;;		i2_do_I2C_TX
  5826 ;;		i2_do_I2C_RX
  5827 ;;		i2_do_I2C_TX_EMPTY
  5828 ;; This function uses a non-reentrant model
  5829 ;;
  5830                           
  5831                           	psect	text45
  5832  00138A                     __ptext45:
  5833                           	opt stack 0
  5834  00138A                     _i2c_restartWrite:
  5835                           	opt stack 0
  5836                           
  5837                           ;Skip over the trampoline to the duplicate function for level 2
  5838  00138A  B247               	btfsc	btemp,1,c
  5839  00138C  EF31  F00A         	goto	i2_i2c_restartWrite
  5840  001390                     _i2c_restartWrite$intlevel0:
  5841                           	opt stack 18
  5842                           
  5843                           ;i2c_types.c: 37: return i2c_restart_write;
  5844                           
  5845                           ;incstack = 0
  5846  001390  0E03               	movlw	3
  5847  001392  0012               	return	
  5848  001394                     __end_of_i2c_restartWrite:
  5849                           	opt stack 0
  5850                           tosu	equ	0xFFF
  5851                           tosh	equ	0xFFE
  5852                           tosl	equ	0xFFD
  5853                           pclath	equ	0xFFA
  5854                           tblptru	equ	0xFF8
  5855                           tblptrh	equ	0xFF7
  5856                           tblptrl	equ	0xFF6
  5857                           tablat	equ	0xFF5
  5858                           prodh	equ	0xFF4
  5859                           prodl	equ	0xFF3
  5860                           intcon	equ	0xFF2
  5861                           postinc0	equ	0xFEE
  5862                           wreg	equ	0xFE8
  5863                           indf1	equ	0xFE7
  5864                           postdec1	equ	0xFE5
  5865                           plusw1	equ	0xFE3
  5866                           fsr1h	equ	0xFE2
  5867                           fsr1l	equ	0xFE1
  5868                           indf2	equ	0xFDF
  5869                           postinc2	equ	0xFDE
  5870                           postdec2	equ	0xFDD
  5871                           plusw2	equ	0xFDB
  5872                           fsr2h	equ	0xFDA
  5873                           fsr2l	equ	0xFD9
  5874                           status	equ	0xFD8
  5875                           
  5876 ;; *************** function _returnReset *****************
  5877 ;; Defined at:
  5878 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
  5879 ;; Parameters:    Size  Location     Type
  5880 ;;  p               2   32[COMRAM] PTR void 
  5881 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  5882 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  5883 ;; Auto vars:     Size  Location     Type
  5884 ;;		None
  5885 ;; Return value:  Size  Location     Type
  5886 ;;                  1    wreg      enum E11790
  5887 ;; Registers used:
  5888 ;;		wreg
  5889 ;; Tracked objects:
  5890 ;;		On entry : 0/0
  5891 ;;		On exit  : 0/0
  5892 ;;		Unchanged: 0/0
  5893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5894 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5897 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5898 ;;Total ram usage:        2 bytes
  5899 ;; Hardware stack levels used:    1
  5900 ;; Hardware stack levels required when called:    6
  5901 ;; This function calls:
  5902 ;;		Nothing
  5903 ;; This function is called by:
  5904 ;;		_i2c_open
  5905 ;;		_do_I2C_DO_ADDRESS_NACK
  5906 ;;		_do_I2C_TX
  5907 ;;		_do_I2C_RX
  5908 ;;		_do_I2C_TX_EMPTY
  5909 ;;		i2_do_I2C_DO_ADDRESS_NACK
  5910 ;;		i2_do_I2C_TX
  5911 ;;		i2_do_I2C_RX
  5912 ;;		i2_do_I2C_TX_EMPTY
  5913 ;; This function uses a non-reentrant model
  5914 ;;
  5915                           
  5916                           	psect	text46
  5917  001394                     __ptext46:
  5918                           	opt stack 0
  5919  001394                     _returnReset:
  5920                           	opt stack 0
  5921                           
  5922                           ;Skip over the trampoline to the duplicate function for level 2
  5923  001394  B247               	btfsc	btemp,1,c
  5924  001396  EF33  F00A         	goto	i2_returnReset
  5925  00139A                     _returnReset$intlevel0:
  5926                           	opt stack 18
  5927                           
  5928                           ;i2c_master.c: 450: return i2c_reset_link;
  5929                           
  5930                           ;incstack = 0
  5931  00139A  0E05               	movlw	5
  5932  00139C  0012               	return	
  5933  00139E                     __end_of_returnReset:
  5934                           	opt stack 0
  5935                           tosu	equ	0xFFF
  5936                           tosh	equ	0xFFE
  5937                           tosl	equ	0xFFD
  5938                           pclath	equ	0xFFA
  5939                           tblptru	equ	0xFF8
  5940                           tblptrh	equ	0xFF7
  5941                           tblptrl	equ	0xFF6
  5942                           tablat	equ	0xFF5
  5943                           prodh	equ	0xFF4
  5944                           prodl	equ	0xFF3
  5945                           intcon	equ	0xFF2
  5946                           postinc0	equ	0xFEE
  5947                           wreg	equ	0xFE8
  5948                           indf1	equ	0xFE7
  5949                           postdec1	equ	0xFE5
  5950                           plusw1	equ	0xFE3
  5951                           fsr1h	equ	0xFE2
  5952                           fsr1l	equ	0xFE1
  5953                           indf2	equ	0xFDF
  5954                           postinc2	equ	0xFDE
  5955                           postdec2	equ	0xFDD
  5956                           plusw2	equ	0xFDB
  5957                           fsr2h	equ	0xFDA
  5958                           fsr2l	equ	0xFD9
  5959                           status	equ	0xFD8
  5960                           
  5961 ;; *************** function _returnStop *****************
  5962 ;; Defined at:
  5963 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
  5964 ;; Parameters:    Size  Location     Type
  5965 ;;  p               2   32[COMRAM] PTR void 
  5966 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  5967 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  5968 ;; Auto vars:     Size  Location     Type
  5969 ;;		None
  5970 ;; Return value:  Size  Location     Type
  5971 ;;                  1    wreg      enum E11790
  5972 ;; Registers used:
  5973 ;;		wreg
  5974 ;; Tracked objects:
  5975 ;;		On entry : 0/0
  5976 ;;		On exit  : 0/0
  5977 ;;		Unchanged: 0/0
  5978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5979 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5982 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5983 ;;Total ram usage:        2 bytes
  5984 ;; Hardware stack levels used:    1
  5985 ;; Hardware stack levels required when called:    6
  5986 ;; This function calls:
  5987 ;;		Nothing
  5988 ;; This function is called by:
  5989 ;;		_i2c_open
  5990 ;;		_setCallBack
  5991 ;;		_do_I2C_DO_ADDRESS_NACK
  5992 ;;		_do_I2C_TX
  5993 ;;		_do_I2C_RX
  5994 ;;		_do_I2C_TX_EMPTY
  5995 ;;		i2_do_I2C_DO_ADDRESS_NACK
  5996 ;;		i2_do_I2C_TX
  5997 ;;		i2_do_I2C_RX
  5998 ;;		i2_do_I2C_TX_EMPTY
  5999 ;; This function uses a non-reentrant model
  6000 ;;
  6001                           
  6002                           	psect	text47
  6003  00139E                     __ptext47:
  6004                           	opt stack 0
  6005  00139E                     _returnStop:
  6006                           	opt stack 0
  6007                           
  6008                           ;Skip over the trampoline to the duplicate function for level 2
  6009  00139E  B247               	btfsc	btemp,1,c
  6010  0013A0  EF35  F00A         	goto	i2_returnStop
  6011  0013A4                     _returnStop$intlevel0:
  6012                           	opt stack 18
  6013                           
  6014                           ;i2c_master.c: 445: return i2c_stop;
  6015                           
  6016                           ;incstack = 0
  6017  0013A4  0E01               	movlw	1
  6018  0013A6  0012               	return	
  6019  0013A8                     __end_of_returnStop:
  6020                           	opt stack 0
  6021                           tosu	equ	0xFFF
  6022                           tosh	equ	0xFFE
  6023                           tosl	equ	0xFFD
  6024                           pclath	equ	0xFFA
  6025                           tblptru	equ	0xFF8
  6026                           tblptrh	equ	0xFF7
  6027                           tblptrl	equ	0xFF6
  6028                           tablat	equ	0xFF5
  6029                           prodh	equ	0xFF4
  6030                           prodl	equ	0xFF3
  6031                           intcon	equ	0xFF2
  6032                           postinc0	equ	0xFEE
  6033                           wreg	equ	0xFE8
  6034                           indf1	equ	0xFE7
  6035                           postdec1	equ	0xFE5
  6036                           plusw1	equ	0xFE3
  6037                           fsr1h	equ	0xFE2
  6038                           fsr1l	equ	0xFE1
  6039                           indf2	equ	0xFDF
  6040                           postinc2	equ	0xFDE
  6041                           postdec2	equ	0xFDD
  6042                           plusw2	equ	0xFDB
  6043                           fsr2h	equ	0xFDA
  6044                           fsr2l	equ	0xFD9
  6045                           status	equ	0xFD8
  6046                           
  6047 ;; *************** function _wr2RegCompleteHandler *****************
  6048 ;; Defined at:
  6049 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  6050 ;; Parameters:    Size  Location     Type
  6051 ;;  p               2   32[COMRAM] PTR void 
  6052 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6053 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6054 ;; Auto vars:     Size  Location     Type
  6055 ;;		None
  6056 ;; Return value:  Size  Location     Type
  6057 ;;                  1    wreg      enum E97
  6058 ;; Registers used:
  6059 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6060 ;; Tracked objects:
  6061 ;;		On entry : 0/0
  6062 ;;		On exit  : 0/0
  6063 ;;		Unchanged: 0/0
  6064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6065 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6068 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6069 ;;Total ram usage:        2 bytes
  6070 ;; Hardware stack levels used:    1
  6071 ;; Hardware stack levels required when called:    8
  6072 ;; This function calls:
  6073 ;;		_i2c_setBuffer
  6074 ;;		_i2c_setDataCompleteCallback
  6075 ;; This function is called by:
  6076 ;;		_i2c_write2ByteRegister
  6077 ;;		_do_I2C_DO_ADDRESS_NACK
  6078 ;;		_do_I2C_TX
  6079 ;;		_do_I2C_RX
  6080 ;;		_do_I2C_TX_EMPTY
  6081 ;;		i2_do_I2C_DO_ADDRESS_NACK
  6082 ;;		i2_do_I2C_TX
  6083 ;;		i2_do_I2C_RX
  6084 ;;		i2_do_I2C_TX_EMPTY
  6085 ;; This function uses a non-reentrant model
  6086 ;;
  6087                           
  6088                           	psect	text48
  6089  000ECA                     __ptext48:
  6090                           	opt stack 0
  6091  000ECA                     _wr2RegCompleteHandler:
  6092                           	opt stack 0
  6093                           
  6094                           ;Skip over the trampoline to the duplicate function for level 2
  6095  000ECA  B247               	btfsc	btemp,1,c
  6096  000ECC  EF12  F008         	goto	i2_wr2RegCompleteHandler
  6097  000ED0                     _wr2RegCompleteHandler$intlevel0:
  6098                           	opt stack 16
  6099                           
  6100                           ;i2c_simple_master.c: 112: i2c_setBuffer(p,2);
  6101                           
  6102                           ;incstack = 0
  6103  000ED0  C021  F016         	movff	wr2RegCompleteHandler@p,i2c_setBuffer@buffer
  6104  000ED4  C022  F017         	movff	wr2RegCompleteHandler@p+1,i2c_setBuffer@buffer+1
  6105  000ED8  0E00               	movlw	0
  6106  000EDA  6E19               	movwf	i2c_setBuffer@bufferSize+1,c
  6107  000EDC  0E02               	movlw	2
  6108  000EDE  6E18               	movwf	i2c_setBuffer@bufferSize,c
  6109  000EE0  EC92  F008         	call	_i2c_setBuffer	;wreg free
  6110                           
  6111                           ;i2c_simple_master.c: 113: i2c_setDataCompleteCallback((0),(0));
  6112  000EE4  0E00               	movlw	0
  6113  000EE6  6E1C               	movwf	i2c_setDataCompleteCallback@cb,c
  6114  000EE8  0E00               	movlw	0
  6115  000EEA  6E1D               	movwf	i2c_setDataCompleteCallback@cb+1,c
  6116  000EEC  0E00               	movlw	0
  6117  000EEE  6E1E               	movwf	i2c_setDataCompleteCallback@cb+2,c
  6118  000EF0  0E00               	movlw	0
  6119  000EF2  6E1F               	movwf	i2c_setDataCompleteCallback@p,c
  6120  000EF4  0E00               	movlw	0
  6121  000EF6  6E20               	movwf	i2c_setDataCompleteCallback@p+1,c
  6122  000EF8  EC5B  F008         	call	_i2c_setDataCompleteCallback	;wreg free
  6123                           
  6124                           ;i2c_simple_master.c: 114: return i2c_continue;
  6125  000EFC  0E04               	movlw	4
  6126  000EFE  0012               	return	
  6127  000F00                     __end_of_wr2RegCompleteHandler:
  6128                           	opt stack 0
  6129                           tosu	equ	0xFFF
  6130                           tosh	equ	0xFFE
  6131                           tosl	equ	0xFFD
  6132                           pclath	equ	0xFFA
  6133                           tblptru	equ	0xFF8
  6134                           tblptrh	equ	0xFF7
  6135                           tblptrl	equ	0xFF6
  6136                           tablat	equ	0xFF5
  6137                           prodh	equ	0xFF4
  6138                           prodl	equ	0xFF3
  6139                           intcon	equ	0xFF2
  6140                           postinc0	equ	0xFEE
  6141                           wreg	equ	0xFE8
  6142                           indf1	equ	0xFE7
  6143                           postdec1	equ	0xFE5
  6144                           plusw1	equ	0xFE3
  6145                           fsr1h	equ	0xFE2
  6146                           fsr1l	equ	0xFE1
  6147                           indf2	equ	0xFDF
  6148                           postinc2	equ	0xFDE
  6149                           postdec2	equ	0xFDD
  6150                           plusw2	equ	0xFDB
  6151                           fsr2h	equ	0xFDA
  6152                           fsr2l	equ	0xFD9
  6153                           status	equ	0xFD8
  6154                           
  6155 ;; *************** function _i2c_setDataCompleteCallback *****************
  6156 ;; Defined at:
  6157 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
  6158 ;; Parameters:    Size  Location     Type
  6159 ;;  cb              3   27[COMRAM] PTR FTN(PTR void ,)enum 
  6160 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  6161 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
  6162 ;;  p               2   30[COMRAM] PTR void 
  6163 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6164 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6165 ;; Auto vars:     Size  Location     Type
  6166 ;;		None
  6167 ;; Return value:  Size  Location     Type
  6168 ;;                  1    wreg      void 
  6169 ;; Registers used:
  6170 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6171 ;; Tracked objects:
  6172 ;;		On entry : 0/0
  6173 ;;		On exit  : 0/0
  6174 ;;		Unchanged: 0/0
  6175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6176 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6179 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6180 ;;Total ram usage:        5 bytes
  6181 ;; Hardware stack levels used:    1
  6182 ;; Hardware stack levels required when called:    7
  6183 ;; This function calls:
  6184 ;;		_setCallBack
  6185 ;; This function is called by:
  6186 ;;		_wr1RegCompleteHandler
  6187 ;;		_rd1RegCompleteHandler
  6188 ;;		_rd2RegCompleteHandler
  6189 ;;		_wr2RegCompleteHandler
  6190 ;;		_rdBlkRegCompleteHandler
  6191 ;;		_i2c_write1ByteRegister
  6192 ;;		_i2c_read1ByteRegister
  6193 ;;		_i2c_read2ByteRegister
  6194 ;;		_i2c_write2ByteRegister
  6195 ;;		_i2c_readDataBlock
  6196 ;; This function uses a non-reentrant model
  6197 ;;
  6198                           
  6199                           	psect	text49
  6200  0010B6                     __ptext49:
  6201                           	opt stack 0
  6202  0010B6                     _i2c_setDataCompleteCallback:
  6203                           	opt stack 16
  6204                           
  6205                           ;i2c_master.c: 91: setCallBack(i2c_dataComplete,cb,p);
  6206                           
  6207                           ;incstack = 0
  6208  0010B6  C01C  F016         	movff	i2c_setDataCompleteCallback@cb,setCallBack@cb
  6209  0010BA  C01D  F017         	movff	i2c_setDataCompleteCallback@cb+1,setCallBack@cb+1
  6210  0010BE  C01E  F018         	movff	i2c_setDataCompleteCallback@cb+2,setCallBack@cb+2
  6211  0010C2  C01F  F019         	movff	i2c_setDataCompleteCallback@p,setCallBack@p
  6212  0010C6  C020  F01A         	movff	i2c_setDataCompleteCallback@p+1,setCallBack@p+1
  6213  0010CA  0E00               	movlw	0
  6214  0010CC  ECE4  F004         	call	_setCallBack
  6215  0010D0  0012               	return		;funcret
  6216  0010D2                     __end_of_i2c_setDataCompleteCallback:
  6217                           	opt stack 0
  6218                           tosu	equ	0xFFF
  6219                           tosh	equ	0xFFE
  6220                           tosl	equ	0xFFD
  6221                           pclath	equ	0xFFA
  6222                           tblptru	equ	0xFF8
  6223                           tblptrh	equ	0xFF7
  6224                           tblptrl	equ	0xFF6
  6225                           tablat	equ	0xFF5
  6226                           prodh	equ	0xFF4
  6227                           prodl	equ	0xFF3
  6228                           intcon	equ	0xFF2
  6229                           postinc0	equ	0xFEE
  6230                           wreg	equ	0xFE8
  6231                           indf1	equ	0xFE7
  6232                           postdec1	equ	0xFE5
  6233                           plusw1	equ	0xFE3
  6234                           fsr1h	equ	0xFE2
  6235                           fsr1l	equ	0xFE1
  6236                           indf2	equ	0xFDF
  6237                           postinc2	equ	0xFDE
  6238                           postdec2	equ	0xFDD
  6239                           plusw2	equ	0xFDB
  6240                           fsr2h	equ	0xFDA
  6241                           fsr2l	equ	0xFD9
  6242                           status	equ	0xFD8
  6243                           
  6244 ;; *************** function _setCallBack *****************
  6245 ;; Defined at:
  6246 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
  6247 ;; Parameters:    Size  Location     Type
  6248 ;;  idx             1    wreg     enum E11974
  6249 ;;  cb              3   21[COMRAM] PTR FTN(PTR void ,)enum 
  6250 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  6251 ;;		 -> wr1RegCompleteHandler(1), i2c_restartWrite(1), Absolute function(1), 
  6252 ;;  p               2   24[COMRAM] PTR void 
  6253 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  6254 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6255 ;; Auto vars:     Size  Location     Type
  6256 ;;  idx             1   26[COMRAM] enum E11974
  6257 ;; Return value:  Size  Location     Type
  6258 ;;                  1    wreg      void 
  6259 ;; Registers used:
  6260 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6261 ;; Tracked objects:
  6262 ;;		On entry : 0/0
  6263 ;;		On exit  : 0/0
  6264 ;;		Unchanged: 0/0
  6265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6266 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6267 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6269 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6270 ;;Total ram usage:        6 bytes
  6271 ;; Hardware stack levels used:    1
  6272 ;; Hardware stack levels required when called:    6
  6273 ;; This function calls:
  6274 ;;		Nothing
  6275 ;; This function is called by:
  6276 ;;		_i2c_setDataCompleteCallback
  6277 ;;		_i2c_setAddressNACKCallback
  6278 ;;		_i2c_setWriteCollisionCallback
  6279 ;;		_i2c_setDataNACKCallback
  6280 ;;		_i2c_setTimeOutCallback
  6281 ;; This function uses a non-reentrant model
  6282 ;;
  6283                           
  6284                           	psect	text50
  6285  0009C8                     __ptext50:
  6286                           	opt stack 0
  6287  0009C8                     _setCallBack:
  6288                           	opt stack 22
  6289                           
  6290                           ;incstack = 0
  6291                           ;setCallBack@idx stored from wreg
  6292  0009C8  6E1B               	movwf	setCallBack@idx,c
  6293                           
  6294                           ;i2c_master.c: 455: if(cb)
  6295  0009CA  5016               	movf	setCallBack@cb,w,c
  6296  0009CC  1017               	iorwf	setCallBack@cb+1,w,c
  6297  0009CE  1018               	iorwf	setCallBack@cb+2,w,c
  6298  0009D0  B4D8               	btfsc	status,2,c
  6299  0009D2  D01B               	goto	l496
  6300                           
  6301                           ;i2c_master.c: 456: {
  6302                           ;i2c_master.c: 457: i2c_status.callbackTable[idx] = cb;
  6303  0009D4  501B               	movf	setCallBack@idx,w,c
  6304  0009D6  0D03               	mullw	3
  6305  0009D8  0E6C               	movlw	low (_i2c_status+12)
  6306  0009DA  24F3               	addwf	prodl,w,c
  6307  0009DC  6ED9               	movwf	fsr2l,c
  6308  0009DE  0E00               	movlw	high (_i2c_status+12)
  6309  0009E0  20F4               	addwfc	prodh,w,c
  6310  0009E2  6EDA               	movwf	fsr2h,c
  6311  0009E4  C016  FFDE         	movff	setCallBack@cb,postinc2
  6312  0009E8  C017  FFDE         	movff	setCallBack@cb+1,postinc2
  6313  0009EC  C018  FFDE         	movff	setCallBack@cb+2,postinc2
  6314                           
  6315                           ;i2c_master.c: 458: i2c_status.callbackPayload[idx] = p;
  6316  0009F0  501B               	movf	setCallBack@idx,w,c
  6317  0009F2  0D02               	mullw	2
  6318  0009F4  0E7E               	movlw	low (_i2c_status+30)
  6319  0009F6  24F3               	addwf	prodl,w,c
  6320  0009F8  6ED9               	movwf	fsr2l,c
  6321  0009FA  0E00               	movlw	high (_i2c_status+30)
  6322  0009FC  20F4               	addwfc	prodh,w,c
  6323  0009FE  6EDA               	movwf	fsr2h,c
  6324  000A00  C019  FFDE         	movff	setCallBack@p,postinc2
  6325  000A04  C01A  FFDD         	movff	setCallBack@p+1,postdec2
  6326                           
  6327                           ;i2c_master.c: 459: }
  6328  000A08  0012               	return	
  6329  000A0A                     l496:
  6330                           
  6331                           ;i2c_master.c: 460: else
  6332                           ;i2c_master.c: 461: {
  6333                           ;i2c_master.c: 462: i2c_status.callbackTable[idx] = returnStop;
  6334  000A0A  501B               	movf	setCallBack@idx,w,c
  6335  000A0C  0D03               	mullw	3
  6336  000A0E  0E6C               	movlw	low (_i2c_status+12)
  6337  000A10  24F3               	addwf	prodl,w,c
  6338  000A12  6ED9               	movwf	fsr2l,c
  6339  000A14  0E00               	movlw	high (_i2c_status+12)
  6340  000A16  20F4               	addwfc	prodh,w,c
  6341  000A18  6EDA               	movwf	fsr2h,c
  6342  000A1A  0E9E               	movlw	low _returnStop
  6343  000A1C  6EDE               	movwf	postinc2,c
  6344  000A1E  0E13               	movlw	high _returnStop
  6345  000A20  6EDE               	movwf	postinc2,c
  6346  000A22  0E00               	movlw	low (_returnStop shr (0+16))
  6347  000A24  6EDE               	movwf	postinc2,c
  6348                           
  6349                           ;i2c_master.c: 463: i2c_status.callbackPayload[idx] = (0);
  6350  000A26  501B               	movf	setCallBack@idx,w,c
  6351  000A28  0D02               	mullw	2
  6352  000A2A  0E7E               	movlw	low (_i2c_status+30)
  6353  000A2C  24F3               	addwf	prodl,w,c
  6354  000A2E  6ED9               	movwf	fsr2l,c
  6355  000A30  0E00               	movlw	high (_i2c_status+30)
  6356  000A32  20F4               	addwfc	prodh,w,c
  6357  000A34  6EDA               	movwf	fsr2h,c
  6358  000A36  0E00               	movlw	0
  6359  000A38  6EDE               	movwf	postinc2,c
  6360  000A3A  0E00               	movlw	0
  6361  000A3C  6EDD               	movwf	postdec2,c
  6362  000A3E  0012               	return	
  6363  000A40                     __end_of_setCallBack:
  6364                           	opt stack 0
  6365                           tosu	equ	0xFFF
  6366                           tosh	equ	0xFFE
  6367                           tosl	equ	0xFFD
  6368                           pclath	equ	0xFFA
  6369                           tblptru	equ	0xFF8
  6370                           tblptrh	equ	0xFF7
  6371                           tblptrl	equ	0xFF6
  6372                           tablat	equ	0xFF5
  6373                           prodh	equ	0xFF4
  6374                           prodl	equ	0xFF3
  6375                           intcon	equ	0xFF2
  6376                           postinc0	equ	0xFEE
  6377                           wreg	equ	0xFE8
  6378                           indf1	equ	0xFE7
  6379                           postdec1	equ	0xFE5
  6380                           plusw1	equ	0xFE3
  6381                           fsr1h	equ	0xFE2
  6382                           fsr1l	equ	0xFE1
  6383                           indf2	equ	0xFDF
  6384                           postinc2	equ	0xFDE
  6385                           postdec2	equ	0xFDD
  6386                           plusw2	equ	0xFDB
  6387                           fsr2h	equ	0xFDA
  6388                           fsr2l	equ	0xFD9
  6389                           status	equ	0xFD8
  6390                           
  6391 ;; *************** function _i2c_setBuffer *****************
  6392 ;; Defined at:
  6393 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
  6394 ;; Parameters:    Size  Location     Type
  6395 ;;  buffer          2   21[COMRAM] PTR void 
  6396 ;;		 -> main@receivedScore(7), readIoExpander@rec(1), readIoExpander@data(2), i2c_readDataBlock@reg(1), 
  6397 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@reg
      +(1), 
  6398 ;;		 -> i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegister@d2(1), i2c_write1ByteRegist
      +er@reg(1), 
  6399 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  6400 ;;  bufferSize      2   23[COMRAM] unsigned int 
  6401 ;; Auto vars:     Size  Location     Type
  6402 ;;		None
  6403 ;; Return value:  Size  Location     Type
  6404 ;;                  1    wreg      void 
  6405 ;; Registers used:
  6406 ;;		wreg, status,2, status,0
  6407 ;; Tracked objects:
  6408 ;;		On entry : 0/0
  6409 ;;		On exit  : 0/0
  6410 ;;		Unchanged: 0/0
  6411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6412 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6415 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6416 ;;Total ram usage:        4 bytes
  6417 ;; Hardware stack levels used:    1
  6418 ;; Hardware stack levels required when called:    6
  6419 ;; This function calls:
  6420 ;;		Nothing
  6421 ;; This function is called by:
  6422 ;;		_wr1RegCompleteHandler
  6423 ;;		_i2c_writeNBytes
  6424 ;;		_rd1RegCompleteHandler
  6425 ;;		_rd2RegCompleteHandler
  6426 ;;		_wr2RegCompleteHandler
  6427 ;;		_rdBlkRegCompleteHandler
  6428 ;;		_i2c_readNBytes
  6429 ;;		_i2c_write1ByteRegister
  6430 ;;		_i2c_read1ByteRegister
  6431 ;;		_i2c_read2ByteRegister
  6432 ;;		_i2c_write2ByteRegister
  6433 ;;		_i2c_readDataBlock
  6434 ;; This function uses a non-reentrant model
  6435 ;;
  6436                           
  6437                           	psect	text51
  6438  001124                     __ptext51:
  6439                           	opt stack 0
  6440  001124                     _i2c_setBuffer:
  6441                           	opt stack 23
  6442                           
  6443                           ;i2c_master.c: 186: if(i2c_status.bufferFree)
  6444                           
  6445                           ;incstack = 0
  6446  001124  0100               	movlb	0	; () banked
  6447  001126  A560               	btfss	_i2c_status& (0+255),2,b
  6448  001128  0012               	return	
  6449                           
  6450                           ; BSR set to: 0
  6451                           ;i2c_master.c: 187: {
  6452                           ;i2c_master.c: 188: i2c_status.data_ptr = buffer;
  6453  00112A  C016  F062         	movff	i2c_setBuffer@buffer,_i2c_status+2
  6454  00112E  C017  F063         	movff	i2c_setBuffer@buffer+1,_i2c_status+3
  6455                           
  6456                           ; BSR set to: 0
  6457                           ;i2c_master.c: 189: i2c_status.data_length = bufferSize;
  6458  001132  C018  F064         	movff	i2c_setBuffer@bufferSize,_i2c_status+4
  6459  001136  C019  F065         	movff	i2c_setBuffer@bufferSize+1,_i2c_status+5
  6460                           
  6461                           ; BSR set to: 0
  6462                           ;i2c_master.c: 190: i2c_status.bufferFree = 0;
  6463  00113A  9560               	bcf	_i2c_status& (0+255),2,b
  6464  00113C  0012               	return	
  6465  00113E                     __end_of_i2c_setBuffer:
  6466                           	opt stack 0
  6467                           tosu	equ	0xFFF
  6468                           tosh	equ	0xFFE
  6469                           tosl	equ	0xFFD
  6470                           pclath	equ	0xFFA
  6471                           tblptru	equ	0xFF8
  6472                           tblptrh	equ	0xFF7
  6473                           tblptrl	equ	0xFF6
  6474                           tablat	equ	0xFF5
  6475                           prodh	equ	0xFF4
  6476                           prodl	equ	0xFF3
  6477                           intcon	equ	0xFF2
  6478                           postinc0	equ	0xFEE
  6479                           wreg	equ	0xFE8
  6480                           indf1	equ	0xFE7
  6481                           postdec1	equ	0xFE5
  6482                           plusw1	equ	0xFE3
  6483                           fsr1h	equ	0xFE2
  6484                           fsr1l	equ	0xFE1
  6485                           indf2	equ	0xFDF
  6486                           postinc2	equ	0xFDE
  6487                           postdec2	equ	0xFDD
  6488                           plusw2	equ	0xFDB
  6489                           fsr2h	equ	0xFDA
  6490                           fsr2l	equ	0xFD9
  6491                           status	equ	0xFD8
  6492                           
  6493 ;; *************** function _i2c1_driver_stop *****************
  6494 ;; Defined at:
  6495 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
  6496 ;; Parameters:    Size  Location     Type
  6497 ;;		None
  6498 ;; Auto vars:     Size  Location     Type
  6499 ;;		None
  6500 ;; Return value:  Size  Location     Type
  6501 ;;                  1    wreg      void 
  6502 ;; Registers used:
  6503 ;;		None
  6504 ;; Tracked objects:
  6505 ;;		On entry : 0/0
  6506 ;;		On exit  : 0/0
  6507 ;;		Unchanged: 0/0
  6508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6512 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6513 ;;Total ram usage:        0 bytes
  6514 ;; Hardware stack levels used:    1
  6515 ;; Hardware stack levels required when called:    6
  6516 ;; This function calls:
  6517 ;;		Nothing
  6518 ;; This function is called by:
  6519 ;;		_do_I2C_SEND_STOP
  6520 ;; This function uses a non-reentrant model
  6521 ;;
  6522                           
  6523                           	psect	text52
  6524  00144A                     __ptext52:
  6525                           	opt stack 0
  6526  00144A                     _i2c1_driver_stop:
  6527                           	opt stack 17
  6528                           
  6529                           ;i2c1_driver.c: 158: SSP1CON2bits.PEN = 1;
  6530                           
  6531                           ; BSR set to: 0
  6532                           ;incstack = 0
  6533  00144A  8497               	bsf	3991,2,c	;volatile
  6534  00144C  0012               	return		;funcret
  6535  00144E                     __end_of_i2c1_driver_stop:
  6536                           	opt stack 0
  6537                           tosu	equ	0xFFF
  6538                           tosh	equ	0xFFE
  6539                           tosl	equ	0xFFD
  6540                           pclath	equ	0xFFA
  6541                           tblptru	equ	0xFF8
  6542                           tblptrh	equ	0xFF7
  6543                           tblptrl	equ	0xFF6
  6544                           tablat	equ	0xFF5
  6545                           prodh	equ	0xFF4
  6546                           prodl	equ	0xFF3
  6547                           intcon	equ	0xFF2
  6548                           postinc0	equ	0xFEE
  6549                           wreg	equ	0xFE8
  6550                           indf1	equ	0xFE7
  6551                           postdec1	equ	0xFE5
  6552                           plusw1	equ	0xFE3
  6553                           fsr1h	equ	0xFE2
  6554                           fsr1l	equ	0xFE1
  6555                           indf2	equ	0xFDF
  6556                           postinc2	equ	0xFDE
  6557                           postdec2	equ	0xFDD
  6558                           plusw2	equ	0xFDB
  6559                           fsr2h	equ	0xFDA
  6560                           fsr2l	equ	0xFD9
  6561                           status	equ	0xFD8
  6562                           
  6563 ;; *************** function _i2c1_driver_restart *****************
  6564 ;; Defined at:
  6565 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
  6566 ;; Parameters:    Size  Location     Type
  6567 ;;		None
  6568 ;; Auto vars:     Size  Location     Type
  6569 ;;		None
  6570 ;; Return value:  Size  Location     Type
  6571 ;;                  1    wreg      void 
  6572 ;; Registers used:
  6573 ;;		None
  6574 ;; Tracked objects:
  6575 ;;		On entry : 0/0
  6576 ;;		On exit  : 0/0
  6577 ;;		Unchanged: 0/0
  6578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6582 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6583 ;;Total ram usage:        0 bytes
  6584 ;; Hardware stack levels used:    1
  6585 ;; Hardware stack levels required when called:    6
  6586 ;; This function calls:
  6587 ;;		Nothing
  6588 ;; This function is called by:
  6589 ;;		_do_I2C_SEND_RESTART_READ
  6590 ;;		_do_I2C_SEND_RESTART_WRITE
  6591 ;;		_do_I2C_SEND_RESTART
  6592 ;; This function uses a non-reentrant model
  6593 ;;
  6594                           
  6595                           	psect	text53
  6596  00144E                     __ptext53:
  6597                           	opt stack 0
  6598  00144E                     _i2c1_driver_restart:
  6599                           	opt stack 17
  6600                           
  6601                           ;i2c1_driver.c: 153: SSP1CON2bits.RSEN = 1;
  6602                           
  6603                           ;incstack = 0
  6604  00144E  8297               	bsf	3991,1,c	;volatile
  6605  001450  0012               	return		;funcret
  6606  001452                     __end_of_i2c1_driver_restart:
  6607                           	opt stack 0
  6608                           tosu	equ	0xFFF
  6609                           tosh	equ	0xFFE
  6610                           tosl	equ	0xFFD
  6611                           pclath	equ	0xFFA
  6612                           tblptru	equ	0xFF8
  6613                           tblptrh	equ	0xFF7
  6614                           tblptrl	equ	0xFF6
  6615                           tablat	equ	0xFF5
  6616                           prodh	equ	0xFF4
  6617                           prodl	equ	0xFF3
  6618                           intcon	equ	0xFF2
  6619                           postinc0	equ	0xFEE
  6620                           wreg	equ	0xFE8
  6621                           indf1	equ	0xFE7
  6622                           postdec1	equ	0xFE5
  6623                           plusw1	equ	0xFE3
  6624                           fsr1h	equ	0xFE2
  6625                           fsr1l	equ	0xFE1
  6626                           indf2	equ	0xFDF
  6627                           postinc2	equ	0xFDE
  6628                           postdec2	equ	0xFDD
  6629                           plusw2	equ	0xFDB
  6630                           fsr2h	equ	0xFDA
  6631                           fsr2l	equ	0xFD9
  6632                           status	equ	0xFD8
  6633                           
  6634 ;; *************** function _i2c1_driver_sendACK *****************
  6635 ;; Defined at:
  6636 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
  6637 ;; Parameters:    Size  Location     Type
  6638 ;;		None
  6639 ;; Auto vars:     Size  Location     Type
  6640 ;;		None
  6641 ;; Return value:  Size  Location     Type
  6642 ;;                  1    wreg      void 
  6643 ;; Registers used:
  6644 ;;		None
  6645 ;; Tracked objects:
  6646 ;;		On entry : 0/0
  6647 ;;		On exit  : 0/0
  6648 ;;		Unchanged: 0/0
  6649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6654 ;;Total ram usage:        0 bytes
  6655 ;; Hardware stack levels used:    1
  6656 ;; Hardware stack levels required when called:    6
  6657 ;; This function calls:
  6658 ;;		Nothing
  6659 ;; This function is called by:
  6660 ;;		_do_I2C_DO_ACK
  6661 ;;		_do_I2C_RX
  6662 ;; This function uses a non-reentrant model
  6663 ;;
  6664                           
  6665                           	psect	text54
  6666  00140C                     __ptext54:
  6667                           	opt stack 0
  6668  00140C                     _i2c1_driver_sendACK:
  6669                           	opt stack 18
  6670                           
  6671                           ;i2c1_driver.c: 198: SSP1CON2bits.ACKDT = 0;
  6672                           
  6673                           ;incstack = 0
  6674  00140C  9A97               	bcf	3991,5,c	;volatile
  6675                           
  6676                           ;i2c1_driver.c: 199: SSP1CON2bits.ACKEN = 1;
  6677  00140E  8897               	bsf	3991,4,c	;volatile
  6678  001410  0012               	return		;funcret
  6679  001412                     __end_of_i2c1_driver_sendACK:
  6680                           	opt stack 0
  6681                           tosu	equ	0xFFF
  6682                           tosh	equ	0xFFE
  6683                           tosl	equ	0xFFD
  6684                           pclath	equ	0xFFA
  6685                           tblptru	equ	0xFF8
  6686                           tblptrh	equ	0xFF7
  6687                           tblptrl	equ	0xFF6
  6688                           tablat	equ	0xFF5
  6689                           prodh	equ	0xFF4
  6690                           prodl	equ	0xFF3
  6691                           intcon	equ	0xFF2
  6692                           postinc0	equ	0xFEE
  6693                           wreg	equ	0xFE8
  6694                           indf1	equ	0xFE7
  6695                           postdec1	equ	0xFE5
  6696                           plusw1	equ	0xFE3
  6697                           fsr1h	equ	0xFE2
  6698                           fsr1l	equ	0xFE1
  6699                           indf2	equ	0xFDF
  6700                           postinc2	equ	0xFDE
  6701                           postdec2	equ	0xFDD
  6702                           plusw2	equ	0xFDB
  6703                           fsr2h	equ	0xFDA
  6704                           fsr2l	equ	0xFD9
  6705                           status	equ	0xFD8
  6706                           
  6707 ;; *************** function _i2c1_driver_start *****************
  6708 ;; Defined at:
  6709 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
  6710 ;; Parameters:    Size  Location     Type
  6711 ;;		None
  6712 ;; Auto vars:     Size  Location     Type
  6713 ;;		None
  6714 ;; Return value:  Size  Location     Type
  6715 ;;                  1    wreg      void 
  6716 ;; Registers used:
  6717 ;;		None
  6718 ;; Tracked objects:
  6719 ;;		On entry : 0/0
  6720 ;;		On exit  : 0/0
  6721 ;;		Unchanged: 0/0
  6722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6727 ;;Total ram usage:        0 bytes
  6728 ;; Hardware stack levels used:    1
  6729 ;; Hardware stack levels required when called:    6
  6730 ;; This function calls:
  6731 ;;		Nothing
  6732 ;; This function is called by:
  6733 ;;		_i2c_masterOperation
  6734 ;; This function uses a non-reentrant model
  6735 ;;
  6736                           
  6737                           	psect	text55
  6738  001452                     __ptext55:
  6739                           	opt stack 0
  6740  001452                     _i2c1_driver_start:
  6741                           	opt stack 21
  6742                           
  6743                           ;i2c1_driver.c: 148: SSP1CON2bits.SEN = 1;
  6744                           
  6745                           ;incstack = 0
  6746  001452  8097               	bsf	3991,0,c	;volatile
  6747  001454  0012               	return		;funcret
  6748  001456                     __end_of_i2c1_driver_start:
  6749                           	opt stack 0
  6750                           tosu	equ	0xFFF
  6751                           tosh	equ	0xFFE
  6752                           tosl	equ	0xFFD
  6753                           pclath	equ	0xFFA
  6754                           tblptru	equ	0xFF8
  6755                           tblptrh	equ	0xFF7
  6756                           tblptrl	equ	0xFF6
  6757                           tablat	equ	0xFF5
  6758                           prodh	equ	0xFF4
  6759                           prodl	equ	0xFF3
  6760                           intcon	equ	0xFF2
  6761                           postinc0	equ	0xFEE
  6762                           wreg	equ	0xFE8
  6763                           indf1	equ	0xFE7
  6764                           postdec1	equ	0xFE5
  6765                           plusw1	equ	0xFE3
  6766                           fsr1h	equ	0xFE2
  6767                           fsr1l	equ	0xFE1
  6768                           indf2	equ	0xFDF
  6769                           postinc2	equ	0xFDE
  6770                           postdec2	equ	0xFDD
  6771                           plusw2	equ	0xFDB
  6772                           fsr2h	equ	0xFDA
  6773                           fsr2l	equ	0xFD9
  6774                           status	equ	0xFD8
  6775                           
  6776 ;; *************** function _i2c_close *****************
  6777 ;; Defined at:
  6778 ;;		line 162 in file "mcc_generated_files/drivers/i2c_master.c"
  6779 ;; Parameters:    Size  Location     Type
  6780 ;;		None
  6781 ;; Auto vars:     Size  Location     Type
  6782 ;;  ret             1   21[COMRAM] enum E11785
  6783 ;; Return value:  Size  Location     Type
  6784 ;;                  1    wreg      enum E11785
  6785 ;; Registers used:
  6786 ;;		wreg, status,2, cstack
  6787 ;; Tracked objects:
  6788 ;;		On entry : 0/0
  6789 ;;		On exit  : 0/0
  6790 ;;		Unchanged: 0/0
  6791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6793 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6795 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6796 ;;Total ram usage:        1 bytes
  6797 ;; Hardware stack levels used:    1
  6798 ;; Hardware stack levels required when called:    7
  6799 ;; This function calls:
  6800 ;;		_mssp1_clearIRQ
  6801 ;;		_mssp1_disableIRQ
  6802 ;; This function is called by:
  6803 ;;		_i2c_writeNBytes
  6804 ;;		_i2c_readNBytes
  6805 ;;		_i2c_write1ByteRegister
  6806 ;;		_i2c_read1ByteRegister
  6807 ;;		_i2c_read2ByteRegister
  6808 ;;		_i2c_write2ByteRegister
  6809 ;;		_i2c_readDataBlock
  6810 ;; This function uses a non-reentrant model
  6811 ;;
  6812                           
  6813                           	psect	text56
  6814  00107C                     __ptext56:
  6815                           	opt stack 0
  6816  00107C                     _i2c_close:
  6817                           	opt stack 22
  6818                           
  6819                           ;i2c_master.c: 164: i2c_error_t ret = I2C_BUSY;
  6820                           
  6821                           ;incstack = 0
  6822  00107C  0E01               	movlw	1
  6823  00107E  6E16               	movwf	i2c_close@ret,c
  6824                           
  6825                           ;i2c_master.c: 165: if(!i2c_status.busy)
  6826  001080  0100               	movlb	0	; () banked
  6827  001082  B160               	btfsc	_i2c_status& (0+255),0,b
  6828  001084  D008               	goto	l369
  6829                           
  6830                           ; BSR set to: 0
  6831                           ;i2c_master.c: 166: {
  6832                           ;i2c_master.c: 167: i2c_status.inUse = 0;
  6833  001086  9360               	bcf	_i2c_status& (0+255),1,b
  6834                           
  6835                           ;i2c_master.c: 169: i2c_status.address = 0xff;
  6836  001088  6961               	setf	(_i2c_status+1)& (0+255),b
  6837                           
  6838                           ; BSR set to: 0
  6839                           ;i2c_master.c: 170: mssp1_clearIRQ();
  6840  00108A  EC0C  F00A         	call	_mssp1_clearIRQ	;wreg free
  6841                           
  6842                           ;i2c_master.c: 171: mssp1_disableIRQ();
  6843  00108E  EC09  F00A         	call	_mssp1_disableIRQ	;wreg free
  6844                           
  6845                           ;i2c_master.c: 172: ret = i2c_status.error;
  6846  001092  C06B  F016         	movff	_i2c_status+11,i2c_close@ret
  6847  001096                     l369:
  6848                           
  6849                           ;i2c_master.c: 173: }
  6850                           ;i2c_master.c: 174: return ret;
  6851  001096  5016               	movf	i2c_close@ret,w,c
  6852  001098  0012               	return	
  6853  00109A                     __end_of_i2c_close:
  6854                           	opt stack 0
  6855                           tosu	equ	0xFFF
  6856                           tosh	equ	0xFFE
  6857                           tosl	equ	0xFFD
  6858                           pclath	equ	0xFFA
  6859                           tblptru	equ	0xFF8
  6860                           tblptrh	equ	0xFF7
  6861                           tblptrl	equ	0xFF6
  6862                           tablat	equ	0xFF5
  6863                           prodh	equ	0xFF4
  6864                           prodl	equ	0xFF3
  6865                           intcon	equ	0xFF2
  6866                           postinc0	equ	0xFEE
  6867                           wreg	equ	0xFE8
  6868                           indf1	equ	0xFE7
  6869                           postdec1	equ	0xFE5
  6870                           plusw1	equ	0xFE3
  6871                           fsr1h	equ	0xFE2
  6872                           fsr1l	equ	0xFE1
  6873                           indf2	equ	0xFDF
  6874                           postinc2	equ	0xFDE
  6875                           postdec2	equ	0xFDD
  6876                           plusw2	equ	0xFDB
  6877                           fsr2h	equ	0xFDA
  6878                           fsr2l	equ	0xFD9
  6879                           status	equ	0xFD8
  6880                           
  6881 ;; *************** function _mssp1_disableIRQ *****************
  6882 ;; Defined at:
  6883 ;;		line 48 in file "mcc_generated_files/i2c1_driver.c"
  6884 ;; Parameters:    Size  Location     Type
  6885 ;;		None
  6886 ;; Auto vars:     Size  Location     Type
  6887 ;;		None
  6888 ;; Return value:  Size  Location     Type
  6889 ;;                  1    wreg      void 
  6890 ;; Registers used:
  6891 ;;		None
  6892 ;; Tracked objects:
  6893 ;;		On entry : 0/0
  6894 ;;		On exit  : 0/0
  6895 ;;		Unchanged: 0/0
  6896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6900 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6901 ;;Total ram usage:        0 bytes
  6902 ;; Hardware stack levels used:    1
  6903 ;; Hardware stack levels required when called:    6
  6904 ;; This function calls:
  6905 ;;		Nothing
  6906 ;; This function is called by:
  6907 ;;		_i2c_close
  6908 ;;		_i2c_setTimeOut
  6909 ;; This function uses a non-reentrant model
  6910 ;;
  6911                           
  6912                           	psect	text57
  6913  001412                     __ptext57:
  6914                           	opt stack 0
  6915  001412                     _mssp1_disableIRQ:
  6916                           	opt stack 22
  6917                           
  6918                           ;i2c1_driver.c: 50: PIE3bits.SSP1IE = 0;
  6919                           
  6920                           ;incstack = 0
  6921  001412  010E               	movlb	14	; () banked
  6922  001414  91C5               	bcf	197,0,b	;volatile
  6923                           
  6924                           ; BSR set to: 14
  6925  001416  0012               	return		;funcret
  6926  001418                     __end_of_mssp1_disableIRQ:
  6927                           	opt stack 0
  6928                           tosu	equ	0xFFF
  6929                           tosh	equ	0xFFE
  6930                           tosl	equ	0xFFD
  6931                           pclath	equ	0xFFA
  6932                           tblptru	equ	0xFF8
  6933                           tblptrh	equ	0xFF7
  6934                           tblptrl	equ	0xFF6
  6935                           tablat	equ	0xFF5
  6936                           prodh	equ	0xFF4
  6937                           prodl	equ	0xFF3
  6938                           intcon	equ	0xFF2
  6939                           postinc0	equ	0xFEE
  6940                           wreg	equ	0xFE8
  6941                           indf1	equ	0xFE7
  6942                           postdec1	equ	0xFE5
  6943                           plusw1	equ	0xFE3
  6944                           fsr1h	equ	0xFE2
  6945                           fsr1l	equ	0xFE1
  6946                           indf2	equ	0xFDF
  6947                           postinc2	equ	0xFDE
  6948                           postdec2	equ	0xFDD
  6949                           plusw2	equ	0xFDB
  6950                           fsr2h	equ	0xFDA
  6951                           fsr2l	equ	0xFD9
  6952                           status	equ	0xFD8
  6953                           
  6954 ;; *************** function _mssp1_clearIRQ *****************
  6955 ;; Defined at:
  6956 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
  6957 ;; Parameters:    Size  Location     Type
  6958 ;;		None
  6959 ;; Auto vars:     Size  Location     Type
  6960 ;;		None
  6961 ;; Return value:  Size  Location     Type
  6962 ;;                  1    wreg      void 
  6963 ;; Registers used:
  6964 ;;		None
  6965 ;; Tracked objects:
  6966 ;;		On entry : 0/0
  6967 ;;		On exit  : 0/0
  6968 ;;		Unchanged: 0/0
  6969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6974 ;;Total ram usage:        0 bytes
  6975 ;; Hardware stack levels used:    1
  6976 ;; Hardware stack levels required when called:    6
  6977 ;; This function calls:
  6978 ;;		Nothing
  6979 ;; This function is called by:
  6980 ;;		_i2c_open
  6981 ;;		_i2c_close
  6982 ;;		_i2c_ISR
  6983 ;; This function uses a non-reentrant model
  6984 ;;
  6985                           
  6986                           	psect	text58
  6987  001418                     __ptext58:
  6988                           	opt stack 0
  6989  001418                     _mssp1_clearIRQ:
  6990                           	opt stack 22
  6991                           
  6992                           ;i2c1_driver.c: 55: PIR3bits.SSP1IF = 0;
  6993                           
  6994                           ; BSR set to: 14
  6995                           ;incstack = 0
  6996  001418  010E               	movlb	14	; () banked
  6997  00141A  91CD               	bcf	205,0,b	;volatile
  6998                           
  6999                           ; BSR set to: 14
  7000  00141C  0012               	return		;funcret
  7001  00141E                     __end_of_mssp1_clearIRQ:
  7002                           	opt stack 0
  7003                           tosu	equ	0xFFF
  7004                           tosh	equ	0xFFE
  7005                           tosl	equ	0xFFD
  7006                           pclath	equ	0xFFA
  7007                           tblptru	equ	0xFF8
  7008                           tblptrh	equ	0xFF7
  7009                           tblptrl	equ	0xFF6
  7010                           tablat	equ	0xFF5
  7011                           prodh	equ	0xFF4
  7012                           prodl	equ	0xFF3
  7013                           intcon	equ	0xFF2
  7014                           postinc0	equ	0xFEE
  7015                           wreg	equ	0xFE8
  7016                           indf1	equ	0xFE7
  7017                           postdec1	equ	0xFE5
  7018                           plusw1	equ	0xFE3
  7019                           fsr1h	equ	0xFE2
  7020                           fsr1l	equ	0xFE1
  7021                           indf2	equ	0xFDF
  7022                           postinc2	equ	0xFDE
  7023                           postdec2	equ	0xFDD
  7024                           plusw2	equ	0xFDB
  7025                           fsr2h	equ	0xFDA
  7026                           fsr2l	equ	0xFD9
  7027                           status	equ	0xFD8
  7028                           
  7029 ;; *************** function _abs *****************
  7030 ;; Defined at:
  7031 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  7032 ;; Parameters:    Size  Location     Type
  7033 ;;  a               2   21[COMRAM] int 
  7034 ;; Auto vars:     Size  Location     Type
  7035 ;;		None
  7036 ;; Return value:  Size  Location     Type
  7037 ;;                  2   21[COMRAM] int 
  7038 ;; Registers used:
  7039 ;;		wreg, status,2, status,0
  7040 ;; Tracked objects:
  7041 ;;		On entry : 0/0
  7042 ;;		On exit  : 0/0
  7043 ;;		Unchanged: 0/0
  7044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7045 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7047 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7048 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7049 ;;Total ram usage:        4 bytes
  7050 ;; Hardware stack levels used:    1
  7051 ;; Hardware stack levels required when called:    6
  7052 ;; This function calls:
  7053 ;;		Nothing
  7054 ;; This function is called by:
  7055 ;;		_main
  7056 ;; This function uses a non-reentrant model
  7057 ;;
  7058                           
  7059                           	psect	text59
  7060  001054                     __ptext59:
  7061                           	opt stack 0
  7062  001054                     _abs:
  7063                           	opt stack 24
  7064                           
  7065                           ; BSR set to: 14
  7066                           ;incstack = 0
  7067  001054  AE17               	btfss	abs@a+1,7,c
  7068  001056  D00D               	goto	l846
  7069  001058  C016  F018         	movff	abs@a,??_abs
  7070  00105C  C017  F019         	movff	abs@a+1,??_abs+1
  7071  001060  1E18               	comf	??_abs,f,c
  7072  001062  1E19               	comf	??_abs+1,f,c
  7073  001064  4A18               	infsnz	??_abs,f,c
  7074  001066  2A19               	incf	??_abs+1,f,c
  7075  001068  C018  F016         	movff	??_abs,?_abs
  7076  00106C  C019  F017         	movff	??_abs+1,?_abs+1
  7077  001070  0012               	return	
  7078  001072                     l846:
  7079  001072  C016  F016         	movff	abs@a,?_abs
  7080  001076  C017  F017         	movff	abs@a+1,?_abs+1
  7081  00107A  0012               	return		;funcret
  7082  00107C                     __end_of_abs:
  7083                           	opt stack 0
  7084                           tosu	equ	0xFFF
  7085                           tosh	equ	0xFFE
  7086                           tosl	equ	0xFFD
  7087                           pclath	equ	0xFFA
  7088                           tblptru	equ	0xFF8
  7089                           tblptrh	equ	0xFF7
  7090                           tblptrl	equ	0xFF6
  7091                           tablat	equ	0xFF5
  7092                           prodh	equ	0xFF4
  7093                           prodl	equ	0xFF3
  7094                           intcon	equ	0xFF2
  7095                           postinc0	equ	0xFEE
  7096                           wreg	equ	0xFE8
  7097                           indf1	equ	0xFE7
  7098                           postdec1	equ	0xFE5
  7099                           plusw1	equ	0xFE3
  7100                           fsr1h	equ	0xFE2
  7101                           fsr1l	equ	0xFE1
  7102                           indf2	equ	0xFDF
  7103                           postinc2	equ	0xFDE
  7104                           postdec2	equ	0xFDD
  7105                           plusw2	equ	0xFDB
  7106                           fsr2h	equ	0xFDA
  7107                           fsr2l	equ	0xFD9
  7108                           status	equ	0xFD8
  7109                           
  7110 ;; *************** function ___aldiv *****************
  7111 ;; Defined at:
  7112 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  7113 ;; Parameters:    Size  Location     Type
  7114 ;;  dividend        4   21[COMRAM] long 
  7115 ;;  divisor         4   25[COMRAM] long 
  7116 ;; Auto vars:     Size  Location     Type
  7117 ;;  quotient        4   31[COMRAM] long 
  7118 ;;  sign            1   30[COMRAM] unsigned char 
  7119 ;;  counter         1   29[COMRAM] unsigned char 
  7120 ;; Return value:  Size  Location     Type
  7121 ;;                  4   21[COMRAM] long 
  7122 ;; Registers used:
  7123 ;;		wreg, status,2, status,0
  7124 ;; Tracked objects:
  7125 ;;		On entry : 0/0
  7126 ;;		On exit  : 0/0
  7127 ;;		Unchanged: 0/0
  7128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7129 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7130 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7132 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7133 ;;Total ram usage:       14 bytes
  7134 ;; Hardware stack levels used:    1
  7135 ;; Hardware stack levels required when called:    6
  7136 ;; This function calls:
  7137 ;;		Nothing
  7138 ;; This function is called by:
  7139 ;;		_main
  7140 ;; This function uses a non-reentrant model
  7141 ;;
  7142                           
  7143                           	psect	text60
  7144  000570                     __ptext60:
  7145                           	opt stack 0
  7146  000570                     ___aldiv:
  7147                           	opt stack 24
  7148                           
  7149                           ;incstack = 0
  7150  000570  0E00               	movlw	0
  7151  000572  6E1F               	movwf	___aldiv@sign,c
  7152  000574  AE1D               	btfss	___aldiv@divisor+3,7,c
  7153  000576  D00A               	goto	l856
  7154  000578  1E1D               	comf	___aldiv@divisor+3,f,c
  7155  00057A  1E1C               	comf	___aldiv@divisor+2,f,c
  7156  00057C  1E1B               	comf	___aldiv@divisor+1,f,c
  7157  00057E  6C1A               	negf	___aldiv@divisor,c
  7158  000580  0E00               	movlw	0
  7159  000582  221B               	addwfc	___aldiv@divisor+1,f,c
  7160  000584  221C               	addwfc	___aldiv@divisor+2,f,c
  7161  000586  221D               	addwfc	___aldiv@divisor+3,f,c
  7162  000588  0E01               	movlw	1
  7163  00058A  6E1F               	movwf	___aldiv@sign,c
  7164  00058C                     l856:
  7165  00058C  AE19               	btfss	___aldiv@dividend+3,7,c
  7166  00058E  D00A               	goto	l857
  7167  000590  1E19               	comf	___aldiv@dividend+3,f,c
  7168  000592  1E18               	comf	___aldiv@dividend+2,f,c
  7169  000594  1E17               	comf	___aldiv@dividend+1,f,c
  7170  000596  6C16               	negf	___aldiv@dividend,c
  7171  000598  0E00               	movlw	0
  7172  00059A  2217               	addwfc	___aldiv@dividend+1,f,c
  7173  00059C  2218               	addwfc	___aldiv@dividend+2,f,c
  7174  00059E  2219               	addwfc	___aldiv@dividend+3,f,c
  7175  0005A0  0E01               	movlw	1
  7176  0005A2  1A1F               	xorwf	___aldiv@sign,f,c
  7177  0005A4                     l857:
  7178  0005A4  0E00               	movlw	0
  7179  0005A6  6E20               	movwf	___aldiv@quotient,c
  7180  0005A8  0E00               	movlw	0
  7181  0005AA  6E21               	movwf	___aldiv@quotient+1,c
  7182  0005AC  0E00               	movlw	0
  7183  0005AE  6E22               	movwf	___aldiv@quotient+2,c
  7184  0005B0  0E00               	movlw	0
  7185  0005B2  6E23               	movwf	___aldiv@quotient+3,c
  7186  0005B4  501A               	movf	___aldiv@divisor,w,c
  7187  0005B6  101B               	iorwf	___aldiv@divisor+1,w,c
  7188  0005B8  101C               	iorwf	___aldiv@divisor+2,w,c
  7189  0005BA  101D               	iorwf	___aldiv@divisor+3,w,c
  7190  0005BC  B4D8               	btfsc	status,2,c
  7191  0005BE  D02A               	goto	l864
  7192  0005C0  0E01               	movlw	1
  7193  0005C2  6E1E               	movwf	___aldiv@counter,c
  7194  0005C4  D006               	goto	l859
  7195  0005C6  90D8               	bcf	status,0,c
  7196  0005C8  361A               	rlcf	___aldiv@divisor,f,c
  7197  0005CA  361B               	rlcf	___aldiv@divisor+1,f,c
  7198  0005CC  361C               	rlcf	___aldiv@divisor+2,f,c
  7199  0005CE  361D               	rlcf	___aldiv@divisor+3,f,c
  7200  0005D0  2A1E               	incf	___aldiv@counter,f,c
  7201  0005D2                     l859:
  7202  0005D2  AE1D               	btfss	___aldiv@divisor+3,7,c
  7203  0005D4  D7F8               	goto	l860
  7204  0005D6                     u1590:
  7205  0005D6  90D8               	bcf	status,0,c
  7206  0005D8  3620               	rlcf	___aldiv@quotient,f,c
  7207  0005DA  3621               	rlcf	___aldiv@quotient+1,f,c
  7208  0005DC  3622               	rlcf	___aldiv@quotient+2,f,c
  7209  0005DE  3623               	rlcf	___aldiv@quotient+3,f,c
  7210  0005E0  501A               	movf	___aldiv@divisor,w,c
  7211  0005E2  5C16               	subwf	___aldiv@dividend,w,c
  7212  0005E4  501B               	movf	___aldiv@divisor+1,w,c
  7213  0005E6  5817               	subwfb	___aldiv@dividend+1,w,c
  7214  0005E8  501C               	movf	___aldiv@divisor+2,w,c
  7215  0005EA  5818               	subwfb	___aldiv@dividend+2,w,c
  7216  0005EC  501D               	movf	___aldiv@divisor+3,w,c
  7217  0005EE  5819               	subwfb	___aldiv@dividend+3,w,c
  7218  0005F0  A0D8               	btfss	status,0,c
  7219  0005F2  D009               	goto	l863
  7220  0005F4  501A               	movf	___aldiv@divisor,w,c
  7221  0005F6  5E16               	subwf	___aldiv@dividend,f,c
  7222  0005F8  501B               	movf	___aldiv@divisor+1,w,c
  7223  0005FA  5A17               	subwfb	___aldiv@dividend+1,f,c
  7224  0005FC  501C               	movf	___aldiv@divisor+2,w,c
  7225  0005FE  5A18               	subwfb	___aldiv@dividend+2,f,c
  7226  000600  501D               	movf	___aldiv@divisor+3,w,c
  7227  000602  5A19               	subwfb	___aldiv@dividend+3,f,c
  7228  000604  8020               	bsf	___aldiv@quotient,0,c
  7229  000606                     l863:
  7230  000606  90D8               	bcf	status,0,c
  7231  000608  321D               	rrcf	___aldiv@divisor+3,f,c
  7232  00060A  321C               	rrcf	___aldiv@divisor+2,f,c
  7233  00060C  321B               	rrcf	___aldiv@divisor+1,f,c
  7234  00060E  321A               	rrcf	___aldiv@divisor,f,c
  7235  000610  2E1E               	decfsz	___aldiv@counter,f,c
  7236  000612  D7E1               	goto	u1590
  7237  000614                     l864:
  7238  000614  501F               	movf	___aldiv@sign,w,c
  7239  000616  B4D8               	btfsc	status,2,c
  7240  000618  D008               	goto	l865
  7241  00061A  1E23               	comf	___aldiv@quotient+3,f,c
  7242  00061C  1E22               	comf	___aldiv@quotient+2,f,c
  7243  00061E  1E21               	comf	___aldiv@quotient+1,f,c
  7244  000620  6C20               	negf	___aldiv@quotient,c
  7245  000622  0E00               	movlw	0
  7246  000624  2221               	addwfc	___aldiv@quotient+1,f,c
  7247  000626  2222               	addwfc	___aldiv@quotient+2,f,c
  7248  000628  2223               	addwfc	___aldiv@quotient+3,f,c
  7249  00062A                     l865:
  7250  00062A  C020  F016         	movff	___aldiv@quotient,?___aldiv
  7251  00062E  C021  F017         	movff	___aldiv@quotient+1,?___aldiv+1
  7252  000632  C022  F018         	movff	___aldiv@quotient+2,?___aldiv+2
  7253  000636  C023  F019         	movff	___aldiv@quotient+3,?___aldiv+3
  7254  00063A  0012               	return	
  7255  00063C                     __end_of___aldiv:
  7256                           	opt stack 0
  7257                           tosu	equ	0xFFF
  7258                           tosh	equ	0xFFE
  7259                           tosl	equ	0xFFD
  7260                           pclath	equ	0xFFA
  7261                           tblptru	equ	0xFF8
  7262                           tblptrh	equ	0xFF7
  7263                           tblptrl	equ	0xFF6
  7264                           tablat	equ	0xFF5
  7265                           prodh	equ	0xFF4
  7266                           prodl	equ	0xFF3
  7267                           intcon	equ	0xFF2
  7268                           postinc0	equ	0xFEE
  7269                           wreg	equ	0xFE8
  7270                           indf1	equ	0xFE7
  7271                           postdec1	equ	0xFE5
  7272                           plusw1	equ	0xFE3
  7273                           fsr1h	equ	0xFE2
  7274                           fsr1l	equ	0xFE1
  7275                           indf2	equ	0xFDF
  7276                           postinc2	equ	0xFDE
  7277                           postdec2	equ	0xFDD
  7278                           plusw2	equ	0xFDB
  7279                           fsr2h	equ	0xFDA
  7280                           fsr2l	equ	0xFD9
  7281                           status	equ	0xFD8
  7282                           
  7283 ;; *************** function _SYSTEM_Initialize *****************
  7284 ;; Defined at:
  7285 ;;		line 116 in file "mcc_generated_files/mcc.c"
  7286 ;; Parameters:    Size  Location     Type
  7287 ;;		None
  7288 ;; Auto vars:     Size  Location     Type
  7289 ;;		None
  7290 ;; Return value:  Size  Location     Type
  7291 ;;                  1    wreg      void 
  7292 ;; Registers used:
  7293 ;;		wreg, status,2, cstack
  7294 ;; Tracked objects:
  7295 ;;		On entry : 0/0
  7296 ;;		On exit  : 0/0
  7297 ;;		Unchanged: 0/0
  7298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7303 ;;Total ram usage:        0 bytes
  7304 ;; Hardware stack levels used:    1
  7305 ;; Hardware stack levels required when called:    7
  7306 ;; This function calls:
  7307 ;;		_EUSART1_Initialize
  7308 ;;		_EUSART2_Initialize
  7309 ;;		_INTERRUPT_Initialize
  7310 ;;		_OSCILLATOR_Initialize
  7311 ;;		_PIN_MANAGER_Initialize
  7312 ;;		_PMD_Initialize
  7313 ;; This function is called by:
  7314 ;;		_main
  7315 ;; This function uses a non-reentrant model
  7316 ;;
  7317                           
  7318                           	psect	text61
  7319  00113E                     __ptext61:
  7320                           	opt stack 0
  7321  00113E                     _SYSTEM_Initialize:
  7322                           	opt stack 23
  7323                           
  7324                           ;mcc.c: 118: INTERRUPT_Initialize();
  7325                           
  7326                           ;incstack = 0
  7327  00113E  EC2B  F00A         	call	_INTERRUPT_Initialize	;wreg free
  7328                           
  7329                           ;mcc.c: 119: PMD_Initialize();
  7330  001142  EC69  F008         	call	_PMD_Initialize	;wreg free
  7331                           
  7332                           ;mcc.c: 120: PIN_MANAGER_Initialize();
  7333  001146  EC76  F003         	call	_PIN_MANAGER_Initialize	;wreg free
  7334                           
  7335                           ;mcc.c: 121: OSCILLATOR_Initialize();
  7336  00114A  ECB9  F008         	call	_OSCILLATOR_Initialize	;wreg free
  7337                           
  7338                           ;mcc.c: 122: EUSART1_Initialize();
  7339  00114E  EC13  F009         	call	_EUSART1_Initialize	;wreg free
  7340                           
  7341                           ;mcc.c: 123: EUSART2_Initialize();
  7342  001152  ECC5  F008         	call	_EUSART2_Initialize	;wreg free
  7343  001156  0012               	return		;funcret
  7344  001158                     __end_of_SYSTEM_Initialize:
  7345                           	opt stack 0
  7346                           tosu	equ	0xFFF
  7347                           tosh	equ	0xFFE
  7348                           tosl	equ	0xFFD
  7349                           pclath	equ	0xFFA
  7350                           tblptru	equ	0xFF8
  7351                           tblptrh	equ	0xFF7
  7352                           tblptrl	equ	0xFF6
  7353                           tablat	equ	0xFF5
  7354                           prodh	equ	0xFF4
  7355                           prodl	equ	0xFF3
  7356                           intcon	equ	0xFF2
  7357                           postinc0	equ	0xFEE
  7358                           wreg	equ	0xFE8
  7359                           indf1	equ	0xFE7
  7360                           postdec1	equ	0xFE5
  7361                           plusw1	equ	0xFE3
  7362                           fsr1h	equ	0xFE2
  7363                           fsr1l	equ	0xFE1
  7364                           indf2	equ	0xFDF
  7365                           postinc2	equ	0xFDE
  7366                           postdec2	equ	0xFDD
  7367                           plusw2	equ	0xFDB
  7368                           fsr2h	equ	0xFDA
  7369                           fsr2l	equ	0xFD9
  7370                           status	equ	0xFD8
  7371                           
  7372 ;; *************** function _PMD_Initialize *****************
  7373 ;; Defined at:
  7374 ;;		line 140 in file "mcc_generated_files/mcc.c"
  7375 ;; Parameters:    Size  Location     Type
  7376 ;;		None
  7377 ;; Auto vars:     Size  Location     Type
  7378 ;;		None
  7379 ;; Return value:  Size  Location     Type
  7380 ;;                  1    wreg      void 
  7381 ;; Registers used:
  7382 ;;		wreg, status,2
  7383 ;; Tracked objects:
  7384 ;;		On entry : 0/0
  7385 ;;		On exit  : 0/0
  7386 ;;		Unchanged: 0/0
  7387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7391 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7392 ;;Total ram usage:        0 bytes
  7393 ;; Hardware stack levels used:    1
  7394 ;; Hardware stack levels required when called:    6
  7395 ;; This function calls:
  7396 ;;		Nothing
  7397 ;; This function is called by:
  7398 ;;		_SYSTEM_Initialize
  7399 ;; This function uses a non-reentrant model
  7400 ;;
  7401                           
  7402                           	psect	text62
  7403  0010D2                     __ptext62:
  7404                           	opt stack 0
  7405  0010D2                     _PMD_Initialize:
  7406                           	opt stack 23
  7407                           
  7408                           ;mcc.c: 143: PMD0 = 0x00;
  7409                           
  7410                           ;incstack = 0
  7411  0010D2  0E00               	movlw	0
  7412  0010D4  010E               	movlb	14	; () banked
  7413  0010D6  6FE1               	movwf	225,b	;volatile
  7414                           
  7415                           ;mcc.c: 145: PMD1 = 0x00;
  7416  0010D8  0E00               	movlw	0
  7417  0010DA  6FE2               	movwf	226,b	;volatile
  7418                           
  7419                           ;mcc.c: 147: PMD2 = 0x00;
  7420  0010DC  0E00               	movlw	0
  7421  0010DE  6FE3               	movwf	227,b	;volatile
  7422                           
  7423                           ;mcc.c: 149: PMD3 = 0x00;
  7424  0010E0  0E00               	movlw	0
  7425  0010E2  6FE4               	movwf	228,b	;volatile
  7426                           
  7427                           ;mcc.c: 151: PMD4 = 0x00;
  7428  0010E4  0E00               	movlw	0
  7429  0010E6  6FE5               	movwf	229,b	;volatile
  7430                           
  7431                           ;mcc.c: 153: PMD5 = 0x00;
  7432  0010E8  0E00               	movlw	0
  7433  0010EA  6FE6               	movwf	230,b	;volatile
  7434                           
  7435                           ; BSR set to: 14
  7436  0010EC  0012               	return		;funcret
  7437  0010EE                     __end_of_PMD_Initialize:
  7438                           	opt stack 0
  7439                           tosu	equ	0xFFF
  7440                           tosh	equ	0xFFE
  7441                           tosl	equ	0xFFD
  7442                           pclath	equ	0xFFA
  7443                           tblptru	equ	0xFF8
  7444                           tblptrh	equ	0xFF7
  7445                           tblptrl	equ	0xFF6
  7446                           tablat	equ	0xFF5
  7447                           prodh	equ	0xFF4
  7448                           prodl	equ	0xFF3
  7449                           intcon	equ	0xFF2
  7450                           postinc0	equ	0xFEE
  7451                           wreg	equ	0xFE8
  7452                           indf1	equ	0xFE7
  7453                           postdec1	equ	0xFE5
  7454                           plusw1	equ	0xFE3
  7455                           fsr1h	equ	0xFE2
  7456                           fsr1l	equ	0xFE1
  7457                           indf2	equ	0xFDF
  7458                           postinc2	equ	0xFDE
  7459                           postdec2	equ	0xFDD
  7460                           plusw2	equ	0xFDB
  7461                           fsr2h	equ	0xFDA
  7462                           fsr2l	equ	0xFD9
  7463                           status	equ	0xFD8
  7464                           
  7465 ;; *************** function _PIN_MANAGER_Initialize *****************
  7466 ;; Defined at:
  7467 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  7468 ;; Parameters:    Size  Location     Type
  7469 ;;		None
  7470 ;; Auto vars:     Size  Location     Type
  7471 ;;		None
  7472 ;; Return value:  Size  Location     Type
  7473 ;;                  1    wreg      void 
  7474 ;; Registers used:
  7475 ;;		wreg, status,2
  7476 ;; Tracked objects:
  7477 ;;		On entry : 0/0
  7478 ;;		On exit  : 0/0
  7479 ;;		Unchanged: 0/0
  7480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7485 ;;Total ram usage:        0 bytes
  7486 ;; Hardware stack levels used:    1
  7487 ;; Hardware stack levels required when called:    6
  7488 ;; This function calls:
  7489 ;;		Nothing
  7490 ;; This function is called by:
  7491 ;;		_SYSTEM_Initialize
  7492 ;; This function uses a non-reentrant model
  7493 ;;
  7494                           
  7495                           	psect	text63
  7496  0006EC                     __ptext63:
  7497                           	opt stack 0
  7498  0006EC                     _PIN_MANAGER_Initialize:
  7499                           	opt stack 23
  7500                           
  7501                           ;pin_manager.c: 57: LATE = 0x00;
  7502                           
  7503                           ; BSR set to: 14
  7504                           ;incstack = 0
  7505  0006EC  0E00               	movlw	0
  7506  0006EE  6E87               	movwf	3975,c	;volatile
  7507                           
  7508                           ;pin_manager.c: 58: LATD = 0x00;
  7509  0006F0  0E00               	movlw	0
  7510  0006F2  6E86               	movwf	3974,c	;volatile
  7511                           
  7512                           ;pin_manager.c: 59: LATA = 0x0C;
  7513  0006F4  0E0C               	movlw	12
  7514  0006F6  6E83               	movwf	3971,c	;volatile
  7515                           
  7516                           ;pin_manager.c: 60: LATB = 0x00;
  7517  0006F8  0E00               	movlw	0
  7518  0006FA  6E84               	movwf	3972,c	;volatile
  7519                           
  7520                           ;pin_manager.c: 61: LATC = 0x00;
  7521  0006FC  0E00               	movlw	0
  7522  0006FE  6E85               	movwf	3973,c	;volatile
  7523                           
  7524                           ;pin_manager.c: 66: TRISE = 0x07;
  7525  000700  0E07               	movlw	7
  7526  000702  6E8C               	movwf	3980,c	;volatile
  7527                           
  7528                           ;pin_manager.c: 67: TRISA = 0xEB;
  7529  000704  0EEB               	movlw	235
  7530  000706  6E88               	movwf	3976,c	;volatile
  7531                           
  7532                           ;pin_manager.c: 68: TRISB = 0xFF;
  7533  000708  6889               	setf	3977,c	;volatile
  7534                           
  7535                           ;pin_manager.c: 69: TRISC = 0xBF;
  7536  00070A  0EBF               	movlw	191
  7537  00070C  6E8A               	movwf	3978,c	;volatile
  7538                           
  7539                           ;pin_manager.c: 70: TRISD = 0x7E;
  7540  00070E  0E7E               	movlw	126
  7541  000710  6E8B               	movwf	3979,c	;volatile
  7542                           
  7543                           ;pin_manager.c: 75: ANSELC = 0xC7;
  7544  000712  0EC7               	movlw	199
  7545  000714  010F               	movlb	15	; () banked
  7546  000716  6F21               	movwf	33,b	;volatile
  7547                           
  7548                           ; BSR set to: 15
  7549                           ;pin_manager.c: 76: ANSELB = 0xFF;
  7550  000718  6919               	setf	25,b	;volatile
  7551                           
  7552                           ;pin_manager.c: 77: ANSELD = 0xF7;
  7553  00071A  0EF7               	movlw	247
  7554  00071C  6F26               	movwf	38,b	;volatile
  7555                           
  7556                           ;pin_manager.c: 78: ANSELE = 0x07;
  7557  00071E  0E07               	movlw	7
  7558  000720  6F2E               	movwf	46,b	;volatile
  7559                           
  7560                           ; BSR set to: 15
  7561                           ;pin_manager.c: 79: ANSELA = 0xFF;
  7562  000722  6911               	setf	17,b	;volatile
  7563                           
  7564                           ;pin_manager.c: 84: WPUD = 0x88;
  7565  000724  0E88               	movlw	136
  7566  000726  6F25               	movwf	37,b	;volatile
  7567                           
  7568                           ;pin_manager.c: 85: WPUE = 0x00;
  7569  000728  0E00               	movlw	0
  7570  00072A  6F2D               	movwf	45,b	;volatile
  7571                           
  7572                           ;pin_manager.c: 86: WPUB = 0x02;
  7573  00072C  0E02               	movlw	2
  7574  00072E  6F18               	movwf	24,b	;volatile
  7575                           
  7576                           ;pin_manager.c: 87: WPUA = 0x00;
  7577  000730  0E00               	movlw	0
  7578  000732  6F10               	movwf	16,b	;volatile
  7579                           
  7580                           ;pin_manager.c: 88: WPUC = 0x18;
  7581  000734  0E18               	movlw	24
  7582  000736  6F20               	movwf	32,b	;volatile
  7583                           
  7584                           ;pin_manager.c: 93: ODCONE = 0x00;
  7585  000738  0E00               	movlw	0
  7586  00073A  6F2C               	movwf	44,b	;volatile
  7587                           
  7588                           ;pin_manager.c: 94: ODCONA = 0x00;
  7589  00073C  0E00               	movlw	0
  7590  00073E  6F0F               	movwf	15,b	;volatile
  7591                           
  7592                           ;pin_manager.c: 95: ODCONB = 0x00;
  7593  000740  0E00               	movlw	0
  7594  000742  6F17               	movwf	23,b	;volatile
  7595                           
  7596                           ;pin_manager.c: 96: ODCONC = 0x00;
  7597  000744  0E00               	movlw	0
  7598  000746  6F1F               	movwf	31,b	;volatile
  7599                           
  7600                           ;pin_manager.c: 97: ODCOND = 0x00;
  7601  000748  0E00               	movlw	0
  7602  00074A  6F24               	movwf	36,b	;volatile
  7603                           
  7604                           ;pin_manager.c: 104: RC3PPS = 0x0F;
  7605  00074C  0E0F               	movlw	15
  7606  00074E  010E               	movlb	14	; () banked
  7607  000750  6FFA               	movwf	250,b	;volatile
  7608                           
  7609                           ;pin_manager.c: 105: RC4PPS = 0x10;
  7610  000752  0E10               	movlw	16
  7611  000754  6FFB               	movwf	251,b	;volatile
  7612                           
  7613                           ;pin_manager.c: 106: RD0PPS = 0x0B;
  7614  000756  0E0B               	movlw	11
  7615  000758  6FFF               	movwf	255,b	;volatile
  7616                           
  7617                           ; BSR set to: 14
  7618                           ;pin_manager.c: 107: RX1PPSbits.RXPPS = 0x15;
  7619  00075A  81B5               	bsf	181,0,b	;volatile
  7620  00075C  93B5               	bcf	181,1,b	;volatile
  7621  00075E  85B5               	bsf	181,2,b	;volatile
  7622  000760  97B5               	bcf	181,3,b	;volatile
  7623  000762  89B5               	bsf	181,4,b	;volatile
  7624                           
  7625                           ;pin_manager.c: 108: RC6PPS = 0x09;
  7626  000764  0E09               	movlw	9
  7627  000766  6FFD               	movwf	253,b	;volatile
  7628                           
  7629                           ; BSR set to: 14
  7630                           ;pin_manager.c: 109: SSP1CLKPPSbits.SSPCLKPPS = 0x13;
  7631  000768  81B7               	bsf	183,0,b	;volatile
  7632  00076A  83B7               	bsf	183,1,b	;volatile
  7633  00076C  95B7               	bcf	183,2,b	;volatile
  7634  00076E  97B7               	bcf	183,3,b	;volatile
  7635  000770  89B7               	bsf	183,4,b	;volatile
  7636                           
  7637                           ;pin_manager.c: 110: RD7PPS = 0x0B;
  7638  000772  0E0B               	movlw	11
  7639  000774  010F               	movlb	15	; () banked
  7640  000776  6F06               	movwf	6,b	;volatile
  7641                           
  7642                           ; BSR set to: 15
  7643                           ;pin_manager.c: 111: RX2PPSbits.RXPPS = 0x1B;
  7644  000778  010E               	movlb	14	; () banked
  7645  00077A  818D               	bsf	141,0,b	;volatile
  7646  00077C  838D               	bsf	141,1,b	;volatile
  7647  00077E  958D               	bcf	141,2,b	;volatile
  7648  000780  878D               	bsf	141,3,b	;volatile
  7649  000782  898D               	bsf	141,4,b	;volatile
  7650                           
  7651                           ; BSR set to: 14
  7652                           ;pin_manager.c: 112: SSP1DATPPSbits.SSPDATPPS = 0x14;
  7653  000784  91B8               	bcf	184,0,b	;volatile
  7654  000786  93B8               	bcf	184,1,b	;volatile
  7655  000788  85B8               	bsf	184,2,b	;volatile
  7656  00078A  97B8               	bcf	184,3,b	;volatile
  7657  00078C  89B8               	bsf	184,4,b	;volatile
  7658                           
  7659                           ; BSR set to: 14
  7660  00078E  0012               	return		;funcret
  7661  000790                     __end_of_PIN_MANAGER_Initialize:
  7662                           	opt stack 0
  7663                           tosu	equ	0xFFF
  7664                           tosh	equ	0xFFE
  7665                           tosl	equ	0xFFD
  7666                           pclath	equ	0xFFA
  7667                           tblptru	equ	0xFF8
  7668                           tblptrh	equ	0xFF7
  7669                           tblptrl	equ	0xFF6
  7670                           tablat	equ	0xFF5
  7671                           prodh	equ	0xFF4
  7672                           prodl	equ	0xFF3
  7673                           intcon	equ	0xFF2
  7674                           postinc0	equ	0xFEE
  7675                           wreg	equ	0xFE8
  7676                           indf1	equ	0xFE7
  7677                           postdec1	equ	0xFE5
  7678                           plusw1	equ	0xFE3
  7679                           fsr1h	equ	0xFE2
  7680                           fsr1l	equ	0xFE1
  7681                           indf2	equ	0xFDF
  7682                           postinc2	equ	0xFDE
  7683                           postdec2	equ	0xFDD
  7684                           plusw2	equ	0xFDB
  7685                           fsr2h	equ	0xFDA
  7686                           fsr2l	equ	0xFD9
  7687                           status	equ	0xFD8
  7688                           
  7689 ;; *************** function _OSCILLATOR_Initialize *****************
  7690 ;; Defined at:
  7691 ;;		line 126 in file "mcc_generated_files/mcc.c"
  7692 ;; Parameters:    Size  Location     Type
  7693 ;;		None
  7694 ;; Auto vars:     Size  Location     Type
  7695 ;;		None
  7696 ;; Return value:  Size  Location     Type
  7697 ;;                  1    wreg      void 
  7698 ;; Registers used:
  7699 ;;		wreg, status,2
  7700 ;; Tracked objects:
  7701 ;;		On entry : 0/0
  7702 ;;		On exit  : 0/0
  7703 ;;		Unchanged: 0/0
  7704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7708 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7709 ;;Total ram usage:        0 bytes
  7710 ;; Hardware stack levels used:    1
  7711 ;; Hardware stack levels required when called:    6
  7712 ;; This function calls:
  7713 ;;		Nothing
  7714 ;; This function is called by:
  7715 ;;		_SYSTEM_Initialize
  7716 ;; This function uses a non-reentrant model
  7717 ;;
  7718                           
  7719                           	psect	text64
  7720  001172                     __ptext64:
  7721                           	opt stack 0
  7722  001172                     _OSCILLATOR_Initialize:
  7723                           	opt stack 23
  7724                           
  7725                           ;mcc.c: 129: OSCCON1 = 0x62;
  7726                           
  7727                           ; BSR set to: 14
  7728                           ;incstack = 0
  7729  001172  0E62               	movlw	98
  7730  001174  010E               	movlb	14	; () banked
  7731  001176  6FD8               	movwf	216,b	;volatile
  7732                           
  7733                           ;mcc.c: 131: OSCCON3 = 0x00;
  7734  001178  0E00               	movlw	0
  7735  00117A  6FDA               	movwf	218,b	;volatile
  7736                           
  7737                           ;mcc.c: 133: OSCEN = 0x00;
  7738  00117C  0E00               	movlw	0
  7739  00117E  6FDC               	movwf	220,b	;volatile
  7740                           
  7741                           ;mcc.c: 135: OSCFRQ = 0x03;
  7742  001180  0E03               	movlw	3
  7743  001182  6FDE               	movwf	222,b	;volatile
  7744                           
  7745                           ;mcc.c: 137: OSCTUNE = 0x20;
  7746  001184  0E20               	movlw	32
  7747  001186  6FDD               	movwf	221,b	;volatile
  7748                           
  7749                           ; BSR set to: 14
  7750  001188  0012               	return		;funcret
  7751  00118A                     __end_of_OSCILLATOR_Initialize:
  7752                           	opt stack 0
  7753                           tosu	equ	0xFFF
  7754                           tosh	equ	0xFFE
  7755                           tosl	equ	0xFFD
  7756                           pclath	equ	0xFFA
  7757                           tblptru	equ	0xFF8
  7758                           tblptrh	equ	0xFF7
  7759                           tblptrl	equ	0xFF6
  7760                           tablat	equ	0xFF5
  7761                           prodh	equ	0xFF4
  7762                           prodl	equ	0xFF3
  7763                           intcon	equ	0xFF2
  7764                           postinc0	equ	0xFEE
  7765                           wreg	equ	0xFE8
  7766                           indf1	equ	0xFE7
  7767                           postdec1	equ	0xFE5
  7768                           plusw1	equ	0xFE3
  7769                           fsr1h	equ	0xFE2
  7770                           fsr1l	equ	0xFE1
  7771                           indf2	equ	0xFDF
  7772                           postinc2	equ	0xFDE
  7773                           postdec2	equ	0xFDD
  7774                           plusw2	equ	0xFDB
  7775                           fsr2h	equ	0xFDA
  7776                           fsr2l	equ	0xFD9
  7777                           status	equ	0xFD8
  7778                           
  7779 ;; *************** function _INTERRUPT_Initialize *****************
  7780 ;; Defined at:
  7781 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  7782 ;; Parameters:    Size  Location     Type
  7783 ;;		None
  7784 ;; Auto vars:     Size  Location     Type
  7785 ;;		None
  7786 ;; Return value:  Size  Location     Type
  7787 ;;                  1    wreg      void 
  7788 ;; Registers used:
  7789 ;;		None
  7790 ;; Tracked objects:
  7791 ;;		On entry : 0/0
  7792 ;;		On exit  : 0/0
  7793 ;;		Unchanged: 0/0
  7794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7799 ;;Total ram usage:        0 bytes
  7800 ;; Hardware stack levels used:    1
  7801 ;; Hardware stack levels required when called:    6
  7802 ;; This function calls:
  7803 ;;		Nothing
  7804 ;; This function is called by:
  7805 ;;		_SYSTEM_Initialize
  7806 ;; This function uses a non-reentrant model
  7807 ;;
  7808                           
  7809                           	psect	text65
  7810  001456                     __ptext65:
  7811                           	opt stack 0
  7812  001456                     _INTERRUPT_Initialize:
  7813                           	opt stack 23
  7814                           
  7815                           ;interrupt_manager.c: 54: INTCONbits.IPEN = 0;
  7816                           
  7817                           ; BSR set to: 14
  7818                           ;incstack = 0
  7819  001456  9AF2               	bcf	intcon,5,c	;volatile
  7820  001458  0012               	return		;funcret
  7821  00145A                     __end_of_INTERRUPT_Initialize:
  7822                           	opt stack 0
  7823                           tosu	equ	0xFFF
  7824                           tosh	equ	0xFFE
  7825                           tosl	equ	0xFFD
  7826                           pclath	equ	0xFFA
  7827                           tblptru	equ	0xFF8
  7828                           tblptrh	equ	0xFF7
  7829                           tblptrl	equ	0xFF6
  7830                           tablat	equ	0xFF5
  7831                           prodh	equ	0xFF4
  7832                           prodl	equ	0xFF3
  7833                           intcon	equ	0xFF2
  7834                           postinc0	equ	0xFEE
  7835                           wreg	equ	0xFE8
  7836                           indf1	equ	0xFE7
  7837                           postdec1	equ	0xFE5
  7838                           plusw1	equ	0xFE3
  7839                           fsr1h	equ	0xFE2
  7840                           fsr1l	equ	0xFE1
  7841                           indf2	equ	0xFDF
  7842                           postinc2	equ	0xFDE
  7843                           postdec2	equ	0xFDD
  7844                           plusw2	equ	0xFDB
  7845                           fsr2h	equ	0xFDA
  7846                           fsr2l	equ	0xFD9
  7847                           status	equ	0xFD8
  7848                           
  7849 ;; *************** function _EUSART2_Initialize *****************
  7850 ;; Defined at:
  7851 ;;		line 55 in file "mcc_generated_files/eusart2.c"
  7852 ;; Parameters:    Size  Location     Type
  7853 ;;		None
  7854 ;; Auto vars:     Size  Location     Type
  7855 ;;		None
  7856 ;; Return value:  Size  Location     Type
  7857 ;;                  1    wreg      void 
  7858 ;; Registers used:
  7859 ;;		wreg, status,2
  7860 ;; Tracked objects:
  7861 ;;		On entry : 0/0
  7862 ;;		On exit  : 0/0
  7863 ;;		Unchanged: 0/0
  7864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7869 ;;Total ram usage:        0 bytes
  7870 ;; Hardware stack levels used:    1
  7871 ;; Hardware stack levels required when called:    6
  7872 ;; This function calls:
  7873 ;;		Nothing
  7874 ;; This function is called by:
  7875 ;;		_SYSTEM_Initialize
  7876 ;;		_main
  7877 ;; This function uses a non-reentrant model
  7878 ;;
  7879                           
  7880                           	psect	text66
  7881  00118A                     __ptext66:
  7882                           	opt stack 0
  7883  00118A                     _EUSART2_Initialize:
  7884                           	opt stack 23
  7885                           
  7886                           ;eusart2.c: 60: BAUD2CON = 0x08;
  7887                           
  7888                           ;incstack = 0
  7889  00118A  0E08               	movlw	8
  7890  00118C  010E               	movlb	14	; () banked
  7891  00118E  6F9F               	movwf	159,b	;volatile
  7892                           
  7893                           ;eusart2.c: 63: RC2STA = 0x90;
  7894  001190  0E90               	movlw	144
  7895  001192  6F9D               	movwf	157,b	;volatile
  7896                           
  7897                           ;eusart2.c: 66: TX2STA = 0x24;
  7898  001194  0E24               	movlw	36
  7899  001196  6F9E               	movwf	158,b	;volatile
  7900                           
  7901                           ;eusart2.c: 69: SP2BRGL = 0x33;
  7902  001198  0E33               	movlw	51
  7903  00119A  6F9B               	movwf	155,b	;volatile
  7904                           
  7905                           ;eusart2.c: 72: SP2BRGH = 0x00;
  7906  00119C  0E00               	movlw	0
  7907  00119E  6F9C               	movwf	156,b	;volatile
  7908                           
  7909                           ; BSR set to: 14
  7910  0011A0  0012               	return		;funcret
  7911  0011A2                     __end_of_EUSART2_Initialize:
  7912                           	opt stack 0
  7913                           tosu	equ	0xFFF
  7914                           tosh	equ	0xFFE
  7915                           tosl	equ	0xFFD
  7916                           pclath	equ	0xFFA
  7917                           tblptru	equ	0xFF8
  7918                           tblptrh	equ	0xFF7
  7919                           tblptrl	equ	0xFF6
  7920                           tablat	equ	0xFF5
  7921                           prodh	equ	0xFF4
  7922                           prodl	equ	0xFF3
  7923                           intcon	equ	0xFF2
  7924                           postinc0	equ	0xFEE
  7925                           wreg	equ	0xFE8
  7926                           indf1	equ	0xFE7
  7927                           postdec1	equ	0xFE5
  7928                           plusw1	equ	0xFE3
  7929                           fsr1h	equ	0xFE2
  7930                           fsr1l	equ	0xFE1
  7931                           indf2	equ	0xFDF
  7932                           postinc2	equ	0xFDE
  7933                           postdec2	equ	0xFDD
  7934                           plusw2	equ	0xFDB
  7935                           fsr2h	equ	0xFDA
  7936                           fsr2l	equ	0xFD9
  7937                           status	equ	0xFD8
  7938                           
  7939 ;; *************** function _EUSART1_Initialize *****************
  7940 ;; Defined at:
  7941 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  7942 ;; Parameters:    Size  Location     Type
  7943 ;;		None
  7944 ;; Auto vars:     Size  Location     Type
  7945 ;;		None
  7946 ;; Return value:  Size  Location     Type
  7947 ;;                  1    wreg      void 
  7948 ;; Registers used:
  7949 ;;		wreg, status,2
  7950 ;; Tracked objects:
  7951 ;;		On entry : 0/0
  7952 ;;		On exit  : 0/0
  7953 ;;		Unchanged: 0/0
  7954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7958 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7959 ;;Total ram usage:        0 bytes
  7960 ;; Hardware stack levels used:    1
  7961 ;; Hardware stack levels required when called:    6
  7962 ;; This function calls:
  7963 ;;		Nothing
  7964 ;; This function is called by:
  7965 ;;		_SYSTEM_Initialize
  7966 ;;		_main
  7967 ;; This function uses a non-reentrant model
  7968 ;;
  7969                           
  7970                           	psect	text67
  7971  001226                     __ptext67:
  7972                           	opt stack 0
  7973  001226                     _EUSART1_Initialize:
  7974                           	opt stack 23
  7975                           
  7976                           ;eusart1.c: 60: BAUD1CON = 0x08;
  7977                           
  7978                           ; BSR set to: 14
  7979                           ;incstack = 0
  7980  001226  0E08               	movlw	8
  7981  001228  6E9F               	movwf	3999,c	;volatile
  7982                           
  7983                           ;eusart1.c: 63: RC1STA = 0x90;
  7984  00122A  0E90               	movlw	144
  7985  00122C  6E9D               	movwf	3997,c	;volatile
  7986                           
  7987                           ;eusart1.c: 66: TX1STA = 0x24;
  7988  00122E  0E24               	movlw	36
  7989  001230  6E9E               	movwf	3998,c	;volatile
  7990                           
  7991                           ;eusart1.c: 69: SP1BRGL = 0x33;
  7992  001232  0E33               	movlw	51
  7993  001234  6E9B               	movwf	3995,c	;volatile
  7994                           
  7995                           ;eusart1.c: 72: SP1BRGH = 0x00;
  7996  001236  0E00               	movlw	0
  7997  001238  6E9C               	movwf	3996,c	;volatile
  7998  00123A  0012               	return		;funcret
  7999  00123C                     __end_of_EUSART1_Initialize:
  8000                           	opt stack 0
  8001                           tosu	equ	0xFFF
  8002                           tosh	equ	0xFFE
  8003                           tosl	equ	0xFFD
  8004                           pclath	equ	0xFFA
  8005                           tblptru	equ	0xFF8
  8006                           tblptrh	equ	0xFF7
  8007                           tblptrl	equ	0xFF6
  8008                           tablat	equ	0xFF5
  8009                           prodh	equ	0xFF4
  8010                           prodl	equ	0xFF3
  8011                           intcon	equ	0xFF2
  8012                           postinc0	equ	0xFEE
  8013                           wreg	equ	0xFE8
  8014                           indf1	equ	0xFE7
  8015                           postdec1	equ	0xFE5
  8016                           plusw1	equ	0xFE3
  8017                           fsr1h	equ	0xFE2
  8018                           fsr1l	equ	0xFE1
  8019                           indf2	equ	0xFDF
  8020                           postinc2	equ	0xFDE
  8021                           postdec2	equ	0xFDD
  8022                           plusw2	equ	0xFDB
  8023                           fsr2h	equ	0xFDA
  8024                           fsr2l	equ	0xFD9
  8025                           status	equ	0xFD8
  8026                           
  8027 ;; *************** function _EUSART2_is_rx_ready *****************
  8028 ;; Defined at:
  8029 ;;		line 82 in file "mcc_generated_files/eusart2.c"
  8030 ;; Parameters:    Size  Location     Type
  8031 ;;		None
  8032 ;; Auto vars:     Size  Location     Type
  8033 ;;		None
  8034 ;; Return value:  Size  Location     Type
  8035 ;;                  1    wreg      unsigned char 
  8036 ;; Registers used:
  8037 ;;		wreg
  8038 ;; Tracked objects:
  8039 ;;		On entry : 0/0
  8040 ;;		On exit  : 0/0
  8041 ;;		Unchanged: 0/0
  8042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8047 ;;Total ram usage:        0 bytes
  8048 ;; Hardware stack levels used:    1
  8049 ;; Hardware stack levels required when called:    6
  8050 ;; This function calls:
  8051 ;;		Nothing
  8052 ;; This function is called by:
  8053 ;;		_main
  8054 ;;		_readAllBytes
  8055 ;; This function uses a non-reentrant model
  8056 ;;
  8057                           
  8058                           	psect	text68
  8059  001348                     __ptext68:
  8060                           	opt stack 0
  8061  001348                     _EUSART2_is_rx_ready:
  8062                           	opt stack 24
  8063                           
  8064                           ;eusart2.c: 84: return PIR3bits.RC2IF;
  8065                           
  8066                           ;incstack = 0
  8067  001348  010E               	movlb	14	; () banked
  8068  00134A  AFCD               	btfss	205,7,b	;volatile
  8069  00134C  D002               	goto	u1460
  8070  00134E  0E01               	movlw	1
  8071  001350  0012               	return	
  8072  001352                     u1460:
  8073  001352  0E00               	movlw	0
  8074  001354  0012               	return	
  8075  001356                     __end_of_EUSART2_is_rx_ready:
  8076                           	opt stack 0
  8077                           tosu	equ	0xFFF
  8078                           tosh	equ	0xFFE
  8079                           tosl	equ	0xFFD
  8080                           pclath	equ	0xFFA
  8081                           tblptru	equ	0xFF8
  8082                           tblptrh	equ	0xFF7
  8083                           tblptrl	equ	0xFF6
  8084                           tablat	equ	0xFF5
  8085                           prodh	equ	0xFF4
  8086                           prodl	equ	0xFF3
  8087                           intcon	equ	0xFF2
  8088                           postinc0	equ	0xFEE
  8089                           wreg	equ	0xFE8
  8090                           indf1	equ	0xFE7
  8091                           postdec1	equ	0xFE5
  8092                           plusw1	equ	0xFE3
  8093                           fsr1h	equ	0xFE2
  8094                           fsr1l	equ	0xFE1
  8095                           indf2	equ	0xFDF
  8096                           postinc2	equ	0xFDE
  8097                           postdec2	equ	0xFDD
  8098                           plusw2	equ	0xFDB
  8099                           fsr2h	equ	0xFDA
  8100                           fsr2l	equ	0xFD9
  8101                           status	equ	0xFD8
  8102                           
  8103 ;; *************** function _EUSART2_Write *****************
  8104 ;; Defined at:
  8105 ;;		line 111 in file "mcc_generated_files/eusart2.c"
  8106 ;; Parameters:    Size  Location     Type
  8107 ;;  txData          1    wreg     unsigned char 
  8108 ;; Auto vars:     Size  Location     Type
  8109 ;;  txData          1   21[COMRAM] unsigned char 
  8110 ;; Return value:  Size  Location     Type
  8111 ;;                  1    wreg      void 
  8112 ;; Registers used:
  8113 ;;		wreg
  8114 ;; Tracked objects:
  8115 ;;		On entry : 0/0
  8116 ;;		On exit  : 0/0
  8117 ;;		Unchanged: 0/0
  8118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8120 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8122 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8123 ;;Total ram usage:        1 bytes
  8124 ;; Hardware stack levels used:    1
  8125 ;; Hardware stack levels required when called:    6
  8126 ;; This function calls:
  8127 ;;		Nothing
  8128 ;; This function is called by:
  8129 ;;		_main
  8130 ;; This function uses a non-reentrant model
  8131 ;;
  8132                           
  8133                           	psect	text69
  8134  001356                     __ptext69:
  8135                           	opt stack 0
  8136  001356                     _EUSART2_Write:
  8137                           	opt stack 24
  8138                           
  8139                           ; BSR set to: 14
  8140                           ;incstack = 0
  8141                           ;EUSART2_Write@txData stored from wreg
  8142  001356  6E16               	movwf	EUSART2_Write@txData,c
  8143  001358                     
  8144                           ;eusart2.c: 114: {
  8145                           
  8146                           ;eusart2.c: 113: while(0 == PIR3bits.TX2IF)
  8147  001358  010E               	movlb	14	; () banked
  8148  00135A  ADCD               	btfss	205,6,b	;volatile
  8149  00135C  D7FD               	goto	l3486
  8150                           
  8151                           ; BSR set to: 14
  8152                           ;eusart2.c: 115: }
  8153                           ;eusart2.c: 117: TX2REG = txData;
  8154                           
  8155                           ; BSR set to: 14
  8156  00135E  C016  FE9A         	movff	EUSART2_Write@txData,3738	;volatile
  8157                           
  8158                           ; BSR set to: 14
  8159  001362  0012               	return		;funcret
  8160  001364                     __end_of_EUSART2_Write:
  8161                           	opt stack 0
  8162                           tosu	equ	0xFFF
  8163                           tosh	equ	0xFFE
  8164                           tosl	equ	0xFFD
  8165                           pclath	equ	0xFFA
  8166                           tblptru	equ	0xFF8
  8167                           tblptrh	equ	0xFF7
  8168                           tblptrl	equ	0xFF6
  8169                           tablat	equ	0xFF5
  8170                           prodh	equ	0xFF4
  8171                           prodl	equ	0xFF3
  8172                           intcon	equ	0xFF2
  8173                           postinc0	equ	0xFEE
  8174                           wreg	equ	0xFE8
  8175                           indf1	equ	0xFE7
  8176                           postdec1	equ	0xFE5
  8177                           plusw1	equ	0xFE3
  8178                           fsr1h	equ	0xFE2
  8179                           fsr1l	equ	0xFE1
  8180                           indf2	equ	0xFDF
  8181                           postinc2	equ	0xFDE
  8182                           postdec2	equ	0xFDD
  8183                           plusw2	equ	0xFDB
  8184                           fsr2h	equ	0xFDA
  8185                           fsr2l	equ	0xFD9
  8186                           status	equ	0xFD8
  8187                           
  8188 ;; *************** function _EUSART2_Read *****************
  8189 ;; Defined at:
  8190 ;;		line 92 in file "mcc_generated_files/eusart2.c"
  8191 ;; Parameters:    Size  Location     Type
  8192 ;;		None
  8193 ;; Auto vars:     Size  Location     Type
  8194 ;;		None
  8195 ;; Return value:  Size  Location     Type
  8196 ;;                  1    wreg      unsigned char 
  8197 ;; Registers used:
  8198 ;;		wreg, status,2
  8199 ;; Tracked objects:
  8200 ;;		On entry : 0/0
  8201 ;;		On exit  : 0/0
  8202 ;;		Unchanged: 0/0
  8203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8208 ;;Total ram usage:        0 bytes
  8209 ;; Hardware stack levels used:    1
  8210 ;; Hardware stack levels required when called:    6
  8211 ;; This function calls:
  8212 ;;		Nothing
  8213 ;; This function is called by:
  8214 ;;		_main
  8215 ;;		_readAllBytes
  8216 ;; This function uses a non-reentrant model
  8217 ;;
  8218                           
  8219                           	psect	text70
  8220  001288                     __ptext70:
  8221                           	opt stack 0
  8222  001288                     _EUSART2_Read:
  8223                           	opt stack 24
  8224                           
  8225                           ;eusart2.c: 96: {
  8226                           
  8227                           ;eusart2.c: 95: while(!PIR3bits.RC2IF)
  8228                           
  8229                           ; BSR set to: 14
  8230                           ;incstack = 0
  8231  001288  010E               	movlb	14	; () banked
  8232  00128A  AFCD               	btfss	205,7,b	;volatile
  8233  00128C  D7FD               	goto	_EUSART2_Read
  8234                           
  8235                           ; BSR set to: 14
  8236                           ;eusart2.c: 97: }
  8237                           ;eusart2.c: 100: if(1 == RC2STAbits.OERR)
  8238  00128E  A39D               	btfss	157,1,b	;volatile
  8239  001290  D002               	goto	l647
  8240                           
  8241                           ; BSR set to: 14
  8242                           ;eusart2.c: 101: {
  8243                           ;eusart2.c: 104: RC2STAbits.SPEN = 0;
  8244  001292  9F9D               	bcf	157,7,b	;volatile
  8245                           
  8246                           ;eusart2.c: 105: RC2STAbits.SPEN = 1;
  8247  001294  8F9D               	bsf	157,7,b	;volatile
  8248  001296                     l647:
  8249                           
  8250                           ; BSR set to: 14
  8251                           ;eusart2.c: 106: }
  8252                           ;eusart2.c: 108: return RC2REG;
  8253                           
  8254                           ; BSR set to: 14
  8255  001296  5199               	movf	153,w,b	;volatile
  8256  001298  0012               	return	
  8257  00129A                     __end_of_EUSART2_Read:
  8258                           	opt stack 0
  8259                           tosu	equ	0xFFF
  8260                           tosh	equ	0xFFE
  8261                           tosl	equ	0xFFD
  8262                           pclath	equ	0xFFA
  8263                           tblptru	equ	0xFF8
  8264                           tblptrh	equ	0xFF7
  8265                           tblptrl	equ	0xFF6
  8266                           tablat	equ	0xFF5
  8267                           prodh	equ	0xFF4
  8268                           prodl	equ	0xFF3
  8269                           intcon	equ	0xFF2
  8270                           postinc0	equ	0xFEE
  8271                           wreg	equ	0xFE8
  8272                           indf1	equ	0xFE7
  8273                           postdec1	equ	0xFE5
  8274                           plusw1	equ	0xFE3
  8275                           fsr1h	equ	0xFE2
  8276                           fsr1l	equ	0xFE1
  8277                           indf2	equ	0xFDF
  8278                           postinc2	equ	0xFDE
  8279                           postdec2	equ	0xFDD
  8280                           plusw2	equ	0xFDB
  8281                           fsr2h	equ	0xFDA
  8282                           fsr2l	equ	0xFD9
  8283                           status	equ	0xFD8
  8284                           
  8285 ;; *************** function _EUSART1_Write *****************
  8286 ;; Defined at:
  8287 ;;		line 111 in file "mcc_generated_files/eusart1.c"
  8288 ;; Parameters:    Size  Location     Type
  8289 ;;  txData          1    wreg     unsigned char 
  8290 ;; Auto vars:     Size  Location     Type
  8291 ;;  txData          1   21[COMRAM] unsigned char 
  8292 ;; Return value:  Size  Location     Type
  8293 ;;                  1    wreg      void 
  8294 ;; Registers used:
  8295 ;;		wreg
  8296 ;; Tracked objects:
  8297 ;;		On entry : 0/0
  8298 ;;		On exit  : 0/0
  8299 ;;		Unchanged: 0/0
  8300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8302 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8304 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8305 ;;Total ram usage:        1 bytes
  8306 ;; Hardware stack levels used:    1
  8307 ;; Hardware stack levels required when called:    6
  8308 ;; This function calls:
  8309 ;;		Nothing
  8310 ;; This function is called by:
  8311 ;;		_main
  8312 ;; This function uses a non-reentrant model
  8313 ;;
  8314                           
  8315                           	psect	text71
  8316  001364                     __ptext71:
  8317                           	opt stack 0
  8318  001364                     _EUSART1_Write:
  8319                           	opt stack 24
  8320                           
  8321                           ; BSR set to: 14
  8322                           ;incstack = 0
  8323                           ;EUSART1_Write@txData stored from wreg
  8324  001364  6E16               	movwf	EUSART1_Write@txData,c
  8325  001366                     
  8326                           ;eusart1.c: 114: {
  8327                           
  8328                           ;eusart1.c: 113: while(0 == PIR3bits.TX1IF)
  8329  001366  010E               	movlb	14	; () banked
  8330  001368  A9CD               	btfss	205,4,b	;volatile
  8331  00136A  D7FD               	goto	l3490
  8332                           
  8333                           ; BSR set to: 14
  8334                           ;eusart1.c: 115: }
  8335                           ;eusart1.c: 117: TX1REG = txData;
  8336                           
  8337                           ; BSR set to: 14
  8338  00136C  C016  FF9A         	movff	EUSART1_Write@txData,3994	;volatile
  8339                           
  8340                           ; BSR set to: 14
  8341  001370  0012               	return		;funcret
  8342  001372                     __end_of_EUSART1_Write:
  8343                           	opt stack 0
  8344                           tosu	equ	0xFFF
  8345                           tosh	equ	0xFFE
  8346                           tosl	equ	0xFFD
  8347                           pclath	equ	0xFFA
  8348                           tblptru	equ	0xFF8
  8349                           tblptrh	equ	0xFF7
  8350                           tblptrl	equ	0xFF6
  8351                           tablat	equ	0xFF5
  8352                           prodh	equ	0xFF4
  8353                           prodl	equ	0xFF3
  8354                           intcon	equ	0xFF2
  8355                           postinc0	equ	0xFEE
  8356                           wreg	equ	0xFE8
  8357                           indf1	equ	0xFE7
  8358                           postdec1	equ	0xFE5
  8359                           plusw1	equ	0xFE3
  8360                           fsr1h	equ	0xFE2
  8361                           fsr1l	equ	0xFE1
  8362                           indf2	equ	0xFDF
  8363                           postinc2	equ	0xFDE
  8364                           postdec2	equ	0xFDD
  8365                           plusw2	equ	0xFDB
  8366                           fsr2h	equ	0xFDA
  8367                           fsr2l	equ	0xFD9
  8368                           status	equ	0xFD8
  8369                           
  8370 ;; *************** function _INTERRUPT_InterruptManager *****************
  8371 ;; Defined at:
  8372 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  8373 ;; Parameters:    Size  Location     Type
  8374 ;;		None
  8375 ;; Auto vars:     Size  Location     Type
  8376 ;;		None
  8377 ;; Return value:  Size  Location     Type
  8378 ;;                  1    wreg      void 
  8379 ;; Registers used:
  8380 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  8381 ;; Tracked objects:
  8382 ;;		On entry : 0/0
  8383 ;;		On exit  : 0/0
  8384 ;;		Unchanged: 0/0
  8385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8388 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8389 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8390 ;;Total ram usage:       18 bytes
  8391 ;; Hardware stack levels used:    1
  8392 ;; Hardware stack levels required when called:    5
  8393 ;; This function calls:
  8394 ;;		Absolute function
  8395 ;;		_i2c_busCollisionISR
  8396 ;;		i2_i2c_ISR
  8397 ;; This function is called by:
  8398 ;;		Interrupt level 2
  8399 ;; This function uses a non-reentrant model
  8400 ;;
  8401                           
  8402                           	psect	intcode
  8403  000008                     __pintcode:
  8404                           	opt stack 0
  8405  000008                     _INTERRUPT_InterruptManager:
  8406                           	opt stack 13
  8407                           
  8408                           ; BSR set to: 14
  8409                           ;incstack = 0
  8410  000008  8247               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8411  00000A  CFFA F004          	movff	pclath,??_INTERRUPT_InterruptManager
  8412  00000E  CFFB F005          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  8413  000012  CFE9 F006          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  8414  000016  CFEA F007          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  8415  00001A  CFE1 F008          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  8416  00001E  CFE2 F009          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  8417  000022  CFD9 F00A          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  8418  000026  CFDA F00B          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  8419  00002A  CFF3 F00C          	movff	prodl,??_INTERRUPT_InterruptManager+8
  8420  00002E  CFF4 F00D          	movff	prodh,??_INTERRUPT_InterruptManager+9
  8421  000032  CFF6 F00E          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  8422  000036  CFF7 F00F          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  8423  00003A  CFF8 F010          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  8424  00003E  CFF5 F011          	movff	tablat,??_INTERRUPT_InterruptManager+13
  8425  000042  C047  F012         	movff	btemp,??_INTERRUPT_InterruptManager+14
  8426  000046  C048  F013         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  8427  00004A  C049  F014         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  8428  00004E  C04A  F015         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  8429                           
  8430                           ;interrupt_manager.c: 60: if(INTCONbits.PEIE == 1)
  8431  000052  ACF2               	btfss	intcon,6,c	;volatile
  8432  000054  D01D               	goto	i2u250_49
  8433                           
  8434                           ;interrupt_manager.c: 61: {
  8435                           ;interrupt_manager.c: 62: if(PIE3bits.BCL1IE == 1 && PIR3bits.BCL1IF == 1)
  8436  000056  010E               	movlb	14	; () banked
  8437  000058  B3C5               	btfsc	197,1,b	;volatile
  8438                           
  8439                           ; BSR set to: 14
  8440  00005A  A3CD               	btfss	205,1,b	;volatile
  8441  00005C  D00A               	goto	i2l281
  8442                           
  8443                           ; BSR set to: 14
  8444                           ;interrupt_manager.c: 63: {
  8445                           ;interrupt_manager.c: 64: i2c1_driver_busCollisionISR();
  8446  00005E  D801               	call	i2u247_48
  8447  000060  D017               	goto	i2u250_49
  8448  000062                     i2u247_48:
  8449  000062  0005               	push	
  8450  000064  6EFA               	movwf	pclath,c
  8451  000066  5044               	movf	_i2c1_driver_busCollisionISR,w,c
  8452  000068  6EFD               	movwf	tosl,c
  8453  00006A  5045               	movf	_i2c1_driver_busCollisionISR+1,w,c
  8454  00006C  6EFE               	movwf	tosh,c
  8455  00006E  5046               	movf	_i2c1_driver_busCollisionISR+2,w,c
  8456  000070  D00C               	goto	L5
  8457  000072                     i2l281:
  8458                           
  8459                           ; BSR set to: 14
  8460                           ;interrupt_manager.c: 66: else if(PIE3bits.SSP1IE == 1 && PIR3bits.SSP1IF == 1)
  8461  000072  B1C5               	btfsc	197,0,b	;volatile
  8462                           
  8463                           ; BSR set to: 14
  8464  000074  A1CD               	btfss	205,0,b	;volatile
  8465  000076  D00C               	goto	i2u250_49
  8466                           
  8467                           ; BSR set to: 14
  8468                           ;interrupt_manager.c: 67: {
  8469                           ;interrupt_manager.c: 68: i2c1_driver_i2cISR();
  8470  000078  D801               	call	i2u250_48
  8471  00007A  D00A               	goto	i2u250_49
  8472  00007C                     i2u250_48:
  8473  00007C  0005               	push	
  8474  00007E  6EFA               	movwf	pclath,c
  8475  000080  5041               	movf	_i2c1_driver_i2cISR,w,c
  8476  000082  6EFD               	movwf	tosl,c
  8477  000084  5042               	movf	_i2c1_driver_i2cISR+1,w,c
  8478  000086  6EFE               	movwf	tosh,c
  8479  000088  5043               	movf	_i2c1_driver_i2cISR+2,w,c
  8480  00008A                     L5:
  8481  00008A  6EFF               	movwf	tosu,c
  8482  00008C  50FA               	movf	pclath,w,c
  8483  00008E  0012               	return		;indir
  8484  000090                     i2u250_49:
  8485                           
  8486                           ;interrupt_manager.c: 75: else
  8487                           ;interrupt_manager.c: 76: {
  8488                           
  8489                           ;interrupt_manager.c: 73: }
  8490                           ;interrupt_manager.c: 74: }
  8491                           
  8492                           ;interrupt_manager.c: 70: else
  8493                           ;interrupt_manager.c: 71: {
  8494                           
  8495                           ;interrupt_manager.c: 69: }
  8496  000090  C015  F04A         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  8497  000094  C014  F049         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  8498  000098  C013  F048         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  8499  00009C  C012  F047         	movff	??_INTERRUPT_InterruptManager+14,btemp
  8500  0000A0  C011  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  8501  0000A4  C010  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  8502  0000A8  C00F  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  8503  0000AC  C00E  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  8504  0000B0  C00D  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  8505  0000B4  C00C  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  8506  0000B8  C00B  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  8507  0000BC  C00A  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  8508  0000C0  C009  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  8509  0000C4  C008  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  8510  0000C8  C007  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  8511  0000CC  C006  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  8512  0000D0  C005  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  8513  0000D4  C004  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  8514  0000D8  9247               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8515  0000DA  0011               	retfie		f
  8516  0000DC                     __end_of_INTERRUPT_InterruptManager:
  8517                           	opt stack 0
  8518                           tosu	equ	0xFFF
  8519                           tosh	equ	0xFFE
  8520                           tosl	equ	0xFFD
  8521                           pclatu	equ	0xFFB
  8522                           pclath	equ	0xFFA
  8523                           tblptru	equ	0xFF8
  8524                           tblptrh	equ	0xFF7
  8525                           tblptrl	equ	0xFF6
  8526                           tablat	equ	0xFF5
  8527                           prodh	equ	0xFF4
  8528                           prodl	equ	0xFF3
  8529                           intcon	equ	0xFF2
  8530                           postinc0	equ	0xFEE
  8531                           fsr0h	equ	0xFEA
  8532                           fsr0l	equ	0xFE9
  8533                           wreg	equ	0xFE8
  8534                           indf1	equ	0xFE7
  8535                           postdec1	equ	0xFE5
  8536                           plusw1	equ	0xFE3
  8537                           fsr1h	equ	0xFE2
  8538                           fsr1l	equ	0xFE1
  8539                           indf2	equ	0xFDF
  8540                           postinc2	equ	0xFDE
  8541                           postdec2	equ	0xFDD
  8542                           plusw2	equ	0xFDB
  8543                           fsr2h	equ	0xFDA
  8544                           fsr2l	equ	0xFD9
  8545                           status	equ	0xFD8
  8546                           
  8547 ;; *************** function i2_i2c_ISR *****************
  8548 ;; Defined at:
  8549 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
  8550 ;; Parameters:    Size  Location     Type
  8551 ;;		None
  8552 ;; Auto vars:     Size  Location     Type
  8553 ;;		None
  8554 ;; Return value:  Size  Location     Type
  8555 ;;                  1    wreg      void 
  8556 ;; Registers used:
  8557 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  8558 ;; Tracked objects:
  8559 ;;		On entry : 0/0
  8560 ;;		On exit  : 0/0
  8561 ;;		Unchanged: 0/0
  8562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8567 ;;Total ram usage:        0 bytes
  8568 ;; Hardware stack levels used:    1
  8569 ;; Hardware stack levels required when called:    4
  8570 ;; This function calls:
  8571 ;;		i2_do_I2C_DO_ACK
  8572 ;;		i2_do_I2C_DO_ADDRESS_NACK
  8573 ;;		i2_do_I2C_DO_NACK_RESTART
  8574 ;;		i2_do_I2C_DO_NACK_STOP
  8575 ;;		i2_do_I2C_IDLE
  8576 ;;		i2_do_I2C_RCEN
  8577 ;;		i2_do_I2C_RESET
  8578 ;;		i2_do_I2C_RX
  8579 ;;		i2_do_I2C_SEND_ADR_READ
  8580 ;;		i2_do_I2C_SEND_ADR_WRITE
  8581 ;;		i2_do_I2C_SEND_RESTART
  8582 ;;		i2_do_I2C_SEND_RESTART_READ
  8583 ;;		i2_do_I2C_SEND_RESTART_WRITE
  8584 ;;		i2_do_I2C_SEND_STOP
  8585 ;;		i2_do_I2C_TX
  8586 ;;		i2_do_I2C_TX_EMPTY
  8587 ;;		i2_i2c1_driver_isNACK
  8588 ;;		i2_mssp1_clearIRQ
  8589 ;; This function is called by:
  8590 ;; This function uses a non-reentrant model
  8591 ;;
  8592                           
  8593                           	psect	text73
  8594  000D12                     __ptext73:
  8595                           	opt stack 0
  8596  000D12                     i2_i2c_ISR:
  8597                           	opt stack 13
  8598                           
  8599                           ;i2c_master.c: 421: mssp1_clearIRQ();
  8600                           
  8601                           ;incstack = 0
  8602  000D12  EC0F  F00A         	call	i2_mssp1_clearIRQ	;wreg free
  8603                           
  8604                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c1_driver_isNACK())
  8605  000D16  0100               	movlb	0	; () banked
  8606  000D18  A760               	btfss	_i2c_status& (0+255),3,b
  8607  000D1A  D007               	goto	i2l483
  8608                           
  8609                           ; BSR set to: 0
  8610  000D1C  EC1E  F009         	call	i2_i2c1_driver_isNACK	;wreg free
  8611  000D20  A0D8               	btfss	status,0,c
  8612  000D22  D003               	goto	i2l483
  8613                           
  8614                           ;i2c_master.c: 428: {
  8615                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
  8616  000D24  0E0F               	movlw	15
  8617  000D26  0100               	movlb	0	; () banked
  8618  000D28  6F6A               	movwf	(_i2c_status+10)& (0+255),b
  8619  000D2A                     i2l483:
  8620                           
  8621                           ;i2c_master.c: 430: }
  8622                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
  8623                           
  8624                           ; BSR set to: 0
  8625  000D2A  0100               	movlb	0	; () banked
  8626  000D2C  516A               	movf	(_i2c_status+10)& (0+255),w,b
  8627  000D2E  0D03               	mullw	3
  8628  000D30  0EC7               	movlw	low _fsmStateTable
  8629  000D32  24F3               	addwf	prodl,w,c
  8630  000D34  6ED9               	movwf	fsr2l,c
  8631  000D36  0E00               	movlw	high _fsmStateTable
  8632  000D38  20F4               	addwfc	prodh,w,c
  8633  000D3A  6EDA               	movwf	fsr2h,c
  8634  000D3C  D801               	call	i2u243_48
  8635  000D3E  D00A               	goto	i2u243_49
  8636  000D40                     i2u243_48:
  8637  000D40  0005               	push	
  8638  000D42  6EFA               	movwf	pclath,c
  8639  000D44  50DE               	movf	postinc2,w,c
  8640  000D46  6EFD               	movwf	tosl,c
  8641  000D48  50DE               	movf	postinc2,w,c
  8642  000D4A  6EFE               	movwf	tosh,c
  8643  000D4C  50DE               	movf	postinc2,w,c
  8644  000D4E  6EFF               	movwf	tosu,c
  8645  000D50  50FA               	movf	pclath,w,c
  8646  000D52  0012               	return		;indir
  8647  000D54                     i2u243_49:
  8648  000D54  0100               	movlb	0	; () banked
  8649  000D56  6F6A               	movwf	(_i2c_status+10)& (0+255),b
  8650                           
  8651                           ; BSR set to: 0
  8652  000D58  0012               	return		;funcret
  8653  000D5A                     __end_ofi2_i2c_ISR:
  8654                           	opt stack 0
  8655                           tosu	equ	0xFFF
  8656                           tosh	equ	0xFFE
  8657                           tosl	equ	0xFFD
  8658                           pclatu	equ	0xFFB
  8659                           pclath	equ	0xFFA
  8660                           tblptru	equ	0xFF8
  8661                           tblptrh	equ	0xFF7
  8662                           tblptrl	equ	0xFF6
  8663                           tablat	equ	0xFF5
  8664                           prodh	equ	0xFF4
  8665                           prodl	equ	0xFF3
  8666                           intcon	equ	0xFF2
  8667                           postinc0	equ	0xFEE
  8668                           fsr0h	equ	0xFEA
  8669                           fsr0l	equ	0xFE9
  8670                           wreg	equ	0xFE8
  8671                           indf1	equ	0xFE7
  8672                           postdec1	equ	0xFE5
  8673                           plusw1	equ	0xFE3
  8674                           fsr1h	equ	0xFE2
  8675                           fsr1l	equ	0xFE1
  8676                           indf2	equ	0xFDF
  8677                           postinc2	equ	0xFDE
  8678                           postdec2	equ	0xFDD
  8679                           plusw2	equ	0xFDB
  8680                           fsr2h	equ	0xFDA
  8681                           fsr2l	equ	0xFD9
  8682                           status	equ	0xFD8
  8683                           
  8684 ;; *************** function i2_mssp1_clearIRQ *****************
  8685 ;; Defined at:
  8686 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
  8687 ;; Parameters:    Size  Location     Type
  8688 ;;		None
  8689 ;; Auto vars:     Size  Location     Type
  8690 ;;		None
  8691 ;; Return value:  Size  Location     Type
  8692 ;;                  1    wreg      void 
  8693 ;; Registers used:
  8694 ;;		None
  8695 ;; Tracked objects:
  8696 ;;		On entry : 0/0
  8697 ;;		On exit  : 0/0
  8698 ;;		Unchanged: 0/0
  8699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8704 ;;Total ram usage:        0 bytes
  8705 ;; Hardware stack levels used:    1
  8706 ;; This function calls:
  8707 ;;		Nothing
  8708 ;; This function is called by:
  8709 ;;		i2_i2c_ISR
  8710 ;; This function uses a non-reentrant model
  8711 ;;
  8712                           
  8713                           	psect	text74
  8714  00141E                     __ptext74:
  8715                           	opt stack 0
  8716  00141E                     i2_mssp1_clearIRQ:
  8717                           	opt stack 16
  8718                           
  8719                           ;i2c1_driver.c: 55: PIR3bits.SSP1IF = 0;
  8720                           
  8721                           ; BSR set to: 0
  8722                           ;incstack = 0
  8723  00141E  010E               	movlb	14	; () banked
  8724  001420  91CD               	bcf	205,0,b	;volatile
  8725                           
  8726                           ; BSR set to: 14
  8727  001422  0012               	return		;funcret
  8728  001424                     __end_ofi2_mssp1_clearIRQ:
  8729                           	opt stack 0
  8730                           tosu	equ	0xFFF
  8731                           tosh	equ	0xFFE
  8732                           tosl	equ	0xFFD
  8733                           pclatu	equ	0xFFB
  8734                           pclath	equ	0xFFA
  8735                           tblptru	equ	0xFF8
  8736                           tblptrh	equ	0xFF7
  8737                           tblptrl	equ	0xFF6
  8738                           tablat	equ	0xFF5
  8739                           prodh	equ	0xFF4
  8740                           prodl	equ	0xFF3
  8741                           intcon	equ	0xFF2
  8742                           postinc0	equ	0xFEE
  8743                           fsr0h	equ	0xFEA
  8744                           fsr0l	equ	0xFE9
  8745                           wreg	equ	0xFE8
  8746                           indf1	equ	0xFE7
  8747                           postdec1	equ	0xFE5
  8748                           plusw1	equ	0xFE3
  8749                           fsr1h	equ	0xFE2
  8750                           fsr1l	equ	0xFE1
  8751                           indf2	equ	0xFDF
  8752                           postinc2	equ	0xFDE
  8753                           postdec2	equ	0xFDD
  8754                           plusw2	equ	0xFDB
  8755                           fsr2h	equ	0xFDA
  8756                           fsr2l	equ	0xFD9
  8757                           status	equ	0xFD8
  8758                           
  8759 ;; *************** function i2_do_I2C_RX *****************
  8760 ;; Defined at:
  8761 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
  8762 ;; Parameters:    Size  Location     Type
  8763 ;;		None
  8764 ;; Auto vars:     Size  Location     Type
  8765 ;;		None
  8766 ;; Return value:  Size  Location     Type
  8767 ;;                  1    wreg      enum E11956
  8768 ;; Registers used:
  8769 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  8770 ;; Tracked objects:
  8771 ;;		On entry : 0/0
  8772 ;;		On exit  : 0/0
  8773 ;;		Unchanged: 0/0
  8774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8779 ;;Total ram usage:        0 bytes
  8780 ;; Hardware stack levels used:    1
  8781 ;; Hardware stack levels required when called:    3
  8782 ;; This function calls:
  8783 ;;		Absolute function
  8784 ;;		i2_do_I2C_DO_NACK_RESTART
  8785 ;;		i2_do_I2C_DO_NACK_STOP
  8786 ;;		i2_i2c1_driver_getRXData
  8787 ;;		i2_i2c1_driver_sendACK
  8788 ;;		i2_i2c_restartWrite
  8789 ;;		i2_rd1RegCompleteHandler
  8790 ;;		i2_rd2RegCompleteHandler
  8791 ;;		i2_rdBlkRegCompleteHandler
  8792 ;;		i2_returnReset
  8793 ;;		i2_returnStop
  8794 ;;		i2_wr1RegCompleteHandler
  8795 ;;		i2_wr2RegCompleteHandler
  8796 ;; This function is called by:
  8797 ;; This function uses a non-reentrant model
  8798 ;;
  8799                           
  8800                           	psect	text75
  8801  000AB8                     __ptext75:
  8802                           	opt stack 0
  8803  000AB8                     i2_do_I2C_RX:
  8804                           	opt stack 13
  8805                           
  8806                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c1_driver_getRXData();
  8807                           
  8808                           ; BSR set to: 14
  8809                           ;incstack = 0
  8810  000AB8  EC2D  F00A         	call	i2_i2c1_driver_getRXData	;wreg free
  8811  000ABC  C062  FFD9         	movff	_i2c_status+2,fsr2l
  8812  000AC0  C063  FFDA         	movff	_i2c_status+3,fsr2h
  8813  000AC4  6EDF               	movwf	indf2,c
  8814  000AC6  0100               	movlb	0	; () banked
  8815  000AC8  4B62               	infsnz	(_i2c_status+2)& (0+255),f,b
  8816  000ACA  2B63               	incf	(_i2c_status+3)& (0+255),f,b
  8817                           
  8818                           ; BSR set to: 0
  8819                           ;i2c_master.c: 360: if(--i2c_status.data_length)
  8820  000ACC  0764               	decf	(_i2c_status+4)& (0+255),f,b
  8821  000ACE  A0D8               	btfss	status,0,c
  8822  000AD0  0765               	decf	(_i2c_status+5)& (0+255),f,b
  8823  000AD2  5164               	movf	(_i2c_status+4)& (0+255),w,b
  8824  000AD4  1165               	iorwf	(_i2c_status+5)& (0+255),w,b
  8825  000AD6  B4D8               	btfsc	status,2,c
  8826  000AD8  D004               	goto	i2l459
  8827                           
  8828                           ; BSR set to: 0
  8829                           ;i2c_master.c: 361: {
  8830                           ;i2c_master.c: 362: i2c1_driver_sendACK();
  8831  000ADA  EC18  F00A         	call	i2_i2c1_driver_sendACK	;wreg free
  8832                           
  8833                           ;i2c_master.c: 363: return I2C_RCEN;
  8834  000ADE  0E05               	movlw	5
  8835                           
  8836                           ;i2c_master.c: 364: }
  8837  000AE0  0012               	return	
  8838  000AE2                     i2l459:
  8839                           
  8840                           ; BSR set to: 0
  8841                           ;i2c_master.c: 365: else
  8842                           ;i2c_master.c: 366: {
  8843                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
  8844  000AE2  8560               	bsf	_i2c_status& (0+255),2,b
  8845                           
  8846                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  8847  000AE4  D006               	goto	i2l462
  8848  000AE6                     
  8849                           ;i2c_master.c: 371: case i2c_restart_read:
  8850                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
  8851                           
  8852                           ; BSR set to: 0
  8853                           
  8854                           ; BSR set to: 0
  8855  000AE6  ECE0  F009         	call	i2_do_I2C_DO_NACK_RESTART	;wreg free
  8856  000AEA  0012               	return	
  8857  000AEC                     
  8858                           ;i2c_master.c: 375: case i2c_stop:
  8859                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
  8860                           
  8861                           ;i2c_master.c: 374: case i2c_continue:
  8862  000AEC  ECE4  F009         	call	i2_do_I2C_DO_NACK_STOP	;wreg free
  8863                           
  8864                           ;i2c_master.c: 377: }
  8865  000AF0  0012               	return	
  8866  000AF2                     i2l462:
  8867  000AF2  C07E  F00C         	movff	_i2c_status+30,i2returnStop@p
  8868  000AF6  C07F  F00D         	movff	_i2c_status+31,i2returnStop@p+1
  8869  000AFA  EE20  F06C         	lfsr	2,_i2c_status+12
  8870  000AFE  D801               	call	i2u235_48
  8871  000B00  D00A               	goto	i2u235_49
  8872  000B02                     i2u235_48:
  8873  000B02  0005               	push	
  8874  000B04  6EFA               	movwf	pclath,c
  8875  000B06  50DE               	movf	postinc2,w,c
  8876  000B08  6EFD               	movwf	tosl,c
  8877  000B0A  50DE               	movf	postinc2,w,c
  8878  000B0C  6EFE               	movwf	tosh,c
  8879  000B0E  50DE               	movf	postinc2,w,c
  8880  000B10  6EFF               	movwf	tosu,c
  8881  000B12  50FA               	movf	pclath,w,c
  8882  000B14  0012               	return		;indir
  8883  000B16                     i2u235_49:
  8884                           
  8885                           ; Switch size 1, requested type "space"
  8886                           ; Number of cases is 4, Range of values is 1 to 4
  8887                           ; switch strategies available:
  8888                           ; Name         Instructions Cycles
  8889                           ; simple_byte           13     7 (average)
  8890                           ;	Chosen strategy is simple_byte
  8891  000B16  0A01               	xorlw	1	; case 1
  8892  000B18  B4D8               	btfsc	status,2,c
  8893  000B1A  D7E8               	goto	i2l465
  8894  000B1C  0A03               	xorlw	3	; case 2
  8895  000B1E  B4D8               	btfsc	status,2,c
  8896  000B20  D7E2               	goto	i2l463
  8897  000B22  0A01               	xorlw	1	; case 3
  8898  000B24  B4D8               	btfsc	status,2,c
  8899  000B26  D7DF               	goto	i2l463
  8900  000B28  0A07               	xorlw	7	; case 4
  8901  000B2A  D7E0               	goto	i2l465
  8902  000B2C                     __end_ofi2_do_I2C_RX:
  8903                           	opt stack 0
  8904                           tosu	equ	0xFFF
  8905                           tosh	equ	0xFFE
  8906                           tosl	equ	0xFFD
  8907                           pclatu	equ	0xFFB
  8908                           pclath	equ	0xFFA
  8909                           tblptru	equ	0xFF8
  8910                           tblptrh	equ	0xFF7
  8911                           tblptrl	equ	0xFF6
  8912                           tablat	equ	0xFF5
  8913                           prodh	equ	0xFF4
  8914                           prodl	equ	0xFF3
  8915                           intcon	equ	0xFF2
  8916                           postinc0	equ	0xFEE
  8917                           fsr0h	equ	0xFEA
  8918                           fsr0l	equ	0xFE9
  8919                           wreg	equ	0xFE8
  8920                           indf1	equ	0xFE7
  8921                           postdec1	equ	0xFE5
  8922                           plusw1	equ	0xFE3
  8923                           fsr1h	equ	0xFE2
  8924                           fsr1l	equ	0xFE1
  8925                           indf2	equ	0xFDF
  8926                           postinc2	equ	0xFDE
  8927                           postdec2	equ	0xFDD
  8928                           plusw2	equ	0xFDB
  8929                           fsr2h	equ	0xFDA
  8930                           fsr2l	equ	0xFD9
  8931                           status	equ	0xFD8
  8932                           
  8933 ;; *************** function i2_do_I2C_TX *****************
  8934 ;; Defined at:
  8935 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
  8936 ;; Parameters:    Size  Location     Type
  8937 ;;		None
  8938 ;; Auto vars:     Size  Location     Type
  8939 ;;		None
  8940 ;; Return value:  Size  Location     Type
  8941 ;;                  1    wreg      enum E11956
  8942 ;; Registers used:
  8943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  8944 ;; Tracked objects:
  8945 ;;		On entry : 0/0
  8946 ;;		On exit  : 0/0
  8947 ;;		Unchanged: 0/0
  8948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8950 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8952 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8953 ;;Total ram usage:        2 bytes
  8954 ;; Hardware stack levels used:    1
  8955 ;; Hardware stack levels required when called:    3
  8956 ;; This function calls:
  8957 ;;		Absolute function
  8958 ;;		i2_do_I2C_SEND_RESTART_READ
  8959 ;;		i2_do_I2C_SEND_RESTART_WRITE
  8960 ;;		i2_do_I2C_SEND_STOP
  8961 ;;		i2_i2c1_driver_TXData
  8962 ;;		i2_i2c1_driver_isNACK
  8963 ;;		i2_i2c_restartWrite
  8964 ;;		i2_rd1RegCompleteHandler
  8965 ;;		i2_rd2RegCompleteHandler
  8966 ;;		i2_rdBlkRegCompleteHandler
  8967 ;;		i2_returnReset
  8968 ;;		i2_returnStop
  8969 ;;		i2_wr1RegCompleteHandler
  8970 ;;		i2_wr2RegCompleteHandler
  8971 ;; This function is called by:
  8972 ;; This function uses a non-reentrant model
  8973 ;;
  8974                           
  8975                           	psect	text76
  8976  0008BE                     __ptext76:
  8977                           	opt stack 0
  8978  0008BE                     i2_do_I2C_TX:
  8979                           	opt stack 13
  8980                           
  8981                           ;i2c_master.c: 335: if(i2c1_driver_isNACK())
  8982                           
  8983                           ;incstack = 0
  8984  0008BE  EC1E  F009         	call	i2_i2c1_driver_isNACK	;wreg free
  8985  0008C2  B0D8               	btfsc	status,0,c
  8986  0008C4  D00A               	goto	i2l444
  8987  0008C6  D026               	goto	i2l443
  8988  0008C8                     
  8989                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
  8990  0008C8  ECF8  F009         	call	i2_do_I2C_SEND_RESTART_READ	;wreg free
  8991  0008CC  0012               	return	
  8992  0008CE                     
  8993                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
  8994  0008CE  ECF4  F009         	call	i2_do_I2C_SEND_RESTART_WRITE	;wreg free
  8995  0008D2  0012               	return	
  8996  0008D4                     
  8997                           ;i2c_master.c: 345: case i2c_stop:
  8998                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
  8999                           
  9000                           ;i2c_master.c: 344: case i2c_continue:
  9001  0008D4  ECEC  F009         	call	i2_do_I2C_SEND_STOP	;wreg free
  9002                           
  9003                           ;i2c_master.c: 347: }
  9004  0008D8  0012               	return	
  9005  0008DA                     i2l444:
  9006  0008DA  C084  F00C         	movff	_i2c_status+36,i2returnStop@p
  9007  0008DE  C085  F00D         	movff	_i2c_status+37,i2returnStop@p+1
  9008  0008E2  EE20  F075         	lfsr	2,_i2c_status+21
  9009  0008E6  D801               	call	i2u232_48
  9010  0008E8  D00A               	goto	i2u232_49
  9011  0008EA                     i2u232_48:
  9012  0008EA  0005               	push	
  9013  0008EC  6EFA               	movwf	pclath,c
  9014  0008EE  50DE               	movf	postinc2,w,c
  9015  0008F0  6EFD               	movwf	tosl,c
  9016  0008F2  50DE               	movf	postinc2,w,c
  9017  0008F4  6EFE               	movwf	tosh,c
  9018  0008F6  50DE               	movf	postinc2,w,c
  9019  0008F8  6EFF               	movwf	tosu,c
  9020  0008FA  50FA               	movf	pclath,w,c
  9021  0008FC  0012               	return		;indir
  9022  0008FE                     i2u232_49:
  9023                           
  9024                           ; Switch size 1, requested type "space"
  9025                           ; Number of cases is 4, Range of values is 1 to 4
  9026                           ; switch strategies available:
  9027                           ; Name         Instructions Cycles
  9028                           ; simple_byte           13     7 (average)
  9029                           ;	Chosen strategy is simple_byte
  9030  0008FE  0A01               	xorlw	1	; case 1
  9031  000900  B4D8               	btfsc	status,2,c
  9032  000902  D7E8               	goto	i2l448
  9033  000904  0A03               	xorlw	3	; case 2
  9034  000906  B4D8               	btfsc	status,2,c
  9035  000908  D7DF               	goto	i2l445
  9036  00090A  0A01               	xorlw	1	; case 3
  9037  00090C  B4D8               	btfsc	status,2,c
  9038  00090E  D7DF               	goto	i2l447
  9039  000910  0A07               	xorlw	7	; case 4
  9040  000912  D7E0               	goto	i2l448
  9041  000914                     i2l443:
  9042                           
  9043                           ;i2c_master.c: 349: else
  9044                           ;i2c_master.c: 350: {
  9045                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
  9046  000914  0100               	movlb	0	; () banked
  9047  000916  9760               	bcf	_i2c_status& (0+255),3,b
  9048                           
  9049                           ; BSR set to: 0
  9050                           ;i2c_master.c: 352: i2c1_driver_TXData(*i2c_status.data_ptr++);
  9051  000918  C062  FFD9         	movff	_i2c_status+2,fsr2l
  9052  00091C  C063  FFDA         	movff	_i2c_status+3,fsr2h
  9053  000920  4B62               	infsnz	(_i2c_status+2)& (0+255),f,b
  9054  000922  2B63               	incf	(_i2c_status+3)& (0+255),f,b
  9055  000924  50DF               	movf	indf2,w,c
  9056  000926  ECFC  F009         	call	i2_i2c1_driver_TXData
  9057                           
  9058                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  9059  00092A  0100               	movlb	0	; () banked
  9060  00092C  0764               	decf	(_i2c_status+4)& (0+255),f,b
  9061  00092E  A0D8               	btfss	status,0,c
  9062  000930  0765               	decf	(_i2c_status+5)& (0+255),f,b
  9063  000932  5164               	movf	(_i2c_status+4)& (0+255),w,b
  9064  000934  1165               	iorwf	(_i2c_status+5)& (0+255),w,b
  9065  000936  A4D8               	btfss	status,2,c
  9066  000938  D004               	goto	i2l454
  9067                           
  9068                           ; BSR set to: 0
  9069  00093A  0E00               	movlw	0
  9070  00093C  6E03               	movwf	i2_do_I2C_TX$1050+1,c
  9071  00093E  0E06               	movlw	6
  9072  000940  D003               	goto	L6
  9073  000942                     i2l454:
  9074                           
  9075                           ; BSR set to: 0
  9076                           
  9077                           ; BSR set to: 0
  9078  000942  0E00               	movlw	0
  9079  000944  6E03               	movwf	i2_do_I2C_TX$1050+1,c
  9080  000946  0E03               	movlw	3
  9081  000948                     L6:
  9082  000948  6E02               	movwf	i2_do_I2C_TX$1050,c
  9083                           
  9084                           ; BSR set to: 0
  9085  00094A  5002               	movf	i2_do_I2C_TX$1050,w,c
  9086                           
  9087                           ; BSR set to: 0
  9088  00094C  0012               	return	
  9089  00094E                     __end_ofi2_do_I2C_TX:
  9090                           	opt stack 0
  9091                           tosu	equ	0xFFF
  9092                           tosh	equ	0xFFE
  9093                           tosl	equ	0xFFD
  9094                           pclatu	equ	0xFFB
  9095                           pclath	equ	0xFFA
  9096                           tblptru	equ	0xFF8
  9097                           tblptrh	equ	0xFF7
  9098                           tblptrl	equ	0xFF6
  9099                           tablat	equ	0xFF5
  9100                           prodh	equ	0xFF4
  9101                           prodl	equ	0xFF3
  9102                           intcon	equ	0xFF2
  9103                           postinc0	equ	0xFEE
  9104                           fsr0h	equ	0xFEA
  9105                           fsr0l	equ	0xFE9
  9106                           wreg	equ	0xFE8
  9107                           indf1	equ	0xFE7
  9108                           postdec1	equ	0xFE5
  9109                           plusw1	equ	0xFE3
  9110                           fsr1h	equ	0xFE2
  9111                           fsr1l	equ	0xFE1
  9112                           indf2	equ	0xFDF
  9113                           postinc2	equ	0xFDE
  9114                           postdec2	equ	0xFDD
  9115                           plusw2	equ	0xFDB
  9116                           fsr2h	equ	0xFDA
  9117                           fsr2l	equ	0xFD9
  9118                           status	equ	0xFD8
  9119                           
  9120 ;; *************** function i2_do_I2C_DO_ADDRESS_NACK *****************
  9121 ;; Defined at:
  9122 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
  9123 ;; Parameters:    Size  Location     Type
  9124 ;;		None
  9125 ;; Auto vars:     Size  Location     Type
  9126 ;;		None
  9127 ;; Return value:  Size  Location     Type
  9128 ;;                  1    wreg      enum E11956
  9129 ;; Registers used:
  9130 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  9131 ;; Tracked objects:
  9132 ;;		On entry : 0/0
  9133 ;;		On exit  : 0/0
  9134 ;;		Unchanged: 0/0
  9135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9140 ;;Total ram usage:        0 bytes
  9141 ;; Hardware stack levels used:    1
  9142 ;; Hardware stack levels required when called:    3
  9143 ;; This function calls:
  9144 ;;		Absolute function
  9145 ;;		i2_do_I2C_SEND_RESTART
  9146 ;;		i2_do_I2C_SEND_STOP
  9147 ;;		i2_i2c_restartWrite
  9148 ;;		i2_rd1RegCompleteHandler
  9149 ;;		i2_rd2RegCompleteHandler
  9150 ;;		i2_rdBlkRegCompleteHandler
  9151 ;;		i2_returnReset
  9152 ;;		i2_returnStop
  9153 ;;		i2_wr1RegCompleteHandler
  9154 ;;		i2_wr2RegCompleteHandler
  9155 ;; This function is called by:
  9156 ;; This function uses a non-reentrant model
  9157 ;;
  9158                           
  9159                           	psect	text77
  9160  000D5A                     __ptext77:
  9161                           	opt stack 0
  9162  000D5A                     i2_do_I2C_DO_ADDRESS_NACK:
  9163                           	opt stack 13
  9164                           
  9165                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
  9166                           
  9167                           ;incstack = 0
  9168  000D5A  0100               	movlb	0	; () banked
  9169  000D5C  9760               	bcf	_i2c_status& (0+255),3,b
  9170                           
  9171                           ; BSR set to: 0
  9172                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
  9173  000D5E  0E02               	movlw	2
  9174  000D60  6F6B               	movwf	(_i2c_status+11)& (0+255),b
  9175                           
  9176                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  9177  000D62  D006               	goto	i2l435
  9178  000D64                     
  9179                           ;i2c_master.c: 326: case i2c_restart_write:
  9180                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
  9181                           
  9182                           ; BSR set to: 0
  9183                           
  9184                           ; BSR set to: 0
  9185  000D64  ECF0  F009         	call	i2_do_I2C_SEND_RESTART	;wreg free
  9186  000D68  0012               	return	
  9187  000D6A                     
  9188                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
  9189  000D6A  ECEC  F009         	call	i2_do_I2C_SEND_STOP	;wreg free
  9190                           
  9191                           ;i2c_master.c: 330: }
  9192  000D6E  0012               	return	
  9193  000D70                     i2l435:
  9194  000D70  C082  F00C         	movff	_i2c_status+34,i2returnStop@p
  9195  000D74  C083  F00D         	movff	_i2c_status+35,i2returnStop@p+1
  9196  000D78  EE20  F072         	lfsr	2,_i2c_status+18
  9197  000D7C  D801               	call	i2u230_48
  9198  000D7E  D00A               	goto	i2u230_49
  9199  000D80                     i2u230_48:
  9200  000D80  0005               	push	
  9201  000D82  6EFA               	movwf	pclath,c
  9202  000D84  50DE               	movf	postinc2,w,c
  9203  000D86  6EFD               	movwf	tosl,c
  9204  000D88  50DE               	movf	postinc2,w,c
  9205  000D8A  6EFE               	movwf	tosh,c
  9206  000D8C  50DE               	movf	postinc2,w,c
  9207  000D8E  6EFF               	movwf	tosu,c
  9208  000D90  50FA               	movf	pclath,w,c
  9209  000D92  0012               	return		;indir
  9210  000D94                     i2u230_49:
  9211                           
  9212                           ; Switch size 1, requested type "space"
  9213                           ; Number of cases is 2, Range of values is 2 to 3
  9214                           ; switch strategies available:
  9215                           ; Name         Instructions Cycles
  9216                           ; simple_byte            7     4 (average)
  9217                           ;	Chosen strategy is simple_byte
  9218  000D94  0A02               	xorlw	2	; case 2
  9219  000D96  B4D8               	btfsc	status,2,c
  9220  000D98  D7E5               	goto	i2l436
  9221  000D9A  0A01               	xorlw	1	; case 3
  9222  000D9C  B4D8               	btfsc	status,2,c
  9223  000D9E  D7E2               	goto	i2l436
  9224  000DA0  D7E4               	goto	i2l439
  9225  000DA2                     __end_ofi2_do_I2C_DO_ADDRESS_NACK:
  9226                           	opt stack 0
  9227                           tosu	equ	0xFFF
  9228                           tosh	equ	0xFFE
  9229                           tosl	equ	0xFFD
  9230                           pclatu	equ	0xFFB
  9231                           pclath	equ	0xFFA
  9232                           tblptru	equ	0xFF8
  9233                           tblptrh	equ	0xFF7
  9234                           tblptrl	equ	0xFF6
  9235                           tablat	equ	0xFF5
  9236                           prodh	equ	0xFF4
  9237                           prodl	equ	0xFF3
  9238                           intcon	equ	0xFF2
  9239                           postinc0	equ	0xFEE
  9240                           fsr0h	equ	0xFEA
  9241                           fsr0l	equ	0xFE9
  9242                           wreg	equ	0xFE8
  9243                           indf1	equ	0xFE7
  9244                           postdec1	equ	0xFE5
  9245                           plusw1	equ	0xFE3
  9246                           fsr1h	equ	0xFE2
  9247                           fsr1l	equ	0xFE1
  9248                           indf2	equ	0xFDF
  9249                           postinc2	equ	0xFDE
  9250                           postdec2	equ	0xFDD
  9251                           plusw2	equ	0xFDB
  9252                           fsr2h	equ	0xFDA
  9253                           fsr2l	equ	0xFD9
  9254                           status	equ	0xFD8
  9255                           
  9256 ;; *************** function i2_do_I2C_DO_NACK_RESTART *****************
  9257 ;; Defined at:
  9258 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
  9259 ;; Parameters:    Size  Location     Type
  9260 ;;		None
  9261 ;; Auto vars:     Size  Location     Type
  9262 ;;		None
  9263 ;; Return value:  Size  Location     Type
  9264 ;;                  1    wreg      enum E11956
  9265 ;; Registers used:
  9266 ;;		wreg, cstack
  9267 ;; Tracked objects:
  9268 ;;		On entry : 0/0
  9269 ;;		On exit  : 0/0
  9270 ;;		Unchanged: 0/0
  9271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9276 ;;Total ram usage:        0 bytes
  9277 ;; Hardware stack levels used:    1
  9278 ;; Hardware stack levels required when called:    1
  9279 ;; This function calls:
  9280 ;;		i2_i2c1_driver_sendNACK
  9281 ;; This function is called by:
  9282 ;;		i2_do_I2C_RX
  9283 ;; This function uses a non-reentrant model
  9284 ;;
  9285                           
  9286                           	psect	text78
  9287  0013C0                     __ptext78:
  9288                           	opt stack 0
  9289  0013C0                     i2_do_I2C_DO_NACK_RESTART:
  9290                           	opt stack 14
  9291                           
  9292                           ;i2c_master.c: 313: i2c1_driver_sendNACK();
  9293                           
  9294                           ;incstack = 0
  9295  0013C0  EC15  F00A         	call	i2_i2c1_driver_sendNACK	;wreg free
  9296                           
  9297                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
  9298  0013C4  0E09               	movlw	9
  9299  0013C6  0012               	return	
  9300  0013C8                     __end_ofi2_do_I2C_DO_NACK_RESTART:
  9301                           	opt stack 0
  9302                           tosu	equ	0xFFF
  9303                           tosh	equ	0xFFE
  9304                           tosl	equ	0xFFD
  9305                           pclatu	equ	0xFFB
  9306                           pclath	equ	0xFFA
  9307                           tblptru	equ	0xFF8
  9308                           tblptrh	equ	0xFF7
  9309                           tblptrl	equ	0xFF6
  9310                           tablat	equ	0xFF5
  9311                           prodh	equ	0xFF4
  9312                           prodl	equ	0xFF3
  9313                           intcon	equ	0xFF2
  9314                           postinc0	equ	0xFEE
  9315                           fsr0h	equ	0xFEA
  9316                           fsr0l	equ	0xFE9
  9317                           wreg	equ	0xFE8
  9318                           indf1	equ	0xFE7
  9319                           postdec1	equ	0xFE5
  9320                           plusw1	equ	0xFE3
  9321                           fsr1h	equ	0xFE2
  9322                           fsr1l	equ	0xFE1
  9323                           indf2	equ	0xFDF
  9324                           postinc2	equ	0xFDE
  9325                           postdec2	equ	0xFDD
  9326                           plusw2	equ	0xFDB
  9327                           fsr2h	equ	0xFDA
  9328                           fsr2l	equ	0xFD9
  9329                           status	equ	0xFD8
  9330                           
  9331 ;; *************** function i2_do_I2C_DO_NACK_STOP *****************
  9332 ;; Defined at:
  9333 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
  9334 ;; Parameters:    Size  Location     Type
  9335 ;;		None
  9336 ;; Auto vars:     Size  Location     Type
  9337 ;;		None
  9338 ;; Return value:  Size  Location     Type
  9339 ;;                  1    wreg      enum E11956
  9340 ;; Registers used:
  9341 ;;		wreg, cstack
  9342 ;; Tracked objects:
  9343 ;;		On entry : 0/0
  9344 ;;		On exit  : 0/0
  9345 ;;		Unchanged: 0/0
  9346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9350 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9351 ;;Total ram usage:        0 bytes
  9352 ;; Hardware stack levels used:    1
  9353 ;; Hardware stack levels required when called:    1
  9354 ;; This function calls:
  9355 ;;		i2_i2c1_driver_sendNACK
  9356 ;; This function is called by:
  9357 ;;		i2_do_I2C_RX
  9358 ;; This function uses a non-reentrant model
  9359 ;;
  9360                           
  9361                           	psect	text79
  9362  0013C8                     __ptext79:
  9363                           	opt stack 0
  9364  0013C8                     i2_do_I2C_DO_NACK_STOP:
  9365                           	opt stack 14
  9366                           
  9367                           ;i2c_master.c: 307: i2c1_driver_sendNACK();
  9368                           
  9369                           ;incstack = 0
  9370  0013C8  EC15  F00A         	call	i2_i2c1_driver_sendNACK	;wreg free
  9371                           
  9372                           ;i2c_master.c: 308: return I2C_SEND_STOP;
  9373  0013CC  0E0A               	movlw	10
  9374  0013CE  0012               	return	
  9375  0013D0                     __end_ofi2_do_I2C_DO_NACK_STOP:
  9376                           	opt stack 0
  9377                           tosu	equ	0xFFF
  9378                           tosh	equ	0xFFE
  9379                           tosl	equ	0xFFD
  9380                           pclatu	equ	0xFFB
  9381                           pclath	equ	0xFFA
  9382                           tblptru	equ	0xFF8
  9383                           tblptrh	equ	0xFF7
  9384                           tblptrl	equ	0xFF6
  9385                           tablat	equ	0xFF5
  9386                           prodh	equ	0xFF4
  9387                           prodl	equ	0xFF3
  9388                           intcon	equ	0xFF2
  9389                           postinc0	equ	0xFEE
  9390                           fsr0h	equ	0xFEA
  9391                           fsr0l	equ	0xFE9
  9392                           wreg	equ	0xFE8
  9393                           indf1	equ	0xFE7
  9394                           postdec1	equ	0xFE5
  9395                           plusw1	equ	0xFE3
  9396                           fsr1h	equ	0xFE2
  9397                           fsr1l	equ	0xFE1
  9398                           indf2	equ	0xFDF
  9399                           postinc2	equ	0xFDE
  9400                           postdec2	equ	0xFDD
  9401                           plusw2	equ	0xFDB
  9402                           fsr2h	equ	0xFDA
  9403                           fsr2l	equ	0xFD9
  9404                           status	equ	0xFD8
  9405                           
  9406 ;; *************** function i2_do_I2C_DO_ACK *****************
  9407 ;; Defined at:
  9408 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
  9409 ;; Parameters:    Size  Location     Type
  9410 ;;		None
  9411 ;; Auto vars:     Size  Location     Type
  9412 ;;		None
  9413 ;; Return value:  Size  Location     Type
  9414 ;;                  1    wreg      enum E11956
  9415 ;; Registers used:
  9416 ;;		wreg, cstack
  9417 ;; Tracked objects:
  9418 ;;		On entry : 0/0
  9419 ;;		On exit  : 0/0
  9420 ;;		Unchanged: 0/0
  9421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9426 ;;Total ram usage:        0 bytes
  9427 ;; Hardware stack levels used:    1
  9428 ;; Hardware stack levels required when called:    1
  9429 ;; This function calls:
  9430 ;;		i2_i2c1_driver_sendACK
  9431 ;; This function is called by:
  9432 ;; This function uses a non-reentrant model
  9433 ;;
  9434                           
  9435                           	psect	text80
  9436  0013D0                     __ptext80:
  9437                           	opt stack 0
  9438  0013D0                     i2_do_I2C_DO_ACK:
  9439                           	opt stack 15
  9440                           
  9441                           ;i2c_master.c: 301: i2c1_driver_sendACK();
  9442                           
  9443                           ;incstack = 0
  9444  0013D0  EC18  F00A         	call	i2_i2c1_driver_sendACK	;wreg free
  9445                           
  9446                           ;i2c_master.c: 302: return I2C_RCEN;
  9447  0013D4  0E05               	movlw	5
  9448  0013D6  0012               	return	
  9449  0013D8                     __end_ofi2_do_I2C_DO_ACK:
  9450                           	opt stack 0
  9451                           tosu	equ	0xFFF
  9452                           tosh	equ	0xFFE
  9453                           tosl	equ	0xFFD
  9454                           pclatu	equ	0xFFB
  9455                           pclath	equ	0xFFA
  9456                           tblptru	equ	0xFF8
  9457                           tblptrh	equ	0xFF7
  9458                           tblptrl	equ	0xFF6
  9459                           tablat	equ	0xFF5
  9460                           prodh	equ	0xFF4
  9461                           prodl	equ	0xFF3
  9462                           intcon	equ	0xFF2
  9463                           postinc0	equ	0xFEE
  9464                           fsr0h	equ	0xFEA
  9465                           fsr0l	equ	0xFE9
  9466                           wreg	equ	0xFE8
  9467                           indf1	equ	0xFE7
  9468                           postdec1	equ	0xFE5
  9469                           plusw1	equ	0xFE3
  9470                           fsr1h	equ	0xFE2
  9471                           fsr1l	equ	0xFE1
  9472                           indf2	equ	0xFDF
  9473                           postinc2	equ	0xFDE
  9474                           postdec2	equ	0xFDD
  9475                           plusw2	equ	0xFDB
  9476                           fsr2h	equ	0xFDA
  9477                           fsr2l	equ	0xFD9
  9478                           status	equ	0xFD8
  9479                           
  9480 ;; *************** function i2_do_I2C_RCEN *****************
  9481 ;; Defined at:
  9482 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
  9483 ;; Parameters:    Size  Location     Type
  9484 ;;		None
  9485 ;; Auto vars:     Size  Location     Type
  9486 ;;		None
  9487 ;; Return value:  Size  Location     Type
  9488 ;;                  1    wreg      enum E11956
  9489 ;; Registers used:
  9490 ;;		wreg, cstack
  9491 ;; Tracked objects:
  9492 ;;		On entry : 0/0
  9493 ;;		On exit  : 0/0
  9494 ;;		Unchanged: 0/0
  9495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9500 ;;Total ram usage:        0 bytes
  9501 ;; Hardware stack levels used:    1
  9502 ;; Hardware stack levels required when called:    1
  9503 ;; This function calls:
  9504 ;;		i2_i2c1_driver_startRX
  9505 ;; This function is called by:
  9506 ;; This function uses a non-reentrant model
  9507 ;;
  9508                           
  9509                           	psect	text81
  9510  001372                     __ptext81:
  9511                           	opt stack 0
  9512  001372                     i2_do_I2C_RCEN:
  9513                           	opt stack 15
  9514                           
  9515                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
  9516                           
  9517                           ;incstack = 0
  9518  001372  0100               	movlb	0	; () banked
  9519  001374  9760               	bcf	_i2c_status& (0+255),3,b
  9520                           
  9521                           ; BSR set to: 0
  9522                           ;i2c_master.c: 295: i2c1_driver_startRX();
  9523  001376  EC2F  F00A         	call	i2_i2c1_driver_startRX	;wreg free
  9524                           
  9525                           ;i2c_master.c: 296: return I2C_RX;
  9526  00137A  0E04               	movlw	4
  9527  00137C  0012               	return	
  9528  00137E                     __end_ofi2_do_I2C_RCEN:
  9529                           	opt stack 0
  9530                           tosu	equ	0xFFF
  9531                           tosh	equ	0xFFE
  9532                           tosl	equ	0xFFD
  9533                           pclatu	equ	0xFFB
  9534                           pclath	equ	0xFFA
  9535                           tblptru	equ	0xFF8
  9536                           tblptrh	equ	0xFF7
  9537                           tblptrl	equ	0xFF6
  9538                           tablat	equ	0xFF5
  9539                           prodh	equ	0xFF4
  9540                           prodl	equ	0xFF3
  9541                           intcon	equ	0xFF2
  9542                           postinc0	equ	0xFEE
  9543                           fsr0h	equ	0xFEA
  9544                           fsr0l	equ	0xFE9
  9545                           wreg	equ	0xFE8
  9546                           indf1	equ	0xFE7
  9547                           postdec1	equ	0xFE5
  9548                           plusw1	equ	0xFE3
  9549                           fsr1h	equ	0xFE2
  9550                           fsr1l	equ	0xFE1
  9551                           indf2	equ	0xFDF
  9552                           postinc2	equ	0xFDE
  9553                           postdec2	equ	0xFDD
  9554                           plusw2	equ	0xFDB
  9555                           fsr2h	equ	0xFDA
  9556                           fsr2l	equ	0xFD9
  9557                           status	equ	0xFD8
  9558                           
  9559 ;; *************** function i2_do_I2C_SEND_ADR_WRITE *****************
  9560 ;; Defined at:
  9561 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
  9562 ;; Parameters:    Size  Location     Type
  9563 ;;		None
  9564 ;; Auto vars:     Size  Location     Type
  9565 ;;		None
  9566 ;; Return value:  Size  Location     Type
  9567 ;;                  1    wreg      enum E11956
  9568 ;; Registers used:
  9569 ;;		wreg, status,2, status,0, cstack
  9570 ;; Tracked objects:
  9571 ;;		On entry : 0/0
  9572 ;;		On exit  : 0/0
  9573 ;;		Unchanged: 0/0
  9574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9579 ;;Total ram usage:        0 bytes
  9580 ;; Hardware stack levels used:    1
  9581 ;; Hardware stack levels required when called:    1
  9582 ;; This function calls:
  9583 ;;		i2_i2c1_driver_TXData
  9584 ;; This function is called by:
  9585 ;; This function uses a non-reentrant model
  9586 ;;
  9587                           
  9588                           	psect	text82
  9589  00129A                     __ptext82:
  9590                           	opt stack 0
  9591  00129A                     i2_do_I2C_SEND_ADR_WRITE:
  9592                           	opt stack 15
  9593                           
  9594                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
  9595                           
  9596                           ;incstack = 0
  9597  00129A  0100               	movlb	0	; () banked
  9598  00129C  8760               	bsf	_i2c_status& (0+255),3,b
  9599                           
  9600                           ; BSR set to: 0
  9601                           ;i2c_master.c: 288: i2c1_driver_TXData(i2c_status.address << 1);
  9602  00129E  5161               	movf	(_i2c_status+1)& (0+255),w,b
  9603  0012A0  2561               	addwf	(_i2c_status+1)& (0+255),w,b
  9604  0012A2  ECFC  F009         	call	i2_i2c1_driver_TXData
  9605                           
  9606                           ;i2c_master.c: 289: return I2C_TX;
  9607  0012A6  0E03               	movlw	3
  9608  0012A8  0012               	return	
  9609  0012AA                     __end_ofi2_do_I2C_SEND_ADR_WRITE:
  9610                           	opt stack 0
  9611                           tosu	equ	0xFFF
  9612                           tosh	equ	0xFFE
  9613                           tosl	equ	0xFFD
  9614                           pclatu	equ	0xFFB
  9615                           pclath	equ	0xFFA
  9616                           tblptru	equ	0xFF8
  9617                           tblptrh	equ	0xFF7
  9618                           tblptrl	equ	0xFF6
  9619                           tablat	equ	0xFF5
  9620                           prodh	equ	0xFF4
  9621                           prodl	equ	0xFF3
  9622                           intcon	equ	0xFF2
  9623                           postinc0	equ	0xFEE
  9624                           fsr0h	equ	0xFEA
  9625                           fsr0l	equ	0xFE9
  9626                           wreg	equ	0xFE8
  9627                           indf1	equ	0xFE7
  9628                           postdec1	equ	0xFE5
  9629                           plusw1	equ	0xFE3
  9630                           fsr1h	equ	0xFE2
  9631                           fsr1l	equ	0xFE1
  9632                           indf2	equ	0xFDF
  9633                           postinc2	equ	0xFDE
  9634                           postdec2	equ	0xFDD
  9635                           plusw2	equ	0xFDB
  9636                           fsr2h	equ	0xFDA
  9637                           fsr2l	equ	0xFD9
  9638                           status	equ	0xFD8
  9639                           
  9640 ;; *************** function i2_do_I2C_SEND_ADR_READ *****************
  9641 ;; Defined at:
  9642 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
  9643 ;; Parameters:    Size  Location     Type
  9644 ;;		None
  9645 ;; Auto vars:     Size  Location     Type
  9646 ;;		None
  9647 ;; Return value:  Size  Location     Type
  9648 ;;                  1    wreg      enum E11956
  9649 ;; Registers used:
  9650 ;;		wreg, status,0, cstack
  9651 ;; Tracked objects:
  9652 ;;		On entry : 0/0
  9653 ;;		On exit  : 0/0
  9654 ;;		Unchanged: 0/0
  9655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9660 ;;Total ram usage:        0 bytes
  9661 ;; Hardware stack levels used:    1
  9662 ;; Hardware stack levels required when called:    1
  9663 ;; This function calls:
  9664 ;;		i2_i2c1_driver_TXData
  9665 ;; This function is called by:
  9666 ;; This function uses a non-reentrant model
  9667 ;;
  9668                           
  9669                           	psect	text83
  9670  0012AA                     __ptext83:
  9671                           	opt stack 0
  9672  0012AA                     i2_do_I2C_SEND_ADR_READ:
  9673                           	opt stack 15
  9674                           
  9675                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
  9676                           
  9677                           ;incstack = 0
  9678  0012AA  0100               	movlb	0	; () banked
  9679  0012AC  8760               	bsf	_i2c_status& (0+255),3,b
  9680                           
  9681                           ; BSR set to: 0
  9682                           ;i2c_master.c: 281: i2c1_driver_TXData(i2c_status.address << 1 | 1);
  9683  0012AE  80D8               	bsf	status,0,c
  9684  0012B0  3561               	rlcf	(_i2c_status+1)& (0+255),w,b
  9685  0012B2  ECFC  F009         	call	i2_i2c1_driver_TXData
  9686                           
  9687                           ;i2c_master.c: 282: return I2C_RCEN;
  9688  0012B6  0E05               	movlw	5
  9689  0012B8  0012               	return	
  9690  0012BA                     __end_ofi2_do_I2C_SEND_ADR_READ:
  9691                           	opt stack 0
  9692                           tosu	equ	0xFFF
  9693                           tosh	equ	0xFFE
  9694                           tosl	equ	0xFFD
  9695                           pclatu	equ	0xFFB
  9696                           pclath	equ	0xFFA
  9697                           tblptru	equ	0xFF8
  9698                           tblptrh	equ	0xFF7
  9699                           tblptrl	equ	0xFF6
  9700                           tablat	equ	0xFF5
  9701                           prodh	equ	0xFF4
  9702                           prodl	equ	0xFF3
  9703                           intcon	equ	0xFF2
  9704                           postinc0	equ	0xFEE
  9705                           fsr0h	equ	0xFEA
  9706                           fsr0l	equ	0xFE9
  9707                           wreg	equ	0xFE8
  9708                           indf1	equ	0xFE7
  9709                           postdec1	equ	0xFE5
  9710                           plusw1	equ	0xFE3
  9711                           fsr1h	equ	0xFE2
  9712                           fsr1l	equ	0xFE1
  9713                           indf2	equ	0xFDF
  9714                           postinc2	equ	0xFDE
  9715                           postdec2	equ	0xFDD
  9716                           plusw2	equ	0xFDB
  9717                           fsr2h	equ	0xFDA
  9718                           fsr2l	equ	0xFD9
  9719                           status	equ	0xFD8
  9720                           
  9721 ;; *************** function i2_do_I2C_SEND_STOP *****************
  9722 ;; Defined at:
  9723 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  9724 ;; Parameters:    Size  Location     Type
  9725 ;;		None
  9726 ;; Auto vars:     Size  Location     Type
  9727 ;;		None
  9728 ;; Return value:  Size  Location     Type
  9729 ;;                  1    wreg      enum E11956
  9730 ;; Registers used:
  9731 ;;		wreg, cstack
  9732 ;; Tracked objects:
  9733 ;;		On entry : 0/0
  9734 ;;		On exit  : 0/0
  9735 ;;		Unchanged: 0/0
  9736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9741 ;;Total ram usage:        0 bytes
  9742 ;; Hardware stack levels used:    1
  9743 ;; Hardware stack levels required when called:    1
  9744 ;; This function calls:
  9745 ;;		i2_i2c1_driver_stop
  9746 ;; This function is called by:
  9747 ;;		i2_do_I2C_DO_ADDRESS_NACK
  9748 ;;		i2_do_I2C_TX
  9749 ;;		i2_do_I2C_TX_EMPTY
  9750 ;; This function uses a non-reentrant model
  9751 ;;
  9752                           
  9753                           	psect	text84
  9754  0013D8                     __ptext84:
  9755                           	opt stack 0
  9756  0013D8                     i2_do_I2C_SEND_STOP:
  9757                           	opt stack 14
  9758                           
  9759                           ;i2c_master.c: 274: i2c1_driver_stop();
  9760                           
  9761                           ;incstack = 0
  9762  0013D8  EC37  F00A         	call	i2_i2c1_driver_stop	;wreg free
  9763                           
  9764                           ;i2c_master.c: 275: return I2C_IDLE;
  9765  0013DC  0E00               	movlw	0
  9766  0013DE  0012               	return	
  9767  0013E0                     __end_ofi2_do_I2C_SEND_STOP:
  9768                           	opt stack 0
  9769                           tosu	equ	0xFFF
  9770                           tosh	equ	0xFFE
  9771                           tosl	equ	0xFFD
  9772                           pclatu	equ	0xFFB
  9773                           pclath	equ	0xFFA
  9774                           tblptru	equ	0xFF8
  9775                           tblptrh	equ	0xFF7
  9776                           tblptrl	equ	0xFF6
  9777                           tablat	equ	0xFF5
  9778                           prodh	equ	0xFF4
  9779                           prodl	equ	0xFF3
  9780                           intcon	equ	0xFF2
  9781                           postinc0	equ	0xFEE
  9782                           fsr0h	equ	0xFEA
  9783                           fsr0l	equ	0xFE9
  9784                           wreg	equ	0xFE8
  9785                           indf1	equ	0xFE7
  9786                           postdec1	equ	0xFE5
  9787                           plusw1	equ	0xFE3
  9788                           fsr1h	equ	0xFE2
  9789                           fsr1l	equ	0xFE1
  9790                           indf2	equ	0xFDF
  9791                           postinc2	equ	0xFDE
  9792                           postdec2	equ	0xFDD
  9793                           plusw2	equ	0xFDB
  9794                           fsr2h	equ	0xFDA
  9795                           fsr2l	equ	0xFD9
  9796                           status	equ	0xFD8
  9797                           
  9798 ;; *************** function i2_do_I2C_SEND_RESTART *****************
  9799 ;; Defined at:
  9800 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
  9801 ;; Parameters:    Size  Location     Type
  9802 ;;		None
  9803 ;; Auto vars:     Size  Location     Type
  9804 ;;		None
  9805 ;; Return value:  Size  Location     Type
  9806 ;;                  1    wreg      enum E11956
  9807 ;; Registers used:
  9808 ;;		wreg, cstack
  9809 ;; Tracked objects:
  9810 ;;		On entry : 0/0
  9811 ;;		On exit  : 0/0
  9812 ;;		Unchanged: 0/0
  9813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9817 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9818 ;;Total ram usage:        0 bytes
  9819 ;; Hardware stack levels used:    1
  9820 ;; Hardware stack levels required when called:    1
  9821 ;; This function calls:
  9822 ;;		i2_i2c1_driver_restart
  9823 ;; This function is called by:
  9824 ;;		i2_do_I2C_DO_ADDRESS_NACK
  9825 ;;		i2_do_I2C_TX_EMPTY
  9826 ;; This function uses a non-reentrant model
  9827 ;;
  9828                           
  9829                           	psect	text85
  9830  0013E0                     __ptext85:
  9831                           	opt stack 0
  9832  0013E0                     i2_do_I2C_SEND_RESTART:
  9833                           	opt stack 14
  9834                           
  9835                           ;i2c_master.c: 268: i2c1_driver_restart();
  9836                           
  9837                           ;incstack = 0
  9838  0013E0  EC39  F00A         	call	i2_i2c1_driver_restart	;wreg free
  9839                           
  9840                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
  9841  0013E4  0E01               	movlw	1
  9842  0013E6  0012               	return	
  9843  0013E8                     __end_ofi2_do_I2C_SEND_RESTART:
  9844                           	opt stack 0
  9845                           tosu	equ	0xFFF
  9846                           tosh	equ	0xFFE
  9847                           tosl	equ	0xFFD
  9848                           pclatu	equ	0xFFB
  9849                           pclath	equ	0xFFA
  9850                           tblptru	equ	0xFF8
  9851                           tblptrh	equ	0xFF7
  9852                           tblptrl	equ	0xFF6
  9853                           tablat	equ	0xFF5
  9854                           prodh	equ	0xFF4
  9855                           prodl	equ	0xFF3
  9856                           intcon	equ	0xFF2
  9857                           postinc0	equ	0xFEE
  9858                           fsr0h	equ	0xFEA
  9859                           fsr0l	equ	0xFE9
  9860                           wreg	equ	0xFE8
  9861                           indf1	equ	0xFE7
  9862                           postdec1	equ	0xFE5
  9863                           plusw1	equ	0xFE3
  9864                           fsr1h	equ	0xFE2
  9865                           fsr1l	equ	0xFE1
  9866                           indf2	equ	0xFDF
  9867                           postinc2	equ	0xFDE
  9868                           postdec2	equ	0xFDD
  9869                           plusw2	equ	0xFDB
  9870                           fsr2h	equ	0xFDA
  9871                           fsr2l	equ	0xFD9
  9872                           status	equ	0xFD8
  9873                           
  9874 ;; *************** function i2_do_I2C_SEND_RESTART_WRITE *****************
  9875 ;; Defined at:
  9876 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
  9877 ;; Parameters:    Size  Location     Type
  9878 ;;		None
  9879 ;; Auto vars:     Size  Location     Type
  9880 ;;		None
  9881 ;; Return value:  Size  Location     Type
  9882 ;;                  1    wreg      enum E11956
  9883 ;; Registers used:
  9884 ;;		wreg, cstack
  9885 ;; Tracked objects:
  9886 ;;		On entry : 0/0
  9887 ;;		On exit  : 0/0
  9888 ;;		Unchanged: 0/0
  9889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9894 ;;Total ram usage:        0 bytes
  9895 ;; Hardware stack levels used:    1
  9896 ;; Hardware stack levels required when called:    1
  9897 ;; This function calls:
  9898 ;;		i2_i2c1_driver_restart
  9899 ;; This function is called by:
  9900 ;;		i2_do_I2C_TX
  9901 ;; This function uses a non-reentrant model
  9902 ;;
  9903                           
  9904                           	psect	text86
  9905  0013E8                     __ptext86:
  9906                           	opt stack 0
  9907  0013E8                     i2_do_I2C_SEND_RESTART_WRITE:
  9908                           	opt stack 14
  9909                           
  9910                           ;i2c_master.c: 262: i2c1_driver_restart();
  9911                           
  9912                           ;incstack = 0
  9913  0013E8  EC39  F00A         	call	i2_i2c1_driver_restart	;wreg free
  9914                           
  9915                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
  9916  0013EC  0E02               	movlw	2
  9917  0013EE  0012               	return	
  9918  0013F0                     __end_ofi2_do_I2C_SEND_RESTART_WRITE:
  9919                           	opt stack 0
  9920                           tosu	equ	0xFFF
  9921                           tosh	equ	0xFFE
  9922                           tosl	equ	0xFFD
  9923                           pclatu	equ	0xFFB
  9924                           pclath	equ	0xFFA
  9925                           tblptru	equ	0xFF8
  9926                           tblptrh	equ	0xFF7
  9927                           tblptrl	equ	0xFF6
  9928                           tablat	equ	0xFF5
  9929                           prodh	equ	0xFF4
  9930                           prodl	equ	0xFF3
  9931                           intcon	equ	0xFF2
  9932                           postinc0	equ	0xFEE
  9933                           fsr0h	equ	0xFEA
  9934                           fsr0l	equ	0xFE9
  9935                           wreg	equ	0xFE8
  9936                           indf1	equ	0xFE7
  9937                           postdec1	equ	0xFE5
  9938                           plusw1	equ	0xFE3
  9939                           fsr1h	equ	0xFE2
  9940                           fsr1l	equ	0xFE1
  9941                           indf2	equ	0xFDF
  9942                           postinc2	equ	0xFDE
  9943                           postdec2	equ	0xFDD
  9944                           plusw2	equ	0xFDB
  9945                           fsr2h	equ	0xFDA
  9946                           fsr2l	equ	0xFD9
  9947                           status	equ	0xFD8
  9948                           
  9949 ;; *************** function i2_do_I2C_SEND_RESTART_READ *****************
  9950 ;; Defined at:
  9951 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
  9952 ;; Parameters:    Size  Location     Type
  9953 ;;		None
  9954 ;; Auto vars:     Size  Location     Type
  9955 ;;		None
  9956 ;; Return value:  Size  Location     Type
  9957 ;;                  1    wreg      enum E11956
  9958 ;; Registers used:
  9959 ;;		wreg, cstack
  9960 ;; Tracked objects:
  9961 ;;		On entry : 0/0
  9962 ;;		On exit  : 0/0
  9963 ;;		Unchanged: 0/0
  9964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9968 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9969 ;;Total ram usage:        0 bytes
  9970 ;; Hardware stack levels used:    1
  9971 ;; Hardware stack levels required when called:    1
  9972 ;; This function calls:
  9973 ;;		i2_i2c1_driver_restart
  9974 ;; This function is called by:
  9975 ;;		i2_do_I2C_TX
  9976 ;; This function uses a non-reentrant model
  9977 ;;
  9978                           
  9979                           	psect	text87
  9980  0013F0                     __ptext87:
  9981                           	opt stack 0
  9982  0013F0                     i2_do_I2C_SEND_RESTART_READ:
  9983                           	opt stack 14
  9984                           
  9985                           ;i2c_master.c: 256: i2c1_driver_restart();
  9986                           
  9987                           ;incstack = 0
  9988  0013F0  EC39  F00A         	call	i2_i2c1_driver_restart	;wreg free
  9989                           
  9990                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
  9991  0013F4  0E01               	movlw	1
  9992  0013F6  0012               	return	
  9993  0013F8                     __end_ofi2_do_I2C_SEND_RESTART_READ:
  9994                           	opt stack 0
  9995                           tosu	equ	0xFFF
  9996                           tosh	equ	0xFFE
  9997                           tosl	equ	0xFFD
  9998                           pclatu	equ	0xFFB
  9999                           pclath	equ	0xFFA
 10000                           tblptru	equ	0xFF8
 10001                           tblptrh	equ	0xFF7
 10002                           tblptrl	equ	0xFF6
 10003                           tablat	equ	0xFF5
 10004                           prodh	equ	0xFF4
 10005                           prodl	equ	0xFF3
 10006                           intcon	equ	0xFF2
 10007                           postinc0	equ	0xFEE
 10008                           fsr0h	equ	0xFEA
 10009                           fsr0l	equ	0xFE9
 10010                           wreg	equ	0xFE8
 10011                           indf1	equ	0xFE7
 10012                           postdec1	equ	0xFE5
 10013                           plusw1	equ	0xFE3
 10014                           fsr1h	equ	0xFE2
 10015                           fsr1l	equ	0xFE1
 10016                           indf2	equ	0xFDF
 10017                           postinc2	equ	0xFDE
 10018                           postdec2	equ	0xFDD
 10019                           plusw2	equ	0xFDB
 10020                           fsr2h	equ	0xFDA
 10021                           fsr2l	equ	0xFD9
 10022                           status	equ	0xFD8
 10023                           
 10024 ;; *************** function i2_do_I2C_IDLE *****************
 10025 ;; Defined at:
 10026 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 10027 ;; Parameters:    Size  Location     Type
 10028 ;;		None
 10029 ;; Auto vars:     Size  Location     Type
 10030 ;;		None
 10031 ;; Return value:  Size  Location     Type
 10032 ;;                  1    wreg      enum E11956
 10033 ;; Registers used:
 10034 ;;		wreg, status,2
 10035 ;; Tracked objects:
 10036 ;;		On entry : 0/0
 10037 ;;		On exit  : 0/0
 10038 ;;		Unchanged: 0/0
 10039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10043 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10044 ;;Total ram usage:        0 bytes
 10045 ;; Hardware stack levels used:    1
 10046 ;; This function calls:
 10047 ;;		Nothing
 10048 ;; This function is called by:
 10049 ;; This function uses a non-reentrant model
 10050 ;;
 10051                           
 10052                           	psect	text88
 10053  00137E                     __ptext88:
 10054                           	opt stack 0
 10055  00137E                     i2_do_I2C_IDLE:
 10056                           	opt stack 16
 10057                           
 10058                           ;i2c_master.c: 249: i2c_status.busy = 0;
 10059                           
 10060                           ;incstack = 0
 10061  00137E  0100               	movlb	0	; () banked
 10062  001380  9160               	bcf	_i2c_status& (0+255),0,b
 10063                           
 10064                           ; BSR set to: 0
 10065                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
 10066  001382  0E00               	movlw	0
 10067  001384  6F6B               	movwf	(_i2c_status+11)& (0+255),b
 10068                           
 10069                           ; BSR set to: 0
 10070                           ;i2c_master.c: 251: return I2C_RESET;
 10071  001386  0E0E               	movlw	14
 10072  001388  0012               	return	
 10073  00138A                     __end_ofi2_do_I2C_IDLE:
 10074                           	opt stack 0
 10075                           tosu	equ	0xFFF
 10076                           tosh	equ	0xFFE
 10077                           tosl	equ	0xFFD
 10078                           pclatu	equ	0xFFB
 10079                           pclath	equ	0xFFA
 10080                           tblptru	equ	0xFF8
 10081                           tblptrh	equ	0xFF7
 10082                           tblptrl	equ	0xFF6
 10083                           tablat	equ	0xFF5
 10084                           prodh	equ	0xFF4
 10085                           prodl	equ	0xFF3
 10086                           intcon	equ	0xFF2
 10087                           postinc0	equ	0xFEE
 10088                           fsr0h	equ	0xFEA
 10089                           fsr0l	equ	0xFE9
 10090                           wreg	equ	0xFE8
 10091                           indf1	equ	0xFE7
 10092                           postdec1	equ	0xFE5
 10093                           plusw1	equ	0xFE3
 10094                           fsr1h	equ	0xFE2
 10095                           fsr1l	equ	0xFE1
 10096                           indf2	equ	0xFDF
 10097                           postinc2	equ	0xFDE
 10098                           postdec2	equ	0xFDD
 10099                           plusw2	equ	0xFDB
 10100                           fsr2h	equ	0xFDA
 10101                           fsr2l	equ	0xFD9
 10102                           status	equ	0xFD8
 10103                           
 10104 ;; *************** function i2_do_I2C_RESET *****************
 10105 ;; Defined at:
 10106 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 10107 ;; Parameters:    Size  Location     Type
 10108 ;;		None
 10109 ;; Auto vars:     Size  Location     Type
 10110 ;;		None
 10111 ;; Return value:  Size  Location     Type
 10112 ;;                  1    wreg      enum E11956
 10113 ;; Registers used:
 10114 ;;		wreg, status,2, cstack
 10115 ;; Tracked objects:
 10116 ;;		On entry : 0/0
 10117 ;;		On exit  : 0/0
 10118 ;;		Unchanged: 0/0
 10119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10124 ;;Total ram usage:        0 bytes
 10125 ;; Hardware stack levels used:    1
 10126 ;; Hardware stack levels required when called:    1
 10127 ;; This function calls:
 10128 ;;		i2_i2c1_driver_resetBus
 10129 ;; This function is called by:
 10130 ;; This function uses a non-reentrant model
 10131 ;;
 10132                           
 10133                           	psect	text89
 10134  0012BA                     __ptext89:
 10135                           	opt stack 0
 10136  0012BA                     i2_do_I2C_RESET:
 10137                           	opt stack 15
 10138                           
 10139                           ;i2c_master.c: 241: i2c1_driver_resetBus();
 10140                           
 10141                           ; BSR set to: 0
 10142                           ;incstack = 0
 10143  0012BA  EC3C  F00A         	call	i2_i2c1_driver_resetBus	;wreg free
 10144                           
 10145                           ;i2c_master.c: 242: i2c_status.busy = 0;
 10146  0012BE  0100               	movlb	0	; () banked
 10147  0012C0  9160               	bcf	_i2c_status& (0+255),0,b
 10148                           
 10149                           ; BSR set to: 0
 10150                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
 10151  0012C2  0E00               	movlw	0
 10152  0012C4  6F6B               	movwf	(_i2c_status+11)& (0+255),b
 10153                           
 10154                           ; BSR set to: 0
 10155                           ;i2c_master.c: 244: return I2C_RESET;
 10156  0012C6  0E0E               	movlw	14
 10157  0012C8  0012               	return	
 10158  0012CA                     __end_ofi2_do_I2C_RESET:
 10159                           	opt stack 0
 10160                           tosu	equ	0xFFF
 10161                           tosh	equ	0xFFE
 10162                           tosl	equ	0xFFD
 10163                           pclatu	equ	0xFFB
 10164                           pclath	equ	0xFFA
 10165                           tblptru	equ	0xFF8
 10166                           tblptrh	equ	0xFF7
 10167                           tblptrl	equ	0xFF6
 10168                           tablat	equ	0xFF5
 10169                           prodh	equ	0xFF4
 10170                           prodl	equ	0xFF3
 10171                           intcon	equ	0xFF2
 10172                           postinc0	equ	0xFEE
 10173                           fsr0h	equ	0xFEA
 10174                           fsr0l	equ	0xFE9
 10175                           wreg	equ	0xFE8
 10176                           indf1	equ	0xFE7
 10177                           postdec1	equ	0xFE5
 10178                           plusw1	equ	0xFE3
 10179                           fsr1h	equ	0xFE2
 10180                           fsr1l	equ	0xFE1
 10181                           indf2	equ	0xFDF
 10182                           postinc2	equ	0xFDE
 10183                           postdec2	equ	0xFDD
 10184                           plusw2	equ	0xFDB
 10185                           fsr2h	equ	0xFDA
 10186                           fsr2l	equ	0xFD9
 10187                           status	equ	0xFD8
 10188                           
 10189 ;; *************** function i2_do_I2C_TX_EMPTY *****************
 10190 ;; Defined at:
 10191 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 10192 ;; Parameters:    Size  Location     Type
 10193 ;;		None
 10194 ;; Auto vars:     Size  Location     Type
 10195 ;;		None
 10196 ;; Return value:  Size  Location     Type
 10197 ;;                  1    wreg      enum E11956
 10198 ;; Registers used:
 10199 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 10200 ;; Tracked objects:
 10201 ;;		On entry : 0/0
 10202 ;;		On exit  : 0/0
 10203 ;;		Unchanged: 0/0
 10204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10208 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10209 ;;Total ram usage:        0 bytes
 10210 ;; Hardware stack levels used:    1
 10211 ;; Hardware stack levels required when called:    3
 10212 ;; This function calls:
 10213 ;;		Absolute function
 10214 ;;		i2_do_I2C_SEND_RESTART
 10215 ;;		i2_do_I2C_SEND_STOP
 10216 ;;		i2_i2c_restartWrite
 10217 ;;		i2_mssp1_setIRQ
 10218 ;;		i2_rd1RegCompleteHandler
 10219 ;;		i2_rd2RegCompleteHandler
 10220 ;;		i2_rdBlkRegCompleteHandler
 10221 ;;		i2_returnReset
 10222 ;;		i2_returnStop
 10223 ;;		i2_wr1RegCompleteHandler
 10224 ;;		i2_wr2RegCompleteHandler
 10225 ;; This function is called by:
 10226 ;; This function uses a non-reentrant model
 10227 ;;
 10228                           
 10229                           	psect	text90
 10230  000B8A                     __ptext90:
 10231                           	opt stack 0
 10232  000B8A                     i2_do_I2C_TX_EMPTY:
 10233                           	opt stack 13
 10234                           
 10235                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
 10236                           
 10237                           ; BSR set to: 0
 10238                           ;incstack = 0
 10239  000B8A  0100               	movlb	0	; () banked
 10240  000B8C  8560               	bsf	_i2c_status& (0+255),2,b
 10241                           
 10242                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
 10243  000B8E  D00A               	goto	i2l471
 10244  000B90                     
 10245                           ;i2c_master.c: 388: case i2c_restart_write:
 10246                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
 10247                           
 10248                           ; BSR set to: 0
 10249                           
 10250                           ; BSR set to: 0
 10251  000B90  ECF0  F009         	call	i2_do_I2C_SEND_RESTART	;wreg free
 10252  000B94  0012               	return	
 10253  000B96                     
 10254                           ;i2c_master.c: 391: mssp1_setIRQ();
 10255  000B96  EC12  F00A         	call	i2_mssp1_setIRQ	;wreg free
 10256                           
 10257                           ;i2c_master.c: 392: return I2C_TX;
 10258  000B9A  0E03               	movlw	3
 10259  000B9C  0012               	return	
 10260  000B9E                     
 10261                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
 10262                           
 10263                           ;i2c_master.c: 394: case i2c_stop:
 10264  000B9E  ECEC  F009         	call	i2_do_I2C_SEND_STOP	;wreg free
 10265                           
 10266                           ;i2c_master.c: 396: }
 10267  000BA2  0012               	return	
 10268  000BA4                     i2l471:
 10269  000BA4  C07E  F00C         	movff	_i2c_status+30,i2returnStop@p
 10270  000BA8  C07F  F00D         	movff	_i2c_status+31,i2returnStop@p+1
 10271  000BAC  EE20  F06C         	lfsr	2,_i2c_status+12
 10272  000BB0  D801               	call	i2u236_48
 10273  000BB2  D00A               	goto	i2u236_49
 10274  000BB4                     i2u236_48:
 10275  000BB4  0005               	push	
 10276  000BB6  6EFA               	movwf	pclath,c
 10277  000BB8  50DE               	movf	postinc2,w,c
 10278  000BBA  6EFD               	movwf	tosl,c
 10279  000BBC  50DE               	movf	postinc2,w,c
 10280  000BBE  6EFE               	movwf	tosh,c
 10281  000BC0  50DE               	movf	postinc2,w,c
 10282  000BC2  6EFF               	movwf	tosu,c
 10283  000BC4  50FA               	movf	pclath,w,c
 10284  000BC6  0012               	return		;indir
 10285  000BC8                     i2u236_49:
 10286                           
 10287                           ; Switch size 1, requested type "space"
 10288                           ; Number of cases is 4, Range of values is 1 to 4
 10289                           ; switch strategies available:
 10290                           ; Name         Instructions Cycles
 10291                           ; simple_byte           13     7 (average)
 10292                           ;	Chosen strategy is simple_byte
 10293  000BC8  0A01               	xorlw	1	; case 1
 10294  000BCA  B4D8               	btfsc	status,2,c
 10295  000BCC  D7E8               	goto	i2l476
 10296  000BCE  0A03               	xorlw	3	; case 2
 10297  000BD0  B4D8               	btfsc	status,2,c
 10298  000BD2  D7DE               	goto	i2l472
 10299  000BD4  0A01               	xorlw	1	; case 3
 10300  000BD6  B4D8               	btfsc	status,2,c
 10301  000BD8  D7DB               	goto	i2l472
 10302  000BDA  0A07               	xorlw	7	; case 4
 10303  000BDC  B4D8               	btfsc	status,2,c
 10304  000BDE  D7DB               	goto	i2l475
 10305  000BE0  D7DE               	goto	i2l476
 10306  000BE2                     __end_ofi2_do_I2C_TX_EMPTY:
 10307                           	opt stack 0
 10308                           tosu	equ	0xFFF
 10309                           tosh	equ	0xFFE
 10310                           tosl	equ	0xFFD
 10311                           pclatu	equ	0xFFB
 10312                           pclath	equ	0xFFA
 10313                           tblptru	equ	0xFF8
 10314                           tblptrh	equ	0xFF7
 10315                           tblptrl	equ	0xFF6
 10316                           tablat	equ	0xFF5
 10317                           prodh	equ	0xFF4
 10318                           prodl	equ	0xFF3
 10319                           intcon	equ	0xFF2
 10320                           postinc0	equ	0xFEE
 10321                           fsr0h	equ	0xFEA
 10322                           fsr0l	equ	0xFE9
 10323                           wreg	equ	0xFE8
 10324                           indf1	equ	0xFE7
 10325                           postdec1	equ	0xFE5
 10326                           plusw1	equ	0xFE3
 10327                           fsr1h	equ	0xFE2
 10328                           fsr1l	equ	0xFE1
 10329                           indf2	equ	0xFDF
 10330                           postinc2	equ	0xFDE
 10331                           postdec2	equ	0xFDD
 10332                           plusw2	equ	0xFDB
 10333                           fsr2h	equ	0xFDA
 10334                           fsr2l	equ	0xFD9
 10335                           status	equ	0xFD8
 10336                           
 10337 ;; *************** function i2_mssp1_setIRQ *****************
 10338 ;; Defined at:
 10339 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
 10340 ;; Parameters:    Size  Location     Type
 10341 ;;		None
 10342 ;; Auto vars:     Size  Location     Type
 10343 ;;		None
 10344 ;; Return value:  Size  Location     Type
 10345 ;;                  1    wreg      void 
 10346 ;; Registers used:
 10347 ;;		None
 10348 ;; Tracked objects:
 10349 ;;		On entry : 0/0
 10350 ;;		On exit  : 0/0
 10351 ;;		Unchanged: 0/0
 10352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10356 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10357 ;;Total ram usage:        0 bytes
 10358 ;; Hardware stack levels used:    1
 10359 ;; This function calls:
 10360 ;;		Nothing
 10361 ;; This function is called by:
 10362 ;;		i2_do_I2C_TX_EMPTY
 10363 ;; This function uses a non-reentrant model
 10364 ;;
 10365                           
 10366                           	psect	text91
 10367  001424                     __ptext91:
 10368                           	opt stack 0
 10369  001424                     i2_mssp1_setIRQ:
 10370                           	opt stack 15
 10371                           
 10372                           ;i2c1_driver.c: 60: PIR3bits.SSP1IF = 1;
 10373                           
 10374                           ;incstack = 0
 10375  001424  010E               	movlb	14	; () banked
 10376  001426  81CD               	bsf	205,0,b	;volatile
 10377                           
 10378                           ; BSR set to: 14
 10379  001428  0012               	return		;funcret
 10380  00142A                     __end_ofi2_mssp1_setIRQ:
 10381                           	opt stack 0
 10382                           tosu	equ	0xFFF
 10383                           tosh	equ	0xFFE
 10384                           tosl	equ	0xFFD
 10385                           pclatu	equ	0xFFB
 10386                           pclath	equ	0xFFA
 10387                           tblptru	equ	0xFF8
 10388                           tblptrh	equ	0xFF7
 10389                           tblptrl	equ	0xFF6
 10390                           tablat	equ	0xFF5
 10391                           prodh	equ	0xFF4
 10392                           prodl	equ	0xFF3
 10393                           intcon	equ	0xFF2
 10394                           postinc0	equ	0xFEE
 10395                           fsr0h	equ	0xFEA
 10396                           fsr0l	equ	0xFE9
 10397                           wreg	equ	0xFE8
 10398                           indf1	equ	0xFE7
 10399                           postdec1	equ	0xFE5
 10400                           plusw1	equ	0xFE3
 10401                           fsr1h	equ	0xFE2
 10402                           fsr1l	equ	0xFE1
 10403                           indf2	equ	0xFDF
 10404                           postinc2	equ	0xFDE
 10405                           postdec2	equ	0xFDD
 10406                           plusw2	equ	0xFDB
 10407                           fsr2h	equ	0xFDA
 10408                           fsr2l	equ	0xFD9
 10409                           status	equ	0xFD8
 10410                           
 10411 ;; *************** function i2_i2c1_driver_isNACK *****************
 10412 ;; Defined at:
 10413 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
 10414 ;; Parameters:    Size  Location     Type
 10415 ;;		None
 10416 ;; Auto vars:     Size  Location     Type
 10417 ;;		None
 10418 ;; Return value:  Size  Location     Type
 10419 ;;		None               void
 10420 ;; Registers used:
 10421 ;;		wreg, status,2, status,0
 10422 ;; Tracked objects:
 10423 ;;		On entry : 0/0
 10424 ;;		On exit  : 0/0
 10425 ;;		Unchanged: 0/0
 10426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10429 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10430 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10431 ;;Total ram usage:        1 bytes
 10432 ;; Hardware stack levels used:    1
 10433 ;; This function calls:
 10434 ;;		Nothing
 10435 ;; This function is called by:
 10436 ;;		i2_do_I2C_TX
 10437 ;;		i2_i2c_ISR
 10438 ;; This function uses a non-reentrant model
 10439 ;;
 10440                           
 10441                           	psect	text92
 10442  00123C                     __ptext92:
 10443                           	opt stack 0
 10444  00123C                     i2_i2c1_driver_isNACK:
 10445                           	opt stack 16
 10446                           
 10447                           ;i2c1_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
 10448                           
 10449                           ; BSR set to: 14
 10450                           ;incstack = 0
 10451  00123C  5097               	movf	3991,w,c	;volatile
 10452  00123E  0BBF               	andlw	-65
 10453  001240  0940               	iorlw	64
 10454  001242  6E97               	movwf	3991,c	;volatile
 10455  001244  3897               	swapf	3991,w,c	;volatile
 10456  001246  32E8               	rrcf	wreg,f,c
 10457  001248  32E8               	rrcf	wreg,f,c
 10458  00124A  0B01               	andlw	1
 10459  00124C  6E01               	movwf	??i2_i2c1_driver_isNACK& (0+255),c
 10460  00124E  3001               	rrcf	??i2_i2c1_driver_isNACK,w,c
 10461  001250  0012               	return	
 10462  001252                     __end_ofi2_i2c1_driver_isNACK:
 10463                           	opt stack 0
 10464                           tosu	equ	0xFFF
 10465                           tosh	equ	0xFFE
 10466                           tosl	equ	0xFFD
 10467                           pclatu	equ	0xFFB
 10468                           pclath	equ	0xFFA
 10469                           tblptru	equ	0xFF8
 10470                           tblptrh	equ	0xFF7
 10471                           tblptrl	equ	0xFF6
 10472                           tablat	equ	0xFF5
 10473                           prodh	equ	0xFF4
 10474                           prodl	equ	0xFF3
 10475                           intcon	equ	0xFF2
 10476                           postinc0	equ	0xFEE
 10477                           fsr0h	equ	0xFEA
 10478                           fsr0l	equ	0xFE9
 10479                           wreg	equ	0xFE8
 10480                           indf1	equ	0xFE7
 10481                           postdec1	equ	0xFE5
 10482                           plusw1	equ	0xFE3
 10483                           fsr1h	equ	0xFE2
 10484                           fsr1l	equ	0xFE1
 10485                           indf2	equ	0xFDF
 10486                           postinc2	equ	0xFDE
 10487                           postdec2	equ	0xFDD
 10488                           plusw2	equ	0xFDB
 10489                           fsr2h	equ	0xFDA
 10490                           fsr2l	equ	0xFD9
 10491                           status	equ	0xFD8
 10492                           
 10493 ;; *************** function i2_i2c1_driver_TXData *****************
 10494 ;; Defined at:
 10495 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 10496 ;; Parameters:    Size  Location     Type
 10497 ;;  d               1    wreg     unsigned char 
 10498 ;; Auto vars:     Size  Location     Type
 10499 ;;  d               1    0[COMRAM] unsigned char 
 10500 ;; Return value:  Size  Location     Type
 10501 ;;                  1    wreg      void 
 10502 ;; Registers used:
 10503 ;;		wreg
 10504 ;; Tracked objects:
 10505 ;;		On entry : 0/0
 10506 ;;		On exit  : 0/0
 10507 ;;		Unchanged: 0/0
 10508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10510 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10512 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10513 ;;Total ram usage:        1 bytes
 10514 ;; Hardware stack levels used:    1
 10515 ;; This function calls:
 10516 ;;		Nothing
 10517 ;; This function is called by:
 10518 ;;		i2_do_I2C_SEND_ADR_READ
 10519 ;;		i2_do_I2C_SEND_ADR_WRITE
 10520 ;;		i2_do_I2C_TX
 10521 ;; This function uses a non-reentrant model
 10522 ;;
 10523                           
 10524                           	psect	text93
 10525  0013F8                     __ptext93:
 10526                           	opt stack 0
 10527  0013F8                     i2_i2c1_driver_TXData:
 10528                           	opt stack 15
 10529                           
 10530                           ;incstack = 0
 10531                           ;i2i2c1_driver_TXData@d stored from wreg
 10532  0013F8  6E01               	movwf	i2i2c1_driver_TXData@d,c
 10533                           
 10534                           ;i2c1_driver.c: 188: SSP1BUF = d;
 10535  0013FA  C001  FF92         	movff	i2i2c1_driver_TXData@d,3986	;volatile
 10536  0013FE  0012               	return		;funcret
 10537  001400                     __end_ofi2_i2c1_driver_TXData:
 10538                           	opt stack 0
 10539                           tosu	equ	0xFFF
 10540                           tosh	equ	0xFFE
 10541                           tosl	equ	0xFFD
 10542                           pclatu	equ	0xFFB
 10543                           pclath	equ	0xFFA
 10544                           tblptru	equ	0xFF8
 10545                           tblptrh	equ	0xFF7
 10546                           tblptrl	equ	0xFF6
 10547                           tablat	equ	0xFF5
 10548                           prodh	equ	0xFF4
 10549                           prodl	equ	0xFF3
 10550                           intcon	equ	0xFF2
 10551                           postinc0	equ	0xFEE
 10552                           fsr0h	equ	0xFEA
 10553                           fsr0l	equ	0xFE9
 10554                           wreg	equ	0xFE8
 10555                           indf1	equ	0xFE7
 10556                           postdec1	equ	0xFE5
 10557                           plusw1	equ	0xFE3
 10558                           fsr1h	equ	0xFE2
 10559                           fsr1l	equ	0xFE1
 10560                           indf2	equ	0xFDF
 10561                           postinc2	equ	0xFDE
 10562                           postdec2	equ	0xFDD
 10563                           plusw2	equ	0xFDB
 10564                           fsr2h	equ	0xFDA
 10565                           fsr2l	equ	0xFD9
 10566                           status	equ	0xFD8
 10567                           
 10568 ;; *************** function i2_i2c1_driver_getRXData *****************
 10569 ;; Defined at:
 10570 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 10571 ;; Parameters:    Size  Location     Type
 10572 ;;		None
 10573 ;; Auto vars:     Size  Location     Type
 10574 ;;		None
 10575 ;; Return value:  Size  Location     Type
 10576 ;;                  1    wreg      unsigned char 
 10577 ;; Registers used:
 10578 ;;		wreg, status,2
 10579 ;; Tracked objects:
 10580 ;;		On entry : 0/0
 10581 ;;		On exit  : 0/0
 10582 ;;		Unchanged: 0/0
 10583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10588 ;;Total ram usage:        0 bytes
 10589 ;; Hardware stack levels used:    1
 10590 ;; This function calls:
 10591 ;;		Nothing
 10592 ;; This function is called by:
 10593 ;;		i2_do_I2C_RX
 10594 ;; This function uses a non-reentrant model
 10595 ;;
 10596                           
 10597                           	psect	text94
 10598  00145A                     __ptext94:
 10599                           	opt stack 0
 10600  00145A                     i2_i2c1_driver_getRXData:
 10601                           	opt stack 15
 10602                           
 10603                           ;i2c1_driver.c: 173: return SSP1BUF;
 10604                           
 10605                           ;incstack = 0
 10606  00145A  5092               	movf	3986,w,c	;volatile
 10607  00145C  0012               	return	
 10608  00145E                     __end_ofi2_i2c1_driver_getRXData:
 10609                           	opt stack 0
 10610                           tosu	equ	0xFFF
 10611                           tosh	equ	0xFFE
 10612                           tosl	equ	0xFFD
 10613                           pclatu	equ	0xFFB
 10614                           pclath	equ	0xFFA
 10615                           tblptru	equ	0xFF8
 10616                           tblptrh	equ	0xFF7
 10617                           tblptrl	equ	0xFF6
 10618                           tablat	equ	0xFF5
 10619                           prodh	equ	0xFF4
 10620                           prodl	equ	0xFF3
 10621                           intcon	equ	0xFF2
 10622                           postinc0	equ	0xFEE
 10623                           fsr0h	equ	0xFEA
 10624                           fsr0l	equ	0xFE9
 10625                           wreg	equ	0xFE8
 10626                           indf1	equ	0xFE7
 10627                           postdec1	equ	0xFE5
 10628                           plusw1	equ	0xFE3
 10629                           fsr1h	equ	0xFE2
 10630                           fsr1l	equ	0xFE1
 10631                           indf2	equ	0xFDF
 10632                           postinc2	equ	0xFDE
 10633                           postdec2	equ	0xFDD
 10634                           plusw2	equ	0xFDB
 10635                           fsr2h	equ	0xFDA
 10636                           fsr2l	equ	0xFD9
 10637                           status	equ	0xFD8
 10638                           
 10639 ;; *************** function i2_i2c1_driver_sendNACK *****************
 10640 ;; Defined at:
 10641 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 10642 ;; Parameters:    Size  Location     Type
 10643 ;;		None
 10644 ;; Auto vars:     Size  Location     Type
 10645 ;;		None
 10646 ;; Return value:  Size  Location     Type
 10647 ;;                  1    wreg      void 
 10648 ;; Registers used:
 10649 ;;		None
 10650 ;; Tracked objects:
 10651 ;;		On entry : 0/0
 10652 ;;		On exit  : 0/0
 10653 ;;		Unchanged: 0/0
 10654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10659 ;;Total ram usage:        0 bytes
 10660 ;; Hardware stack levels used:    1
 10661 ;; This function calls:
 10662 ;;		Nothing
 10663 ;; This function is called by:
 10664 ;;		i2_do_I2C_DO_NACK_STOP
 10665 ;;		i2_do_I2C_DO_NACK_RESTART
 10666 ;; This function uses a non-reentrant model
 10667 ;;
 10668                           
 10669                           	psect	text95
 10670  00142A                     __ptext95:
 10671                           	opt stack 0
 10672  00142A                     i2_i2c1_driver_sendNACK:
 10673                           	opt stack 14
 10674                           
 10675                           ;i2c1_driver.c: 204: SSP1CON2bits.ACKDT = 1;
 10676                           
 10677                           ;incstack = 0
 10678  00142A  8A97               	bsf	3991,5,c	;volatile
 10679                           
 10680                           ;i2c1_driver.c: 205: SSP1CON2bits.ACKEN = 1;
 10681  00142C  8897               	bsf	3991,4,c	;volatile
 10682  00142E  0012               	return		;funcret
 10683  001430                     __end_ofi2_i2c1_driver_sendNACK:
 10684                           	opt stack 0
 10685                           tosu	equ	0xFFF
 10686                           tosh	equ	0xFFE
 10687                           tosl	equ	0xFFD
 10688                           pclatu	equ	0xFFB
 10689                           pclath	equ	0xFFA
 10690                           tblptru	equ	0xFF8
 10691                           tblptrh	equ	0xFF7
 10692                           tblptrl	equ	0xFF6
 10693                           tablat	equ	0xFF5
 10694                           prodh	equ	0xFF4
 10695                           prodl	equ	0xFF3
 10696                           intcon	equ	0xFF2
 10697                           postinc0	equ	0xFEE
 10698                           fsr0h	equ	0xFEA
 10699                           fsr0l	equ	0xFE9
 10700                           wreg	equ	0xFE8
 10701                           indf1	equ	0xFE7
 10702                           postdec1	equ	0xFE5
 10703                           plusw1	equ	0xFE3
 10704                           fsr1h	equ	0xFE2
 10705                           fsr1l	equ	0xFE1
 10706                           indf2	equ	0xFDF
 10707                           postinc2	equ	0xFDE
 10708                           postdec2	equ	0xFDD
 10709                           plusw2	equ	0xFDB
 10710                           fsr2h	equ	0xFDA
 10711                           fsr2l	equ	0xFD9
 10712                           status	equ	0xFD8
 10713                           
 10714 ;; *************** function i2_i2c1_driver_resetBus *****************
 10715 ;; Defined at:
 10716 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
 10717 ;; Parameters:    Size  Location     Type
 10718 ;;		None
 10719 ;; Auto vars:     Size  Location     Type
 10720 ;;		None
 10721 ;; Return value:  Size  Location     Type
 10722 ;;                  1    wreg      void 
 10723 ;; Registers used:
 10724 ;;		None
 10725 ;; Tracked objects:
 10726 ;;		On entry : 0/0
 10727 ;;		On exit  : 0/0
 10728 ;;		Unchanged: 0/0
 10729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10734 ;;Total ram usage:        0 bytes
 10735 ;; Hardware stack levels used:    1
 10736 ;; This function calls:
 10737 ;;		Nothing
 10738 ;; This function is called by:
 10739 ;;		i2_do_I2C_RESET
 10740 ;; This function uses a non-reentrant model
 10741 ;;
 10742                           
 10743                           	psect	text96
 10744  001478                     __ptext96:
 10745                           	opt stack 0
 10746  001478                     i2_i2c1_driver_resetBus:
 10747                           	opt stack 15
 10748                           
 10749                           ;incstack = 0
 10750  001478  0012               	return		;funcret
 10751  00147A                     __end_ofi2_i2c1_driver_resetBus:
 10752                           	opt stack 0
 10753                           tosu	equ	0xFFF
 10754                           tosh	equ	0xFFE
 10755                           tosl	equ	0xFFD
 10756                           pclatu	equ	0xFFB
 10757                           pclath	equ	0xFFA
 10758                           tblptru	equ	0xFF8
 10759                           tblptrh	equ	0xFF7
 10760                           tblptrl	equ	0xFF6
 10761                           tablat	equ	0xFF5
 10762                           prodh	equ	0xFF4
 10763                           prodl	equ	0xFF3
 10764                           intcon	equ	0xFF2
 10765                           postinc0	equ	0xFEE
 10766                           fsr0h	equ	0xFEA
 10767                           fsr0l	equ	0xFE9
 10768                           wreg	equ	0xFE8
 10769                           indf1	equ	0xFE7
 10770                           postdec1	equ	0xFE5
 10771                           plusw1	equ	0xFE3
 10772                           fsr1h	equ	0xFE2
 10773                           fsr1l	equ	0xFE1
 10774                           indf2	equ	0xFDF
 10775                           postinc2	equ	0xFDE
 10776                           postdec2	equ	0xFDD
 10777                           plusw2	equ	0xFDB
 10778                           fsr2h	equ	0xFDA
 10779                           fsr2l	equ	0xFD9
 10780                           status	equ	0xFD8
 10781                           
 10782 ;; *************** function i2_i2c1_driver_startRX *****************
 10783 ;; Defined at:
 10784 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 10785 ;; Parameters:    Size  Location     Type
 10786 ;;		None
 10787 ;; Auto vars:     Size  Location     Type
 10788 ;;		None
 10789 ;; Return value:  Size  Location     Type
 10790 ;;                  1    wreg      void 
 10791 ;; Registers used:
 10792 ;;		None
 10793 ;; Tracked objects:
 10794 ;;		On entry : 0/0
 10795 ;;		On exit  : 0/0
 10796 ;;		Unchanged: 0/0
 10797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10802 ;;Total ram usage:        0 bytes
 10803 ;; Hardware stack levels used:    1
 10804 ;; This function calls:
 10805 ;;		Nothing
 10806 ;; This function is called by:
 10807 ;;		i2_do_I2C_RCEN
 10808 ;; This function uses a non-reentrant model
 10809 ;;
 10810                           
 10811                           	psect	text97
 10812  00145E                     __ptext97:
 10813                           	opt stack 0
 10814  00145E                     i2_i2c1_driver_startRX:
 10815                           	opt stack 15
 10816                           
 10817                           ;i2c1_driver.c: 168: SSP1CON2bits.RCEN = 1;
 10818                           
 10819                           ;incstack = 0
 10820  00145E  8697               	bsf	3991,3,c	;volatile
 10821  001460  0012               	return		;funcret
 10822  001462                     __end_ofi2_i2c1_driver_startRX:
 10823                           	opt stack 0
 10824                           tosu	equ	0xFFF
 10825                           tosh	equ	0xFFE
 10826                           tosl	equ	0xFFD
 10827                           pclatu	equ	0xFFB
 10828                           pclath	equ	0xFFA
 10829                           tblptru	equ	0xFF8
 10830                           tblptrh	equ	0xFF7
 10831                           tblptrl	equ	0xFF6
 10832                           tablat	equ	0xFF5
 10833                           prodh	equ	0xFF4
 10834                           prodl	equ	0xFF3
 10835                           intcon	equ	0xFF2
 10836                           postinc0	equ	0xFEE
 10837                           fsr0h	equ	0xFEA
 10838                           fsr0l	equ	0xFE9
 10839                           wreg	equ	0xFE8
 10840                           indf1	equ	0xFE7
 10841                           postdec1	equ	0xFE5
 10842                           plusw1	equ	0xFE3
 10843                           fsr1h	equ	0xFE2
 10844                           fsr1l	equ	0xFE1
 10845                           indf2	equ	0xFDF
 10846                           postinc2	equ	0xFDE
 10847                           postdec2	equ	0xFDD
 10848                           plusw2	equ	0xFDB
 10849                           fsr2h	equ	0xFDA
 10850                           fsr2l	equ	0xFD9
 10851                           status	equ	0xFD8
 10852                           
 10853 ;; *************** function i2_rdBlkRegCompleteHandler *****************
 10854 ;; Defined at:
 10855 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10856 ;; Parameters:    Size  Location     Type
 10857 ;;  p               2   11[COMRAM] PTR void 
 10858 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10859 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10860 ;; Auto vars:     Size  Location     Type
 10861 ;;		None
 10862 ;; Return value:  Size  Location     Type
 10863 ;;                  1    wreg      enum E97
 10864 ;; Registers used:
 10865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10866 ;; Tracked objects:
 10867 ;;		On entry : 0/0
 10868 ;;		On exit  : 0/0
 10869 ;;		Unchanged: 0/0
 10870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10871 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10874 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10875 ;;Total ram usage:        2 bytes
 10876 ;; Hardware stack levels used:    1
 10877 ;; Hardware stack levels required when called:    2
 10878 ;; This function calls:
 10879 ;;		i2_i2c_setBuffer
 10880 ;;		i2_i2c_setDataCompleteCallback
 10881 ;; This function is called by:
 10882 ;; This function uses a non-reentrant model
 10883 ;;
 10884                           
 10885                           	psect	text98
 10886  000DA2                     __ptext98:
 10887                           	opt stack 0
 10888  000DA2                     i2_rdBlkRegCompleteHandler:
 10889                           	opt stack 13
 10890                           
 10891                           ;i2c_simple_master.c: 136: i2c_setBuffer(((buf_t *)p)->data,((buf_t*)p)->len);
 10892                           
 10893                           ;incstack = 0
 10894  000DA2  EE20 F002          	lfsr	2,2
 10895  000DA6  500C               	movf	i2rdBlkRegCompleteHandler@p,w,c
 10896  000DA8  26D9               	addwf	fsr2l,f,c
 10897  000DAA  500D               	movf	i2rdBlkRegCompleteHandler@p+1,w,c
 10898  000DAC  22DA               	addwfc	fsr2h,f,c
 10899  000DAE  CFDE F001          	movff	postinc2,i2i2c_setBuffer@buffer
 10900  000DB2  CFDD F002          	movff	postdec2,i2i2c_setBuffer@buffer+1
 10901  000DB6  C00C  FFD9         	movff	i2rdBlkRegCompleteHandler@p,fsr2l
 10902  000DBA  C00D  FFDA         	movff	i2rdBlkRegCompleteHandler@p+1,fsr2h
 10903  000DBE  CFDE F003          	movff	postinc2,i2i2c_setBuffer@bufferSize
 10904  000DC2  CFDD F004          	movff	postdec2,i2i2c_setBuffer@bufferSize+1
 10905  000DC6  ECAC  F008         	call	i2_i2c_setBuffer	;wreg free
 10906                           
 10907                           ;i2c_simple_master.c: 137: i2c_setDataCompleteCallback((0),(0));
 10908  000DCA  0E00               	movlw	0
 10909  000DCC  6E07               	movwf	i2i2c_setDataCompleteCallback@cb,c
 10910  000DCE  0E00               	movlw	0
 10911  000DD0  6E08               	movwf	i2i2c_setDataCompleteCallback@cb+1,c
 10912  000DD2  0E00               	movlw	0
 10913  000DD4  6E09               	movwf	i2i2c_setDataCompleteCallback@cb+2,c
 10914  000DD6  0E00               	movlw	0
 10915  000DD8  6E0A               	movwf	i2i2c_setDataCompleteCallback@p,c
 10916  000DDA  0E00               	movlw	0
 10917  000DDC  6E0B               	movwf	i2i2c_setDataCompleteCallback@p+1,c
 10918  000DDE  EC77  F008         	call	i2_i2c_setDataCompleteCallback	;wreg free
 10919                           
 10920                           ;i2c_simple_master.c: 138: return i2c_restart_read;
 10921  000DE2  0E02               	movlw	2
 10922  000DE4  0012               	return	
 10923  000DE6                     __end_ofi2_rdBlkRegCompleteHandler:
 10924                           	opt stack 0
 10925                           tosu	equ	0xFFF
 10926                           tosh	equ	0xFFE
 10927                           tosl	equ	0xFFD
 10928                           pclatu	equ	0xFFB
 10929                           pclath	equ	0xFFA
 10930                           tblptru	equ	0xFF8
 10931                           tblptrh	equ	0xFF7
 10932                           tblptrl	equ	0xFF6
 10933                           tablat	equ	0xFF5
 10934                           prodh	equ	0xFF4
 10935                           prodl	equ	0xFF3
 10936                           intcon	equ	0xFF2
 10937                           postinc0	equ	0xFEE
 10938                           fsr0h	equ	0xFEA
 10939                           fsr0l	equ	0xFE9
 10940                           wreg	equ	0xFE8
 10941                           indf1	equ	0xFE7
 10942                           postdec1	equ	0xFE5
 10943                           plusw1	equ	0xFE3
 10944                           fsr1h	equ	0xFE2
 10945                           fsr1l	equ	0xFE1
 10946                           indf2	equ	0xFDF
 10947                           postinc2	equ	0xFDE
 10948                           postdec2	equ	0xFDD
 10949                           plusw2	equ	0xFDB
 10950                           fsr2h	equ	0xFDA
 10951                           fsr2l	equ	0xFD9
 10952                           status	equ	0xFD8
 10953                           
 10954 ;; *************** function i2_rd2RegCompleteHandler *****************
 10955 ;; Defined at:
 10956 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10957 ;; Parameters:    Size  Location     Type
 10958 ;;  p               2   11[COMRAM] PTR void 
 10959 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10960 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10961 ;; Auto vars:     Size  Location     Type
 10962 ;;		None
 10963 ;; Return value:  Size  Location     Type
 10964 ;;                  1    wreg      enum E97
 10965 ;; Registers used:
 10966 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10967 ;; Tracked objects:
 10968 ;;		On entry : 0/0
 10969 ;;		On exit  : 0/0
 10970 ;;		Unchanged: 0/0
 10971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10972 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10975 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10976 ;;Total ram usage:        2 bytes
 10977 ;; Hardware stack levels used:    1
 10978 ;; Hardware stack levels required when called:    2
 10979 ;; This function calls:
 10980 ;;		i2_i2c_setBuffer
 10981 ;;		i2_i2c_setDataCompleteCallback
 10982 ;; This function is called by:
 10983 ;; This function uses a non-reentrant model
 10984 ;;
 10985                           
 10986                           	psect	text99
 10987  000F94                     __ptext99:
 10988                           	opt stack 0
 10989  000F94                     i2_rd2RegCompleteHandler:
 10990                           	opt stack 13
 10991                           
 10992                           ;i2c_simple_master.c: 89: i2c_setBuffer(p,2);
 10993                           
 10994                           ;incstack = 0
 10995  000F94  C00C  F001         	movff	i2rd2RegCompleteHandler@p,i2i2c_setBuffer@buffer
 10996  000F98  C00D  F002         	movff	i2rd2RegCompleteHandler@p+1,i2i2c_setBuffer@buffer+1
 10997  000F9C  0E00               	movlw	0
 10998  000F9E  6E04               	movwf	i2i2c_setBuffer@bufferSize+1,c
 10999  000FA0  0E02               	movlw	2
 11000  000FA2  6E03               	movwf	i2i2c_setBuffer@bufferSize,c
 11001  000FA4  ECAC  F008         	call	i2_i2c_setBuffer	;wreg free
 11002                           
 11003                           ;i2c_simple_master.c: 90: i2c_setDataCompleteCallback((0),(0));
 11004  000FA8  0E00               	movlw	0
 11005  000FAA  6E07               	movwf	i2i2c_setDataCompleteCallback@cb,c
 11006  000FAC  0E00               	movlw	0
 11007  000FAE  6E08               	movwf	i2i2c_setDataCompleteCallback@cb+1,c
 11008  000FB0  0E00               	movlw	0
 11009  000FB2  6E09               	movwf	i2i2c_setDataCompleteCallback@cb+2,c
 11010  000FB4  0E00               	movlw	0
 11011  000FB6  6E0A               	movwf	i2i2c_setDataCompleteCallback@p,c
 11012  000FB8  0E00               	movlw	0
 11013  000FBA  6E0B               	movwf	i2i2c_setDataCompleteCallback@p+1,c
 11014  000FBC  EC77  F008         	call	i2_i2c_setDataCompleteCallback	;wreg free
 11015                           
 11016                           ;i2c_simple_master.c: 91: return i2c_restart_read;
 11017  000FC0  0E02               	movlw	2
 11018  000FC2  0012               	return	
 11019  000FC4                     __end_ofi2_rd2RegCompleteHandler:
 11020                           	opt stack 0
 11021                           tosu	equ	0xFFF
 11022                           tosh	equ	0xFFE
 11023                           tosl	equ	0xFFD
 11024                           pclatu	equ	0xFFB
 11025                           pclath	equ	0xFFA
 11026                           tblptru	equ	0xFF8
 11027                           tblptrh	equ	0xFF7
 11028                           tblptrl	equ	0xFF6
 11029                           tablat	equ	0xFF5
 11030                           prodh	equ	0xFF4
 11031                           prodl	equ	0xFF3
 11032                           intcon	equ	0xFF2
 11033                           postinc0	equ	0xFEE
 11034                           fsr0h	equ	0xFEA
 11035                           fsr0l	equ	0xFE9
 11036                           wreg	equ	0xFE8
 11037                           indf1	equ	0xFE7
 11038                           postdec1	equ	0xFE5
 11039                           plusw1	equ	0xFE3
 11040                           fsr1h	equ	0xFE2
 11041                           fsr1l	equ	0xFE1
 11042                           indf2	equ	0xFDF
 11043                           postinc2	equ	0xFDE
 11044                           postdec2	equ	0xFDD
 11045                           plusw2	equ	0xFDB
 11046                           fsr2h	equ	0xFDA
 11047                           fsr2l	equ	0xFD9
 11048                           status	equ	0xFD8
 11049                           
 11050 ;; *************** function i2_rd1RegCompleteHandler *****************
 11051 ;; Defined at:
 11052 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 11053 ;; Parameters:    Size  Location     Type
 11054 ;;  p               2   11[COMRAM] PTR void 
 11055 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11056 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11057 ;; Auto vars:     Size  Location     Type
 11058 ;;		None
 11059 ;; Return value:  Size  Location     Type
 11060 ;;                  1    wreg      enum E97
 11061 ;; Registers used:
 11062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11063 ;; Tracked objects:
 11064 ;;		On entry : 0/0
 11065 ;;		On exit  : 0/0
 11066 ;;		Unchanged: 0/0
 11067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11068 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11071 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11072 ;;Total ram usage:        2 bytes
 11073 ;; Hardware stack levels used:    1
 11074 ;; Hardware stack levels required when called:    2
 11075 ;; This function calls:
 11076 ;;		i2_i2c_setBuffer
 11077 ;;		i2_i2c_setDataCompleteCallback
 11078 ;; This function is called by:
 11079 ;; This function uses a non-reentrant model
 11080 ;;
 11081                           
 11082                           	psect	text100
 11083  000FC4                     __ptext100:
 11084                           	opt stack 0
 11085  000FC4                     i2_rd1RegCompleteHandler:
 11086                           	opt stack 13
 11087                           
 11088                           ;i2c_simple_master.c: 60: i2c_setBuffer(p,1);
 11089                           
 11090                           ;incstack = 0
 11091  000FC4  C00C  F001         	movff	i2rd1RegCompleteHandler@p,i2i2c_setBuffer@buffer
 11092  000FC8  C00D  F002         	movff	i2rd1RegCompleteHandler@p+1,i2i2c_setBuffer@buffer+1
 11093  000FCC  0E00               	movlw	0
 11094  000FCE  6E04               	movwf	i2i2c_setBuffer@bufferSize+1,c
 11095  000FD0  0E01               	movlw	1
 11096  000FD2  6E03               	movwf	i2i2c_setBuffer@bufferSize,c
 11097  000FD4  ECAC  F008         	call	i2_i2c_setBuffer	;wreg free
 11098                           
 11099                           ;i2c_simple_master.c: 61: i2c_setDataCompleteCallback((0),(0));
 11100  000FD8  0E00               	movlw	0
 11101  000FDA  6E07               	movwf	i2i2c_setDataCompleteCallback@cb,c
 11102  000FDC  0E00               	movlw	0
 11103  000FDE  6E08               	movwf	i2i2c_setDataCompleteCallback@cb+1,c
 11104  000FE0  0E00               	movlw	0
 11105  000FE2  6E09               	movwf	i2i2c_setDataCompleteCallback@cb+2,c
 11106  000FE4  0E00               	movlw	0
 11107  000FE6  6E0A               	movwf	i2i2c_setDataCompleteCallback@p,c
 11108  000FE8  0E00               	movlw	0
 11109  000FEA  6E0B               	movwf	i2i2c_setDataCompleteCallback@p+1,c
 11110  000FEC  EC77  F008         	call	i2_i2c_setDataCompleteCallback	;wreg free
 11111                           
 11112                           ;i2c_simple_master.c: 62: return i2c_restart_read;
 11113  000FF0  0E02               	movlw	2
 11114  000FF2  0012               	return	
 11115  000FF4                     __end_ofi2_rd1RegCompleteHandler:
 11116                           	opt stack 0
 11117                           tosu	equ	0xFFF
 11118                           tosh	equ	0xFFE
 11119                           tosl	equ	0xFFD
 11120                           pclatu	equ	0xFFB
 11121                           pclath	equ	0xFFA
 11122                           tblptru	equ	0xFF8
 11123                           tblptrh	equ	0xFF7
 11124                           tblptrl	equ	0xFF6
 11125                           tablat	equ	0xFF5
 11126                           prodh	equ	0xFF4
 11127                           prodl	equ	0xFF3
 11128                           intcon	equ	0xFF2
 11129                           postinc0	equ	0xFEE
 11130                           fsr0h	equ	0xFEA
 11131                           fsr0l	equ	0xFE9
 11132                           wreg	equ	0xFE8
 11133                           indf1	equ	0xFE7
 11134                           postdec1	equ	0xFE5
 11135                           plusw1	equ	0xFE3
 11136                           fsr1h	equ	0xFE2
 11137                           fsr1l	equ	0xFE1
 11138                           indf2	equ	0xFDF
 11139                           postinc2	equ	0xFDE
 11140                           postdec2	equ	0xFDD
 11141                           plusw2	equ	0xFDB
 11142                           fsr2h	equ	0xFDA
 11143                           fsr2l	equ	0xFD9
 11144                           status	equ	0xFD8
 11145                           
 11146 ;; *************** function i2_wr1RegCompleteHandler *****************
 11147 ;; Defined at:
 11148 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 11149 ;; Parameters:    Size  Location     Type
 11150 ;;  p               2   11[COMRAM] PTR void 
 11151 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11152 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11153 ;; Auto vars:     Size  Location     Type
 11154 ;;		None
 11155 ;; Return value:  Size  Location     Type
 11156 ;;                  1    wreg      enum E97
 11157 ;; Registers used:
 11158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11159 ;; Tracked objects:
 11160 ;;		On entry : 0/0
 11161 ;;		On exit  : 0/0
 11162 ;;		Unchanged: 0/0
 11163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11164 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11167 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11168 ;;Total ram usage:        2 bytes
 11169 ;; Hardware stack levels used:    1
 11170 ;; Hardware stack levels required when called:    2
 11171 ;; This function calls:
 11172 ;;		i2_i2c_setBuffer
 11173 ;;		i2_i2c_setDataCompleteCallback
 11174 ;; This function is called by:
 11175 ;; This function uses a non-reentrant model
 11176 ;;
 11177                           
 11178                           	psect	text101
 11179  000FF4                     __ptext101:
 11180                           	opt stack 0
 11181  000FF4                     i2_wr1RegCompleteHandler:
 11182                           	opt stack 13
 11183                           
 11184                           ;i2c_simple_master.c: 33: i2c_setBuffer(p,1);
 11185                           
 11186                           ;incstack = 0
 11187  000FF4  C00C  F001         	movff	i2wr1RegCompleteHandler@p,i2i2c_setBuffer@buffer
 11188  000FF8  C00D  F002         	movff	i2wr1RegCompleteHandler@p+1,i2i2c_setBuffer@buffer+1
 11189  000FFC  0E00               	movlw	0
 11190  000FFE  6E04               	movwf	i2i2c_setBuffer@bufferSize+1,c
 11191  001000  0E01               	movlw	1
 11192  001002  6E03               	movwf	i2i2c_setBuffer@bufferSize,c
 11193  001004  ECAC  F008         	call	i2_i2c_setBuffer	;wreg free
 11194                           
 11195                           ;i2c_simple_master.c: 34: i2c_setDataCompleteCallback((0),(0));
 11196  001008  0E00               	movlw	0
 11197  00100A  6E07               	movwf	i2i2c_setDataCompleteCallback@cb,c
 11198  00100C  0E00               	movlw	0
 11199  00100E  6E08               	movwf	i2i2c_setDataCompleteCallback@cb+1,c
 11200  001010  0E00               	movlw	0
 11201  001012  6E09               	movwf	i2i2c_setDataCompleteCallback@cb+2,c
 11202  001014  0E00               	movlw	0
 11203  001016  6E0A               	movwf	i2i2c_setDataCompleteCallback@p,c
 11204  001018  0E00               	movlw	0
 11205  00101A  6E0B               	movwf	i2i2c_setDataCompleteCallback@p+1,c
 11206  00101C  EC77  F008         	call	i2_i2c_setDataCompleteCallback	;wreg free
 11207                           
 11208                           ;i2c_simple_master.c: 35: return i2c_continue;
 11209  001020  0E04               	movlw	4
 11210  001022  0012               	return	
 11211  001024                     __end_ofi2_wr1RegCompleteHandler:
 11212                           	opt stack 0
 11213                           tosu	equ	0xFFF
 11214                           tosh	equ	0xFFE
 11215                           tosl	equ	0xFFD
 11216                           pclatu	equ	0xFFB
 11217                           pclath	equ	0xFFA
 11218                           tblptru	equ	0xFF8
 11219                           tblptrh	equ	0xFF7
 11220                           tblptrl	equ	0xFF6
 11221                           tablat	equ	0xFF5
 11222                           prodh	equ	0xFF4
 11223                           prodl	equ	0xFF3
 11224                           intcon	equ	0xFF2
 11225                           postinc0	equ	0xFEE
 11226                           fsr0h	equ	0xFEA
 11227                           fsr0l	equ	0xFE9
 11228                           wreg	equ	0xFE8
 11229                           indf1	equ	0xFE7
 11230                           postdec1	equ	0xFE5
 11231                           plusw1	equ	0xFE3
 11232                           fsr1h	equ	0xFE2
 11233                           fsr1l	equ	0xFE1
 11234                           indf2	equ	0xFDF
 11235                           postinc2	equ	0xFDE
 11236                           postdec2	equ	0xFDD
 11237                           plusw2	equ	0xFDB
 11238                           fsr2h	equ	0xFDA
 11239                           fsr2l	equ	0xFD9
 11240                           status	equ	0xFD8
 11241                           
 11242 ;; *************** function i2_i2c_restartWrite *****************
 11243 ;; Defined at:
 11244 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
 11245 ;; Parameters:    Size  Location     Type
 11246 ;;  p               2   11[COMRAM] PTR void 
 11247 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11248 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11249 ;; Auto vars:     Size  Location     Type
 11250 ;;		None
 11251 ;; Return value:  Size  Location     Type
 11252 ;;                  1    wreg      enum E96
 11253 ;; Registers used:
 11254 ;;		wreg
 11255 ;; Tracked objects:
 11256 ;;		On entry : 0/0
 11257 ;;		On exit  : 0/0
 11258 ;;		Unchanged: 0/0
 11259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11260 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11263 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11264 ;;Total ram usage:        2 bytes
 11265 ;; Hardware stack levels used:    1
 11266 ;; This function calls:
 11267 ;;		Nothing
 11268 ;; This function is called by:
 11269 ;; This function uses a non-reentrant model
 11270 ;;
 11271                           
 11272                           	psect	text102
 11273  001462                     __ptext102:
 11274                           	opt stack 0
 11275  001462                     i2_i2c_restartWrite:
 11276                           	opt stack 15
 11277                           
 11278                           ;i2c_types.c: 37: return i2c_restart_write;
 11279                           
 11280                           ;incstack = 0
 11281  001462  0E03               	movlw	3
 11282  001464  0012               	return	
 11283  001466                     __end_ofi2_i2c_restartWrite:
 11284                           	opt stack 0
 11285                           tosu	equ	0xFFF
 11286                           tosh	equ	0xFFE
 11287                           tosl	equ	0xFFD
 11288                           pclatu	equ	0xFFB
 11289                           pclath	equ	0xFFA
 11290                           tblptru	equ	0xFF8
 11291                           tblptrh	equ	0xFF7
 11292                           tblptrl	equ	0xFF6
 11293                           tablat	equ	0xFF5
 11294                           prodh	equ	0xFF4
 11295                           prodl	equ	0xFF3
 11296                           intcon	equ	0xFF2
 11297                           postinc0	equ	0xFEE
 11298                           fsr0h	equ	0xFEA
 11299                           fsr0l	equ	0xFE9
 11300                           wreg	equ	0xFE8
 11301                           indf1	equ	0xFE7
 11302                           postdec1	equ	0xFE5
 11303                           plusw1	equ	0xFE3
 11304                           fsr1h	equ	0xFE2
 11305                           fsr1l	equ	0xFE1
 11306                           indf2	equ	0xFDF
 11307                           postinc2	equ	0xFDE
 11308                           postdec2	equ	0xFDD
 11309                           plusw2	equ	0xFDB
 11310                           fsr2h	equ	0xFDA
 11311                           fsr2l	equ	0xFD9
 11312                           status	equ	0xFD8
 11313                           
 11314 ;; *************** function i2_returnReset *****************
 11315 ;; Defined at:
 11316 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 11317 ;; Parameters:    Size  Location     Type
 11318 ;;  p               2   11[COMRAM] PTR void 
 11319 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11320 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11321 ;; Auto vars:     Size  Location     Type
 11322 ;;		None
 11323 ;; Return value:  Size  Location     Type
 11324 ;;                  1    wreg      enum E11790
 11325 ;; Registers used:
 11326 ;;		wreg
 11327 ;; Tracked objects:
 11328 ;;		On entry : 0/0
 11329 ;;		On exit  : 0/0
 11330 ;;		Unchanged: 0/0
 11331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11332 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11335 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11336 ;;Total ram usage:        2 bytes
 11337 ;; Hardware stack levels used:    1
 11338 ;; This function calls:
 11339 ;;		Nothing
 11340 ;; This function is called by:
 11341 ;; This function uses a non-reentrant model
 11342 ;;
 11343                           
 11344                           	psect	text103
 11345  001466                     __ptext103:
 11346                           	opt stack 0
 11347  001466                     i2_returnReset:
 11348                           	opt stack 15
 11349                           
 11350                           ;i2c_master.c: 450: return i2c_reset_link;
 11351                           
 11352                           ;incstack = 0
 11353  001466  0E05               	movlw	5
 11354  001468  0012               	return	
 11355  00146A                     __end_ofi2_returnReset:
 11356                           	opt stack 0
 11357                           tosu	equ	0xFFF
 11358                           tosh	equ	0xFFE
 11359                           tosl	equ	0xFFD
 11360                           pclatu	equ	0xFFB
 11361                           pclath	equ	0xFFA
 11362                           tblptru	equ	0xFF8
 11363                           tblptrh	equ	0xFF7
 11364                           tblptrl	equ	0xFF6
 11365                           tablat	equ	0xFF5
 11366                           prodh	equ	0xFF4
 11367                           prodl	equ	0xFF3
 11368                           intcon	equ	0xFF2
 11369                           postinc0	equ	0xFEE
 11370                           fsr0h	equ	0xFEA
 11371                           fsr0l	equ	0xFE9
 11372                           wreg	equ	0xFE8
 11373                           indf1	equ	0xFE7
 11374                           postdec1	equ	0xFE5
 11375                           plusw1	equ	0xFE3
 11376                           fsr1h	equ	0xFE2
 11377                           fsr1l	equ	0xFE1
 11378                           indf2	equ	0xFDF
 11379                           postinc2	equ	0xFDE
 11380                           postdec2	equ	0xFDD
 11381                           plusw2	equ	0xFDB
 11382                           fsr2h	equ	0xFDA
 11383                           fsr2l	equ	0xFD9
 11384                           status	equ	0xFD8
 11385                           
 11386 ;; *************** function i2_returnStop *****************
 11387 ;; Defined at:
 11388 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 11389 ;; Parameters:    Size  Location     Type
 11390 ;;  p               2   11[COMRAM] PTR void 
 11391 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11392 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11393 ;; Auto vars:     Size  Location     Type
 11394 ;;		None
 11395 ;; Return value:  Size  Location     Type
 11396 ;;                  1    wreg      enum E11790
 11397 ;; Registers used:
 11398 ;;		wreg
 11399 ;; Tracked objects:
 11400 ;;		On entry : 0/0
 11401 ;;		On exit  : 0/0
 11402 ;;		Unchanged: 0/0
 11403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11404 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11407 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11408 ;;Total ram usage:        2 bytes
 11409 ;; Hardware stack levels used:    1
 11410 ;; This function calls:
 11411 ;;		Nothing
 11412 ;; This function is called by:
 11413 ;;		i2_setCallBack
 11414 ;;		_do_I2C_DO_ADDRESS_NACK
 11415 ;;		_do_I2C_TX
 11416 ;;		_do_I2C_RX
 11417 ;;		_do_I2C_TX_EMPTY
 11418 ;;		i2_do_I2C_DO_ADDRESS_NACK
 11419 ;;		i2_do_I2C_TX
 11420 ;;		i2_do_I2C_RX
 11421 ;;		i2_do_I2C_TX_EMPTY
 11422 ;; This function uses a non-reentrant model
 11423 ;;
 11424                           
 11425                           	psect	text104
 11426  00146A                     __ptext104:
 11427                           	opt stack 0
 11428  00146A                     i2_returnStop:
 11429                           	opt stack 15
 11430                           
 11431                           ;i2c_master.c: 445: return i2c_stop;
 11432                           
 11433                           ;incstack = 0
 11434  00146A  0E01               	movlw	1
 11435  00146C  0012               	return	
 11436  00146E                     __end_ofi2_returnStop:
 11437                           	opt stack 0
 11438                           tosu	equ	0xFFF
 11439                           tosh	equ	0xFFE
 11440                           tosl	equ	0xFFD
 11441                           pclatu	equ	0xFFB
 11442                           pclath	equ	0xFFA
 11443                           tblptru	equ	0xFF8
 11444                           tblptrh	equ	0xFF7
 11445                           tblptrl	equ	0xFF6
 11446                           tablat	equ	0xFF5
 11447                           prodh	equ	0xFF4
 11448                           prodl	equ	0xFF3
 11449                           intcon	equ	0xFF2
 11450                           postinc0	equ	0xFEE
 11451                           fsr0h	equ	0xFEA
 11452                           fsr0l	equ	0xFE9
 11453                           wreg	equ	0xFE8
 11454                           indf1	equ	0xFE7
 11455                           postdec1	equ	0xFE5
 11456                           plusw1	equ	0xFE3
 11457                           fsr1h	equ	0xFE2
 11458                           fsr1l	equ	0xFE1
 11459                           indf2	equ	0xFDF
 11460                           postinc2	equ	0xFDE
 11461                           postdec2	equ	0xFDD
 11462                           plusw2	equ	0xFDB
 11463                           fsr2h	equ	0xFDA
 11464                           fsr2l	equ	0xFD9
 11465                           status	equ	0xFD8
 11466                           
 11467 ;; *************** function i2_wr2RegCompleteHandler *****************
 11468 ;; Defined at:
 11469 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 11470 ;; Parameters:    Size  Location     Type
 11471 ;;  p               2   11[COMRAM] PTR void 
 11472 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11473 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11474 ;; Auto vars:     Size  Location     Type
 11475 ;;		None
 11476 ;; Return value:  Size  Location     Type
 11477 ;;                  1    wreg      enum E97
 11478 ;; Registers used:
 11479 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11480 ;; Tracked objects:
 11481 ;;		On entry : 0/0
 11482 ;;		On exit  : 0/0
 11483 ;;		Unchanged: 0/0
 11484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11485 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11488 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11489 ;;Total ram usage:        2 bytes
 11490 ;; Hardware stack levels used:    1
 11491 ;; Hardware stack levels required when called:    2
 11492 ;; This function calls:
 11493 ;;		i2_i2c_setBuffer
 11494 ;;		i2_i2c_setDataCompleteCallback
 11495 ;; This function is called by:
 11496 ;; This function uses a non-reentrant model
 11497 ;;
 11498                           
 11499                           	psect	text105
 11500  001024                     __ptext105:
 11501                           	opt stack 0
 11502  001024                     i2_wr2RegCompleteHandler:
 11503                           	opt stack 13
 11504                           
 11505                           ;i2c_simple_master.c: 112: i2c_setBuffer(p,2);
 11506                           
 11507                           ;incstack = 0
 11508  001024  C00C  F001         	movff	i2wr2RegCompleteHandler@p,i2i2c_setBuffer@buffer
 11509  001028  C00D  F002         	movff	i2wr2RegCompleteHandler@p+1,i2i2c_setBuffer@buffer+1
 11510  00102C  0E00               	movlw	0
 11511  00102E  6E04               	movwf	i2i2c_setBuffer@bufferSize+1,c
 11512  001030  0E02               	movlw	2
 11513  001032  6E03               	movwf	i2i2c_setBuffer@bufferSize,c
 11514  001034  ECAC  F008         	call	i2_i2c_setBuffer	;wreg free
 11515                           
 11516                           ;i2c_simple_master.c: 113: i2c_setDataCompleteCallback((0),(0));
 11517  001038  0E00               	movlw	0
 11518  00103A  6E07               	movwf	i2i2c_setDataCompleteCallback@cb,c
 11519  00103C  0E00               	movlw	0
 11520  00103E  6E08               	movwf	i2i2c_setDataCompleteCallback@cb+1,c
 11521  001040  0E00               	movlw	0
 11522  001042  6E09               	movwf	i2i2c_setDataCompleteCallback@cb+2,c
 11523  001044  0E00               	movlw	0
 11524  001046  6E0A               	movwf	i2i2c_setDataCompleteCallback@p,c
 11525  001048  0E00               	movlw	0
 11526  00104A  6E0B               	movwf	i2i2c_setDataCompleteCallback@p+1,c
 11527  00104C  EC77  F008         	call	i2_i2c_setDataCompleteCallback	;wreg free
 11528                           
 11529                           ;i2c_simple_master.c: 114: return i2c_continue;
 11530  001050  0E04               	movlw	4
 11531  001052  0012               	return	
 11532  001054                     __end_ofi2_wr2RegCompleteHandler:
 11533                           	opt stack 0
 11534                           tosu	equ	0xFFF
 11535                           tosh	equ	0xFFE
 11536                           tosl	equ	0xFFD
 11537                           pclatu	equ	0xFFB
 11538                           pclath	equ	0xFFA
 11539                           tblptru	equ	0xFF8
 11540                           tblptrh	equ	0xFF7
 11541                           tblptrl	equ	0xFF6
 11542                           tablat	equ	0xFF5
 11543                           prodh	equ	0xFF4
 11544                           prodl	equ	0xFF3
 11545                           intcon	equ	0xFF2
 11546                           postinc0	equ	0xFEE
 11547                           fsr0h	equ	0xFEA
 11548                           fsr0l	equ	0xFE9
 11549                           wreg	equ	0xFE8
 11550                           indf1	equ	0xFE7
 11551                           postdec1	equ	0xFE5
 11552                           plusw1	equ	0xFE3
 11553                           fsr1h	equ	0xFE2
 11554                           fsr1l	equ	0xFE1
 11555                           indf2	equ	0xFDF
 11556                           postinc2	equ	0xFDE
 11557                           postdec2	equ	0xFDD
 11558                           plusw2	equ	0xFDB
 11559                           fsr2h	equ	0xFDA
 11560                           fsr2l	equ	0xFD9
 11561                           status	equ	0xFD8
 11562                           
 11563 ;; *************** function i2_i2c_setDataCompleteCallback *****************
 11564 ;; Defined at:
 11565 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
 11566 ;; Parameters:    Size  Location     Type
 11567 ;;  cb              3    6[COMRAM] PTR FTN(PTR void ,)enum 
 11568 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 11569 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
 11570 ;;  p               2    9[COMRAM] PTR void 
 11571 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11572 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11573 ;; Auto vars:     Size  Location     Type
 11574 ;;		None
 11575 ;; Return value:  Size  Location     Type
 11576 ;;                  1    wreg      void 
 11577 ;; Registers used:
 11578 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11579 ;; Tracked objects:
 11580 ;;		On entry : 0/0
 11581 ;;		On exit  : 0/0
 11582 ;;		Unchanged: 0/0
 11583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11584 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11587 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11588 ;;Total ram usage:        5 bytes
 11589 ;; Hardware stack levels used:    1
 11590 ;; Hardware stack levels required when called:    1
 11591 ;; This function calls:
 11592 ;;		i2_setCallBack
 11593 ;; This function is called by:
 11594 ;;		i2_wr1RegCompleteHandler
 11595 ;;		i2_rd1RegCompleteHandler
 11596 ;;		i2_rd2RegCompleteHandler
 11597 ;;		i2_wr2RegCompleteHandler
 11598 ;;		i2_rdBlkRegCompleteHandler
 11599 ;; This function uses a non-reentrant model
 11600 ;;
 11601                           
 11602                           	psect	text106
 11603  0010EE                     __ptext106:
 11604                           	opt stack 0
 11605  0010EE                     i2_i2c_setDataCompleteCallback:
 11606                           	opt stack 13
 11607                           
 11608                           ;i2c_master.c: 91: setCallBack(i2c_dataComplete,cb,p);
 11609                           
 11610                           ;incstack = 0
 11611  0010EE  C007  F001         	movff	i2i2c_setDataCompleteCallback@cb,i2setCallBack@cb
 11612  0010F2  C008  F002         	movff	i2i2c_setDataCompleteCallback@cb+1,i2setCallBack@cb+1
 11613  0010F6  C009  F003         	movff	i2i2c_setDataCompleteCallback@cb+2,i2setCallBack@cb+2
 11614  0010FA  C00A  F004         	movff	i2i2c_setDataCompleteCallback@p,i2setCallBack@p
 11615  0010FE  C00B  F005         	movff	i2i2c_setDataCompleteCallback@p+1,i2setCallBack@p+1
 11616  001102  0E00               	movlw	0
 11617  001104  EC20  F005         	call	i2_setCallBack
 11618  001108  0012               	return		;funcret
 11619  00110A                     __end_ofi2_i2c_setDataCompleteCallback:
 11620                           	opt stack 0
 11621                           tosu	equ	0xFFF
 11622                           tosh	equ	0xFFE
 11623                           tosl	equ	0xFFD
 11624                           pclatu	equ	0xFFB
 11625                           pclath	equ	0xFFA
 11626                           tblptru	equ	0xFF8
 11627                           tblptrh	equ	0xFF7
 11628                           tblptrl	equ	0xFF6
 11629                           tablat	equ	0xFF5
 11630                           prodh	equ	0xFF4
 11631                           prodl	equ	0xFF3
 11632                           intcon	equ	0xFF2
 11633                           postinc0	equ	0xFEE
 11634                           fsr0h	equ	0xFEA
 11635                           fsr0l	equ	0xFE9
 11636                           wreg	equ	0xFE8
 11637                           indf1	equ	0xFE7
 11638                           postdec1	equ	0xFE5
 11639                           plusw1	equ	0xFE3
 11640                           fsr1h	equ	0xFE2
 11641                           fsr1l	equ	0xFE1
 11642                           indf2	equ	0xFDF
 11643                           postinc2	equ	0xFDE
 11644                           postdec2	equ	0xFDD
 11645                           plusw2	equ	0xFDB
 11646                           fsr2h	equ	0xFDA
 11647                           fsr2l	equ	0xFD9
 11648                           status	equ	0xFD8
 11649                           
 11650 ;; *************** function i2_setCallBack *****************
 11651 ;; Defined at:
 11652 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
 11653 ;; Parameters:    Size  Location     Type
 11654 ;;  idx             1    wreg     enum E11974
 11655 ;;  cb              3    0[COMRAM] PTR FTN(PTR void ,)enum 
 11656 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 11657 ;;		 -> wr1RegCompleteHandler(1), i2c_restartWrite(1), Absolute function(1), 
 11658 ;;  p               2    3[COMRAM] PTR void 
 11659 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 11660 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11661 ;; Auto vars:     Size  Location     Type
 11662 ;;  idx             1    5[COMRAM] enum E11974
 11663 ;; Return value:  Size  Location     Type
 11664 ;;                  1    wreg      void 
 11665 ;; Registers used:
 11666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11667 ;; Tracked objects:
 11668 ;;		On entry : 0/0
 11669 ;;		On exit  : 0/0
 11670 ;;		Unchanged: 0/0
 11671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11672 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11673 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11675 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11676 ;;Total ram usage:        6 bytes
 11677 ;; Hardware stack levels used:    1
 11678 ;; This function calls:
 11679 ;;		Nothing
 11680 ;; This function is called by:
 11681 ;;		i2_i2c_setDataCompleteCallback
 11682 ;; This function uses a non-reentrant model
 11683 ;;
 11684                           
 11685                           	psect	text107
 11686  000A40                     __ptext107:
 11687                           	opt stack 0
 11688  000A40                     i2_setCallBack:
 11689                           	opt stack 13
 11690                           
 11691                           ;incstack = 0
 11692                           ;i2setCallBack@idx stored from wreg
 11693  000A40  6E06               	movwf	i2setCallBack@idx,c
 11694                           
 11695                           ;i2c_master.c: 455: if(cb)
 11696  000A42  5001               	movf	i2setCallBack@cb,w,c
 11697  000A44  1002               	iorwf	i2setCallBack@cb+1,w,c
 11698  000A46  1003               	iorwf	i2setCallBack@cb+2,w,c
 11699  000A48  B4D8               	btfsc	status,2,c
 11700  000A4A  D01B               	goto	i2l496
 11701                           
 11702                           ;i2c_master.c: 456: {
 11703                           ;i2c_master.c: 457: i2c_status.callbackTable[idx] = cb;
 11704  000A4C  5006               	movf	i2setCallBack@idx,w,c
 11705  000A4E  0D03               	mullw	3
 11706  000A50  0E6C               	movlw	low (_i2c_status+12)
 11707  000A52  24F3               	addwf	prodl,w,c
 11708  000A54  6ED9               	movwf	fsr2l,c
 11709  000A56  0E00               	movlw	high (_i2c_status+12)
 11710  000A58  20F4               	addwfc	prodh,w,c
 11711  000A5A  6EDA               	movwf	fsr2h,c
 11712  000A5C  C001  FFDE         	movff	i2setCallBack@cb,postinc2
 11713  000A60  C002  FFDE         	movff	i2setCallBack@cb+1,postinc2
 11714  000A64  C003  FFDE         	movff	i2setCallBack@cb+2,postinc2
 11715                           
 11716                           ;i2c_master.c: 458: i2c_status.callbackPayload[idx] = p;
 11717  000A68  5006               	movf	i2setCallBack@idx,w,c
 11718  000A6A  0D02               	mullw	2
 11719  000A6C  0E7E               	movlw	low (_i2c_status+30)
 11720  000A6E  24F3               	addwf	prodl,w,c
 11721  000A70  6ED9               	movwf	fsr2l,c
 11722  000A72  0E00               	movlw	high (_i2c_status+30)
 11723  000A74  20F4               	addwfc	prodh,w,c
 11724  000A76  6EDA               	movwf	fsr2h,c
 11725  000A78  C004  FFDE         	movff	i2setCallBack@p,postinc2
 11726  000A7C  C005  FFDD         	movff	i2setCallBack@p+1,postdec2
 11727                           
 11728                           ;i2c_master.c: 459: }
 11729  000A80  0012               	return	
 11730  000A82                     i2l496:
 11731                           
 11732                           ;i2c_master.c: 460: else
 11733                           ;i2c_master.c: 461: {
 11734                           ;i2c_master.c: 462: i2c_status.callbackTable[idx] = returnStop;
 11735  000A82  5006               	movf	i2setCallBack@idx,w,c
 11736  000A84  0D03               	mullw	3
 11737  000A86  0E6C               	movlw	low (_i2c_status+12)
 11738  000A88  24F3               	addwf	prodl,w,c
 11739  000A8A  6ED9               	movwf	fsr2l,c
 11740  000A8C  0E00               	movlw	high (_i2c_status+12)
 11741  000A8E  20F4               	addwfc	prodh,w,c
 11742  000A90  6EDA               	movwf	fsr2h,c
 11743  000A92  0E6A               	movlw	low i2_returnStop
 11744  000A94  6EDE               	movwf	postinc2,c
 11745  000A96  0E14               	movlw	high i2_returnStop
 11746  000A98  6EDE               	movwf	postinc2,c
 11747  000A9A  0E00               	movlw	low (i2_returnStop shr (0+16))
 11748  000A9C  6EDE               	movwf	postinc2,c
 11749                           
 11750                           ;i2c_master.c: 463: i2c_status.callbackPayload[idx] = (0);
 11751  000A9E  5006               	movf	i2setCallBack@idx,w,c
 11752  000AA0  0D02               	mullw	2
 11753  000AA2  0E7E               	movlw	low (_i2c_status+30)
 11754  000AA4  24F3               	addwf	prodl,w,c
 11755  000AA6  6ED9               	movwf	fsr2l,c
 11756  000AA8  0E00               	movlw	high (_i2c_status+30)
 11757  000AAA  20F4               	addwfc	prodh,w,c
 11758  000AAC  6EDA               	movwf	fsr2h,c
 11759  000AAE  0E00               	movlw	0
 11760  000AB0  6EDE               	movwf	postinc2,c
 11761  000AB2  0E00               	movlw	0
 11762  000AB4  6EDD               	movwf	postdec2,c
 11763  000AB6  0012               	return	
 11764  000AB8                     __end_ofi2_setCallBack:
 11765                           	opt stack 0
 11766                           tosu	equ	0xFFF
 11767                           tosh	equ	0xFFE
 11768                           tosl	equ	0xFFD
 11769                           pclatu	equ	0xFFB
 11770                           pclath	equ	0xFFA
 11771                           tblptru	equ	0xFF8
 11772                           tblptrh	equ	0xFF7
 11773                           tblptrl	equ	0xFF6
 11774                           tablat	equ	0xFF5
 11775                           prodh	equ	0xFF4
 11776                           prodl	equ	0xFF3
 11777                           intcon	equ	0xFF2
 11778                           postinc0	equ	0xFEE
 11779                           fsr0h	equ	0xFEA
 11780                           fsr0l	equ	0xFE9
 11781                           wreg	equ	0xFE8
 11782                           indf1	equ	0xFE7
 11783                           postdec1	equ	0xFE5
 11784                           plusw1	equ	0xFE3
 11785                           fsr1h	equ	0xFE2
 11786                           fsr1l	equ	0xFE1
 11787                           indf2	equ	0xFDF
 11788                           postinc2	equ	0xFDE
 11789                           postdec2	equ	0xFDD
 11790                           plusw2	equ	0xFDB
 11791                           fsr2h	equ	0xFDA
 11792                           fsr2l	equ	0xFD9
 11793                           status	equ	0xFD8
 11794                           
 11795 ;; *************** function i2_i2c_setBuffer *****************
 11796 ;; Defined at:
 11797 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
 11798 ;; Parameters:    Size  Location     Type
 11799 ;;  buffer          2    0[COMRAM] PTR void 
 11800 ;;		 -> main@receivedScore(7), readIoExpander@rec(1), readIoExpander@data(2), i2c_readDataBlock@reg(1), 
 11801 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@reg
      +(1), 
 11802 ;;		 -> i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegister@d2(1), i2c_write1ByteRegist
      +er@reg(1), 
 11803 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 11804 ;;  bufferSize      2    2[COMRAM] unsigned int 
 11805 ;; Auto vars:     Size  Location     Type
 11806 ;;		None
 11807 ;; Return value:  Size  Location     Type
 11808 ;;                  1    wreg      void 
 11809 ;; Registers used:
 11810 ;;		wreg, status,2, status,0
 11811 ;; Tracked objects:
 11812 ;;		On entry : 0/0
 11813 ;;		On exit  : 0/0
 11814 ;;		Unchanged: 0/0
 11815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11816 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11819 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11820 ;;Total ram usage:        4 bytes
 11821 ;; Hardware stack levels used:    1
 11822 ;; This function calls:
 11823 ;;		Nothing
 11824 ;; This function is called by:
 11825 ;;		i2_wr1RegCompleteHandler
 11826 ;;		i2_rd1RegCompleteHandler
 11827 ;;		i2_rd2RegCompleteHandler
 11828 ;;		i2_wr2RegCompleteHandler
 11829 ;;		i2_rdBlkRegCompleteHandler
 11830 ;; This function uses a non-reentrant model
 11831 ;;
 11832                           
 11833                           	psect	text108
 11834  001158                     __ptext108:
 11835                           	opt stack 0
 11836  001158                     i2_i2c_setBuffer:
 11837                           	opt stack 14
 11838                           
 11839                           ;i2c_master.c: 186: if(i2c_status.bufferFree)
 11840                           
 11841                           ;incstack = 0
 11842  001158  0100               	movlb	0	; () banked
 11843  00115A  A560               	btfss	_i2c_status& (0+255),2,b
 11844  00115C  0012               	return	
 11845                           
 11846                           ; BSR set to: 0
 11847                           ;i2c_master.c: 187: {
 11848                           ;i2c_master.c: 188: i2c_status.data_ptr = buffer;
 11849  00115E  C001  F062         	movff	i2i2c_setBuffer@buffer,_i2c_status+2
 11850  001162  C002  F063         	movff	i2i2c_setBuffer@buffer+1,_i2c_status+3
 11851                           
 11852                           ; BSR set to: 0
 11853                           ;i2c_master.c: 189: i2c_status.data_length = bufferSize;
 11854  001166  C003  F064         	movff	i2i2c_setBuffer@bufferSize,_i2c_status+4
 11855  00116A  C004  F065         	movff	i2i2c_setBuffer@bufferSize+1,_i2c_status+5
 11856                           
 11857                           ; BSR set to: 0
 11858                           ;i2c_master.c: 190: i2c_status.bufferFree = 0;
 11859  00116E  9560               	bcf	_i2c_status& (0+255),2,b
 11860  001170  0012               	return	
 11861  001172                     __end_ofi2_i2c_setBuffer:
 11862                           	opt stack 0
 11863                           tosu	equ	0xFFF
 11864                           tosh	equ	0xFFE
 11865                           tosl	equ	0xFFD
 11866                           pclatu	equ	0xFFB
 11867                           pclath	equ	0xFFA
 11868                           tblptru	equ	0xFF8
 11869                           tblptrh	equ	0xFF7
 11870                           tblptrl	equ	0xFF6
 11871                           tablat	equ	0xFF5
 11872                           prodh	equ	0xFF4
 11873                           prodl	equ	0xFF3
 11874                           intcon	equ	0xFF2
 11875                           postinc0	equ	0xFEE
 11876                           fsr0h	equ	0xFEA
 11877                           fsr0l	equ	0xFE9
 11878                           wreg	equ	0xFE8
 11879                           indf1	equ	0xFE7
 11880                           postdec1	equ	0xFE5
 11881                           plusw1	equ	0xFE3
 11882                           fsr1h	equ	0xFE2
 11883                           fsr1l	equ	0xFE1
 11884                           indf2	equ	0xFDF
 11885                           postinc2	equ	0xFDE
 11886                           postdec2	equ	0xFDD
 11887                           plusw2	equ	0xFDB
 11888                           fsr2h	equ	0xFDA
 11889                           fsr2l	equ	0xFD9
 11890                           status	equ	0xFD8
 11891                           
 11892 ;; *************** function i2_i2c1_driver_stop *****************
 11893 ;; Defined at:
 11894 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 11895 ;; Parameters:    Size  Location     Type
 11896 ;;		None
 11897 ;; Auto vars:     Size  Location     Type
 11898 ;;		None
 11899 ;; Return value:  Size  Location     Type
 11900 ;;                  1    wreg      void 
 11901 ;; Registers used:
 11902 ;;		None
 11903 ;; Tracked objects:
 11904 ;;		On entry : 0/0
 11905 ;;		On exit  : 0/0
 11906 ;;		Unchanged: 0/0
 11907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11912 ;;Total ram usage:        0 bytes
 11913 ;; Hardware stack levels used:    1
 11914 ;; This function calls:
 11915 ;;		Nothing
 11916 ;; This function is called by:
 11917 ;;		i2_do_I2C_SEND_STOP
 11918 ;; This function uses a non-reentrant model
 11919 ;;
 11920                           
 11921                           	psect	text109
 11922  00146E                     __ptext109:
 11923                           	opt stack 0
 11924  00146E                     i2_i2c1_driver_stop:
 11925                           	opt stack 14
 11926                           
 11927                           ;i2c1_driver.c: 158: SSP1CON2bits.PEN = 1;
 11928                           
 11929                           ; BSR set to: 0
 11930                           ;incstack = 0
 11931  00146E  8497               	bsf	3991,2,c	;volatile
 11932  001470  0012               	return		;funcret
 11933  001472                     __end_ofi2_i2c1_driver_stop:
 11934                           	opt stack 0
 11935                           tosu	equ	0xFFF
 11936                           tosh	equ	0xFFE
 11937                           tosl	equ	0xFFD
 11938                           pclatu	equ	0xFFB
 11939                           pclath	equ	0xFFA
 11940                           tblptru	equ	0xFF8
 11941                           tblptrh	equ	0xFF7
 11942                           tblptrl	equ	0xFF6
 11943                           tablat	equ	0xFF5
 11944                           prodh	equ	0xFF4
 11945                           prodl	equ	0xFF3
 11946                           intcon	equ	0xFF2
 11947                           postinc0	equ	0xFEE
 11948                           fsr0h	equ	0xFEA
 11949                           fsr0l	equ	0xFE9
 11950                           wreg	equ	0xFE8
 11951                           indf1	equ	0xFE7
 11952                           postdec1	equ	0xFE5
 11953                           plusw1	equ	0xFE3
 11954                           fsr1h	equ	0xFE2
 11955                           fsr1l	equ	0xFE1
 11956                           indf2	equ	0xFDF
 11957                           postinc2	equ	0xFDE
 11958                           postdec2	equ	0xFDD
 11959                           plusw2	equ	0xFDB
 11960                           fsr2h	equ	0xFDA
 11961                           fsr2l	equ	0xFD9
 11962                           status	equ	0xFD8
 11963                           
 11964 ;; *************** function i2_i2c1_driver_restart *****************
 11965 ;; Defined at:
 11966 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 11967 ;; Parameters:    Size  Location     Type
 11968 ;;		None
 11969 ;; Auto vars:     Size  Location     Type
 11970 ;;		None
 11971 ;; Return value:  Size  Location     Type
 11972 ;;                  1    wreg      void 
 11973 ;; Registers used:
 11974 ;;		None
 11975 ;; Tracked objects:
 11976 ;;		On entry : 0/0
 11977 ;;		On exit  : 0/0
 11978 ;;		Unchanged: 0/0
 11979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11984 ;;Total ram usage:        0 bytes
 11985 ;; Hardware stack levels used:    1
 11986 ;; This function calls:
 11987 ;;		Nothing
 11988 ;; This function is called by:
 11989 ;;		i2_do_I2C_SEND_RESTART_READ
 11990 ;;		i2_do_I2C_SEND_RESTART_WRITE
 11991 ;;		i2_do_I2C_SEND_RESTART
 11992 ;; This function uses a non-reentrant model
 11993 ;;
 11994                           
 11995                           	psect	text110
 11996  001472                     __ptext110:
 11997                           	opt stack 0
 11998  001472                     i2_i2c1_driver_restart:
 11999                           	opt stack 14
 12000                           
 12001                           ;i2c1_driver.c: 153: SSP1CON2bits.RSEN = 1;
 12002                           
 12003                           ;incstack = 0
 12004  001472  8297               	bsf	3991,1,c	;volatile
 12005  001474  0012               	return		;funcret
 12006  001476                     __end_ofi2_i2c1_driver_restart:
 12007                           	opt stack 0
 12008                           tosu	equ	0xFFF
 12009                           tosh	equ	0xFFE
 12010                           tosl	equ	0xFFD
 12011                           pclatu	equ	0xFFB
 12012                           pclath	equ	0xFFA
 12013                           tblptru	equ	0xFF8
 12014                           tblptrh	equ	0xFF7
 12015                           tblptrl	equ	0xFF6
 12016                           tablat	equ	0xFF5
 12017                           prodh	equ	0xFF4
 12018                           prodl	equ	0xFF3
 12019                           intcon	equ	0xFF2
 12020                           postinc0	equ	0xFEE
 12021                           fsr0h	equ	0xFEA
 12022                           fsr0l	equ	0xFE9
 12023                           wreg	equ	0xFE8
 12024                           indf1	equ	0xFE7
 12025                           postdec1	equ	0xFE5
 12026                           plusw1	equ	0xFE3
 12027                           fsr1h	equ	0xFE2
 12028                           fsr1l	equ	0xFE1
 12029                           indf2	equ	0xFDF
 12030                           postinc2	equ	0xFDE
 12031                           postdec2	equ	0xFDD
 12032                           plusw2	equ	0xFDB
 12033                           fsr2h	equ	0xFDA
 12034                           fsr2l	equ	0xFD9
 12035                           status	equ	0xFD8
 12036                           
 12037 ;; *************** function i2_i2c1_driver_sendACK *****************
 12038 ;; Defined at:
 12039 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
 12040 ;; Parameters:    Size  Location     Type
 12041 ;;		None
 12042 ;; Auto vars:     Size  Location     Type
 12043 ;;		None
 12044 ;; Return value:  Size  Location     Type
 12045 ;;                  1    wreg      void 
 12046 ;; Registers used:
 12047 ;;		None
 12048 ;; Tracked objects:
 12049 ;;		On entry : 0/0
 12050 ;;		On exit  : 0/0
 12051 ;;		Unchanged: 0/0
 12052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12056 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12057 ;;Total ram usage:        0 bytes
 12058 ;; Hardware stack levels used:    1
 12059 ;; This function calls:
 12060 ;;		Nothing
 12061 ;; This function is called by:
 12062 ;;		i2_do_I2C_DO_ACK
 12063 ;;		i2_do_I2C_RX
 12064 ;; This function uses a non-reentrant model
 12065 ;;
 12066                           
 12067                           	psect	text111
 12068  001430                     __ptext111:
 12069                           	opt stack 0
 12070  001430                     i2_i2c1_driver_sendACK:
 12071                           	opt stack 15
 12072                           
 12073                           ;i2c1_driver.c: 198: SSP1CON2bits.ACKDT = 0;
 12074                           
 12075                           ;incstack = 0
 12076  001430  9A97               	bcf	3991,5,c	;volatile
 12077                           
 12078                           ;i2c1_driver.c: 199: SSP1CON2bits.ACKEN = 1;
 12079  001432  8897               	bsf	3991,4,c	;volatile
 12080  001434  0012               	return		;funcret
 12081  001436                     __end_ofi2_i2c1_driver_sendACK:
 12082                           	opt stack 0
 12083                           tosu	equ	0xFFF
 12084                           tosh	equ	0xFFE
 12085                           tosl	equ	0xFFD
 12086                           pclatu	equ	0xFFB
 12087                           pclath	equ	0xFFA
 12088                           tblptru	equ	0xFF8
 12089                           tblptrh	equ	0xFF7
 12090                           tblptrl	equ	0xFF6
 12091                           tablat	equ	0xFF5
 12092                           prodh	equ	0xFF4
 12093                           prodl	equ	0xFF3
 12094                           intcon	equ	0xFF2
 12095                           postinc0	equ	0xFEE
 12096                           fsr0h	equ	0xFEA
 12097                           fsr0l	equ	0xFE9
 12098                           wreg	equ	0xFE8
 12099                           indf1	equ	0xFE7
 12100                           postdec1	equ	0xFE5
 12101                           plusw1	equ	0xFE3
 12102                           fsr1h	equ	0xFE2
 12103                           fsr1l	equ	0xFE1
 12104                           indf2	equ	0xFDF
 12105                           postinc2	equ	0xFDE
 12106                           postdec2	equ	0xFDD
 12107                           plusw2	equ	0xFDB
 12108                           fsr2h	equ	0xFDA
 12109                           fsr2l	equ	0xFD9
 12110                           status	equ	0xFD8
 12111                           
 12112 ;; *************** function _i2c_busCollisionISR *****************
 12113 ;; Defined at:
 12114 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 12115 ;; Parameters:    Size  Location     Type
 12116 ;;		None
 12117 ;; Auto vars:     Size  Location     Type
 12118 ;;		None
 12119 ;; Return value:  Size  Location     Type
 12120 ;;                  1    wreg      void 
 12121 ;; Registers used:
 12122 ;;		cstack
 12123 ;; Tracked objects:
 12124 ;;		On entry : 0/0
 12125 ;;		On exit  : 0/0
 12126 ;;		Unchanged: 0/0
 12127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12132 ;;Total ram usage:        0 bytes
 12133 ;; Hardware stack levels used:    1
 12134 ;; Hardware stack levels required when called:    1
 12135 ;; This function calls:
 12136 ;;		_i2c1_driver_clearBusCollision
 12137 ;; This function is called by:
 12138 ;;		_i2c_open
 12139 ;;		_INTERRUPT_InterruptManager
 12140 ;; This function uses a non-reentrant model
 12141 ;;
 12142                           
 12143                           	psect	text112
 12144  001436                     __ptext112:
 12145                           	opt stack 0
 12146  001436                     _i2c_busCollisionISR:
 12147                           	opt stack 16
 12148                           
 12149                           ;i2c_master.c: 437: i2c1_driver_clearBusCollision();
 12150                           
 12151                           ;incstack = 0
 12152  001436  EC1E  F00A         	call	_i2c1_driver_clearBusCollision	;wreg free
 12153  00143A  0012               	return		;funcret
 12154  00143C                     __end_of_i2c_busCollisionISR:
 12155                           	opt stack 0
 12156                           tosu	equ	0xFFF
 12157                           tosh	equ	0xFFE
 12158                           tosl	equ	0xFFD
 12159                           pclatu	equ	0xFFB
 12160                           pclath	equ	0xFFA
 12161                           tblptru	equ	0xFF8
 12162                           tblptrh	equ	0xFF7
 12163                           tblptrl	equ	0xFF6
 12164                           tablat	equ	0xFF5
 12165                           prodh	equ	0xFF4
 12166                           prodl	equ	0xFF3
 12167                           intcon	equ	0xFF2
 12168                           postinc0	equ	0xFEE
 12169                           fsr0h	equ	0xFEA
 12170                           fsr0l	equ	0xFE9
 12171                           wreg	equ	0xFE8
 12172                           indf1	equ	0xFE7
 12173                           postdec1	equ	0xFE5
 12174                           plusw1	equ	0xFE3
 12175                           fsr1h	equ	0xFE2
 12176                           fsr1l	equ	0xFE1
 12177                           indf2	equ	0xFDF
 12178                           postinc2	equ	0xFDE
 12179                           postdec2	equ	0xFDD
 12180                           plusw2	equ	0xFDB
 12181                           fsr2h	equ	0xFDA
 12182                           fsr2l	equ	0xFD9
 12183                           status	equ	0xFD8
 12184                           
 12185 ;; *************** function _i2c1_driver_clearBusCollision *****************
 12186 ;; Defined at:
 12187 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
 12188 ;; Parameters:    Size  Location     Type
 12189 ;;		None
 12190 ;; Auto vars:     Size  Location     Type
 12191 ;;		None
 12192 ;; Return value:  Size  Location     Type
 12193 ;;                  1    wreg      void 
 12194 ;; Registers used:
 12195 ;;		None
 12196 ;; Tracked objects:
 12197 ;;		On entry : 0/0
 12198 ;;		On exit  : 0/0
 12199 ;;		Unchanged: 0/0
 12200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12204 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12205 ;;Total ram usage:        0 bytes
 12206 ;; Hardware stack levels used:    1
 12207 ;; This function calls:
 12208 ;;		Nothing
 12209 ;; This function is called by:
 12210 ;;		_i2c_busCollisionISR
 12211 ;; This function uses a non-reentrant model
 12212 ;;
 12213                           
 12214                           	psect	text113
 12215  00143C                     __ptext113:
 12216                           	opt stack 0
 12217  00143C                     _i2c1_driver_clearBusCollision:
 12218                           	opt stack 16
 12219                           
 12220                           ;i2c1_driver.c: 255: PIR3bits.BCL1IF = 0;
 12221                           
 12222                           ;incstack = 0
 12223  00143C  010E               	movlb	14	; () banked
 12224  00143E  93CD               	bcf	205,1,b	;volatile
 12225                           
 12226                           ; BSR set to: 14
 12227  001440  0012               	return		;funcret
 12228  001442                     __end_of_i2c1_driver_clearBusCollision:
 12229                           	opt stack 0
 12230  0000                     tosu	equ	0xFFF
 12231                           tosh	equ	0xFFE
 12232                           tosl	equ	0xFFD
 12233                           pclatu	equ	0xFFB
 12234                           pclath	equ	0xFFA
 12235                           tblptru	equ	0xFF8
 12236                           tblptrh	equ	0xFF7
 12237                           tblptrl	equ	0xFF6
 12238                           tablat	equ	0xFF5
 12239                           prodh	equ	0xFF4
 12240                           prodl	equ	0xFF3
 12241                           intcon	equ	0xFF2
 12242                           postinc0	equ	0xFEE
 12243                           fsr0h	equ	0xFEA
 12244                           fsr0l	equ	0xFE9
 12245                           wreg	equ	0xFE8
 12246                           indf1	equ	0xFE7
 12247                           postdec1	equ	0xFE5
 12248                           plusw1	equ	0xFE3
 12249                           fsr1h	equ	0xFE2
 12250                           fsr1l	equ	0xFE1
 12251                           indf2	equ	0xFDF
 12252                           postinc2	equ	0xFDE
 12253                           postdec2	equ	0xFDD
 12254                           plusw2	equ	0xFDB
 12255                           fsr2h	equ	0xFDA
 12256                           fsr2l	equ	0xFD9
 12257                           status	equ	0xFD8
 12258                           tosu	equ	0xFFF
 12259                           tosh	equ	0xFFE
 12260                           tosl	equ	0xFFD
 12261                           pclatu	equ	0xFFB
 12262                           pclath	equ	0xFFA
 12263                           tblptru	equ	0xFF8
 12264                           tblptrh	equ	0xFF7
 12265                           tblptrl	equ	0xFF6
 12266                           tablat	equ	0xFF5
 12267                           prodh	equ	0xFF4
 12268                           prodl	equ	0xFF3
 12269                           intcon	equ	0xFF2
 12270                           postinc0	equ	0xFEE
 12271                           fsr0h	equ	0xFEA
 12272                           fsr0l	equ	0xFE9
 12273                           wreg	equ	0xFE8
 12274                           indf1	equ	0xFE7
 12275                           postdec1	equ	0xFE5
 12276                           plusw1	equ	0xFE3
 12277                           fsr1h	equ	0xFE2
 12278                           fsr1l	equ	0xFE1
 12279                           indf2	equ	0xFDF
 12280                           postinc2	equ	0xFDE
 12281                           postdec2	equ	0xFDD
 12282                           plusw2	equ	0xFDB
 12283                           fsr2h	equ	0xFDA
 12284                           fsr2l	equ	0xFD9
 12285                           status	equ	0xFD8
 12286                           
 12287                           	psect	text114
 12288  000000                     __ptext114:
 12289                           	opt stack 0
 12290                           tosu	equ	0xFFF
 12291                           tosh	equ	0xFFE
 12292                           tosl	equ	0xFFD
 12293                           pclatu	equ	0xFFB
 12294                           pclath	equ	0xFFA
 12295                           tblptru	equ	0xFF8
 12296                           tblptrh	equ	0xFF7
 12297                           tblptrl	equ	0xFF6
 12298                           tablat	equ	0xFF5
 12299                           prodh	equ	0xFF4
 12300                           prodl	equ	0xFF3
 12301                           intcon	equ	0xFF2
 12302                           postinc0	equ	0xFEE
 12303                           fsr0h	equ	0xFEA
 12304                           fsr0l	equ	0xFE9
 12305                           wreg	equ	0xFE8
 12306                           indf1	equ	0xFE7
 12307                           postdec1	equ	0xFE5
 12308                           plusw1	equ	0xFE3
 12309                           fsr1h	equ	0xFE2
 12310                           fsr1l	equ	0xFE1
 12311                           indf2	equ	0xFDF
 12312                           postinc2	equ	0xFDE
 12313                           postdec2	equ	0xFDD
 12314                           plusw2	equ	0xFDB
 12315                           fsr2h	equ	0xFDA
 12316                           fsr2l	equ	0xFD9
 12317                           status	equ	0xFD8
 12318                           
 12319                           	psect	rparam
 12320  0000                     tosu	equ	0xFFF
 12321                           tosh	equ	0xFFE
 12322                           tosl	equ	0xFFD
 12323                           pclatu	equ	0xFFB
 12324                           pclath	equ	0xFFA
 12325                           tblptru	equ	0xFF8
 12326                           tblptrh	equ	0xFF7
 12327                           tblptrl	equ	0xFF6
 12328                           tablat	equ	0xFF5
 12329                           prodh	equ	0xFF4
 12330                           prodl	equ	0xFF3
 12331                           intcon	equ	0xFF2
 12332                           postinc0	equ	0xFEE
 12333                           fsr0h	equ	0xFEA
 12334                           fsr0l	equ	0xFE9
 12335                           wreg	equ	0xFE8
 12336                           indf1	equ	0xFE7
 12337                           postdec1	equ	0xFE5
 12338                           plusw1	equ	0xFE3
 12339                           fsr1h	equ	0xFE2
 12340                           fsr1l	equ	0xFE1
 12341                           indf2	equ	0xFDF
 12342                           postinc2	equ	0xFDE
 12343                           postdec2	equ	0xFDD
 12344                           plusw2	equ	0xFDB
 12345                           fsr2h	equ	0xFDA
 12346                           fsr2l	equ	0xFD9
 12347                           status	equ	0xFD8
 12348                           
 12349                           	psect	temp
 12350  000047                     btemp:
 12351                           	opt stack 0
 12352  000047                     	ds	1
 12353  0000                     int$flags	set	btemp
 12354  0000                     wtemp6	set	btemp+1
 12355                           tosu	equ	0xFFF
 12356                           tosh	equ	0xFFE
 12357                           tosl	equ	0xFFD
 12358                           pclatu	equ	0xFFB
 12359                           pclath	equ	0xFFA
 12360                           tblptru	equ	0xFF8
 12361                           tblptrh	equ	0xFF7
 12362                           tblptrl	equ	0xFF6
 12363                           tablat	equ	0xFF5
 12364                           prodh	equ	0xFF4
 12365                           prodl	equ	0xFF3
 12366                           intcon	equ	0xFF2
 12367                           postinc0	equ	0xFEE
 12368                           fsr0h	equ	0xFEA
 12369                           fsr0l	equ	0xFE9
 12370                           wreg	equ	0xFE8
 12371                           indf1	equ	0xFE7
 12372                           postdec1	equ	0xFE5
 12373                           plusw1	equ	0xFE3
 12374                           fsr1h	equ	0xFE2
 12375                           fsr1l	equ	0xFE1
 12376                           indf2	equ	0xFDF
 12377                           postinc2	equ	0xFDE
 12378                           postdec2	equ	0xFDD
 12379                           plusw2	equ	0xFDB
 12380                           fsr2h	equ	0xFDA
 12381                           fsr2l	equ	0xFD9
 12382                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        48
    BSS         58
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     64      70
    BANK0           160     51     151
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          136      0       0

Pointer List with Targets:

    i2c_write1ByteRegister@data.data	PTR unsigned char  size(2) Largest target is 0

    i2c_read1ByteRegister@d2.data	PTR unsigned char  size(2) Largest target is 0

    i2c_read2ByteRegister@result.data	PTR unsigned char  size(2) Largest target is 0

    i2c_write2ByteRegister@data.data	PTR unsigned char  size(2) Largest target is 0

    do_I2C_TX$2343$0	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    do_I2C_RX$2349$0	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    do_I2C_TX_EMPTY$2355$0	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    i2c_ISR$2361	PTR const FTN()enum E11956 size(3) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    do_I2C_TX_EMPTY$2360	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    do_I2C_TX_EMPTY$2355	PTR FTN(PTR void ,)enum E11790 size(3) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    do_I2C_RX$2354	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    do_I2C_RX$2349	PTR FTN(PTR void ,)enum E11790 size(3) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    do_I2C_TX$2348	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    do_I2C_TX$2343	PTR FTN(PTR void ,)enum E11790 size(3) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    returnStop@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    returnReset@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    Absolute function$0	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    i2c_restartWrite@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    S847$11$0	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    mssp1_waitForEvent@timeout	PTR unsigned int  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_readNBytes@data	PTR void  size(2) Largest target is 1
		 -> readIoExpander@rec(COMRAM[1]), 

    d.data	PTR unsigned char  size(2) Largest target is 0

    S1112$data	PTR unsigned char  size(2) Largest target is 0

    rdBlkRegCompleteHandler@p.data	PTR unsigned char  size(2) Largest target is 0

    rdBlkRegCompleteHandler@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    wr2RegCompleteHandler@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    rd2RegCompleteHandler@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    rd1RegCompleteHandler@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    i2c_writeNBytes@data	PTR void  size(2) Largest target is 7
		 -> main@receivedScore(BANK0[7]), readIoExpander@data(COMRAM[2]), 

    wr1RegCompleteHandler@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    setCallBack@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    setCallBack@cb	PTR FTN(PTR void ,)enum E11790 size(3) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), 

    fsmStateTable	PTR const FTN()enum E11956[16] size(3) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    i2c_setBuffer@buffer	PTR void  size(2) Largest target is 7
		 -> main@receivedScore(BANK0[7]), readIoExpander@rec(COMRAM[1]), readIoExpander@data(COMRAM[2]), i2c_readDataBlock@reg(COMRAM[1]), 
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@reg(COMRAM[1]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@reg(COMRAM[1]), 
		 -> i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@reg(COMRAM[1]), i2c_read1ByteRegister@d2(COMRAM[1]), i2c_write1ByteRegister@reg(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    i2c_setAddressNACKCallback@p	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_setAddressNACKCallback@cb	PTR FTN(PTR void ,)enum E11790 size(3) Largest target is 1
		 -> i2c_restartWrite(), 

    i2c_setDataCompleteCallback@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    i2c_setDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E11790 size(3) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), Absolute function(), 

    S847$callbackPayload	PTR void [6] size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    S847$callbackTable	PTR FTN(PTR void ,)enum E11790[6] size(3) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E11790[6] size(3) Largest target is 1
		 -> i2_returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> rd1RegCompleteHandler(), wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), 
		 -> returnReset(), returnStop(), 

    S847$data_ptr	PTR unsigned char  size(2) Largest target is 7
		 -> main@receivedScore(BANK0[7]), readIoExpander@rec(COMRAM[1]), readIoExpander@data(COMRAM[2]), i2c_readDataBlock@reg(COMRAM[1]), 
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@reg(COMRAM[1]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@reg(COMRAM[1]), 
		 -> i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@reg(COMRAM[1]), i2c_read1ByteRegister@d2(COMRAM[1]), i2c_write1ByteRegister@reg(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    i2c_status.data_ptr	PTR unsigned char  size(2) Largest target is 7
		 -> main@receivedScore(BANK0[7]), readIoExpander@rec(COMRAM[1]), readIoExpander@data(COMRAM[2]), i2c_readDataBlock@reg(COMRAM[1]), 
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@reg(COMRAM[1]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@reg(COMRAM[1]), 
		 -> i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@reg(COMRAM[1]), i2c_read1ByteRegister@d2(COMRAM[1]), i2c_write1ByteRegister@reg(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    i2c1_driver_setI2cISR@f	PTR void  size(3) Largest target is 1
		 -> i2c_ISR(), 

    i2c1_driver_i2cISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_setBusCollisionISR@f	PTR void  size(3) Largest target is 1
		 -> i2c_busCollisionISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 


Critical Paths under _main in COMRAM

    _main->_getSpaces
    _getSpaces->_updateExpanders
    _updateExpanders->_readIoExpander
    _readIoExpander->_i2c_writeNBytes
    _i2c_writeNBytes->_i2c_setAddressNACKCallback
    _i2c_setAddressNACKCallback->_setCallBack
    _i2c_masterWrite->_i2c_masterOperation
    _i2c_readNBytes->_i2c_open
    _i2c_open->_i2c1_driver_setBusCollisionISR
    _i2c_open->_i2c1_driver_setI2cISR
    _i2c_masterRead->_i2c_masterOperation
    _i2c_ISR->_do_I2C_TX
    _do_I2C_TX->_i2c1_driver_TXData
    _do_I2C_TX->_i2c1_driver_isNACK
    _do_I2C_SEND_ADR_WRITE->_i2c1_driver_TXData
    _do_I2C_SEND_ADR_READ->_i2c1_driver_TXData
    _wr2RegCompleteHandler->_i2c_setDataCompleteCallback
    _wr1RegCompleteHandler->_i2c_setDataCompleteCallback
    _rdBlkRegCompleteHandler->_i2c_setDataCompleteCallback
    _rd2RegCompleteHandler->_i2c_setDataCompleteCallback
    _rd1RegCompleteHandler->_i2c_setDataCompleteCallback
    _i2c_setDataCompleteCallback->_setCallBack

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    i2_i2c_ISR->i2_do_I2C_TX
    i2_do_I2C_TX->i2_i2c1_driver_TXData
    i2_do_I2C_TX->i2_i2c1_driver_isNACK
    i2_do_I2C_SEND_ADR_WRITE->i2_i2c1_driver_TXData
    i2_do_I2C_SEND_ADR_READ->i2_i2c1_driver_TXData
    i2_wr2RegCompleteHandler->i2_i2c_setDataCompleteCallback
    i2_wr1RegCompleteHandler->i2_i2c_setDataCompleteCallback
    i2_rdBlkRegCompleteHandler->i2_i2c_setDataCompleteCallback
    i2_rd2RegCompleteHandler->i2_i2c_setDataCompleteCallback
    i2_rd1RegCompleteHandler->i2_i2c_setDataCompleteCallback
    i2_i2c_setDataCompleteCallback->i2_setCallBack

Critical Paths under _main in BANK0

    _main->_getSpaces
    _getSpaces->_updateExpanders

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                39    39      0  335820
                                             14 BANK0     37    37      0
                 _EUSART1_Initialize
                      _EUSART1_Write
                 _EUSART2_Initialize
                       _EUSART2_Read
                      _EUSART2_Write
                _EUSART2_is_rx_ready
                  _SYSTEM_Initialize
                            ___aldiv
                                _abs
                          _getSpaces
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (1) _getSpaces                                            6     6      0  222948
                                             62 COMRAM     2     2      0
                                             10 BANK0      4     4      0
                    _updateExpanders
 ---------------------------------------------------------------------------------
 (2) _updateExpanders                                     16    12      4  222673
                                             56 COMRAM     6     2      4
                                              0 BANK0     10    10      0
                     _readIoExpander
 ---------------------------------------------------------------------------------
 (3) _readIoExpander                                      19    17      2  222417
                                             37 COMRAM    19    17      2
                     _i2c_readNBytes
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (1) _i2c_writeNBytes                                      5     1      4  111373
                                             32 COMRAM     5     1      4
                          _i2c_close
                    _i2c_masterWrite
                           _i2c_open
         _i2c_setAddressNACKCallback
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (2) _i2c_setAddressNACKCallback                           5     0      5    2259
                                             27 COMRAM     5     0      5
                        _setCallBack
 ---------------------------------------------------------------------------------
 (2) _i2c_masterWrite                                      0     0      0  106092
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (4) _i2c_readNBytes                                       5     1      4  108934
                                             26 COMRAM     5     1      4
                          _i2c_close
                     _i2c_masterRead
                           _i2c_open
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (2) _i2c_open                                             2     2      0     310
                                             24 COMRAM     2     2      0
                   _i2c1_driver_open
     _i2c1_driver_setBusCollisionISR
              _i2c1_driver_setI2cISR
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (3) _i2c1_driver_setI2cISR                                3     0      3     121
                                             21 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) _i2c1_driver_setBusCollisionISR                       3     0      3     121
                                             21 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2c_masterRead                                       0     0      0  106092
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (3) _i2c_masterOperation                                  2     2      0  106092
                                             24 COMRAM     2     2      0
                  _i2c1_driver_start
                         _i2c_poller
                 _mssp1_IRQisEnabled
 ---------------------------------------------------------------------------------
 (4) _mssp1_IRQisEnabled                                   1     1      0       0
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _i2c_poller                                           0     0      0  106024
                            _i2c_ISR
                 _mssp1_waitForEvent
 ---------------------------------------------------------------------------------
 (5) _mssp1_waitForEvent                                   2     0      2      90
                                             21 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _i2c_ISR                                              0     0      0  105934
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (6) _do_I2C_TX_EMPTY                                      0     0      0   26451
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
                       _mssp1_setIRQ
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _mssp1_setIRQ                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_TX                                            2     2      0   26519
                                             22 COMRAM     2     2      0
                   Absolute function *
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (6) _i2c1_driver_isNACK                                   1     1      0       0
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART_WRITE                            0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART_READ                             0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (6) _do_I2C_SEND_ADR_WRITE                                0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (6) _do_I2C_SEND_ADR_READ                                 0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_TXData                                   1     1      0      31
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RX                                            0     0      0   26451
                   Absolute function *
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
              _i2c1_driver_getRXData
                _i2c1_driver_sendACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_NACK_STOP                                  0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_NACK_RESTART                               0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_sendNACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RESET                                         0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_resetBus                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_RCEN                                          0     0      0       0
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_DO_ADDRESS_NACK                               0     0      0   26451
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _wr2RegCompleteHandler                                2     0      2    5232
                                             32 COMRAM     2     0      2
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _wr1RegCompleteHandler                                2     0      2    5232
                                             32 COMRAM     2     0      2
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _returnStop                                           2     0      2     108
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) _returnReset                                          2     0      2       0
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) _rdBlkRegCompleteHandler                              2     0      2    5415
                                             32 COMRAM     2     0      2
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _rd2RegCompleteHandler                                2     0      2    5232
                                             32 COMRAM     2     0      2
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (7) _rd1RegCompleteHandler                                2     0      2    5232
                                             32 COMRAM     2     0      2
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _i2c_setDataCompleteCallback                          5     0      5    2979
                                             27 COMRAM     5     0      5
                        _setCallBack
 ---------------------------------------------------------------------------------
 (3) _setCallBack                                          6     1      5    1117
                                             21 COMRAM     6     1      5
 ---------------------------------------------------------------------------------
 (2) _i2c_setBuffer                                        4     0      4    2222
                                             21 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (7) _i2c_restartWrite                                     2     0      2       0
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_STOP                                     0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_RESTART                                  0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (16) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 (6) _do_I2C_DO_ACK                                        0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_sendACK                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_close                                            1     1      0      37
                                             21 COMRAM     1     1      0
                     _mssp1_clearIRQ
                   _mssp1_disableIRQ
 ---------------------------------------------------------------------------------
 (3) _mssp1_disableIRQ                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mssp1_clearIRQ                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _abs                                                  4     2      2     218
                                             21 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     452
                                             21 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                 _EUSART1_Initialize
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART2_is_rx_ready                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART2_Write                                        1     1      0      22
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _EUSART2_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Write                                        1     1      0      22
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _INTERRUPT_InterruptManager                         18    18      0   17327
                                              3 COMRAM    18    18      0
                   Absolute function *
                _i2c_busCollisionISR *
                          i2_i2c_ISR *
 ---------------------------------------------------------------------------------
 (14) i2_i2c_ISR                                           0     0      0   17327
                    i2_do_I2C_DO_ACK *
           i2_do_I2C_DO_ADDRESS_NACK *
           i2_do_I2C_DO_NACK_RESTART *
              i2_do_I2C_DO_NACK_STOP *
                      i2_do_I2C_IDLE *
                      i2_do_I2C_RCEN *
                     i2_do_I2C_RESET *
                        i2_do_I2C_RX *
             i2_do_I2C_SEND_ADR_READ *
            i2_do_I2C_SEND_ADR_WRITE *
              i2_do_I2C_SEND_RESTART *
         i2_do_I2C_SEND_RESTART_READ *
        i2_do_I2C_SEND_RESTART_WRITE *
                 i2_do_I2C_SEND_STOP *
                        i2_do_I2C_TX *
                  i2_do_I2C_TX_EMPTY *
               i2_i2c1_driver_isNACK
                   i2_mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (15) i2_mssp1_clearIRQ                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_do_I2C_TX_EMPTY                                   0     0      0    4306
                   Absolute function *
              i2_do_I2C_SEND_RESTART
                 i2_do_I2C_SEND_STOP
                 i2_i2c_restartWrite *
                     i2_mssp1_setIRQ
            i2_rd1RegCompleteHandler *
            i2_rd2RegCompleteHandler *
          i2_rdBlkRegCompleteHandler *
                      i2_returnReset *
                       i2_returnStop *
            i2_wr1RegCompleteHandler *
            i2_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (16) i2_mssp1_setIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_do_I2C_TX                                         2     2      0    4365
                                              1 COMRAM     2     2      0
                   Absolute function *
         i2_do_I2C_SEND_RESTART_READ
        i2_do_I2C_SEND_RESTART_WRITE
                 i2_do_I2C_SEND_STOP
               i2_i2c1_driver_TXData
               i2_i2c1_driver_isNACK
                 i2_i2c_restartWrite *
            i2_rd1RegCompleteHandler *
            i2_rd2RegCompleteHandler *
          i2_rdBlkRegCompleteHandler *
                      i2_returnReset *
                       i2_returnStop *
            i2_wr1RegCompleteHandler *
            i2_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (15) i2_i2c1_driver_isNACK                                1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (16) i2_do_I2C_SEND_RESTART_WRITE                         0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (16) i2_do_I2C_SEND_RESTART_READ                          0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (15) i2_do_I2C_SEND_ADR_WRITE                             0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (15) i2_do_I2C_SEND_ADR_READ                              0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (16) i2_i2c1_driver_TXData                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (15) i2_do_I2C_RX                                         0     0      0    4306
                   Absolute function *
           i2_do_I2C_DO_NACK_RESTART
              i2_do_I2C_DO_NACK_STOP
            i2_i2c1_driver_getRXData
              i2_i2c1_driver_sendACK
                 i2_i2c_restartWrite *
            i2_rd1RegCompleteHandler *
            i2_rd2RegCompleteHandler *
          i2_rdBlkRegCompleteHandler *
                      i2_returnReset *
                       i2_returnStop *
            i2_wr1RegCompleteHandler *
            i2_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (16) i2_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i2_do_I2C_DO_NACK_STOP                               0     0      0       0
             i2_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (16) i2_do_I2C_DO_NACK_RESTART                            0     0      0       0
             i2_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (17) i2_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_do_I2C_RESET                                      0     0      0       0
             i2_i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (16) i2_i2c1_driver_resetBus                              0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_do_I2C_RCEN                                       0     0      0       0
              i2_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (16) i2_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_do_I2C_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_do_I2C_DO_ADDRESS_NACK                            0     0      0    4306
                   Absolute function *
              i2_do_I2C_SEND_RESTART
                 i2_do_I2C_SEND_STOP
                 i2_i2c_restartWrite *
            i2_rd1RegCompleteHandler *
            i2_rd2RegCompleteHandler *
          i2_rdBlkRegCompleteHandler *
                      i2_returnReset *
                       i2_returnStop *
            i2_wr1RegCompleteHandler *
            i2_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (16) i2_wr2RegCompleteHandler                             2     0      2     836
                                             11 COMRAM     2     0      2
                    i2_i2c_setBuffer
      i2_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (16) i2_wr1RegCompleteHandler                             2     0      2     836
                                             11 COMRAM     2     0      2
                    i2_i2c_setBuffer
      i2_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (16) i2_returnStop                                        2     0      2      76
                                             11 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (16) i2_returnReset                                       2     0      2       0
                                             11 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (16) i2_rdBlkRegCompleteHandler                           2     0      2     886
                                             11 COMRAM     2     0      2
                    i2_i2c_setBuffer
      i2_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (16) i2_rd2RegCompleteHandler                             2     0      2     836
                                             11 COMRAM     2     0      2
                    i2_i2c_setBuffer
      i2_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (16) i2_rd1RegCompleteHandler                             2     0      2     836
                                             11 COMRAM     2     0      2
                    i2_i2c_setBuffer
      i2_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (17) i2_i2c_setDataCompleteCallback                       5     0      5     510
                                              6 COMRAM     5     0      5
                      i2_setCallBack
 ---------------------------------------------------------------------------------
 (18) i2_setCallBack                                       6     1      5     206
                                              0 COMRAM     6     1      5
 ---------------------------------------------------------------------------------
 (17) i2_i2c_setBuffer                                     4     0      4     304
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (16) i2_i2c_restartWrite                                  2     0      2       0
                                             11 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (16) i2_do_I2C_SEND_STOP                                  0     0      0       0
                 i2_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (17) i2_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i2_do_I2C_SEND_RESTART                               0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (17) i2_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (16) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 (15) i2_do_I2C_DO_ACK                                     0     0      0       0
              i2_i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (16) i2_i2c1_driver_sendACK                               0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _i2c_busCollisionISR                                 0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (15) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART1_Initialize
   _EUSART1_Write
   _EUSART2_Initialize
   _EUSART2_Read
   _EUSART2_Write
   _EUSART2_is_rx_ready
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _EUSART2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
   ___aldiv
   _abs
   _getSpaces
     _updateExpanders
       _readIoExpander
         _i2c_readNBytes
           _i2c_close
             _mssp1_clearIRQ
             _mssp1_disableIRQ
           _i2c_masterRead
             _i2c_masterOperation
               _i2c1_driver_start
               _i2c_poller
                 _i2c_ISR
                   _do_I2C_DO_ACK *
                     _i2c1_driver_sendACK
                   _do_I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _do_I2C_SEND_RESTART *
                       _i2c1_driver_restart
                     _do_I2C_SEND_STOP *
                       _i2c1_driver_stop
                     _i2c_restartWrite *
                     _rd1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rd2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rdBlkRegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _returnReset *
                     _returnStop *
                     _wr1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _wr2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                   _do_I2C_DO_NACK_RESTART *
                     _i2c1_driver_sendNACK
                   _do_I2C_DO_NACK_STOP *
                     _i2c1_driver_sendNACK
                   _do_I2C_IDLE *
                   _do_I2C_RCEN *
                     _i2c1_driver_startRX
                   _do_I2C_RESET *
                     _i2c1_driver_resetBus
                   _do_I2C_RX *
                     Absolute function(Fake) *
                     _do_I2C_DO_NACK_RESTART *
                       _i2c1_driver_sendNACK
                     _do_I2C_DO_NACK_STOP *
                       _i2c1_driver_sendNACK
                     _i2c1_driver_getRXData *
                     _i2c1_driver_sendACK *
                     _i2c_restartWrite *
                     _rd1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rd2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rdBlkRegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _returnReset *
                     _returnStop *
                     _wr1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _wr2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                   _do_I2C_SEND_ADR_READ *
                     _i2c1_driver_TXData
                   _do_I2C_SEND_ADR_WRITE *
                     _i2c1_driver_TXData
                   _do_I2C_SEND_RESTART *
                     _i2c1_driver_restart
                   _do_I2C_SEND_RESTART_READ *
                     _i2c1_driver_restart
                   _do_I2C_SEND_RESTART_WRITE *
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP *
                     _i2c1_driver_stop
                   _do_I2C_TX *
                     Absolute function(Fake) *
                     _do_I2C_SEND_RESTART_READ *
                       _i2c1_driver_restart
                     _do_I2C_SEND_RESTART_WRITE *
                       _i2c1_driver_restart
                     _do_I2C_SEND_STOP *
                       _i2c1_driver_stop
                     _i2c1_driver_TXData *
                     _i2c1_driver_isNACK *
                     _i2c_restartWrite *
                     _rd1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rd2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rdBlkRegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _returnReset *
                     _returnStop *
                     _wr1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _wr2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                   _do_I2C_TX_EMPTY *
                     Absolute function(Fake) *
                     _do_I2C_SEND_RESTART *
                       _i2c1_driver_restart
                     _do_I2C_SEND_STOP *
                       _i2c1_driver_stop
                     _i2c_restartWrite *
                     _mssp1_setIRQ *
                     _rd1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rd2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rdBlkRegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _returnReset *
                     _returnStop *
                     _wr1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _wr2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                   _i2c1_driver_isNACK *
                   _mssp1_clearIRQ *
                 _mssp1_waitForEvent
               _mssp1_IRQisEnabled
           _i2c_open
             _i2c1_driver_open
             _i2c1_driver_setBusCollisionISR
             _i2c1_driver_setI2cISR
             _mssp1_clearIRQ
           _i2c_setBuffer
         _i2c_writeNBytes
           _i2c_close
             _mssp1_clearIRQ
             _mssp1_disableIRQ
           _i2c_masterWrite
             _i2c_masterOperation
               _i2c1_driver_start
               _i2c_poller
                 _i2c_ISR
                   _do_I2C_DO_ACK *
                     _i2c1_driver_sendACK
                   _do_I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _do_I2C_SEND_RESTART *
                       _i2c1_driver_restart
                     _do_I2C_SEND_STOP *
                       _i2c1_driver_stop
                     _i2c_restartWrite *
                     _rd1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rd2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rdBlkRegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _returnReset *
                     _returnStop *
                     _wr1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _wr2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                   _do_I2C_DO_NACK_RESTART *
                     _i2c1_driver_sendNACK
                   _do_I2C_DO_NACK_STOP *
                     _i2c1_driver_sendNACK
                   _do_I2C_IDLE *
                   _do_I2C_RCEN *
                     _i2c1_driver_startRX
                   _do_I2C_RESET *
                     _i2c1_driver_resetBus
                   _do_I2C_RX *
                     Absolute function(Fake) *
                     _do_I2C_DO_NACK_RESTART *
                       _i2c1_driver_sendNACK
                     _do_I2C_DO_NACK_STOP *
                       _i2c1_driver_sendNACK
                     _i2c1_driver_getRXData *
                     _i2c1_driver_sendACK *
                     _i2c_restartWrite *
                     _rd1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rd2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rdBlkRegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _returnReset *
                     _returnStop *
                     _wr1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _wr2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                   _do_I2C_SEND_ADR_READ *
                     _i2c1_driver_TXData
                   _do_I2C_SEND_ADR_WRITE *
                     _i2c1_driver_TXData
                   _do_I2C_SEND_RESTART *
                     _i2c1_driver_restart
                   _do_I2C_SEND_RESTART_READ *
                     _i2c1_driver_restart
                   _do_I2C_SEND_RESTART_WRITE *
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP *
                     _i2c1_driver_stop
                   _do_I2C_TX *
                     Absolute function(Fake) *
                     _do_I2C_SEND_RESTART_READ *
                       _i2c1_driver_restart
                     _do_I2C_SEND_RESTART_WRITE *
                       _i2c1_driver_restart
                     _do_I2C_SEND_STOP *
                       _i2c1_driver_stop
                     _i2c1_driver_TXData *
                     _i2c1_driver_isNACK *
                     _i2c_restartWrite *
                     _rd1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rd2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rdBlkRegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _returnReset *
                     _returnStop *
                     _wr1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _wr2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                   _do_I2C_TX_EMPTY *
                     Absolute function(Fake) *
                     _do_I2C_SEND_RESTART *
                       _i2c1_driver_restart
                     _do_I2C_SEND_STOP *
                       _i2c1_driver_stop
                     _i2c_restartWrite *
                     _mssp1_setIRQ *
                     _rd1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rd2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rdBlkRegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _returnReset *
                     _returnStop *
                     _wr1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _wr2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                   _i2c1_driver_isNACK *
                   _mssp1_clearIRQ *
                 _mssp1_waitForEvent
               _mssp1_IRQisEnabled
           _i2c_open
             _i2c1_driver_open
             _i2c1_driver_setBusCollisionISR
             _i2c1_driver_setI2cISR
             _mssp1_clearIRQ
           _i2c_setAddressNACKCallback
             _setCallBack
           _i2c_setBuffer
   _i2c_writeNBytes
     _i2c_close
       _mssp1_clearIRQ
       _mssp1_disableIRQ
     _i2c_masterWrite
       _i2c_masterOperation
         _i2c1_driver_start
         _i2c_poller
           _i2c_ISR
             _do_I2C_DO_ACK *
               _i2c1_driver_sendACK
             _do_I2C_DO_ADDRESS_NACK *
               Absolute function(Fake) *
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _i2c_restartWrite *
               _rd1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rd2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rdBlkRegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _returnReset *
               _returnStop *
               _wr1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _wr2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
             _do_I2C_DO_NACK_RESTART *
               _i2c1_driver_sendNACK
             _do_I2C_DO_NACK_STOP *
               _i2c1_driver_sendNACK
             _do_I2C_IDLE *
             _do_I2C_RCEN *
               _i2c1_driver_startRX
             _do_I2C_RESET *
               _i2c1_driver_resetBus
             _do_I2C_RX *
               Absolute function(Fake) *
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _i2c1_driver_getRXData *
               _i2c1_driver_sendACK *
               _i2c_restartWrite *
               _rd1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rd2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rdBlkRegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _returnReset *
               _returnStop *
               _wr1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _wr2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
             _do_I2C_SEND_ADR_READ *
               _i2c1_driver_TXData
             _do_I2C_SEND_ADR_WRITE *
               _i2c1_driver_TXData
             _do_I2C_SEND_RESTART *
               _i2c1_driver_restart
             _do_I2C_SEND_RESTART_READ *
               _i2c1_driver_restart
             _do_I2C_SEND_RESTART_WRITE *
               _i2c1_driver_restart
             _do_I2C_SEND_STOP *
               _i2c1_driver_stop
             _do_I2C_TX *
               Absolute function(Fake) *
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _i2c1_driver_TXData *
               _i2c1_driver_isNACK *
               _i2c_restartWrite *
               _rd1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rd2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rdBlkRegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _returnReset *
               _returnStop *
               _wr1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _wr2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
             _do_I2C_TX_EMPTY *
               Absolute function(Fake) *
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _i2c_restartWrite *
               _mssp1_setIRQ *
               _rd1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rd2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _rdBlkRegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _returnReset *
               _returnStop *
               _wr1RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
               _wr2RegCompleteHandler *
                 _i2c_setBuffer
                 _i2c_setDataCompleteCallback
                   _setCallBack
             _i2c1_driver_isNACK *
             _mssp1_clearIRQ *
           _mssp1_waitForEvent
         _mssp1_IRQisEnabled
     _i2c_open
       _i2c1_driver_open
       _i2c1_driver_setBusCollisionISR
       _i2c1_driver_setI2cISR
       _mssp1_clearIRQ
     _i2c_setAddressNACKCallback
       _setCallBack
     _i2c_setBuffer

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision
   i2_i2c_ISR *
     i2_do_I2C_DO_ACK *
       i2_i2c1_driver_sendACK
     i2_do_I2C_DO_ADDRESS_NACK *
       Absolute function(Fake) *
       i2_do_I2C_SEND_RESTART *
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP *
         i2_i2c1_driver_stop
       i2_i2c_restartWrite *
       i2_rd1RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_rd2RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_rdBlkRegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_returnReset *
       i2_returnStop *
       i2_wr1RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_wr2RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
     i2_do_I2C_DO_NACK_RESTART *
       i2_i2c1_driver_sendNACK
     i2_do_I2C_DO_NACK_STOP *
       i2_i2c1_driver_sendNACK
     i2_do_I2C_IDLE *
     i2_do_I2C_RCEN *
       i2_i2c1_driver_startRX
     i2_do_I2C_RESET *
       i2_i2c1_driver_resetBus
     i2_do_I2C_RX *
       Absolute function(Fake) *
       i2_do_I2C_DO_NACK_RESTART *
         i2_i2c1_driver_sendNACK
       i2_do_I2C_DO_NACK_STOP *
         i2_i2c1_driver_sendNACK
       i2_i2c1_driver_getRXData *
       i2_i2c1_driver_sendACK *
       i2_i2c_restartWrite *
       i2_rd1RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_rd2RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_rdBlkRegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_returnReset *
       i2_returnStop *
       i2_wr1RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_wr2RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
     i2_do_I2C_SEND_ADR_READ *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_ADR_WRITE *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_RESTART *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_RESTART_READ *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_RESTART_WRITE *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_STOP *
       i2_i2c1_driver_stop
     i2_do_I2C_TX *
       Absolute function(Fake) *
       i2_do_I2C_SEND_RESTART_READ *
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_RESTART_WRITE *
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP *
         i2_i2c1_driver_stop
       i2_i2c1_driver_TXData *
       i2_i2c1_driver_isNACK *
       i2_i2c_restartWrite *
       i2_rd1RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_rd2RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_rdBlkRegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_returnReset *
       i2_returnStop *
       i2_wr1RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_wr2RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
     i2_do_I2C_TX_EMPTY *
       Absolute function(Fake) *
       i2_do_I2C_SEND_RESTART *
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP *
         i2_i2c1_driver_stop
       i2_i2c_restartWrite *
       i2_mssp1_setIRQ *
       i2_rd1RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_rd2RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_rdBlkRegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_returnReset *
       i2_returnStop *
       i2_wr1RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_wr2RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
     i2_i2c1_driver_isNACK *
     i2_mssp1_clearIRQ *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E87      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     33      97       5       94.4%
BITBANK14           88      0       0      33        0.0%
BANK14              88      0       0      34        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     40      46       1       74.5%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      DD       6        0.0%
DATA                 0      0      DD       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Apr 24 12:01:19 2018

                ??i2_i2c1_driver_startRX 0001                             returnReset@p 0021  
                      updateExpanders@lL 0098                        updateExpanders@mL 009A  
                      updateExpanders@lR 0099                        updateExpanders@mR 009B  
                      updateExpanders@rL 009C                        updateExpanders@rR 009D  
          _do_I2C_SEND_RESTART$intlevel0 1324                              __CFG_CP$OFF 000000  
                   __size_of_do_I2C_IDLE 0012                      _do_I2C_SEND_RESTART 131E  
                   __size_of_do_I2C_RCEN 0012                     readIoExpander@spaces 0034  
                    ?i2_i2c_restartWrite 000C                              __CFG_LVP$ON 000000  
                                    l362 06E8                                      l435 0C4C  
                                    l443 0884                                      l436 0C40  
                                    l444 084A                                      l445 0838  
                                    l381 0F4E                                      l605 0F26  
                                    l454 08B2                                      l462 098E  
                                    l471 0B4C                                      l439 0C46  
                                    l447 083E                                      l463 0982  
                                    l383 0F60                                      l472 0B38  
                                    l448 0844                                      l369 1096  
                                    l465 0988                                      l393 111C  
                                    l545 0CBC                                      l394 110C  
                                    l475 0B3E                                      l459 097E  
                                    l483 0C00                                      l476 0B46  
                                    l734 03D0                                      l647 1296  
                                    l751 0808                                      l496 0A0A  
                                    l738 041E                                      l746 07CC  
                                    l747 07AC                                      l860 05C6  
                                    l749 07EE                                      l781 011A  
                                    l846 1072                                      l782 0282  
                                    l863 0606                                      l783 02B2  
                                    l864 0614                                      l856 058C  
                                    l792 0386                                      l784 02DA  
                                    l865 062A                                      l857 05A4  
                                    l785 034E                                      l786 031E  
                                    l859 05D2                                      l787 030C  
                           __CFG_CPD$OFF 000000          __end_ofi2_i2c1_driver_getRXData 145E  
                                    _abs 1054             __size_of_i2c_masterOperation 0032  
                   _returnStop$intlevel0 13A4            i2c_setDataCompleteCallback@cb 001C  
        i2i2c_setDataCompleteCallback@cb 0007                  __size_of_PMD_Initialize 001C  
                  __size_of_do_I2C_RESET 0016                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
               ?i2_rd1RegCompleteHandler 000C          i2c1_driver_setBusCollisionISR@f 0016  
                            i2_do_I2C_RX 0AB8                              i2_do_I2C_TX 08BE  
               ?i2_wr1RegCompleteHandler 000C                             __CFG_ZCD$OFF 000000  
                                   ?_abs 0016                  ??_rd2RegCompleteHandler 0023  
                                   l4202 0F02                                     l4234 040E  
                                   l4190 0C80                                     l4248 0494  
                                   l3490 1366                                     l3486 1358  
                                   l4378 07DE                                     l4396 0824  
                         i2_mssp1_setIRQ 1424                   __size_ofi2_do_I2C_IDLE 000C  
                                   u2100 125E                                     u2008 085A  
                                   u2009 086E                   __size_ofi2_do_I2C_RCEN 000C  
                                   u2050 11BE                                     u2108 1260  
                                   _LATA 000F83                                     u2038 099E  
                                   _LATB 000F84                                     u2039 09B2  
                                   _LATC 000F85                                     u2048 0B5C  
                                   u2400 0824                                     _LATD 000F86  
                                   u2049 0B70                                     _LATE 000F87  
                                   u2250 03CC                                     u1460 1352  
                                   u2098 0C16                                     u2290 0494  
                                   u2274 043A                                     u2099 0C2A  
                                   u2275 0436                                     u2284 046C  
                                   u2700 0384                                     u2285 0468  
                                   u1590 05D6                                     u2710 03A8  
                                   u2641 0112                                     u2650 020C  
                                   u2727 0314                                     u2737 038E  
                                   u2747 07C0                                     _PMD0 000EE1  
                                   u2757 0812                                     _PMD1 000EE2  
                                   _PMD2 000EE3                                     u2767 11C6  
                                   _PMD3 000EE4                                     _PMD4 000EE5  
                                   _PMD5 000EE6                                     u1988 0C5C  
                                   u1989 0C70                     ?_do_I2C_SEND_RESTART 0001  
                                   _WPUA 000F10                                     _WPUB 000F18  
                                   _WPUC 000F20                                     _WPUD 000F25  
                                   _WPUE 000F2D                     ??i2_i2c_restartWrite 000E  
                ??_wr2RegCompleteHandler 0023                            _EUSART1_Write 1364  
                          __CFG_FCMEN$ON 000000                            _EUSART2_Write 1356  
      __size_of_do_I2C_SEND_RESTART_READ 000E                                     abs@a 0016  
                   __end_ofi2_returnStop 146E                ?_do_I2C_SEND_RESTART_READ 0001  
                                   _main 00E0                __size_of_do_I2C_SEND_STOP 000E  
                 __size_of_do_I2C_DO_ACK 000E                            ?_EUSART2_Read 0001  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   fsr2h 000FDA                                     fsr0l 000FE9  
                                   indf1 000FE7                                     indf2 000FDF  
                                   fsr1l 000FE1                                     fsr2l 000FD9  
                                   btemp 0047                    ?_do_I2C_SEND_ADR_READ 0001  
                                   prodh 000FF4                                     prodl 000FF3  
        ??_i2c1_driver_clearBusCollision 0001                 __size_of_i2c_writeNBytes 004A  
                                   start 00DC                            _i2c_setBuffer 1124  
                          __CFG_CSWEN$ON 000000                          __end_of_i2c_ISR 0C30  
                           ___param_bank 000000         __size_of_rdBlkRegCompleteHandler 004A  
                          __CFG_SCANE$ON 000000                 ??_do_I2C_DO_NACK_RESTART 0016  
              __size_of_mssp1_disableIRQ 0006                                    ??_abs 0018  
                __end_of_updateExpanders 0570                             _do_I2C_RESET 11FA  
         __size_of_OSCILLATOR_Initialize 0018              i2c_setAddressNACKCallback@p 001F  
          __end_of_OSCILLATOR_Initialize 118A                          __end_of___aldiv 063C  
               __end_of_i2c1_driver_open 11B8                                    ?_main 0001  
                         _i2c_readNBytes 0F00                 __size_ofi2_i2c_setBuffer 001A  
               __end_of_i2c1_driver_stop 144E                            __CFG_WDTE$OFF 000000  
             __end_of_i2c1_driver_TXData 13C0                           __CFG_DEBUG$OFF 000000  
                __size_ofi2_do_I2C_RESET 0010                                    i2l281 0072  
                                  i2l435 0D70                                    i2l443 0914  
                                  i2l436 0D64                                    i2l444 08DA  
                                  i2l445 08C8                                    i2l454 0942  
                                  i2l462 0AF2                                    i2l471 0BA4  
                                  i2l439 0D6A                                    i2l447 08CE  
                                  i2l463 0AE6                                    i2l472 0B90  
                                  i2l448 08D4                                    i2l465 0AEC  
                                  i2l475 0B96                                    i2l459 0AE2  
                                  i2l483 0D2A                                    i2l476 0B9E  
                                  i2l496 0A82                                    _OSCEN 000EDC  
                                  _TRISA 000F88                                    _TRISB 000F89  
                                  _TRISC 000F8A                                    _TRISD 000F8B  
                                  _TRISE 000F8C                            __CFG_WRT0$OFF 000000  
                          __CFG_WRT1$OFF 000000                            __CFG_WRT2$OFF 000000  
                          __CFG_WRT3$OFF 000000                            __CFG_WRT4$OFF 000000  
                          __CFG_WRT5$OFF 000000                            __CFG_WRT6$OFF 000000  
                          __CFG_WRT7$OFF 000000                           __CFG_EBTR0$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                              i2c_open@ret 001A  
                         __CFG_EBTR4$OFF 000000                           __CFG_EBTR5$OFF 000000  
                         __CFG_EBTR6$OFF 000000                           __CFG_EBTR7$OFF 000000  
                  updateExpanders@spaces 0094                           _i2c_masterRead 13B0  
                          __CFG_WRTB$OFF 000000                    __end_ofi2_returnReset 146A  
                          __CFG_WRTC$OFF 000000                            __CFG_WRTD$OFF 000000  
                 __end_ofi2_mssp1_setIRQ 142A                           __CFG_EBTRB$OFF 000000  
             __end_of_i2c1_driver_isNACK 1226                       __size_ofi2_i2c_ISR 0048  
             ?_do_I2C_SEND_RESTART_WRITE 0001                       __CFG_MCLRE$EXTMCLR 000000  
                  ??_do_I2C_SEND_RESTART 0016                                    main@i 00BB  
                          i2returnStop@p 000C   __end_of_i2c1_driver_setBusCollisionISR 12E6  
__size_of_i2c1_driver_setBusCollisionISR 000E           _i2c1_driver_setBusCollisionISR 12D8  
                         ?_EUSART1_Write 0001                           ?_EUSART2_Write 0001  
                                  pclath 000FFA                                    tablat 000FF5  
                __size_of_mssp1_clearIRQ 0006                                    plusw1 000FE3  
                                  plusw2 000FDB                           ??_EUSART2_Read 0016  
                 ?_do_I2C_SEND_ADR_WRITE 0001                                    status 000FD8  
                                  wtemp6 0048          __size_ofi2_i2c1_driver_sendNACK 0006  
                         ?_i2c_setBuffer 0016                             ?_setCallBack 0016  
        __size_ofi2_i2c1_driver_resetBus 0002                            _fsmStateTable 00C7  
                        __initialization 0DE6                               _i2c_poller 110A  
                             _i2c_status 0060               __end_of_EUSART1_Initialize 123C  
                           __end_of_main 03AA                            i2_do_I2C_IDLE 137E  
                       i2setCallBack@idx 0006                            i2_do_I2C_RCEN 1372  
                       i2_do_I2C_TX$1050 0002                         __end_of_i2c_open 06EC  
                 __end_of_i2c_readNBytes 0F32              ?_INTERRUPT_InterruptManager 0001  
                  i2i2c_setBuffer@buffer 0001                         i2_mssp1_clearIRQ 141E  
       __end_ofi2_do_I2C_DO_ADDRESS_NACK 0DA2          __end_ofi2_rd1RegCompleteHandler 0FF4  
                          setCallBack@cb 0016                            _do_I2C_DO_ACK 1302  
                                 ??_main 00A2                        ?_i2c_restartWrite 0021  
          __size_of_i2c1_driver_sendNACK 0006                            __activetblptr 000003  
        __end_ofi2_wr1RegCompleteHandler 1024                             i2c_close@ret 0016  
                 __end_of_i2c_masterRead 13B8                       ??_i2c_restartWrite 0023  
          __size_of_i2c1_driver_resetBus 0002                  ?_do_I2C_DO_ADDRESS_NACK 0001  
                      main@receivedScore 00B3                          ?i2_mssp1_setIRQ 0001  
     __end_ofi2_do_I2C_SEND_RESTART_READ 13F8               i2_do_I2C_SEND_RESTART_READ 13F0  
             __end_of_EUSART2_Initialize 11A2                                   _ANSELA 000F11  
                                 _ANSELB 000F19                                   _ANSELC 000F21  
                                 _ANSELD 000F26                                   _ANSELE 000F2E  
               __size_ofi2_do_I2C_DO_ACK 0008                                   _RC1REG 000F99  
                                 _RC2REG 000E99                                   _RC1STA 000F9D  
                                 _RD0PPS 000EFF                                   _RC2STA 000E9D  
                                 _RC3PPS 000EFA                                   _RC4PPS 000EFB  
                                 _ODCONA 000F0F                                   _ODCONB 000F17  
                                 _ODCONC 000F1F                                   _RC6PPS 000EFD  
                                 _ODCOND 000F24                                   _ODCONE 000F2C  
                                 _RD7PPS 000F06                           __CFG_WDTCCS$SC 000000  
                     __size_of_i2c_close 001E                                   _OSCFRQ 000EDE  
                i2_do_I2C_SEND_ADR_WRITE 129A                   ??_do_I2C_SEND_ADR_READ 0017  
                                 _TX1REG 000F9A                                   _TX2REG 000E9A  
                                 _TX1STA 000F9E                                   _TX2STA 000E9E  
               rdBlkRegCompleteHandler@p 0021                                ??_i2c_ISR 0019  
                         __CFG_PWRTE$OFF 000000                  ??i2_do_I2C_SEND_RESTART 0001  
                         __CFG_XINST$OFF 000000         __size_ofi2_i2c1_driver_getRXData 0004  
                  _i2c1_driver_getRXData 1442                __CFG_RSTOSC$HFINTOSC_1MHZ 000000  
                     i2_i2c1_driver_stop 146E                      _do_I2C_RX$intlevel0 0954  
            __end_of_do_I2C_DO_NACK_STOP 1302      __end_of_i2c_setDataCompleteCallback 10D2  
         ?i2_i2c_setDataCompleteCallback 0007              _i2c_setDataCompleteCallback 10B6  
                              ??___aldiv 001E                           ?i2_do_I2C_IDLE 0001  
                        _i2c_masterWrite 13A8                           ?i2_do_I2C_RCEN 0001  
  __end_of_i2c1_driver_clearBusCollision 1442   __size_of_i2c1_driver_clearBusCollision 0006  
          _i2c1_driver_clearBusCollision 143C                           __CFG_STVREN$ON 000000  
                      __end_ofi2_i2c_ISR 0D5A          __size_of_do_I2C_DO_NACK_RESTART 000E  
                      ??_i2c_writeNBytes 0025                         ?_updateExpanders 0039  
                        ?_i2c_readNBytes 001B                           i2returnReset@p 000C  
                                 clear_0 0E0C                           ?_do_I2C_DO_ACK 0001  
                    ?i2_i2c1_driver_stop 0001           i2i2c_setDataCompleteCallback@p 000A  
                 i2_i2c1_driver_sendNACK 142A                   i2c1_driver_setI2cISR@f 0016  
            __end_of_i2c1_driver_sendACK 1412                           _PMD_Initialize 10D2  
         __end_of_do_I2C_DO_ADDRESS_NACK 0C7E                          ?_i2c_masterRead 0001  
                 i2_i2c1_driver_resetBus 1478              ?_i2c_setAddressNACKCallback 001C  
   __size_ofi2_do_I2C_SEND_RESTART_WRITE 0008              __end_of_i2c1_driver_restart 1452  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                             ?_returnReset 0021  
          _do_I2C_DO_NACK_STOP$intlevel0 12FA                    _i2c1_driver_setI2cISR 12CA  
            __end_of_i2c1_driver_startRX 144A                          ??_EUSART1_Write 0016  
                  __size_ofi2_returnStop 0004                        ??i2_i2c_setBuffer 0005  
                        ??_EUSART2_Write 0016           __size_ofi2_do_I2C_DO_NACK_STOP 0008  
          __size_of_INTERRUPT_Initialize 0004            __end_ofi2_do_I2C_DO_NACK_STOP 13D0  
           __size_of_EUSART2_is_rx_ready 000E                        _SYSTEM_Initialize 113E  
                             __accesstop 0060                     ??i2_i2c1_driver_stop 0001  
                     readIoExpander@addr 0035                  __end_of__initialization 0E1E  
                     readIoExpander@bank 0026                       readIoExpander@data 0032  
                        ??_i2c_setBuffer 001A           _do_I2C_SEND_ADR_READ$intlevel0 11EA  
                       _do_I2C_SEND_STOP 1310                       __size_of_do_I2C_RX 007A  
                     __size_of_do_I2C_TX 0096                       ?_SYSTEM_Initialize 0001  
                          ___rparam_used 000001               __end_of_mssp1_IRQisEnabled 1264  
      _rdBlkRegCompleteHandler$intlevel0 0CCE                  __size_of_readIoExpander 00EE  
                    _i2c_masterOperation 0F32                 __size_of_do_I2C_TX_EMPTY 005E  
             ?i2_rdBlkRegCompleteHandler 000C                  _rdBlkRegCompleteHandler 0CC8  
         __size_ofi2_i2c1_driver_sendACK 0006               __end_of_mssp1_waitForEvent 11CE  
          __end_ofi2_i2c1_driver_sendACK 1436                              ?_i2c_poller 0001  
                         __pcstackCOMRAM 0001                      _do_I2C_TX$intlevel0 082E  
                           __pidataBANK0 0F64                      ??_SYSTEM_Initialize 0016  
         __size_ofi2_i2c1_driver_restart 0004            __end_ofi2_i2c1_driver_restart 1476  
                       _mssp1_disableIRQ 1412           __size_ofi2_i2c1_driver_startRX 0004  
          __end_ofi2_i2c1_driver_startRX 1462                   __end_of_PMD_Initialize 10EE  
                      __end_of_i2c_close 109A                             i2_returnStop 146A  
                   __end_of_EUSART2_Read 129A                           i2_do_I2C_RESET 12BA  
                   ?_i2c_masterOperation 0001                       __size_of_getSpaces 0098  
               i2_do_I2C_DO_ADDRESS_NACK 0D5A                             ?i2_do_I2C_RX 0001  
                           ?i2_do_I2C_TX 0001                           main@gamerScore 00B1  
      __size_ofi2_do_I2C_DO_NACK_RESTART 0008                 i2rd2RegCompleteHandler@p 000C  
                         setCallBack@idx 001B                ?i2_do_I2C_DO_NACK_RESTART 0001  
                 _do_I2C_DO_NACK_RESTART 12E6                           _do_I2C_TX$1050 0017  
              __end_of_SYSTEM_Initialize 1158                ??i2_do_I2C_SEND_ADR_WRITE 0002  
             __end_ofi2_do_I2C_SEND_STOP 13E0                           _mssp1_clearIRQ 1418  
                             __pbssBANK0 0060            __size_ofi2_i2c1_driver_TXData 0008  
         __size_of_rd2RegCompleteHandler 0036                                ?_i2c_open 0001  
          __end_of_rd2RegCompleteHandler 0E5E           __size_of_wr2RegCompleteHandler 0036  
          __end_of_wr2RegCompleteHandler 0F00                  __end_of_i2c_masterWrite 13B0  
       __size_ofi2_rd1RegCompleteHandler 0030                    _rd1RegCompleteHandler 0E5E  
                 ?_i2c1_driver_getRXData 0001                        ??i2_do_I2C_DO_ACK 0001  
               i2wr2RegCompleteHandler@p 000C            __size_ofi2_i2c1_driver_isNACK 0016  
                  _do_I2C_IDLE$intlevel0 127C                        i2_do_I2C_TX_EMPTY 0B8A  
       __size_ofi2_wr1RegCompleteHandler 0030                          ??i2_do_I2C_IDLE 0001  
                  _wr1RegCompleteHandler 0E94                           _SSP1DATPPSbits 000EB8  
           __size_of_i2c_busCollisionISR 0006                          ??i2_do_I2C_RCEN 0001  
        _wr1RegCompleteHandler$intlevel0 0E9A          _rd1RegCompleteHandler$intlevel0 0E64  
                          ??_do_I2C_IDLE 0016                     __size_of_setCallBack 0078  
                          ??_do_I2C_RCEN 0016        __end_ofi2_rdBlkRegCompleteHandler 0DE6  
                  i2c_readNBytes@address 001F                       ?i2_do_I2C_TX_EMPTY 0001  
                        __CFG_PPS1WAY$ON 000000                          ??_do_I2C_DO_ACK 0016  
                 __end_ofi2_do_I2C_RESET 12CA                      i2c_setBuffer@buffer 0016  
                         _SSP1CLKPPSbits 000EB7                          ?_PMD_Initialize 0001  
         ?_i2c1_driver_clearBusCollision 0001                      ??i2_do_I2C_TX_EMPTY 0001  
                  ??_i2c_masterOperation 0019                        ?_i2c1_driver_open 0001  
                      __end_of_do_I2C_RX 09C8                        __end_of_do_I2C_TX 08BE  
               ??i2_do_I2C_SEND_ADR_READ 0002                        ?_i2c1_driver_stop 0001  
                                _SP1BRGH 000F9C                                  _SP1BRGL 000F9B  
                 ?_i2c1_driver_setI2cISR 0016                                  _SP2BRGH 000E9C  
                                _SP2BRGL 000E9B                       ??_i2c1_driver_open 0016  
               ?i2_rd2RegCompleteHandler 000C                       ??_i2c1_driver_stop 0016  
                                _OSCCON1 000ED8                                  _OSCCON3 000EDA  
                          ?_mssp1_setIRQ 0001                   __size_ofi2_setCallBack 0078  
                                _OSCTUNE 000EDD                                  _SSP1ADD 000F93  
               ?i2_wr2RegCompleteHandler 000C                                  _SSP1BUF 000F92  
                 __end_of_mssp1_clearIRQ 141E                                  _SSP1MSK 000F94  
                    __size_of_i2c_poller 001A                  ??_do_I2C_SEND_ADR_WRITE 0017  
    _do_I2C_SEND_RESTART_WRITE$intlevel0 1332              ??_do_I2C_SEND_RESTART_WRITE 0016  
                     _i2c1_driver_TXData 13B8                               ??_i2c_open 0019  
            __size_ofi2_i2c_restartWrite 0004                 __end_ofi2_mssp1_clearIRQ 1424  
                     _i2c1_driver_i2cISR 0041                                  _i2c_ISR 0BE2  
              ??_rdBlkRegCompleteHandler 0023                __end_ofi2_do_I2C_TX_EMPTY 0BE2  
                i2_i2c1_driver_getRXData 145A                                  __Hparam 0000  
                  _returnReset$intlevel0 139A                        __end_of_getSpaces 0828  
                  _do_I2C_RCEN$intlevel0 126A                       _i2c1_driver_isNACK 1210  
                    ?_i2c1_driver_TXData 0001                                  __Lparam 0000  
       _do_I2C_DO_ADDRESS_NACK$intlevel0 0C36      __size_of_i2c_setAddressNACKCallback 001C  
                                ___aldiv 0570                        ??_do_I2C_TX_EMPTY 0016  
                    ?_i2c1_driver_isNACK 0001                          ?i2_do_I2C_RESET 0001  
                                __pcinit 0DE6                                  __ramtop 0F00  
                 i2c_writeNBytes@address 0025                       i2c_readNBytes@data 001B  
                                __ptext0 00E0                                  __ptext1 0790  
                                __ptext2 0498                                  __ptext3 03AA  
                                __ptext4 0C7E                                  __ptext5 109A  
                                __ptext6 13A8                                  __ptext7 0F00  
                                __ptext8 063C                                  __ptext9 12CA  
                    __end_of_do_I2C_IDLE 1288                      __end_of_do_I2C_RCEN 1276  
                       ??i2_mssp1_setIRQ 0001                    _OSCILLATOR_Initialize 1172  
                           __size_of_abs 0028              __end_of_do_I2C_SEND_RESTART 132C  
                         ??_mssp1_setIRQ 0016                         ___aldiv@dividend 0016  
                   ??_i2c1_driver_TXData 0016                       _EUSART1_Initialize 1226  
               ??_PIN_MANAGER_Initialize 0016                   i2c_masterOperation@ret 001A  
                        ?_mssp1_clearIRQ 0001               _do_I2C_SEND_STOP$intlevel0 1316  
            ?i2_do_I2C_SEND_RESTART_READ 0001                 _do_I2C_SEND_RESTART_READ 133A  
             __size_of_SYSTEM_Initialize 001A                        main@photonAddress 00BA  
                   __size_of_returnReset 000A                     end_of_initialization 0E1E  
                   ??_i2c1_driver_isNACK 0016                      ?_EUSART1_Initialize 0001  
              __size_of_i2c_restartWrite 000A             __end_of_i2c1_driver_sendNACK 140C  
                 ?_rd1RegCompleteHandler 0021                          _i2c_writeNBytes 0C7E  
                         _readIoExpander 03AA                         ?_i2c_masterWrite 0001  
                 ?_wr1RegCompleteHandler 0021             __end_of_i2c1_driver_resetBus 1478  
                     _EUSART2_Initialize 118A                         ??_i2c_readNBytes 001F  
                          i2_setCallBack 0A40           __size_ofi2_do_I2C_SEND_RESTART 0008  
          __end_ofi2_do_I2C_SEND_RESTART 13E8                         ___aldiv@quotient 0020  
                                postdec1 000FE5                                  postdec2 000FDD  
                                postinc0 000FEE                                  postinc2 000FDE  
                  __size_of_EUSART2_Read 0012                   __size_ofi2_returnReset 0004  
           ?i2_do_I2C_SEND_RESTART_WRITE 0001                _do_I2C_SEND_RESTART_WRITE 132C  
                             main@F12062 0092                               main@F12066 008A  
                ?i2_i2c1_driver_sendNACK 0001                     ??_EUSART1_Initialize 0016  
                       ??_i2c_masterRead 001B                    __CFG_WDTCPS$WDTCPS_31 000000  
                    ?_EUSART2_Initialize 0001                      _EUSART2_is_rx_ready 1348  
                        i2_i2c_setBuffer 1158                  ?i2_i2c1_driver_resetBus 0001  
        __end_ofi2_rd2RegCompleteHandler 0FC4                               _returnStop 139E  
        __end_of_rdBlkRegCompleteHandler 0D12                 __end_of_do_I2C_SEND_STOP 131E  
                             getSpaces@i 009F                                i2_i2c_ISR 0D12  
        __end_ofi2_wr2RegCompleteHandler 1054          __size_ofi2_do_I2C_SEND_ADR_READ 0010  
   __size_of_i2c_setDataCompleteCallback 001C          ??i2_i2c_setDataCompleteCallback 000C  
                    readIoExpander@index 0027                              returnStop@p 0021  
                    EUSART1_Write@txData 0016                         __CFG_FEXTOSC$OFF 000000  
               __end_of_mssp1_disableIRQ 1418                      readIoExpander@spots 002A  
                   __size_ofi2_do_I2C_RX 0074                     __size_ofi2_do_I2C_TX 0090  
                   ??_EUSART2_Initialize 0016                     ?_EUSART2_is_rx_ready 0001  
           i2c_setDataCompleteCallback@p 001F                   __end_of_readIoExpander 0498  
              ??i2_i2c1_driver_getRXData 0001                  i2_rd1RegCompleteHandler 0FC4  
             __size_ofi2_do_I2C_TX_EMPTY 0058                             _EUSART2_Read 1288  
                i2_wr1RegCompleteHandler 0FF4                               main@player 00C5  
          __size_of_do_I2C_SEND_ADR_READ 0016                           ?i2_setCallBack 0001  
                           ??_i2c_poller 0019              ??i2_rdBlkRegCompleteHandler 000E  
         __end_ofi2_i2c1_driver_sendNACK 1430                              _do_I2C_IDLE 1276  
                            _do_I2C_RCEN 1264             __end_of_INTERRUPT_Initialize 145A  
         __end_ofi2_i2c1_driver_resetBus 147A               ??i2_do_I2C_DO_ADDRESS_NACK 0001  
       __end_ofi2_do_I2C_DO_NACK_RESTART 13C8            ??i2_do_I2C_SEND_RESTART_WRITE 0001  
                     _mssp1_IRQisEnabled 1252                   ?_OSCILLATOR_Initialize 0001  
                             ?i2_i2c_ISR 0001             __size_of_do_I2C_DO_NACK_STOP 000E  
                     _mssp1_waitForEvent 11B8                  ?_do_I2C_DO_NACK_RESTART 0001  
                    start_initialization 0DE6                                _i2c_close 107C  
                    _i2c_busCollisionISR 1436                 __size_of_updateExpanders 00D8  
        __size_of_PIN_MANAGER_Initialize 00A4                      ?_mssp1_IRQisEnabled 0001  
                            __end_of_abs 107C                          i2setCallBack@cb 0001  
                __end_of_i2c_writeNBytes 0CC8                          i2_do_I2C_DO_ACK 13D0  
                          i2_returnReset 1466                      ?_mssp1_waitForEvent 0016  
                           setCallBack@p 0019                       __end_of_i2c_poller 1124  
                  ??_EUSART2_is_rx_ready 0016             __size_of_i2c1_driver_sendACK 0006  
                  __end_of_EUSART1_Write 1372                          i2c_open@address 0019  
                  __end_of_EUSART2_Write 1364                  i2c_setBuffer@bufferSize 0018  
                ??_i2c1_driver_getRXData 0016                          ?_readIoExpander 0026  
                 rd1RegCompleteHandler@p 0021             __size_of_i2c1_driver_restart 0004  
            __size_ofi2_i2c1_driver_stop 0004             __size_of_i2c1_driver_startRX 0004  
                  i2_do_I2C_DO_NACK_STOP 13C8                   i2_do_I2C_SEND_ADR_READ 12AA  
                  __end_of_i2c_setBuffer 113E                        __size_of_i2c_open 00B0  
                   ?_i2c_busCollisionISR 0001                         __CFG_LPBOREN$OFF 000000  
                   __end_of_mssp1_setIRQ 1406                  __end_ofi2_i2c_setBuffer 1172  
                   ??_mssp1_IRQisEnabled 0016                       i2_do_I2C_SEND_STOP 13D8  
                       ??_PMD_Initialize 0016                     ??_mssp1_waitForEvent 0018  
                 wr1RegCompleteHandler@p 0021                    i2_i2c1_driver_sendACK 1430  
                          ?_do_I2C_RESET 0001             __end_ofi2_i2c1_driver_TXData 1400  
                            __pdataBANK0 00C7                    i2i2c1_driver_TXData@d 0001  
              _do_I2C_TX_EMPTY$intlevel0 0B32      __size_ofi2_do_I2C_SEND_RESTART_READ 0008  
                  i2_i2c1_driver_restart 1472                              ?_returnStop 0021  
                    ?i2_do_I2C_SEND_STOP 0001                  ??_i2c1_driver_setI2cISR 0019  
                  i2_i2c1_driver_startRX 145E                      i2i2c_restartWrite@p 000C  
         __end_of_do_I2C_DO_NACK_RESTART 12F4                     _i2c1_driver_sendNACK 1406  
           __end_ofi2_i2c1_driver_isNACK 1252                        readIoExpander@rec 0036  
                            __pbssCOMRAM 0041                               ?_i2c_close 0001  
                   _i2c1_driver_resetBus 1476                i2_rdBlkRegCompleteHandler 0DA2  
                          __pcstackBANK0 0094                           ?i2_returnReset 000C  
                              _do_I2C_RX 094E                                _do_I2C_TX 0828  
                    EUSART2_Write@txData 0016                ??i2_rd1RegCompleteHandler 000E  
         __size_of_do_I2C_SEND_ADR_WRITE 0016    __end_ofi2_i2c_setDataCompleteCallback 110A  
 __size_ofi2_i2c_setDataCompleteCallback 001C            i2_i2c_setDataCompleteCallback 10EE  
          __end_of_do_I2C_SEND_ADR_WRITE 11E4                ??i2_wr1RegCompleteHandler 000E  
                       _i2c_restartWrite 138A                     ??i2_do_I2C_SEND_STOP 0001  
             _i2c_restartWrite$intlevel0 1390                __size_of_i2c1_driver_open 0016  
                      ?i2_mssp1_clearIRQ 0001                __size_of_i2c1_driver_stop 0004  
                        ??i2_setCallBack 0006                                 ?_i2c_ISR 0001  
        _do_I2C_SEND_ADR_WRITE$intlevel0 11D4                          _do_I2C_TX_EMPTY 0B2C  
                          ??_setCallBack 001B         __size_ofi2_rd2RegCompleteHandler 0030  
                  _rd2RegCompleteHandler 0E28                       ??i2_mssp1_clearIRQ 0001  
                  ??_i2c_busCollisionISR 0001         __size_ofi2_wr2RegCompleteHandler 0030  
                 _PIN_MANAGER_Initialize 06EC                    _wr2RegCompleteHandler 0ECA  
                       ??i2_do_I2C_RESET 0001                                __pintcode 0008  
                  __end_ofi2_do_I2C_IDLE 138A                                 ?___aldiv 0016  
                  __end_ofi2_do_I2C_RCEN 137E                           ??_do_I2C_RESET 0016  
                              __ptext100 0FC4                                __ptext101 0FF4  
                              __ptext110 1472                                __ptext102 1462  
                              __ptext111 1430                                __ptext103 1466  
                              __ptext112 1436                                __ptext104 146A  
                              __ptext113 143C                                __ptext105 1024  
                              __ptext114 0000                                __ptext106 10EE  
                              __ptext107 0A40                                __ptext108 1158  
                              __ptext109 146E              __end_of_i2c_masterOperation 0F64  
                              _getSpaces 0790                 ??_do_I2C_DO_ADDRESS_NACK 0016  
            _i2c1_driver_busCollisionISR 0044                    __end_of_do_I2C_DO_ACK 1310  
           ??_INTERRUPT_InterruptManager 0004               ??_do_I2C_SEND_RESTART_READ 0016  
                  ?_i2c1_driver_sendNACK 0001                              ??i2_i2c_ISR 0004  
                __end_ofi2_do_I2C_DO_ACK 13D8                         ??_mssp1_clearIRQ 0016  
                               _BAUD1CON 000F9F                                 _BAUD2CON 000E9F  
               i2_do_I2C_DO_NACK_RESTART 13C0                    ?_i2c1_driver_resetBus 0001  
     __size_of_do_I2C_SEND_RESTART_WRITE 000E                 ?i2_do_I2C_SEND_ADR_WRITE 0001  
                             ?_do_I2C_RX 0001                               ?_do_I2C_TX 0001  
                      _i2c1_driver_start 1452                         ?_i2c_writeNBytes 0021  
             __end_ofi2_i2c_restartWrite 1466                  ??_rd1RegCompleteHandler 0023  
                      i2c_readNBytes@len 001D                     _INTERRUPT_Initialize 1456  
                      _i2c_ISR$intlevel0 0BE8                       ?_i2c1_driver_start 0001  
                ??_wr1RegCompleteHandler 0023                   ?i2_do_I2C_DO_NACK_STOP 0001  
                        ___aldiv@divisor 001A                        ??_updateExpanders 003D  
                        ___aldiv@counter 001E                                 _LATAbits 000F83  
                    __size_of_returnStop 000A                                 _PIE3bits 000EC5  
                    __CFG_BORV$VBOR_2P45 000000                      ??_i2c1_driver_start 0016  
                               i2u230_48 0D80                                 i2u230_49 0D94  
    __size_of_INTERRUPT_InterruptManager 00D4                                 i2u232_48 08EA  
                               i2u232_49 08FE                                 i2u250_48 007C  
                               i2u250_49 0090                                 i2u235_48 0B02  
                               i2u243_48 0D40                                 i2u235_49 0B16  
                               i2u243_49 0D54                                 i2u236_48 0BB4  
                               i2u236_49 0BC8                                 i2u247_48 0062  
                               _PIR3bits 000ECD                         ?i2_i2c_setBuffer 0001  
                 ?i2_i2c1_driver_sendACK 0001                                 _SSP1CON1 000F96  
                               _SSP1CON2 000F97             ?_i2c_setDataCompleteCallback 001C  
                               _SSP1STAT 000F95                               ?_getSpaces 0001  
                    __end_of_setCallBack 0A40                   ?i2_i2c1_driver_restart 0001  
                 ?i2_i2c1_driver_startRX 0001             i2c_setAddressNACKCallback@cb 001C  
                      ?_do_I2C_SEND_STOP 0001                          ??i2_returnReset 000E  
                            ??_i2c_close 0016                __end_of_i2c1_driver_start 1456  
                          ??_returnReset 0023                       ??_do_I2C_SEND_STOP 0016  
            __size_of_i2c1_driver_TXData 0008             ??_i2c_setAddressNACKCallback 0021  
      __end_of_do_I2C_SEND_RESTART_WRITE 133A                  __end_of_do_I2C_TX_EMPTY 0B8A  
                              copy_data0 0DFA                    ?_INTERRUPT_Initialize 0001  
               ?_rdBlkRegCompleteHandler 0021                        ?_mssp1_disableIRQ 0001  
           __size_of_do_I2C_SEND_RESTART 000E              __size_of_i2c1_driver_isNACK 0016  
                   i2_i2c1_driver_TXData 13F8                  _do_I2C_DO_ACK$intlevel0 1308  
                               _i2c_open 063C                    __size_of_mssp1_setIRQ 0006  
                         i2setCallBack@p 0004                       ??_mssp1_disableIRQ 0016  
                 ?_rd2RegCompleteHandler 0021                      _do_I2C_DO_NACK_STOP 12F4  
                       __size_of_i2c_ISR 004E                   ?_wr2RegCompleteHandler 0021  
        _wr2RegCompleteHandler$intlevel0 0ED0          _rd2RegCompleteHandler$intlevel0 0E2E  
                               __Hrparam 0000                     i2_i2c1_driver_isNACK 123C  
                               __Lrparam 0000                           getSpaces@space 00A1  
                     __CFG_BOREN$SBORDIS 000000                      i2c_writeNBytes@data 0021  
                           ?_do_I2C_IDLE 0001                             ?_do_I2C_RCEN 0001  
                ??_OSCILLATOR_Initialize 0016                         __size_of___aldiv 00CC  
                    _i2c1_driver_sendACK 140C                 __size_of_i2c_masterWrite 0008  
                  i2_do_I2C_SEND_RESTART 13E0          __size_of_do_I2C_DO_ADDRESS_NACK 004E  
                    i2c1_driver_TXData@d 0016              __size_of_EUSART1_Initialize 0016  
                 ??_i2c1_driver_sendNACK 0016            ??_i2c_setDataCompleteCallback 0021  
        __end_ofi2_do_I2C_SEND_ADR_WRITE 12AA         ??_i2c1_driver_setBusCollisionISR 0019  
        ?_i2c1_driver_setBusCollisionISR 0016       _do_I2C_SEND_RESTART_READ$intlevel0 1340  
                    _i2c1_driver_restart 144E                            ?i2_returnStop 000C  
                   ?_do_I2C_DO_NACK_STOP 0001                      _i2c1_driver_startRX 1446  
           __end_of_do_I2C_SEND_ADR_READ 11FA                   ??_i2c1_driver_resetBus 0016  
                       ?i2_do_I2C_DO_ACK 0001                       getSpaces@spaceLast 009E  
                          ??i2_do_I2C_RX 0001                            ??i2_do_I2C_TX 0002  
                           _mssp1_setIRQ 1400                              ??_do_I2C_RX 0016  
                       ??_readIoExpander 0028                              ??_do_I2C_TX 0017  
                               __ptext10 12D8                                 __ptext11 11A2  
                               __ptext20 0C30                                 __ptext12 13B0  
                               __ptext21 12E6                                 __ptext13 0F32  
                               __ptext30 133A                                 __ptext22 12F4  
                               __ptext14 1252                                 __ptext31 1276  
                               __ptext23 1302                                 __ptext15 110A  
                               __ptext40 1446                                 __ptext32 11FA  
                               __ptext24 1264                                 __ptext16 11B8  
                               __ptext41 0CC8                                 __ptext33 0B2C  
                               __ptext25 11CE                                 __ptext17 0BE2  
                               __ptext50 09C8                                 __ptext42 0E28  
                               __ptext34 1400                                 __ptext26 11E4  
                               __ptext18 094E                                 __ptext51 1124  
                               __ptext43 0E5E                                 __ptext35 1210  
                               __ptext27 1310                                 __ptext19 0828  
                               __ptext60 0570                                 __ptext52 144A  
                               __ptext44 0E94                                 __ptext36 13B8  
                               __ptext28 131E                                 __ptext61 113E  
                               __ptext53 144E                                 __ptext45 138A  
                               __ptext37 1442                                 __ptext29 132C  
                               __ptext70 1288                                 __ptext62 10D2  
                               __ptext54 140C                                 __ptext46 1394  
                               __ptext38 1406                                 __ptext71 1364  
                               __ptext63 06EC                                 __ptext55 1452  
                               __ptext47 139E                                 __ptext39 1476  
                               __ptext80 13D0                                 __ptext64 1172  
                               __ptext56 107C                                 __ptext48 0ECA  
                               __ptext81 1372                                 __ptext73 0D12  
                               __ptext65 1456                                 __ptext57 1412  
                               __ptext49 10B6                                 __ptext90 0B8A  
                               __ptext82 129A                                 __ptext74 141E  
                               __ptext66 118A                                 __ptext58 1418  
                               __ptext91 1424                                 __ptext83 12AA  
                               __ptext75 0AB8                                 __ptext67 1226  
                               __ptext59 1054                                 __ptext92 123C  
                               __ptext84 13D8                                 __ptext76 08BE  
                               __ptext68 1348                                 __ptext93 13F8  
                               __ptext85 13E0                                 __ptext77 0D5A  
                               __ptext69 1356                                 __ptext94 145A  
                               __ptext86 13E8                                 __ptext78 13C0  
                               __ptext95 142A                                 __ptext87 13F0  
                               __ptext79 13C8                                 __ptext96 1478  
                               __ptext88 137E                                 __ptext97 145E  
                               __ptext89 12BA                                 __ptext98 0DA2  
                               __ptext99 0F94                             _SSP1CON1bits 000F96  
                           _SSP1CON2bits 000F97                     ?_i2c1_driver_sendACK 0001  
                   __end_of_do_I2C_RESET 1210                    ?i2_i2c1_driver_TXData 0001  
                ?i2_do_I2C_SEND_ADR_READ 0001                  __size_ofi2_mssp1_setIRQ 0006  
            __size_of_EUSART2_Initialize 0018                     ?_i2c1_driver_restart 0001  
                    __end_of_returnReset 139E                         _i2c1_driver_open 11A2  
     __size_ofi2_rdBlkRegCompleteHandler 0044                  i2_rd2RegCompleteHandler 0F94  
                       _i2c1_driver_stop 144A                            __size_of_main 02CA  
                   ?_i2c1_driver_startRX 0001           __size_of_i2c1_driver_getRXData 0004  
          __end_of_i2c1_driver_getRXData 1446                  i2_wr2RegCompleteHandler 1024  
                   __CFG_WDTCWS$WDTCWS_7 000000                              _setCallBack 09C8  
                  ?i2_i2c1_driver_isNACK 0001                  i2c_masterOperation@read 0019  
                             _RC1STAbits 000F9D                               _RC2STAbits 000E9D  
                               int$flags 0047                              ??_getSpaces 003F  
     __end_of_INTERRUPT_InterruptManager 00DC               _INTERRUPT_InterruptManager 0008  
                           _SSP1STATbits 000F95                           ??i2_returnStop 000E  
                               main@spot 00BD         __end_of_do_I2C_SEND_RESTART_READ 1348  
                           ??_returnStop 0023                 __end_of_i2c_restartWrite 1394  
                  ??_do_I2C_DO_NACK_STOP 0016                  __size_of_i2c_readNBytes 0032  
              mssp1_waitForEvent@timeout 0016           __size_of_i2c1_driver_setI2cISR 000E  
          __end_of_i2c1_driver_setI2cISR 12D8                               _INTCONbits 000FF2  
            __end_of_EUSART2_is_rx_ready 1356               __size_of_i2c1_driver_start 0004  
                     i2c_writeNBytes@len 0023                   ??_INTERRUPT_Initialize 0016  
               ?i2_i2c1_driver_getRXData 0001                  __size_of_i2c_masterRead 0008  
         __end_ofi2_do_I2C_SEND_ADR_READ 12BA                          readIoExpander@i 0037  
                  ??_i2c1_driver_sendACK 0016                         ?_do_I2C_TX_EMPTY 0001  
      __size_ofi2_do_I2C_DO_ADDRESS_NACK 0048               __end_ofi2_i2c1_driver_stop 1472  
              ?i2_do_I2C_DO_ADDRESS_NACK 0001                   _do_I2C_DO_ADDRESS_NACK 0C30  
                               intlevel2 0000                   _do_I2C_RESET$intlevel0 1200  
                  ??_i2c1_driver_restart 0016                   rd2RegCompleteHandler@p 0021  
                  ??_i2c1_driver_startRX 0016               i2rdBlkRegCompleteHandler@p 000C  
                    __end_ofi2_do_I2C_RX 0B2C                      __end_ofi2_do_I2C_TX 094E  
                ?_PIN_MANAGER_Initialize 0001                        i2c_restartWrite@p 0021  
                      __CFG_CLKOUTEN$OFF 000000                       __end_of_returnStop 13A8  
            __size_of_mssp1_IRQisEnabled 0012      __end_ofi2_do_I2C_SEND_RESTART_WRITE 13F0  
            i2_do_I2C_SEND_RESTART_WRITE 13E8                   ?i2_do_I2C_SEND_RESTART 0001  
             ??i2_do_I2C_DO_NACK_RESTART 0001                   wr2RegCompleteHandler@p 0021  
            __size_of_mssp1_waitForEvent 0016                i2i2c_setBuffer@bufferSize 0003  
              __size_ofi2_mssp1_clearIRQ 0006                   __size_of_EUSART1_Write 000E  
                 __size_of_EUSART2_Write 000E                               _RX1PPSbits 000EB5  
                             _RX2PPSbits 000E8D                          _updateExpanders 0498  
                      ??_i2c_masterWrite 001B       __end_of_i2c_setAddressNACKCallback 10B6  
             _i2c_setAddressNACKCallback 109A                   __size_of_i2c_setBuffer 001A  
                           ___aldiv@sign 001F                              _returnReset 1394  
       _do_I2C_DO_NACK_RESTART$intlevel0 12EC                 i2rd1RegCompleteHandler@p 000C  
                ??i2_do_I2C_DO_NACK_STOP 0001                               _TX1STAbits 000F9E  
                 ??i2_i2c1_driver_TXData 0001                               _TX2STAbits 000E9E  
              ??i2_rd2RegCompleteHandler 000E             ??i2_do_I2C_SEND_RESTART_READ 0001  
         __end_of_PIN_MANAGER_Initialize 0790              __end_of_i2c_busCollisionISR 143C  
         __size_of_rd1RegCompleteHandler 0036                ??i2_wr2RegCompleteHandler 000E  
          __end_of_rd1RegCompleteHandler 0E94              __size_ofi2_do_I2C_SEND_STOP 0008  
               ??i2_i2c1_driver_sendNACK 0001           __size_of_wr1RegCompleteHandler 0036  
                 ??i2_i2c1_driver_isNACK 0001            __end_of_wr1RegCompleteHandler 0ECA  
       __size_ofi2_do_I2C_SEND_ADR_WRITE 0010                    _do_I2C_SEND_ADR_WRITE 11CE  
                ??i2_i2c1_driver_sendACK 0001                     _do_I2C_SEND_ADR_READ 11E4  
                  __end_ofi2_setCallBack 0AB8                 ??i2_i2c1_driver_resetBus 0001  
               i2wr1RegCompleteHandler@p 000C                  ??i2_i2c1_driver_restart 0001  
                     i2_i2c_restartWrite 1462  
