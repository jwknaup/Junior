

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Apr 21 14:59:59 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F47K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,inline
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,inline
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,inline
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,inline
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,inline
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1,inline
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1,inline
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1,inline
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1,inline
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1,inline
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1,inline
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1,inline
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1,inline
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1,inline
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1,inline
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1,inline
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1,inline
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1,inline
    71                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1
    75                           	psect	text63,global,reloc=2,class=CODE,delta=1
    76                           	psect	text64,global,reloc=2,class=CODE,delta=1
    77                           	psect	text65,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    79                           	psect	text67,global,reloc=2,class=CODE,delta=1
    80                           	psect	text68,global,reloc=2,class=CODE,delta=1,inline
    81                           	psect	text69,global,reloc=2,class=CODE,delta=1
    82                           	psect	text70,global,reloc=2,class=CODE,delta=1
    83                           	psect	text71,global,reloc=2,class=CODE,delta=1
    84                           	psect	text72,global,reloc=2,class=CODE,delta=1
    85                           	psect	text73,global,reloc=2,class=CODE,delta=1
    86                           	psect	text74,global,reloc=2,class=CODE,delta=1
    87                           	psect	text75,global,reloc=2,class=CODE,delta=1
    88                           	psect	text76,global,reloc=2,class=CODE,delta=1
    89                           	psect	text77,global,reloc=2,class=CODE,delta=1
    90                           	psect	text78,global,reloc=2,class=CODE,delta=1
    91                           	psect	text79,global,reloc=2,class=CODE,delta=1
    92                           	psect	text80,global,reloc=2,class=CODE,delta=1
    93                           	psect	text81,global,reloc=2,class=CODE,delta=1
    94                           	psect	text82,global,reloc=2,class=CODE,delta=1
    95                           	psect	text83,global,reloc=2,class=CODE,delta=1
    96                           	psect	text84,global,reloc=2,class=CODE,delta=1
    97                           	psect	text85,global,reloc=2,class=CODE,delta=1,inline
    98                           	psect	text86,global,reloc=2,class=CODE,delta=1,inline
    99                           	psect	text87,global,reloc=2,class=CODE,delta=1,inline
   100                           	psect	text88,global,reloc=2,class=CODE,delta=1,inline
   101                           	psect	text89,global,reloc=2,class=CODE,delta=1,inline
   102                           	psect	text90,global,reloc=2,class=CODE,delta=1,inline
   103                           	psect	text91,global,reloc=2,class=CODE,delta=1,inline
   104                           	psect	text92,global,reloc=2,class=CODE,delta=1
   105                           	psect	text93,global,reloc=2,class=CODE,delta=1
   106                           	psect	text94,global,reloc=2,class=CODE,delta=1
   107                           	psect	text95,global,reloc=2,class=CODE,delta=1
   108                           	psect	text96,global,reloc=2,class=CODE,delta=1
   109                           	psect	text97,global,reloc=2,class=CODE,delta=1
   110                           	psect	text98,global,reloc=2,class=CODE,delta=1
   111                           	psect	text99,global,reloc=2,class=CODE,delta=1
   112                           	psect	text100,global,reloc=2,class=CODE,delta=1
   113                           	psect	text101,global,reloc=2,class=CODE,delta=1
   114                           	psect	text102,global,reloc=2,class=CODE,delta=1
   115                           	psect	text103,global,reloc=2,class=CODE,delta=1,inline
   116                           	psect	text104,global,reloc=2,class=CODE,delta=1,inline
   117                           	psect	text105,global,reloc=2,class=CODE,delta=1,inline
   118                           	psect	text106,global,reloc=2,class=CODE,delta=1
   119                           	psect	text107,global,reloc=2,class=CODE,delta=1,inline
   120                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   121                           	psect	text108,global,reloc=2,class=CODE,delta=1,inline
   122                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   123                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   124  0000                     
   125                           ; Version 1.45
   126                           ; Generated 16/11/2017 GMT
   127                           ; 
   128                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   129                           ; All rights reserved.
   130                           ; 
   131                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   132                           ; 
   133                           ; Redistribution and use in source and binary forms, with or without modification, are
   134                           ; permitted provided that the following conditions are met:
   135                           ; 
   136                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   137                           ;        conditions and the following disclaimer.
   138                           ; 
   139                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   140                           ;        of conditions and the following disclaimer in the documentation and/or other
   141                           ;        materials provided with the distribution.
   142                           ; 
   143                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   144                           ;        software without specific prior written permission.
   145                           ; 
   146                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   147                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   148                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   149                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   150                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   151                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   152                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   153                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   154                           ; 
   155                           ; 
   156                           ; Code-generator required, PIC18F47K40 Definitions
   157                           ; 
   158                           ; SFR Addresses
   159  0000                     
   160                           	psect	idataBANK0
   161  000CC2                     __pidataBANK0:
   162                           	opt stack 0
   163                           
   164                           ;initializer for _fsmStateTable
   165  000CC2  BA                 	db	low _do_I2C_IDLE
   166  000CC3  0F                 	db	high _do_I2C_IDLE
   167  000CC4  00                 	db	low (_do_I2C_IDLE shr (0+16))
   168  000CC5  28                 	db	low _do_I2C_SEND_ADR_READ
   169  000CC6  0F                 	db	high _do_I2C_SEND_ADR_READ
   170  000CC7  00                 	db	low (_do_I2C_SEND_ADR_READ shr (0+16))
   171  000CC8  12                 	db	low _do_I2C_SEND_ADR_WRITE
   172  000CC9  0F                 	db	high _do_I2C_SEND_ADR_WRITE
   173  000CCA  00                 	db	low (_do_I2C_SEND_ADR_WRITE shr (0+16))
   174  000CCB  F4                 	db	low _do_I2C_TX
   175  000CCC  04                 	db	high _do_I2C_TX
   176  000CCD  00                 	db	low (_do_I2C_TX shr (0+16))
   177  000CCE  AC                 	db	low _do_I2C_RX
   178  000CCF  06                 	db	high _do_I2C_RX
   179  000CD0  00                 	db	low (_do_I2C_RX shr (0+16))
   180  000CD1  A8                 	db	low _do_I2C_RCEN
   181  000CD2  0F                 	db	high _do_I2C_RCEN
   182  000CD3  00                 	db	low (_do_I2C_RCEN shr (0+16))
   183  000CD4  8A                 	db	low _do_I2C_TX_EMPTY
   184  000CD5  08                 	db	high _do_I2C_TX_EMPTY
   185  000CD6  00                 	db	low (_do_I2C_TX_EMPTY shr (0+16))
   186  000CD7  6C                 	db	low _do_I2C_SEND_RESTART_READ
   187  000CD8  10                 	db	high _do_I2C_SEND_RESTART_READ
   188  000CD9  00                 	db	low (_do_I2C_SEND_RESTART_READ shr (0+16))
   189  000CDA  5E                 	db	low _do_I2C_SEND_RESTART_WRITE
   190  000CDB  10                 	db	high _do_I2C_SEND_RESTART_WRITE
   191  000CDC  00                 	db	low (_do_I2C_SEND_RESTART_WRITE shr (0+16))
   192  000CDD  50                 	db	low _do_I2C_SEND_RESTART
   193  000CDE  10                 	db	high _do_I2C_SEND_RESTART
   194  000CDF  00                 	db	low (_do_I2C_SEND_RESTART shr (0+16))
   195  000CE0  42                 	db	low _do_I2C_SEND_STOP
   196  000CE1  10                 	db	high _do_I2C_SEND_STOP
   197  000CE2  00                 	db	low (_do_I2C_SEND_STOP shr (0+16))
   198  000CE3  34                 	db	low _do_I2C_DO_ACK
   199  000CE4  10                 	db	high _do_I2C_DO_ACK
   200  000CE5  00                 	db	low (_do_I2C_DO_ACK shr (0+16))
   201  000CE6  26                 	db	low _do_I2C_DO_NACK_STOP
   202  000CE7  10                 	db	high _do_I2C_DO_NACK_STOP
   203  000CE8  00                 	db	low (_do_I2C_DO_NACK_STOP shr (0+16))
   204  000CE9  18                 	db	low _do_I2C_DO_NACK_RESTART
   205  000CEA  10                 	db	high _do_I2C_DO_NACK_RESTART
   206  000CEB  00                 	db	low (_do_I2C_DO_NACK_RESTART shr (0+16))
   207  000CEC  3E                 	db	low _do_I2C_RESET
   208  000CED  0F                 	db	high _do_I2C_RESET
   209  000CEE  00                 	db	low (_do_I2C_RESET shr (0+16))
   210  000CEF  8E                 	db	low _do_I2C_DO_ADDRESS_NACK
   211  000CF0  09                 	db	high _do_I2C_DO_ADDRESS_NACK
   212  000CF1  00                 	db	low (_do_I2C_DO_ADDRESS_NACK shr (0+16))
   213  0000                     _TX2REG	set	3738
   214  0000                     _RC2REG	set	3737
   215  0000                     _RC2STAbits	set	3741
   216  0000                     _TX2STAbits	set	3742
   217  0000                     _SP2BRGH	set	3740
   218  0000                     _SP2BRGL	set	3739
   219  0000                     _TX2STA	set	3742
   220  0000                     _RC2STA	set	3741
   221  0000                     _BAUD2CON	set	3743
   222  0000                     _SSP1DATPPSbits	set	3768
   223  0000                     _RX2PPSbits	set	3725
   224  0000                     _SSP1CLKPPSbits	set	3767
   225  0000                     _RC4PPS	set	3835
   226  0000                     _RC3PPS	set	3834
   227  0000                     _PIR3bits	set	3789
   228  0000                     _PIE3bits	set	3781
   229  0000                     _PMD5	set	3814
   230  0000                     _PMD4	set	3813
   231  0000                     _PMD3	set	3812
   232  0000                     _PMD2	set	3811
   233  0000                     _PMD1	set	3810
   234  0000                     _PMD0	set	3809
   235  0000                     _OSCTUNE	set	3805
   236  0000                     _OSCFRQ	set	3806
   237  0000                     _OSCEN	set	3804
   238  0000                     _OSCCON3	set	3802
   239  0000                     _OSCCON1	set	3800
   240  0000                     _RD7PPS	set	3846
   241  0000                     _ODCOND	set	3876
   242  0000                     _ODCONC	set	3871
   243  0000                     _ODCONB	set	3863
   244  0000                     _ODCONA	set	3855
   245  0000                     _ODCONE	set	3884
   246  0000                     _WPUC	set	3872
   247  0000                     _WPUA	set	3856
   248  0000                     _WPUB	set	3864
   249  0000                     _WPUE	set	3885
   250  0000                     _WPUD	set	3877
   251  0000                     _ANSELA	set	3857
   252  0000                     _ANSELE	set	3886
   253  0000                     _ANSELD	set	3878
   254  0000                     _ANSELB	set	3865
   255  0000                     _ANSELC	set	3873
   256  0000                     _LATAbits	set	3971
   257  0000                     _INTCONbits	set	4082
   258  0000                     _TRISD	set	3979
   259  0000                     _TRISC	set	3978
   260  0000                     _TRISB	set	3977
   261  0000                     _TRISA	set	3976
   262  0000                     _TRISE	set	3980
   263  0000                     _LATC	set	3973
   264  0000                     _LATB	set	3972
   265  0000                     _LATA	set	3971
   266  0000                     _LATD	set	3974
   267  0000                     _LATE	set	3975
   268  0000                     _SSP1STATbits	set	3989
   269  0000                     _SSP1MSK	set	3988
   270  0000                     _SSP1BUF	set	3986
   271  0000                     _SSP1CON2bits	set	3991
   272  0000                     _SSP1ADD	set	3987
   273  0000                     _SSP1CON2	set	3991
   274  0000                     _SSP1CON1	set	3990
   275  0000                     _SSP1STAT	set	3989
   276  0000                     _SSP1CON1bits	set	3990
   277                           
   278                           ; #config settings
   279  0000                     
   280                           	psect	cinit
   281  000B44                     __pcinit:
   282                           	opt stack 0
   283  000B44                     start_initialization:
   284                           	opt stack 0
   285  000B44                     __initialization:
   286                           	opt stack 0
   287                           
   288                           ; Initialize objects allocated to BANK0 (48 bytes)
   289                           ; load TBLPTR registers with __pidataBANK0
   290  000B44  0EC2               	movlw	low __pidataBANK0
   291  000B46  6EF6               	movwf	tblptrl,c
   292  000B48  0E0C               	movlw	high __pidataBANK0
   293  000B4A  6EF7               	movwf	tblptrh,c
   294  000B4C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   295  000B4E  6EF8               	movwf	tblptru,c
   296  000B50  EE00  F092         	lfsr	0,__pdataBANK0
   297  000B54  EE10 F030          	lfsr	1,48
   298  000B58                     copy_data0:
   299  000B58  0009               	tblrd		*+
   300  000B5A  CFF5 FFEE          	movff	tablat,postinc0
   301  000B5E  50E5               	movf	postdec1,w,c
   302  000B60  50E1               	movf	fsr1l,w,c
   303  000B62  E1FA               	bnz	copy_data0
   304                           
   305                           ; Clear objects allocated to BANK0 (50 bytes)
   306  000B64  EE00  F060         	lfsr	0,__pbssBANK0
   307  000B68  0E32               	movlw	50
   308  000B6A                     clear_0:
   309  000B6A  6AEE               	clrf	postinc0,c
   310  000B6C  06E8               	decf	wreg,f,c
   311  000B6E  E1FD               	bnz	clear_0
   312                           
   313                           ; Clear objects allocated to COMRAM (6 bytes)
   314  000B70  6A46               	clrf	(__pbssCOMRAM+5)& (0+255),c
   315  000B72  6A45               	clrf	(__pbssCOMRAM+4)& (0+255),c
   316  000B74  6A44               	clrf	(__pbssCOMRAM+3)& (0+255),c
   317  000B76  6A43               	clrf	(__pbssCOMRAM+2)& (0+255),c
   318  000B78  6A42               	clrf	(__pbssCOMRAM+1)& (0+255),c
   319  000B7A  6A41               	clrf	__pbssCOMRAM& (0+255),c
   320  000B7C                     end_of_initialization:
   321                           	opt stack 0
   322  000B7C                     __end_of__initialization:
   323                           	opt stack 0
   324  000B7C  9047               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   325  000B7E  9247               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   326  000B80  0100               	movlb	0
   327  000B82  EF70  F000         	goto	_main	;jump to C main() function
   328                           tblptru	equ	0xFF8
   329                           tblptrh	equ	0xFF7
   330                           tblptrl	equ	0xFF6
   331                           tablat	equ	0xFF5
   332                           postinc0	equ	0xFEE
   333                           wreg	equ	0xFE8
   334                           postdec1	equ	0xFE5
   335                           fsr1l	equ	0xFE1
   336                           
   337                           	psect	bssCOMRAM
   338  000041                     __pbssCOMRAM:
   339                           	opt stack 0
   340  000041                     _i2c1_driver_i2cISR:
   341                           	opt stack 0
   342  000041                     	ds	3
   343  000044                     _i2c1_driver_busCollisionISR:
   344                           	opt stack 0
   345  000044                     	ds	3
   346                           tblptru	equ	0xFF8
   347                           tblptrh	equ	0xFF7
   348                           tblptrl	equ	0xFF6
   349                           tablat	equ	0xFF5
   350                           postinc0	equ	0xFEE
   351                           wreg	equ	0xFE8
   352                           postdec1	equ	0xFE5
   353                           fsr1l	equ	0xFE1
   354                           
   355                           	psect	bssBANK0
   356  000060                     __pbssBANK0:
   357                           	opt stack 0
   358  000060                     _i2c_status:
   359                           	opt stack 0
   360  000060                     	ds	42
   361  00008A                     main@F12042:
   362                           	opt stack 0
   363  00008A                     	ds	8
   364                           tblptru	equ	0xFF8
   365                           tblptrh	equ	0xFF7
   366                           tblptrl	equ	0xFF6
   367                           tablat	equ	0xFF5
   368                           postinc0	equ	0xFEE
   369                           wreg	equ	0xFE8
   370                           postdec1	equ	0xFE5
   371                           fsr1l	equ	0xFE1
   372                           
   373                           	psect	dataBANK0
   374  000092                     __pdataBANK0:
   375                           	opt stack 0
   376  000092                     _fsmStateTable:
   377                           	opt stack 0
   378  000092                     	ds	48
   379                           tblptru	equ	0xFF8
   380                           tblptrh	equ	0xFF7
   381                           tblptrl	equ	0xFF6
   382                           tablat	equ	0xFF5
   383                           postinc0	equ	0xFEE
   384                           wreg	equ	0xFE8
   385                           postdec1	equ	0xFE5
   386                           fsr1l	equ	0xFE1
   387                           
   388                           	psect	cstackBANK0
   389  0000C2                     __pcstackBANK0:
   390                           	opt stack 0
   391  0000C2                     updateExpanders@spaces:
   392                           	opt stack 0
   393                           
   394                           ; 4 bytes @ 0x0
   395  0000C2                     	ds	4
   396  0000C6                     updateExpanders@lL:
   397                           	opt stack 0
   398                           
   399                           ; 1 bytes @ 0x4
   400  0000C6                     	ds	1
   401  0000C7                     updateExpanders@lR:
   402                           	opt stack 0
   403                           
   404                           ; 1 bytes @ 0x5
   405  0000C7                     	ds	1
   406  0000C8                     updateExpanders@mL:
   407                           	opt stack 0
   408                           
   409                           ; 1 bytes @ 0x6
   410  0000C8                     	ds	1
   411  0000C9                     updateExpanders@mR:
   412                           	opt stack 0
   413                           
   414                           ; 1 bytes @ 0x7
   415  0000C9                     	ds	1
   416  0000CA                     updateExpanders@rL:
   417                           	opt stack 0
   418                           
   419                           ; 1 bytes @ 0x8
   420  0000CA                     	ds	1
   421  0000CB                     updateExpanders@rR:
   422                           	opt stack 0
   423                           
   424                           ; 1 bytes @ 0x9
   425  0000CB                     	ds	1
   426  0000CC                     getSpaces@spaceLast:
   427                           	opt stack 0
   428                           
   429                           ; 1 bytes @ 0xA
   430  0000CC                     	ds	1
   431  0000CD                     getSpaces@i:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0xB
   435  0000CD                     	ds	2
   436  0000CF                     getSpaces@space:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0xD
   440  0000CF                     	ds	1
   441  0000D0                     ??_main:
   442                           
   443                           ; 1 bytes @ 0xE
   444  0000D0                     	ds	11
   445  0000DB                     main@gamerScore:
   446                           	opt stack 0
   447                           
   448                           ; 1 bytes @ 0x19
   449  0000DB                     	ds	1
   450  0000DC                     main@photonAddress:
   451                           	opt stack 0
   452                           
   453                           ; 1 bytes @ 0x1A
   454  0000DC                     	ds	1
   455  0000DD                     main@spot:
   456                           	opt stack 0
   457                           
   458                           ; 8 bytes @ 0x1B
   459  0000DD                     	ds	8
   460  0000E5                     main@i:
   461                           	opt stack 0
   462                           
   463                           ; 2 bytes @ 0x23
   464  0000E5                     	ds	2
   465  0000E7                     main@player:
   466                           	opt stack 0
   467                           
   468                           ; 2 bytes @ 0x25
   469  0000E7                     	ds	2
   470                           tblptru	equ	0xFF8
   471                           tblptrh	equ	0xFF7
   472                           tblptrl	equ	0xFF6
   473                           tablat	equ	0xFF5
   474                           postinc0	equ	0xFEE
   475                           wreg	equ	0xFE8
   476                           postdec1	equ	0xFE5
   477                           fsr1l	equ	0xFE1
   478                           
   479                           	psect	cstackCOMRAM
   480  000001                     __pcstackCOMRAM:
   481                           	opt stack 0
   482  000001                     ??i2_i2c1_driver_isNACK:
   483  000001                     i2i2c1_driver_TXData@d:
   484                           	opt stack 0
   485  000001                     i2i2c_setBuffer@buffer:
   486                           	opt stack 0
   487  000001                     i2setCallBack@cb:
   488                           	opt stack 0
   489                           
   490                           ; 3 bytes @ 0x0
   491  000001                     	ds	1
   492  000002                     i2_do_I2C_TX$1036:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x1
   496  000002                     	ds	1
   497  000003                     i2i2c_setBuffer@bufferSize:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x2
   501  000003                     	ds	1
   502  000004                     ??_INTERRUPT_InterruptManager:
   503  000004                     i2setCallBack@p:
   504                           	opt stack 0
   505                           
   506                           ; 2 bytes @ 0x3
   507  000004                     	ds	1
   508  000005                     
   509                           ; 1 bytes @ 0x4
   510  000005                     	ds	1
   511  000006                     i2setCallBack@idx:
   512                           	opt stack 0
   513                           
   514                           ; 1 bytes @ 0x5
   515  000006                     	ds	1
   516  000007                     i2i2c_setDataCompleteCallback@cb:
   517                           	opt stack 0
   518                           
   519                           ; 3 bytes @ 0x6
   520  000007                     	ds	3
   521  00000A                     i2i2c_setDataCompleteCallback@p:
   522                           	opt stack 0
   523                           
   524                           ; 2 bytes @ 0x9
   525  00000A                     	ds	2
   526  00000C                     i2returnStop@p:
   527                           	opt stack 0
   528  00000C                     i2wr1RegCompleteHandler@p:
   529                           	opt stack 0
   530  00000C                     i2rd1RegCompleteHandler@p:
   531                           	opt stack 0
   532  00000C                     i2rd2RegCompleteHandler@p:
   533                           	opt stack 0
   534  00000C                     i2wr2RegCompleteHandler@p:
   535                           	opt stack 0
   536  00000C                     i2rdBlkRegCompleteHandler@p:
   537                           	opt stack 0
   538                           
   539                           ; 2 bytes @ 0xB
   540  00000C                     	ds	2
   541  00000E                     
   542                           ; 1 bytes @ 0xD
   543  00000E                     	ds	8
   544  000016                     ??_mssp1_IRQisEnabled:
   545  000016                     ??_i2c1_driver_isNACK:
   546  000016                     ?_abs:
   547                           	opt stack 0
   548  000016                     i2c1_driver_TXData@d:
   549                           	opt stack 0
   550  000016                     i2c_close@ret:
   551                           	opt stack 0
   552  000016                     mssp1_waitForEvent@timeout:
   553                           	opt stack 0
   554  000016                     i2c_setBuffer@buffer:
   555                           	opt stack 0
   556  000016                     abs@a:
   557                           	opt stack 0
   558  000016                     i2c1_driver_setBusCollisionISR@f:
   559                           	opt stack 0
   560  000016                     i2c1_driver_setI2cISR@f:
   561                           	opt stack 0
   562  000016                     setCallBack@cb:
   563                           	opt stack 0
   564                           
   565                           ; 3 bytes @ 0x15
   566  000016                     	ds	1
   567  000017                     _do_I2C_TX$1036:
   568                           	opt stack 0
   569                           
   570                           ; 2 bytes @ 0x16
   571  000017                     	ds	1
   572  000018                     ??_abs:
   573  000018                     i2c_setBuffer@bufferSize:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x17
   577  000018                     	ds	1
   578  000019                     i2c_open@address:
   579                           	opt stack 0
   580  000019                     i2c_masterOperation@read:
   581                           	opt stack 0
   582  000019                     setCallBack@p:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0x18
   586  000019                     	ds	1
   587  00001A                     i2c_open@ret:
   588                           	opt stack 0
   589  00001A                     i2c_masterOperation@ret:
   590                           	opt stack 0
   591                           
   592                           ; 1 bytes @ 0x19
   593  00001A                     	ds	1
   594  00001B                     setCallBack@idx:
   595                           	opt stack 0
   596  00001B                     i2c_readNBytes@data:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0x1A
   600  00001B                     	ds	1
   601  00001C                     i2c_setDataCompleteCallback@cb:
   602                           	opt stack 0
   603  00001C                     i2c_setAddressNACKCallback@cb:
   604                           	opt stack 0
   605                           
   606                           ; 3 bytes @ 0x1B
   607  00001C                     	ds	1
   608  00001D                     i2c_readNBytes@len:
   609                           	opt stack 0
   610                           
   611                           ; 2 bytes @ 0x1C
   612  00001D                     	ds	2
   613  00001F                     i2c_readNBytes@address:
   614                           	opt stack 0
   615  00001F                     i2c_setDataCompleteCallback@p:
   616                           	opt stack 0
   617  00001F                     i2c_setAddressNACKCallback@p:
   618                           	opt stack 0
   619                           
   620                           ; 2 bytes @ 0x1E
   621  00001F                     	ds	2
   622  000021                     returnStop@p:
   623                           	opt stack 0
   624  000021                     wr1RegCompleteHandler@p:
   625                           	opt stack 0
   626  000021                     i2c_writeNBytes@data:
   627                           	opt stack 0
   628  000021                     rd1RegCompleteHandler@p:
   629                           	opt stack 0
   630  000021                     rd2RegCompleteHandler@p:
   631                           	opt stack 0
   632  000021                     wr2RegCompleteHandler@p:
   633                           	opt stack 0
   634  000021                     rdBlkRegCompleteHandler@p:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x20
   638  000021                     	ds	2
   639  000023                     i2c_writeNBytes@len:
   640                           	opt stack 0
   641                           
   642                           ; 2 bytes @ 0x22
   643  000023                     	ds	2
   644  000025                     i2c_writeNBytes@address:
   645                           	opt stack 0
   646                           
   647                           ; 1 bytes @ 0x24
   648  000025                     	ds	1
   649  000026                     readIoExpander@bank:
   650                           	opt stack 0
   651                           
   652                           ; 1 bytes @ 0x25
   653  000026                     	ds	1
   654  000027                     readIoExpander@index:
   655                           	opt stack 0
   656                           
   657                           ; 1 bytes @ 0x26
   658  000027                     	ds	1
   659  000028                     ??_readIoExpander:
   660                           
   661                           ; 1 bytes @ 0x27
   662  000028                     	ds	2
   663  00002A                     readIoExpander@spots:
   664                           	opt stack 0
   665                           
   666                           ; 8 bytes @ 0x29
   667  00002A                     	ds	8
   668  000032                     readIoExpander@data:
   669                           	opt stack 0
   670                           
   671                           ; 2 bytes @ 0x31
   672  000032                     	ds	2
   673  000034                     readIoExpander@spaces:
   674                           	opt stack 0
   675                           
   676                           ; 1 bytes @ 0x33
   677  000034                     	ds	1
   678  000035                     readIoExpander@addr:
   679                           	opt stack 0
   680                           
   681                           ; 1 bytes @ 0x34
   682  000035                     	ds	1
   683  000036                     readIoExpander@rec:
   684                           	opt stack 0
   685                           
   686                           ; 1 bytes @ 0x35
   687  000036                     	ds	1
   688  000037                     readIoExpander@i:
   689                           	opt stack 0
   690                           
   691                           ; 2 bytes @ 0x36
   692  000037                     	ds	2
   693  000039                     ?_updateExpanders:
   694                           	opt stack 0
   695                           
   696                           ; 4 bytes @ 0x38
   697  000039                     	ds	4
   698  00003D                     ??_updateExpanders:
   699                           
   700                           ; 1 bytes @ 0x3C
   701  00003D                     	ds	2
   702  00003F                     ??_getSpaces:
   703                           
   704                           ; 1 bytes @ 0x3E
   705  00003F                     	ds	2
   706                           tblptru	equ	0xFF8
   707                           tblptrh	equ	0xFF7
   708                           tblptrl	equ	0xFF6
   709                           tablat	equ	0xFF5
   710                           postinc0	equ	0xFEE
   711                           wreg	equ	0xFE8
   712                           postdec1	equ	0xFE5
   713                           fsr1l	equ	0xFE1
   714                           
   715 ;;
   716 ;;Main: autosize = 0, tempsize = 11, incstack = 0, save=0
   717 ;;
   718 ;; *************** function _main *****************
   719 ;; Defined at:
   720 ;;		line 106 in file "main.c"
   721 ;; Parameters:    Size  Location     Type
   722 ;;		None
   723 ;; Auto vars:     Size  Location     Type
   724 ;;  i               2   35[BANK0 ] int 
   725 ;;  spot            8   27[BANK0 ] long [2]
   726 ;;  player          2   37[BANK0 ] int 
   727 ;;  photonAddres    1   26[BANK0 ] unsigned char 
   728 ;;  gamerScore      1   25[BANK0 ] unsigned char 
   729 ;; Return value:  Size  Location     Type
   730 ;;                  1    wreg      void 
   731 ;; Registers used:
   732 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
   733 ;; Tracked objects:
   734 ;;		On entry : 0/0
   735 ;;		On exit  : 0/0
   736 ;;		Unchanged: 0/0
   737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   739 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   740 ;;      Temps:          0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   741 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   742 ;;Total ram usage:       25 bytes
   743 ;; Hardware stack levels required when called:   18
   744 ;; This function calls:
   745 ;;		_EUSART2_Initialize
   746 ;;		_SYSTEM_Initialize
   747 ;;		_abs
   748 ;;		_getSpaces
   749 ;; This function is called by:
   750 ;;		Startup code after reset
   751 ;; This function uses a non-reentrant model
   752 ;;
   753                           
   754                           	psect	text0
   755  0000E0                     __ptext0:
   756                           	opt stack 0
   757  0000E0                     _main:
   758                           	opt stack 13
   759                           
   760                           ;main.c: 109: SYSTEM_Initialize();
   761                           
   762                           ;incstack = 0
   763  0000E0  ECB5  F007         	call	_SYSTEM_Initialize	;wreg free
   764                           
   765                           ;main.c: 116: (INTCONbits.GIE = 1);
   766  0000E4  8EF2               	bsf	intcon,7,c	;volatile
   767                           
   768                           ;main.c: 122: (INTCONbits.PEIE = 1);
   769  0000E6  8CF2               	bsf	intcon,6,c	;volatile
   770                           
   771                           ;main.c: 137: uint8_t gamerScore = 0x17;
   772  0000E8  0E17               	movlw	23
   773  0000EA  0100               	movlb	0	; () banked
   774  0000EC  6FDB               	movwf	main@gamerScore& (0+255),b
   775                           
   776                           ; BSR set to: 0
   777                           ;main.c: 138: uint8_t photonAddress = 0x30;
   778  0000EE  0E30               	movlw	48
   779  0000F0  6FDC               	movwf	main@photonAddress& (0+255),b
   780                           
   781                           ;main.c: 162: EUSART2_Initialize();
   782  0000F2  EC67  F007         	call	_EUSART2_Initialize	;wreg free
   783                           
   784                           ;main.c: 166: int player = 0;
   785  0000F6  0E00               	movlw	0
   786  0000F8  0100               	movlb	0	; () banked
   787  0000FA  6FE8               	movwf	(main@player+1)& (0+255),b
   788  0000FC  0E00               	movlw	0
   789  0000FE  6FE7               	movwf	main@player& (0+255),b
   790                           
   791                           ; BSR set to: 0
   792                           ;main.c: 167: long spot[2] = {0,0};
   793  000100  EE20  F08A         	lfsr	2,main@F12042
   794  000104  EE10  F0DD         	lfsr	1,main@spot
   795  000108  0E07               	movlw	7
   796  00010A                     u2221:
   797  00010A  CFDB FFE3          	movff	plusw2,plusw1
   798  00010E  06E8               	decf	wreg,f,c
   799  000110  E2FC               	bc	u2221
   800  000112                     l4144:
   801                           
   802                           ; BSR set to: 0
   803                           ;main.c: 170: {
   804                           ;main.c: 186: spot[player] = getSpaces() - spot[abs(player-1)];
   805  000112  0EFF               	movlw	255
   806  000114  25E7               	addwf	main@player& (0+255),w,b
   807  000116  6E16               	movwf	abs@a,c
   808  000118  0EFF               	movlw	255
   809  00011A  21E8               	addwfc	(main@player+1)& (0+255),w,b
   810  00011C  6E17               	movwf	abs@a+1,c
   811  00011E  ECD9  F006         	call	_abs	;wreg free
   812  000122  90D8               	bcf	status,0,c
   813  000124  3616               	rlcf	?_abs,f,c
   814  000126  3617               	rlcf	?_abs+1,f,c
   815  000128  90D8               	bcf	status,0,c
   816  00012A  3616               	rlcf	?_abs,f,c
   817  00012C  3617               	rlcf	?_abs+1,f,c
   818  00012E  0EDD               	movlw	low main@spot
   819  000130  2416               	addwf	?_abs,w,c
   820  000132  6ED9               	movwf	fsr2l,c
   821  000134  0E00               	movlw	high main@spot
   822  000136  2017               	addwfc	?_abs+1,w,c
   823  000138  6EDA               	movwf	fsr2h,c
   824  00013A  CFDE F0D0          	movff	postinc2,??_main
   825  00013E  CFDE F0D1          	movff	postinc2,??_main+1
   826  000142  CFDE F0D2          	movff	postinc2,??_main+2
   827  000146  CFDE F0D3          	movff	postinc2,??_main+3
   828  00014A  0100               	movlb	0	; () banked
   829  00014C  1FD0               	comf	??_main& (0+255),f,b
   830  00014E  1FD1               	comf	(??_main+1)& (0+255),f,b
   831  000150  1FD2               	comf	(??_main+2)& (0+255),f,b
   832  000152  1FD3               	comf	(??_main+3)& (0+255),f,b
   833  000154  2BD0               	incf	??_main& (0+255),f,b
   834  000156  0E00               	movlw	0
   835  000158  23D1               	addwfc	(??_main+1)& (0+255),f,b
   836  00015A  23D2               	addwfc	(??_main+2)& (0+255),f,b
   837  00015C  23D3               	addwfc	(??_main+3)& (0+255),f,b
   838  00015E  EC2E  F002         	call	_getSpaces	;wreg free
   839  000162  0100               	movlb	0	; () banked
   840  000164  6FD4               	movwf	(??_main+4)& (0+255),b
   841  000166  51D4               	movf	(??_main+4)& (0+255),w,b
   842  000168  25D0               	addwf	??_main& (0+255),w,b
   843  00016A  6FD5               	movwf	(??_main+5)& (0+255),b
   844  00016C  0E00               	movlw	0
   845  00016E  21D1               	addwfc	(??_main+1)& (0+255),w,b
   846  000170  6FD6               	movwf	(??_main+6)& (0+255),b
   847  000172  0E00               	movlw	0
   848  000174  21D2               	addwfc	(??_main+2)& (0+255),w,b
   849  000176  6FD7               	movwf	(??_main+7)& (0+255),b
   850  000178  0E00               	movlw	0
   851  00017A  21D3               	addwfc	(??_main+3)& (0+255),w,b
   852  00017C  6FD8               	movwf	(??_main+8)& (0+255),b
   853  00017E  0EDD               	movlw	low main@spot
   854  000180  6FD9               	movwf	(??_main+9)& (0+255),b
   855  000182  0E00               	movlw	high main@spot
   856  000184  6FDA               	movwf	(??_main+10)& (0+255),b
   857  000186  90D8               	bcf	status,0,c
   858  000188  35E7               	rlcf	main@player& (0+255),w,b
   859  00018A  6ED9               	movwf	fsr2l,c
   860  00018C  35E8               	rlcf	(main@player+1)& (0+255),w,b
   861  00018E  6EDA               	movwf	fsr2h,c
   862  000190  90D8               	bcf	status,0,c
   863  000192  36D9               	rlcf	fsr2l,f,c
   864  000194  36DA               	rlcf	fsr2h,f,c
   865  000196  51D9               	movf	(??_main+9)& (0+255),w,b
   866  000198  26D9               	addwf	fsr2l,f,c
   867  00019A  51DA               	movf	(??_main+10)& (0+255),w,b
   868  00019C  22DA               	addwfc	fsr2h,f,c
   869  00019E  C0D5  FFDE         	movff	??_main+5,postinc2
   870  0001A2  C0D6  FFDE         	movff	??_main+6,postinc2
   871  0001A6  C0D7  FFDE         	movff	??_main+7,postinc2
   872  0001AA  C0D8  FFDE         	movff	??_main+8,postinc2
   873                           
   874                           ; BSR set to: 0
   875                           ;main.c: 187: if(spot[player] > 46)
   876  0001AE  0EDD               	movlw	low main@spot
   877  0001B0  6FD0               	movwf	??_main& (0+255),b
   878  0001B2  0E00               	movlw	high main@spot
   879  0001B4  6FD1               	movwf	(??_main+1)& (0+255),b
   880  0001B6  90D8               	bcf	status,0,c
   881  0001B8  35E7               	rlcf	main@player& (0+255),w,b
   882  0001BA  6ED9               	movwf	fsr2l,c
   883  0001BC  35E8               	rlcf	(main@player+1)& (0+255),w,b
   884  0001BE  6EDA               	movwf	fsr2h,c
   885  0001C0  90D8               	bcf	status,0,c
   886  0001C2  36D9               	rlcf	fsr2l,f,c
   887  0001C4  36DA               	rlcf	fsr2h,f,c
   888  0001C6  51D0               	movf	??_main& (0+255),w,b
   889  0001C8  26D9               	addwf	fsr2l,f,c
   890  0001CA  51D1               	movf	(??_main+1)& (0+255),w,b
   891  0001CC  22DA               	addwfc	fsr2h,f,c
   892  0001CE  0E03               	movlw	3
   893  0001D0  BEDB               	btfsc	plusw2,7,c
   894  0001D2  D00F               	goto	l651
   895  0001D4  0E03               	movlw	3
   896  0001D6  50DB               	movf	plusw2,w,c
   897  0001D8  E10A               	bnz	u2230
   898  0001DA  0E02               	movlw	2
   899  0001DC  50DB               	movf	plusw2,w,c
   900  0001DE  E107               	bnz	u2230
   901  0001E0  0E01               	movlw	1
   902  0001E2  50DB               	movf	plusw2,w,c
   903  0001E4  E104               	bnz	u2230
   904  0001E6  0E2F               	movlw	47
   905  0001E8  5CDE               	subwf	postinc2,w,c
   906  0001EA  A0D8               	btfss	status,0,c
   907  0001EC  D002               	goto	l651
   908  0001EE                     u2230:
   909                           
   910                           ; BSR set to: 0
   911                           
   912                           ;main.c: 188: do { LATAbits.LATA2 = 0; } while(0);
   913  0001EE  9483               	bcf	3971,2,c	;volatile
   914                           
   915                           ; BSR set to: 0
   916  0001F0  D001               	goto	l656
   917  0001F2                     l651:
   918                           
   919                           ; BSR set to: 0
   920                           
   921                           ; BSR set to: 0
   922                           ;main.c: 189: else
   923                           ;main.c: 190: do { LATAbits.LATA2 = 1; } while(0);
   924  0001F2  8483               	bsf	3971,2,c	;volatile
   925  0001F4                     l656:
   926                           
   927                           ; BSR set to: 0
   928                           ;main.c: 202: for(int i=0; i<20; i++)
   929                           
   930                           ; BSR set to: 0
   931                           
   932                           ; BSR set to: 0
   933  0001F4  0E00               	movlw	0
   934  0001F6  6FE6               	movwf	(main@i+1)& (0+255),b
   935  0001F8  0E00               	movlw	0
   936  0001FA  6FE5               	movwf	main@i& (0+255),b
   937                           
   938                           ; BSR set to: 0
   939  0001FC  BFE6               	btfsc	(main@i+1)& (0+255),7,b
   940  0001FE  D006               	goto	l657
   941  000200  51E6               	movf	(main@i+1)& (0+255),w,b
   942  000202  E187               	bnz	l4144
   943  000204  0E14               	movlw	20
   944  000206  5DE5               	subwf	main@i& (0+255),w,b
   945  000208  B0D8               	btfsc	status,0,c
   946  00020A  D783               	goto	l650
   947  00020C                     l657:
   948                           
   949                           ; BSR set to: 0
   950                           ;main.c: 203: _delay((unsigned long)((50)*(2000000/4000.0)));
   951                           
   952                           ; BSR set to: 0
   953  00020C  0E21               	movlw	33
   954  00020E  0100               	movlb	0	; () banked
   955  000210  6FD0               	movwf	??_main& (0+255),b
   956  000212  0E76               	movlw	118
   957  000214                     u2267:
   958  000214  2EE8               	decfsz	wreg,f,c
   959  000216  D7FE               	bra	u2267
   960  000218  2FD0               	decfsz	??_main& (0+255),f,b
   961  00021A  D7FC               	bra	u2267
   962  00021C  F000               	nop	
   963  00021E  0100               	movlb	0	; () banked
   964  000220  4BE5               	infsnz	main@i& (0+255),f,b
   965  000222  2BE6               	incf	(main@i+1)& (0+255),f,b
   966  000224  BFE6               	btfsc	(main@i+1)& (0+255),7,b
   967  000226  D7F2               	goto	l657
   968  000228  51E6               	movf	(main@i+1)& (0+255),w,b
   969  00022A  E101               	bnz	u2250
   970  00022C  D7EB               	goto	L1
   971  00022E                     u2250:
   972                           
   973                           ; BSR set to: 0
   974                           
   975                           ; BSR set to: 0
   976  00022E  D771               	goto	l650
   977  000230                     __end_of_main:
   978                           	opt stack 0
   979                           tblptru	equ	0xFF8
   980                           tblptrh	equ	0xFF7
   981                           tblptrl	equ	0xFF6
   982                           tablat	equ	0xFF5
   983                           intcon	equ	0xFF2
   984                           postinc0	equ	0xFEE
   985                           wreg	equ	0xFE8
   986                           postdec1	equ	0xFE5
   987                           plusw1	equ	0xFE3
   988                           fsr1l	equ	0xFE1
   989                           postinc2	equ	0xFDE
   990                           plusw2	equ	0xFDB
   991                           fsr2h	equ	0xFDA
   992                           fsr2l	equ	0xFD9
   993                           status	equ	0xFD8
   994                           
   995 ;; *************** function _getSpaces *****************
   996 ;; Defined at:
   997 ;;		line 78 in file "main.c"
   998 ;; Parameters:    Size  Location     Type
   999 ;;		None
  1000 ;; Auto vars:     Size  Location     Type
  1001 ;;  i               2   11[BANK0 ] int 
  1002 ;;  space           1   13[BANK0 ] unsigned char 
  1003 ;;  spaceLast       1   10[BANK0 ] unsigned char 
  1004 ;; Return value:  Size  Location     Type
  1005 ;;                  1    wreg      unsigned char 
  1006 ;; Registers used:
  1007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1008 ;; Tracked objects:
  1009 ;;		On entry : 0/0
  1010 ;;		On exit  : 0/0
  1011 ;;		Unchanged: 0/0
  1012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1014 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1015 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1016 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1017 ;;Total ram usage:        6 bytes
  1018 ;; Hardware stack levels used:    1
  1019 ;; Hardware stack levels required when called:   17
  1020 ;; This function calls:
  1021 ;;		_updateExpanders
  1022 ;; This function is called by:
  1023 ;;		_main
  1024 ;; This function uses a non-reentrant model
  1025 ;;
  1026                           
  1027                           	psect	text1
  1028  00045C                     __ptext1:
  1029                           	opt stack 0
  1030  00045C                     _getSpaces:
  1031                           	opt stack 13
  1032                           
  1033                           ;main.c: 79: uint8_t space = 0;
  1034                           
  1035                           ; BSR set to: 0
  1036                           ;incstack = 0
  1037  00045C  0E00               	movlw	0
  1038  00045E  0100               	movlb	0	; () banked
  1039  000460  6FCF               	movwf	getSpaces@space& (0+255),b
  1040                           
  1041                           ; BSR set to: 0
  1042                           ;main.c: 80: uint8_t spaceLast = updateExpanders();
  1043  000462  EC18  F001         	call	_updateExpanders	;wreg free
  1044  000466  5039               	movf	?_updateExpanders,w,c
  1045  000468  0100               	movlb	0	; () banked
  1046  00046A  6FCC               	movwf	getSpaces@spaceLast& (0+255),b
  1047                           
  1048                           ; BSR set to: 0
  1049                           ;main.c: 81: space = updateExpanders();
  1050  00046C  EC18  F001         	call	_updateExpanders	;wreg free
  1051  000470  5039               	movf	?_updateExpanders,w,c
  1052  000472  0100               	movlb	0	; () banked
  1053  000474  6FCF               	movwf	getSpaces@space& (0+255),b
  1054                           
  1055                           ;main.c: 82: while(space == spaceLast){
  1056  000476  D010               	goto	l634
  1057  000478                     
  1058                           ; BSR set to: 0
  1059                           ;main.c: 83: space = updateExpanders();
  1060                           
  1061                           ; BSR set to: 0
  1062  000478  EC18  F001         	call	_updateExpanders	;wreg free
  1063  00047C  5039               	movf	?_updateExpanders,w,c
  1064  00047E  0100               	movlb	0	; () banked
  1065  000480  6FCF               	movwf	getSpaces@space& (0+255),b
  1066                           
  1067                           ; BSR set to: 0
  1068                           ;main.c: 84: _delay((unsigned long)((500)*(2000000/4000.0)));
  1069  000482  0E02               	movlw	2
  1070  000484  6E40               	movwf	(??_getSpaces+1)& (0+255),c
  1071  000486  0E45               	movlw	69
  1072  000488  6E3F               	movwf	??_getSpaces& (0+255),c
  1073  00048A  0EAA               	movlw	170
  1074  00048C                     u2277:
  1075  00048C  2EE8               	decfsz	wreg,f,c
  1076  00048E  D7FE               	bra	u2277
  1077  000490  2E3F               	decfsz	??_getSpaces& (0+255),f,c
  1078  000492  D7FC               	bra	u2277
  1079  000494  2E40               	decfsz	(??_getSpaces+1)& (0+255),f,c
  1080  000496  D7FA               	bra	u2277
  1081  000498                     l634:
  1082  000498  0100               	movlb	0	; () banked
  1083  00049A  51CC               	movf	getSpaces@spaceLast& (0+255),w,b
  1084  00049C  19CF               	xorwf	getSpaces@space& (0+255),w,b
  1085  00049E  B4D8               	btfsc	status,2,c
  1086  0004A0  D7EB               	goto	l635
  1087                           
  1088                           ; BSR set to: 0
  1089                           ;main.c: 85: }
  1090                           ;main.c: 86: for(int i=0;i<40;i++){
  1091                           
  1092                           ; BSR set to: 0
  1093  0004A2  0E00               	movlw	0
  1094  0004A4  6FCE               	movwf	(getSpaces@i+1)& (0+255),b
  1095  0004A6  0E00               	movlw	0
  1096  0004A8  6FCD               	movwf	getSpaces@i& (0+255),b
  1097  0004AA                     l3988:
  1098                           
  1099                           ; BSR set to: 0
  1100  0004AA  BFCE               	btfsc	(getSpaces@i+1)& (0+255),7,b
  1101  0004AC  D006               	goto	l637
  1102  0004AE  51CE               	movf	(getSpaces@i+1)& (0+255),w,b
  1103  0004B0  E11F               	bnz	l4006
  1104  0004B2  0E28               	movlw	40
  1105  0004B4  5DCD               	subwf	getSpaces@i& (0+255),w,b
  1106  0004B6  B0D8               	btfsc	status,0,c
  1107  0004B8  D01B               	goto	u1980
  1108  0004BA                     l637:
  1109                           
  1110                           ; BSR set to: 0
  1111                           ;main.c: 87: space = updateExpanders();
  1112                           
  1113                           ; BSR set to: 0
  1114  0004BA  EC18  F001         	call	_updateExpanders	;wreg free
  1115  0004BE  5039               	movf	?_updateExpanders,w,c
  1116  0004C0  0100               	movlb	0	; () banked
  1117  0004C2  6FCF               	movwf	getSpaces@space& (0+255),b
  1118                           
  1119                           ; BSR set to: 0
  1120                           ;main.c: 88: if(space != spaceLast)
  1121  0004C4  51CC               	movf	getSpaces@spaceLast& (0+255),w,b
  1122  0004C6  19CF               	xorwf	getSpaces@space& (0+255),w,b
  1123  0004C8  B4D8               	btfsc	status,2,c
  1124  0004CA  D004               	goto	l639
  1125                           
  1126                           ; BSR set to: 0
  1127                           ;main.c: 89: i=0;
  1128  0004CC  0E00               	movlw	0
  1129  0004CE  6FCE               	movwf	(getSpaces@i+1)& (0+255),b
  1130  0004D0  0E00               	movlw	0
  1131  0004D2  6FCD               	movwf	getSpaces@i& (0+255),b
  1132  0004D4                     l639:
  1133                           
  1134                           ; BSR set to: 0
  1135                           ;main.c: 90: spaceLast = space;
  1136                           
  1137                           ; BSR set to: 0
  1138  0004D4  C0CF  F0CC         	movff	getSpaces@space,getSpaces@spaceLast
  1139                           
  1140                           ; BSR set to: 0
  1141                           ;main.c: 91: _delay((unsigned long)((50)*(2000000/4000.0)));
  1142  0004D8  0E21               	movlw	33
  1143  0004DA  6E3F               	movwf	??_getSpaces& (0+255),c
  1144  0004DC  0E76               	movlw	118
  1145  0004DE                     u2287:
  1146  0004DE  2EE8               	decfsz	wreg,f,c
  1147  0004E0  D7FE               	bra	u2287
  1148  0004E2  2E3F               	decfsz	??_getSpaces& (0+255),f,c
  1149  0004E4  D7FC               	bra	u2287
  1150  0004E6  D000               	nop2	
  1151  0004E8  0100               	movlb	0	; () banked
  1152  0004EA  4BCD               	infsnz	getSpaces@i& (0+255),f,b
  1153  0004EC  2BCE               	incf	(getSpaces@i+1)& (0+255),f,b
  1154  0004EE  D7DD               	goto	l3988
  1155  0004F0                     u1980:
  1156  0004F0                     l4006:
  1157                           
  1158                           ; BSR set to: 0
  1159                           ;main.c: 92: }
  1160                           ;main.c: 93: return space;
  1161  0004F0  51CF               	movf	getSpaces@space& (0+255),w,b
  1162  0004F2  0012               	return	
  1163  0004F4                     __end_of_getSpaces:
  1164                           	opt stack 0
  1165                           tblptru	equ	0xFF8
  1166                           tblptrh	equ	0xFF7
  1167                           tblptrl	equ	0xFF6
  1168                           tablat	equ	0xFF5
  1169                           intcon	equ	0xFF2
  1170                           postinc0	equ	0xFEE
  1171                           wreg	equ	0xFE8
  1172                           postdec1	equ	0xFE5
  1173                           plusw1	equ	0xFE3
  1174                           fsr1l	equ	0xFE1
  1175                           postinc2	equ	0xFDE
  1176                           plusw2	equ	0xFDB
  1177                           fsr2h	equ	0xFDA
  1178                           fsr2l	equ	0xFD9
  1179                           status	equ	0xFD8
  1180                           
  1181 ;; *************** function _updateExpanders *****************
  1182 ;; Defined at:
  1183 ;;		line 65 in file "main.c"
  1184 ;; Parameters:    Size  Location     Type
  1185 ;;		None
  1186 ;; Auto vars:     Size  Location     Type
  1187 ;;  spaces          4    0[BANK0 ] long 
  1188 ;;  rR              1    9[BANK0 ] unsigned char 
  1189 ;;  rL              1    8[BANK0 ] unsigned char 
  1190 ;;  mR              1    7[BANK0 ] unsigned char 
  1191 ;;  mL              1    6[BANK0 ] unsigned char 
  1192 ;;  lR              1    5[BANK0 ] unsigned char 
  1193 ;;  lL              1    4[BANK0 ] unsigned char 
  1194 ;; Return value:  Size  Location     Type
  1195 ;;                  4   56[COMRAM] long 
  1196 ;; Registers used:
  1197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1198 ;; Tracked objects:
  1199 ;;		On entry : 0/0
  1200 ;;		On exit  : 0/0
  1201 ;;		Unchanged: 0/0
  1202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1203 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1204 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1205 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1206 ;;      Totals:         6      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1207 ;;Total ram usage:       16 bytes
  1208 ;; Hardware stack levels used:    1
  1209 ;; Hardware stack levels required when called:   16
  1210 ;; This function calls:
  1211 ;;		_readIoExpander
  1212 ;; This function is called by:
  1213 ;;		_getSpaces
  1214 ;; This function uses a non-reentrant model
  1215 ;;
  1216                           
  1217                           	psect	text2
  1218  000230                     __ptext2:
  1219                           	opt stack 0
  1220  000230                     _updateExpanders:
  1221                           	opt stack 13
  1222                           
  1223                           ;main.c: 66: uint8_t lL, lR, mL, mR, rL, rR;
  1224                           ;main.c: 67: lL = readIoExpander(0x20, 'l',40);
  1225                           
  1226                           ; BSR set to: 0
  1227                           ;incstack = 0
  1228  000230  0E6C               	movlw	108
  1229  000232  6E26               	movwf	readIoExpander@bank,c
  1230  000234  0E28               	movlw	40
  1231  000236  6E27               	movwf	readIoExpander@index,c
  1232  000238  0E20               	movlw	32
  1233  00023A  EC77  F001         	call	_readIoExpander
  1234  00023E  0100               	movlb	0	; () banked
  1235  000240  6FC6               	movwf	updateExpanders@lL& (0+255),b
  1236                           
  1237                           ;main.c: 68: lR = readIoExpander(0x20, 'r',32);
  1238  000242  0E72               	movlw	114
  1239  000244  6E26               	movwf	readIoExpander@bank,c
  1240  000246  0E20               	movlw	32
  1241  000248  6E27               	movwf	readIoExpander@index,c
  1242  00024A  0E20               	movlw	32
  1243  00024C  EC77  F001         	call	_readIoExpander
  1244  000250  0100               	movlb	0	; () banked
  1245  000252  6FC7               	movwf	updateExpanders@lR& (0+255),b
  1246                           
  1247                           ;main.c: 69: mL = readIoExpander(0x21, 'l',24);
  1248  000254  0E6C               	movlw	108
  1249  000256  6E26               	movwf	readIoExpander@bank,c
  1250  000258  0E18               	movlw	24
  1251  00025A  6E27               	movwf	readIoExpander@index,c
  1252  00025C  0E21               	movlw	33
  1253  00025E  EC77  F001         	call	_readIoExpander
  1254  000262  0100               	movlb	0	; () banked
  1255  000264  6FC8               	movwf	updateExpanders@mL& (0+255),b
  1256                           
  1257                           ;main.c: 70: mR = readIoExpander(0x21, 'r',16);
  1258  000266  0E72               	movlw	114
  1259  000268  6E26               	movwf	readIoExpander@bank,c
  1260  00026A  0E10               	movlw	16
  1261  00026C  6E27               	movwf	readIoExpander@index,c
  1262  00026E  0E21               	movlw	33
  1263  000270  EC77  F001         	call	_readIoExpander
  1264  000274  0100               	movlb	0	; () banked
  1265  000276  6FC9               	movwf	updateExpanders@mR& (0+255),b
  1266                           
  1267                           ;main.c: 71: rL = readIoExpander(0x22, 'l',8);
  1268  000278  0E6C               	movlw	108
  1269  00027A  6E26               	movwf	readIoExpander@bank,c
  1270  00027C  0E08               	movlw	8
  1271  00027E  6E27               	movwf	readIoExpander@index,c
  1272  000280  0E22               	movlw	34
  1273  000282  EC77  F001         	call	_readIoExpander
  1274  000286  0100               	movlb	0	; () banked
  1275  000288  6FCA               	movwf	updateExpanders@rL& (0+255),b
  1276                           
  1277                           ;main.c: 72: rR = readIoExpander(0x22, 'r',0);
  1278  00028A  0E72               	movlw	114
  1279  00028C  6E26               	movwf	readIoExpander@bank,c
  1280  00028E  0E00               	movlw	0
  1281  000290  6E27               	movwf	readIoExpander@index,c
  1282  000292  0E22               	movlw	34
  1283  000294  EC77  F001         	call	_readIoExpander
  1284  000298  0100               	movlb	0	; () banked
  1285  00029A  6FCB               	movwf	updateExpanders@rR& (0+255),b
  1286                           
  1287                           ; BSR set to: 0
  1288                           ;main.c: 74: long spaces = lL+lR+mL+mR+rL+rR;
  1289  00029C  51C7               	movf	updateExpanders@lR& (0+255),w,b
  1290  00029E  C0C6  F03D         	movff	updateExpanders@lL,??_updateExpanders
  1291  0002A2  6A3E               	clrf	(??_updateExpanders+1)& (0+255),c
  1292  0002A4  263D               	addwf	??_updateExpanders,f,c
  1293  0002A6  0E00               	movlw	0
  1294  0002A8  223E               	addwfc	??_updateExpanders+1,f,c
  1295  0002AA  51C8               	movf	updateExpanders@mL& (0+255),w,b
  1296  0002AC  263D               	addwf	??_updateExpanders,f,c
  1297  0002AE  0E00               	movlw	0
  1298  0002B0  223E               	addwfc	??_updateExpanders+1,f,c
  1299  0002B2  51C9               	movf	updateExpanders@mR& (0+255),w,b
  1300  0002B4  263D               	addwf	??_updateExpanders,f,c
  1301  0002B6  0E00               	movlw	0
  1302  0002B8  223E               	addwfc	??_updateExpanders+1,f,c
  1303  0002BA  51CA               	movf	updateExpanders@rL& (0+255),w,b
  1304  0002BC  263D               	addwf	??_updateExpanders,f,c
  1305  0002BE  0E00               	movlw	0
  1306  0002C0  223E               	addwfc	??_updateExpanders+1,f,c
  1307  0002C2  51CB               	movf	updateExpanders@rR& (0+255),w,b
  1308  0002C4  263D               	addwf	??_updateExpanders,f,c
  1309  0002C6  0E00               	movlw	0
  1310  0002C8  223E               	addwfc	??_updateExpanders+1,f,c
  1311  0002CA  C03D  F0C2         	movff	??_updateExpanders,updateExpanders@spaces
  1312  0002CE  C03E  F0C3         	movff	??_updateExpanders+1,updateExpanders@spaces+1
  1313  0002D2  0E00               	movlw	0
  1314  0002D4  BFC3               	btfsc	(updateExpanders@spaces+1)& (0+255),7,b
  1315  0002D6  0EFF               	movlw	-1
  1316  0002D8  6FC4               	movwf	(updateExpanders@spaces+2)& (0+255),b
  1317  0002DA  6FC5               	movwf	(updateExpanders@spaces+3)& (0+255),b
  1318                           
  1319                           ; BSR set to: 0
  1320                           ;main.c: 75: return spaces;
  1321  0002DC  C0C2  F039         	movff	updateExpanders@spaces,?_updateExpanders
  1322  0002E0  C0C3  F03A         	movff	updateExpanders@spaces+1,?_updateExpanders+1
  1323  0002E4  C0C4  F03B         	movff	updateExpanders@spaces+2,?_updateExpanders+2
  1324  0002E8  C0C5  F03C         	movff	updateExpanders@spaces+3,?_updateExpanders+3
  1325  0002EC  0012               	return	
  1326  0002EE                     __end_of_updateExpanders:
  1327                           	opt stack 0
  1328                           tblptru	equ	0xFF8
  1329                           tblptrh	equ	0xFF7
  1330                           tblptrl	equ	0xFF6
  1331                           tablat	equ	0xFF5
  1332                           intcon	equ	0xFF2
  1333                           postinc0	equ	0xFEE
  1334                           wreg	equ	0xFE8
  1335                           postdec1	equ	0xFE5
  1336                           plusw1	equ	0xFE3
  1337                           fsr1l	equ	0xFE1
  1338                           postinc2	equ	0xFDE
  1339                           plusw2	equ	0xFDB
  1340                           fsr2h	equ	0xFDA
  1341                           fsr2l	equ	0xFD9
  1342                           status	equ	0xFD8
  1343                           
  1344 ;; *************** function _readIoExpander *****************
  1345 ;; Defined at:
  1346 ;;		line 46 in file "main.c"
  1347 ;; Parameters:    Size  Location     Type
  1348 ;;  addr            1    wreg     unsigned char 
  1349 ;;  bank            1   37[COMRAM] unsigned char 
  1350 ;;  index           1   38[COMRAM] unsigned char 
  1351 ;; Auto vars:     Size  Location     Type
  1352 ;;  addr            1   52[COMRAM] unsigned char 
  1353 ;;  i               2   54[COMRAM] int 
  1354 ;;  spots           8   41[COMRAM] unsigned char [8]
  1355 ;;  data            2   49[COMRAM] unsigned char [2]
  1356 ;;  rec             1   53[COMRAM] unsigned char 
  1357 ;;  spaces          1   51[COMRAM] unsigned char 
  1358 ;; Return value:  Size  Location     Type
  1359 ;;                  1    wreg      unsigned char 
  1360 ;; Registers used:
  1361 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1362 ;; Tracked objects:
  1363 ;;		On entry : 0/0
  1364 ;;		On exit  : 0/0
  1365 ;;		Unchanged: 0/0
  1366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1367 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1368 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1369 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1370 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1371 ;;Total ram usage:       19 bytes
  1372 ;; Hardware stack levels used:    1
  1373 ;; Hardware stack levels required when called:   15
  1374 ;; This function calls:
  1375 ;;		_i2c_readNBytes
  1376 ;;		_i2c_writeNBytes
  1377 ;; This function is called by:
  1378 ;;		_updateExpanders
  1379 ;;		_checkEnd
  1380 ;; This function uses a non-reentrant model
  1381 ;;
  1382                           
  1383                           	psect	text3
  1384  0002EE                     __ptext3:
  1385                           	opt stack 0
  1386  0002EE                     _readIoExpander:
  1387                           	opt stack 13
  1388                           
  1389                           ; BSR set to: 0
  1390                           ;incstack = 0
  1391                           ;readIoExpander@addr stored from wreg
  1392  0002EE  6E35               	movwf	readIoExpander@addr,c
  1393                           
  1394                           ;main.c: 47: uint8_t data[2];
  1395                           ;main.c: 48: if(bank == 'A' || bank == 'a' || bank == 'r' || bank == 'R')
  1396  0002F0  0E41               	movlw	65
  1397  0002F2  1826               	xorwf	readIoExpander@bank,w,c
  1398  0002F4  B4D8               	btfsc	status,2,c
  1399  0002F6  D00C               	goto	u1840
  1400  0002F8  0E61               	movlw	97
  1401  0002FA  1826               	xorwf	readIoExpander@bank,w,c
  1402  0002FC  B4D8               	btfsc	status,2,c
  1403  0002FE  D008               	goto	u1840
  1404  000300  0E72               	movlw	114
  1405  000302  1826               	xorwf	readIoExpander@bank,w,c
  1406  000304  B4D8               	btfsc	status,2,c
  1407  000306  D004               	goto	u1840
  1408  000308  0E52               	movlw	82
  1409  00030A  1826               	xorwf	readIoExpander@bank,w,c
  1410  00030C  A4D8               	btfss	status,2,c
  1411  00030E  D002               	goto	l622
  1412  000310                     u1840:
  1413                           
  1414                           ;main.c: 49: data[0]=0x12;
  1415  000310  0E12               	movlw	18
  1416  000312  D001               	goto	L2
  1417  000314                     l622:
  1418                           
  1419                           ;main.c: 50: else
  1420                           ;main.c: 51: data[0]=0x13;
  1421  000314  0E13               	movlw	19
  1422  000316                     L2:
  1423  000316  6E32               	movwf	readIoExpander@data,c
  1424                           
  1425                           ;main.c: 52: i2c_writeNBytes(addr, &data[0], 1);
  1426  000318  0E32               	movlw	low readIoExpander@data
  1427  00031A  6E21               	movwf	i2c_writeNBytes@data,c
  1428  00031C  0E00               	movlw	high readIoExpander@data
  1429  00031E  6E22               	movwf	i2c_writeNBytes@data+1,c
  1430  000320  0E00               	movlw	0
  1431  000322  6E24               	movwf	i2c_writeNBytes@len+1,c
  1432  000324  0E01               	movlw	1
  1433  000326  6E23               	movwf	i2c_writeNBytes@len,c
  1434  000328  5035               	movf	readIoExpander@addr,w,c
  1435  00032A  ECEE  F004         	call	_i2c_writeNBytes
  1436                           
  1437                           ;main.c: 53: uint8_t rec;
  1438                           ;main.c: 54: i2c_readNBytes(addr, &rec, 1);
  1439  00032E  0E36               	movlw	low readIoExpander@rec
  1440  000330  6E1B               	movwf	i2c_readNBytes@data,c
  1441  000332  0E00               	movlw	high readIoExpander@rec
  1442  000334  6E1C               	movwf	i2c_readNBytes@data+1,c
  1443  000336  0E00               	movlw	0
  1444  000338  6E1E               	movwf	i2c_readNBytes@len+1,c
  1445  00033A  0E01               	movlw	1
  1446  00033C  6E1D               	movwf	i2c_readNBytes@len,c
  1447  00033E  5035               	movf	readIoExpander@addr,w,c
  1448  000340  EC2F  F006         	call	_i2c_readNBytes
  1449                           
  1450                           ;main.c: 55: rec = ~rec;
  1451  000344  1E36               	comf	readIoExpander@rec,f,c
  1452                           
  1453                           ;main.c: 56: uint8_t spots[8];
  1454                           ;main.c: 57: uint8_t spaces=0;
  1455  000346  0E00               	movlw	0
  1456  000348  6E34               	movwf	readIoExpander@spaces,c
  1457                           
  1458                           ;main.c: 58: for(int i=0;i<8;i++){
  1459  00034A  0E00               	movlw	0
  1460  00034C  6E38               	movwf	readIoExpander@i+1,c
  1461  00034E  0E00               	movlw	0
  1462  000350  6E37               	movwf	readIoExpander@i,c
  1463  000352                     l3858:
  1464  000352  BE38               	btfsc	readIoExpander@i+1,7,c
  1465  000354  D006               	goto	l626
  1466  000356  5038               	movf	readIoExpander@i+1,w,c
  1467  000358  E127               	bnz	l3870
  1468  00035A  0E08               	movlw	8
  1469  00035C  5C37               	subwf	readIoExpander@i,w,c
  1470  00035E  B0D8               	btfsc	status,0,c
  1471  000360  D023               	goto	u1870
  1472  000362                     l626:
  1473                           
  1474                           ;main.c: 59: spots[i] = rec & 2<<i;
  1475  000362  0E2A               	movlw	low readIoExpander@spots
  1476  000364  2437               	addwf	readIoExpander@i,w,c
  1477  000366  6ED9               	movwf	fsr2l,c
  1478  000368  0E00               	movlw	high readIoExpander@spots
  1479  00036A  2038               	addwfc	readIoExpander@i+1,w,c
  1480  00036C  6EDA               	movwf	fsr2h,c
  1481  00036E  C037  F028         	movff	readIoExpander@i,??_readIoExpander
  1482  000372  0E02               	movlw	2
  1483  000374  6E29               	movwf	(??_readIoExpander+1)& (0+255),c
  1484  000376  2A28               	incf	??_readIoExpander,f,c
  1485  000378  D002               	goto	u1864
  1486  00037A                     u1865:
  1487  00037A  90D8               	bcf	status,0,c
  1488  00037C  3629               	rlcf	??_readIoExpander+1,f,c
  1489  00037E                     u1864:
  1490  00037E  2E28               	decfsz	??_readIoExpander,f,c
  1491  000380  D7FC               	goto	u1865
  1492  000382  5029               	movf	??_readIoExpander+1,w,c
  1493  000384  1436               	andwf	readIoExpander@rec,w,c
  1494  000386  6EDF               	movwf	indf2,c
  1495                           
  1496                           ;main.c: 60: spaces+=(i+index)*spots[i];
  1497  000388  0E2A               	movlw	low readIoExpander@spots
  1498  00038A  2437               	addwf	readIoExpander@i,w,c
  1499  00038C  6ED9               	movwf	fsr2l,c
  1500  00038E  0E00               	movlw	high readIoExpander@spots
  1501  000390  2038               	addwfc	readIoExpander@i+1,w,c
  1502  000392  6EDA               	movwf	fsr2h,c
  1503  000394  50DF               	movf	indf2,w,c
  1504  000396  6E28               	movwf	??_readIoExpander& (0+255),c
  1505  000398  5027               	movf	readIoExpander@index,w,c
  1506  00039A  2437               	addwf	readIoExpander@i,w,c
  1507  00039C  0228               	mulwf	??_readIoExpander,c
  1508  00039E  50F3               	movf	prodl,w,c
  1509  0003A0  2634               	addwf	readIoExpander@spaces,f,c
  1510  0003A2  4A37               	infsnz	readIoExpander@i,f,c
  1511  0003A4  2A38               	incf	readIoExpander@i+1,f,c
  1512  0003A6  D7D5               	goto	l3858
  1513  0003A8                     u1870:
  1514  0003A8                     l3870:
  1515                           
  1516                           ;main.c: 61: }
  1517                           ;main.c: 62: return spaces;
  1518  0003A8  5034               	movf	readIoExpander@spaces,w,c
  1519  0003AA  0012               	return	
  1520  0003AC                     __end_of_readIoExpander:
  1521                           	opt stack 0
  1522                           tblptru	equ	0xFF8
  1523                           tblptrh	equ	0xFF7
  1524                           tblptrl	equ	0xFF6
  1525                           tablat	equ	0xFF5
  1526                           prodl	equ	0xFF3
  1527                           intcon	equ	0xFF2
  1528                           postinc0	equ	0xFEE
  1529                           wreg	equ	0xFE8
  1530                           postdec1	equ	0xFE5
  1531                           plusw1	equ	0xFE3
  1532                           fsr1l	equ	0xFE1
  1533                           indf2	equ	0xFDF
  1534                           postinc2	equ	0xFDE
  1535                           plusw2	equ	0xFDB
  1536                           fsr2h	equ	0xFDA
  1537                           fsr2l	equ	0xFD9
  1538                           status	equ	0xFD8
  1539                           
  1540 ;; *************** function _i2c_writeNBytes *****************
  1541 ;; Defined at:
  1542 ;;		line 48 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  1543 ;; Parameters:    Size  Location     Type
  1544 ;;  address         1    wreg     unsigned char 
  1545 ;;  data            2   32[COMRAM] PTR void 
  1546 ;;		 -> readIoExpander@data(2), 
  1547 ;;  len             2   34[COMRAM] unsigned int 
  1548 ;; Auto vars:     Size  Location     Type
  1549 ;;  address         1   36[COMRAM] unsigned char 
  1550 ;; Return value:  Size  Location     Type
  1551 ;;                  1    wreg      void 
  1552 ;; Registers used:
  1553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1554 ;; Tracked objects:
  1555 ;;		On entry : 0/0
  1556 ;;		On exit  : 0/0
  1557 ;;		Unchanged: 0/0
  1558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1559 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1560 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1562 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1563 ;;Total ram usage:        5 bytes
  1564 ;; Hardware stack levels used:    1
  1565 ;; Hardware stack levels required when called:   14
  1566 ;; This function calls:
  1567 ;;		_i2c_close
  1568 ;;		_i2c_masterWrite
  1569 ;;		_i2c_open
  1570 ;;		_i2c_setAddressNACKCallback
  1571 ;;		_i2c_setBuffer
  1572 ;; This function is called by:
  1573 ;;		_readIoExpander
  1574 ;; This function uses a non-reentrant model
  1575 ;;
  1576                           
  1577                           	psect	text4
  1578  0009DC                     __ptext4:
  1579                           	opt stack 0
  1580  0009DC                     _i2c_writeNBytes:
  1581                           	opt stack 13
  1582                           
  1583                           ;incstack = 0
  1584                           ;i2c_writeNBytes@address stored from wreg
  1585  0009DC  6E25               	movwf	i2c_writeNBytes@address,c
  1586  0009DE                     
  1587                           ;i2c_simple_master.c: 50: while(!i2c_open(address));
  1588  0009DE  5025               	movf	i2c_writeNBytes@address,w,c
  1589  0009E0  ECD6  F001         	call	_i2c_open
  1590  0009E4  0900               	iorlw	0
  1591  0009E6  B4D8               	btfsc	status,2,c
  1592  0009E8  D7FA               	goto	l3814
  1593                           
  1594                           ;i2c_simple_master.c: 51: i2c_setBuffer(data,len);
  1595  0009EA  C021  F016         	movff	i2c_writeNBytes@data,i2c_setBuffer@buffer
  1596  0009EE  C022  F017         	movff	i2c_writeNBytes@data+1,i2c_setBuffer@buffer+1
  1597  0009F2  C023  F018         	movff	i2c_writeNBytes@len,i2c_setBuffer@bufferSize
  1598  0009F6  C024  F019         	movff	i2c_writeNBytes@len+1,i2c_setBuffer@bufferSize+1
  1599  0009FA  EC41  F007         	call	_i2c_setBuffer	;wreg free
  1600                           
  1601                           ;i2c_simple_master.c: 52: i2c_setAddressNACKCallback(i2c_restartWrite,(0));
  1602  0009FE  0E92               	movlw	low _i2c_restartWrite
  1603  000A00  6E1C               	movwf	i2c_setAddressNACKCallback@cb,c
  1604  000A02  0E10               	movlw	high _i2c_restartWrite
  1605  000A04  6E1D               	movwf	i2c_setAddressNACKCallback@cb+1,c
  1606  000A06  0E00               	movlw	low (_i2c_restartWrite shr (0+16))
  1607  000A08  6E1E               	movwf	i2c_setAddressNACKCallback@cb+2,c
  1608  000A0A  0E00               	movlw	0
  1609  000A0C  6E1F               	movwf	i2c_setAddressNACKCallback@p,c
  1610  000A0E  0E00               	movlw	0
  1611  000A10  6E20               	movwf	i2c_setAddressNACKCallback@p+1,c
  1612  000A12  ECFC  F006         	call	_i2c_setAddressNACKCallback	;wreg free
  1613                           
  1614                           ;i2c_simple_master.c: 53: i2c_masterWrite();
  1615  000A16  EC58  F008         	call	_i2c_masterWrite	;wreg free
  1616  000A1A  ECED  F006         	call	_i2c_close	;wreg free
  1617  000A1E  06E8               	decf	wreg,f,c
  1618  000A20  A4D8               	btfss	status,2,c
  1619  000A22  0012               	return	
  1620  000A24  D7FA               	goto	l537
  1621  000A26                     __end_of_i2c_writeNBytes:
  1622                           	opt stack 0
  1623                           tblptru	equ	0xFF8
  1624                           tblptrh	equ	0xFF7
  1625                           tblptrl	equ	0xFF6
  1626                           tablat	equ	0xFF5
  1627                           prodl	equ	0xFF3
  1628                           intcon	equ	0xFF2
  1629                           postinc0	equ	0xFEE
  1630                           wreg	equ	0xFE8
  1631                           postdec1	equ	0xFE5
  1632                           plusw1	equ	0xFE3
  1633                           fsr1l	equ	0xFE1
  1634                           indf2	equ	0xFDF
  1635                           postinc2	equ	0xFDE
  1636                           plusw2	equ	0xFDB
  1637                           fsr2h	equ	0xFDA
  1638                           fsr2l	equ	0xFD9
  1639                           status	equ	0xFD8
  1640                           
  1641 ;; *************** function _i2c_setAddressNACKCallback *****************
  1642 ;; Defined at:
  1643 ;;		line 99 in file "mcc_generated_files/drivers/i2c_master.c"
  1644 ;; Parameters:    Size  Location     Type
  1645 ;;  cb              3   27[COMRAM] PTR FTN(PTR void ,)enum 
  1646 ;;		 -> i2c_restartWrite(1), 
  1647 ;;  p               2   30[COMRAM] PTR void 
  1648 ;;		 -> NULL(0), 
  1649 ;; Auto vars:     Size  Location     Type
  1650 ;;		None
  1651 ;; Return value:  Size  Location     Type
  1652 ;;                  1    wreg      void 
  1653 ;; Registers used:
  1654 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1655 ;; Tracked objects:
  1656 ;;		On entry : 0/0
  1657 ;;		On exit  : 0/0
  1658 ;;		Unchanged: 0/0
  1659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1660 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1663 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1664 ;;Total ram usage:        5 bytes
  1665 ;; Hardware stack levels used:    1
  1666 ;; Hardware stack levels required when called:    7
  1667 ;; This function calls:
  1668 ;;		_setCallBack
  1669 ;; This function is called by:
  1670 ;;		_i2c_writeNBytes
  1671 ;;		_i2c_write1ByteRegister
  1672 ;;		_i2c_read1ByteRegister
  1673 ;;		_i2c_read2ByteRegister
  1674 ;;		_i2c_write2ByteRegister
  1675 ;;		_i2c_readDataBlock
  1676 ;; This function uses a non-reentrant model
  1677 ;;
  1678                           
  1679                           	psect	text5
  1680  000DF8                     __ptext5:
  1681                           	opt stack 0
  1682  000DF8                     _i2c_setAddressNACKCallback:
  1683                           	opt stack 19
  1684                           
  1685                           ;i2c_master.c: 101: setCallBack(i2c_addressNACK,cb,p);
  1686                           
  1687                           ;incstack = 0
  1688  000DF8  C01C  F016         	movff	i2c_setAddressNACKCallback@cb,setCallBack@cb
  1689  000DFC  C01D  F017         	movff	i2c_setAddressNACKCallback@cb+1,setCallBack@cb+1
  1690  000E00  C01E  F018         	movff	i2c_setAddressNACKCallback@cb+2,setCallBack@cb+2
  1691  000E04  C01F  F019         	movff	i2c_setAddressNACKCallback@p,setCallBack@p
  1692  000E08  C020  F01A         	movff	i2c_setAddressNACKCallback@p+1,setCallBack@p+1
  1693  000E0C  0E02               	movlw	2
  1694  000E0E  EC93  F003         	call	_setCallBack
  1695  000E12  0012               	return		;funcret
  1696  000E14                     __end_of_i2c_setAddressNACKCallback:
  1697                           	opt stack 0
  1698                           tblptru	equ	0xFF8
  1699                           tblptrh	equ	0xFF7
  1700                           tblptrl	equ	0xFF6
  1701                           tablat	equ	0xFF5
  1702                           prodl	equ	0xFF3
  1703                           intcon	equ	0xFF2
  1704                           postinc0	equ	0xFEE
  1705                           wreg	equ	0xFE8
  1706                           postdec1	equ	0xFE5
  1707                           plusw1	equ	0xFE3
  1708                           fsr1l	equ	0xFE1
  1709                           indf2	equ	0xFDF
  1710                           postinc2	equ	0xFDE
  1711                           plusw2	equ	0xFDB
  1712                           fsr2h	equ	0xFDA
  1713                           fsr2l	equ	0xFD9
  1714                           status	equ	0xFD8
  1715                           
  1716 ;; *************** function _i2c_masterWrite *****************
  1717 ;; Defined at:
  1718 ;;		line 222 in file "mcc_generated_files/drivers/i2c_master.c"
  1719 ;; Parameters:    Size  Location     Type
  1720 ;;		None
  1721 ;; Auto vars:     Size  Location     Type
  1722 ;;		None
  1723 ;; Return value:  Size  Location     Type
  1724 ;;                  1    wreg      enum E11785
  1725 ;; Registers used:
  1726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1727 ;; Tracked objects:
  1728 ;;		On entry : 0/0
  1729 ;;		On exit  : 0/0
  1730 ;;		Unchanged: 0/0
  1731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1736 ;;Total ram usage:        0 bytes
  1737 ;; Hardware stack levels used:    1
  1738 ;; Hardware stack levels required when called:   13
  1739 ;; This function calls:
  1740 ;;		_i2c_masterOperation
  1741 ;; This function is called by:
  1742 ;;		_i2c_writeNBytes
  1743 ;;		_i2c_write1ByteRegister
  1744 ;;		_i2c_read1ByteRegister
  1745 ;;		_i2c_read2ByteRegister
  1746 ;;		_i2c_write2ByteRegister
  1747 ;;		_i2c_readDataBlock
  1748 ;; This function uses a non-reentrant model
  1749 ;;
  1750                           
  1751                           	psect	text6
  1752  0010B0                     __ptext6:
  1753                           	opt stack 0
  1754  0010B0                     _i2c_masterWrite:
  1755                           	opt stack 13
  1756                           
  1757                           ;i2c_master.c: 224: return i2c_masterOperation(0);
  1758                           ;	Return value of _i2c_masterWrite is never used
  1759                           
  1760                           ;incstack = 0
  1761  0010B0  0E00               	movlw	0
  1762  0010B2  EC48  F006         	call	_i2c_masterOperation
  1763  0010B6  0012               	return	
  1764  0010B8                     __end_of_i2c_masterWrite:
  1765                           	opt stack 0
  1766                           tblptru	equ	0xFF8
  1767                           tblptrh	equ	0xFF7
  1768                           tblptrl	equ	0xFF6
  1769                           tablat	equ	0xFF5
  1770                           prodl	equ	0xFF3
  1771                           intcon	equ	0xFF2
  1772                           postinc0	equ	0xFEE
  1773                           wreg	equ	0xFE8
  1774                           postdec1	equ	0xFE5
  1775                           plusw1	equ	0xFE3
  1776                           fsr1l	equ	0xFE1
  1777                           indf2	equ	0xFDF
  1778                           postinc2	equ	0xFDE
  1779                           plusw2	equ	0xFDB
  1780                           fsr2h	equ	0xFDA
  1781                           fsr2l	equ	0xFD9
  1782                           status	equ	0xFD8
  1783                           
  1784 ;; *************** function _i2c_readNBytes *****************
  1785 ;; Defined at:
  1786 ;;		line 156 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  1787 ;; Parameters:    Size  Location     Type
  1788 ;;  address         1    wreg     unsigned char 
  1789 ;;  data            2   26[COMRAM] PTR void 
  1790 ;;		 -> readIoExpander@rec(1), 
  1791 ;;  len             2   28[COMRAM] unsigned int 
  1792 ;; Auto vars:     Size  Location     Type
  1793 ;;  address         1   30[COMRAM] unsigned char 
  1794 ;; Return value:  Size  Location     Type
  1795 ;;                  1    wreg      void 
  1796 ;; Registers used:
  1797 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1798 ;; Tracked objects:
  1799 ;;		On entry : 0/0
  1800 ;;		On exit  : 0/0
  1801 ;;		Unchanged: 0/0
  1802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1803 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1804 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1806 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1807 ;;Total ram usage:        5 bytes
  1808 ;; Hardware stack levels used:    1
  1809 ;; Hardware stack levels required when called:   14
  1810 ;; This function calls:
  1811 ;;		_i2c_close
  1812 ;;		_i2c_masterRead
  1813 ;;		_i2c_open
  1814 ;;		_i2c_setBuffer
  1815 ;; This function is called by:
  1816 ;;		_readIoExpander
  1817 ;; This function uses a non-reentrant model
  1818 ;;
  1819                           
  1820                           	psect	text7
  1821  000C5E                     __ptext7:
  1822                           	opt stack 0
  1823  000C5E                     _i2c_readNBytes:
  1824                           	opt stack 13
  1825                           
  1826                           ;incstack = 0
  1827                           ;i2c_readNBytes@address stored from wreg
  1828  000C5E  6E1F               	movwf	i2c_readNBytes@address,c
  1829  000C60                     
  1830                           ;i2c_simple_master.c: 158: while(!i2c_open(address));
  1831  000C60  501F               	movf	i2c_readNBytes@address,w,c
  1832  000C62  ECD6  F001         	call	_i2c_open
  1833  000C66  0900               	iorlw	0
  1834  000C68  B4D8               	btfsc	status,2,c
  1835  000C6A  D7FA               	goto	l3826
  1836                           
  1837                           ;i2c_simple_master.c: 159: i2c_setBuffer(data,len);
  1838  000C6C  C01B  F016         	movff	i2c_readNBytes@data,i2c_setBuffer@buffer
  1839  000C70  C01C  F017         	movff	i2c_readNBytes@data+1,i2c_setBuffer@buffer+1
  1840  000C74  C01D  F018         	movff	i2c_readNBytes@len,i2c_setBuffer@bufferSize
  1841  000C78  C01E  F019         	movff	i2c_readNBytes@len+1,i2c_setBuffer@bufferSize+1
  1842  000C7C  EC41  F007         	call	_i2c_setBuffer	;wreg free
  1843                           
  1844                           ;i2c_simple_master.c: 160: i2c_masterRead();
  1845  000C80  EC5C  F008         	call	_i2c_masterRead	;wreg free
  1846  000C84  ECED  F006         	call	_i2c_close	;wreg free
  1847  000C88  06E8               	decf	wreg,f,c
  1848  000C8A  A4D8               	btfss	status,2,c
  1849  000C8C  0012               	return	
  1850  000C8E  D7FA               	goto	l597
  1851  000C90                     __end_of_i2c_readNBytes:
  1852                           	opt stack 0
  1853                           tblptru	equ	0xFF8
  1854                           tblptrh	equ	0xFF7
  1855                           tblptrl	equ	0xFF6
  1856                           tablat	equ	0xFF5
  1857                           prodl	equ	0xFF3
  1858                           intcon	equ	0xFF2
  1859                           postinc0	equ	0xFEE
  1860                           wreg	equ	0xFE8
  1861                           postdec1	equ	0xFE5
  1862                           plusw1	equ	0xFE3
  1863                           fsr1l	equ	0xFE1
  1864                           indf2	equ	0xFDF
  1865                           postinc2	equ	0xFDE
  1866                           plusw2	equ	0xFDB
  1867                           fsr2h	equ	0xFDA
  1868                           fsr2l	equ	0xFD9
  1869                           status	equ	0xFD8
  1870                           
  1871 ;; *************** function _i2c_open *****************
  1872 ;; Defined at:
  1873 ;;		line 116 in file "mcc_generated_files/drivers/i2c_master.c"
  1874 ;; Parameters:    Size  Location     Type
  1875 ;;  address         1    wreg     unsigned char 
  1876 ;; Auto vars:     Size  Location     Type
  1877 ;;  address         1   24[COMRAM] unsigned char 
  1878 ;;  ret             1   25[COMRAM] enum E11785
  1879 ;; Return value:  Size  Location     Type
  1880 ;;                  1    wreg      enum E11785
  1881 ;; Registers used:
  1882 ;;		wreg, status,2, status,0, cstack
  1883 ;; Tracked objects:
  1884 ;;		On entry : 0/0
  1885 ;;		On exit  : 0/0
  1886 ;;		Unchanged: 0/0
  1887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1889 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1891 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1892 ;;Total ram usage:        2 bytes
  1893 ;; Hardware stack levels used:    1
  1894 ;; Hardware stack levels required when called:    7
  1895 ;; This function calls:
  1896 ;;		_i2c1_driver_open
  1897 ;;		_i2c1_driver_setBusCollisionISR
  1898 ;;		_i2c1_driver_setI2cISR
  1899 ;;		_mssp1_clearIRQ
  1900 ;; This function is called by:
  1901 ;;		_i2c_writeNBytes
  1902 ;;		_i2c_readNBytes
  1903 ;;		_i2c_write1ByteRegister
  1904 ;;		_i2c_read1ByteRegister
  1905 ;;		_i2c_read2ByteRegister
  1906 ;;		_i2c_write2ByteRegister
  1907 ;;		_i2c_readDataBlock
  1908 ;; This function uses a non-reentrant model
  1909 ;;
  1910                           
  1911                           	psect	text8
  1912  0003AC                     __ptext8:
  1913                           	opt stack 0
  1914  0003AC                     _i2c_open:
  1915                           	opt stack 19
  1916                           
  1917                           ;incstack = 0
  1918                           ;i2c_open@address stored from wreg
  1919  0003AC  6E19               	movwf	i2c_open@address,c
  1920                           
  1921                           ;i2c_master.c: 118: i2c_error_t ret = I2C_BUSY;
  1922  0003AE  0E01               	movlw	1
  1923  0003B0  6E1A               	movwf	i2c_open@ret,c
  1924                           
  1925                           ;i2c_master.c: 120: if(!i2c_status.inUse)
  1926  0003B2  0100               	movlb	0	; () banked
  1927  0003B4  B360               	btfsc	_i2c_status& (0+255),1,b
  1928  0003B6  D050               	goto	l354
  1929                           
  1930                           ; BSR set to: 0
  1931                           ;i2c_master.c: 121: {
  1932                           ;i2c_master.c: 122: i2c_status.address = address;
  1933  0003B8  C019  F061         	movff	i2c_open@address,_i2c_status+1
  1934                           
  1935                           ; BSR set to: 0
  1936                           ;i2c_master.c: 123: i2c_status.busy = 0;
  1937  0003BC  9160               	bcf	_i2c_status& (0+255),0,b
  1938                           
  1939                           ; BSR set to: 0
  1940                           ;i2c_master.c: 124: i2c_status.inUse = 1;
  1941  0003BE  8360               	bsf	_i2c_status& (0+255),1,b
  1942                           
  1943                           ; BSR set to: 0
  1944                           ;i2c_master.c: 125: i2c_status.addressNACKCheck = 0;
  1945  0003C0  9760               	bcf	_i2c_status& (0+255),3,b
  1946                           
  1947                           ; BSR set to: 0
  1948                           ;i2c_master.c: 126: i2c_status.state = I2C_RESET;
  1949  0003C2  0E0E               	movlw	14
  1950  0003C4  6F6A               	movwf	(_i2c_status+10)& (0+255),b
  1951                           
  1952                           ; BSR set to: 0
  1953                           ;i2c_master.c: 127: i2c_status.time_out_value = 500;
  1954  0003C6  0E01               	movlw	1
  1955  0003C8  6F69               	movwf	(_i2c_status+9)& (0+255),b
  1956  0003CA  0EF4               	movlw	244
  1957  0003CC  6F68               	movwf	(_i2c_status+8)& (0+255),b
  1958                           
  1959                           ; BSR set to: 0
  1960                           ;i2c_master.c: 128: i2c_status.bufferFree = 1;
  1961  0003CE  8560               	bsf	_i2c_status& (0+255),2,b
  1962                           
  1963                           ; BSR set to: 0
  1964                           ;i2c_master.c: 131: i2c_status.callbackTable[i2c_dataComplete]=returnStop;
  1965  0003D0  0EA6               	movlw	low _returnStop
  1966  0003D2  6F6C               	movwf	(_i2c_status+12)& (0+255),b
  1967  0003D4  0E10               	movlw	high _returnStop
  1968  0003D6  6F6D               	movwf	(_i2c_status+13)& (0+255),b
  1969  0003D8  0E00               	movlw	low (_returnStop shr (0+16))
  1970  0003DA  6F6E               	movwf	(_i2c_status+14)& (0+255),b
  1971                           
  1972                           ; BSR set to: 0
  1973                           ;i2c_master.c: 132: i2c_status.callbackPayload[i2c_dataComplete] = (0);
  1974  0003DC  0E00               	movlw	0
  1975  0003DE  6F7E               	movwf	(_i2c_status+30)& (0+255),b
  1976  0003E0  0E00               	movlw	0
  1977  0003E2  6F7F               	movwf	(_i2c_status+31)& (0+255),b
  1978                           
  1979                           ; BSR set to: 0
  1980                           ;i2c_master.c: 133: i2c_status.callbackTable[i2c_writeCollision]=returnStop;
  1981  0003E4  0EA6               	movlw	low _returnStop
  1982  0003E6  6F6F               	movwf	(_i2c_status+15)& (0+255),b
  1983  0003E8  0E10               	movlw	high _returnStop
  1984  0003EA  6F70               	movwf	(_i2c_status+16)& (0+255),b
  1985  0003EC  0E00               	movlw	low (_returnStop shr (0+16))
  1986  0003EE  6F71               	movwf	(_i2c_status+17)& (0+255),b
  1987                           
  1988                           ; BSR set to: 0
  1989                           ;i2c_master.c: 134: i2c_status.callbackPayload[i2c_writeCollision] = (0);
  1990  0003F0  0E00               	movlw	0
  1991  0003F2  6F80               	movwf	(_i2c_status+32)& (0+255),b
  1992  0003F4  0E00               	movlw	0
  1993  0003F6  6F81               	movwf	(_i2c_status+33)& (0+255),b
  1994                           
  1995                           ; BSR set to: 0
  1996                           ;i2c_master.c: 135: i2c_status.callbackTable[i2c_addressNACK]=returnStop;
  1997  0003F8  0EA6               	movlw	low _returnStop
  1998  0003FA  6F72               	movwf	(_i2c_status+18)& (0+255),b
  1999  0003FC  0E10               	movlw	high _returnStop
  2000  0003FE  6F73               	movwf	(_i2c_status+19)& (0+255),b
  2001  000400  0E00               	movlw	low (_returnStop shr (0+16))
  2002  000402  6F74               	movwf	(_i2c_status+20)& (0+255),b
  2003                           
  2004                           ; BSR set to: 0
  2005                           ;i2c_master.c: 136: i2c_status.callbackPayload[i2c_addressNACK] = (0);
  2006  000404  0E00               	movlw	0
  2007  000406  6F82               	movwf	(_i2c_status+34)& (0+255),b
  2008  000408  0E00               	movlw	0
  2009  00040A  6F83               	movwf	(_i2c_status+35)& (0+255),b
  2010                           
  2011                           ; BSR set to: 0
  2012                           ;i2c_master.c: 137: i2c_status.callbackTable[i2c_dataNACK]=returnStop;
  2013  00040C  0EA6               	movlw	low _returnStop
  2014  00040E  6F75               	movwf	(_i2c_status+21)& (0+255),b
  2015  000410  0E10               	movlw	high _returnStop
  2016  000412  6F76               	movwf	(_i2c_status+22)& (0+255),b
  2017  000414  0E00               	movlw	low (_returnStop shr (0+16))
  2018  000416  6F77               	movwf	(_i2c_status+23)& (0+255),b
  2019                           
  2020                           ; BSR set to: 0
  2021                           ;i2c_master.c: 138: i2c_status.callbackPayload[i2c_dataNACK] = (0);
  2022  000418  0E00               	movlw	0
  2023  00041A  6F84               	movwf	(_i2c_status+36)& (0+255),b
  2024  00041C  0E00               	movlw	0
  2025  00041E  6F85               	movwf	(_i2c_status+37)& (0+255),b
  2026                           
  2027                           ; BSR set to: 0
  2028                           ;i2c_master.c: 139: i2c_status.callbackTable[i2c_timeOut]=returnReset;
  2029  000420  0E9C               	movlw	low _returnReset
  2030  000422  6F78               	movwf	(_i2c_status+24)& (0+255),b
  2031  000424  0E10               	movlw	high _returnReset
  2032  000426  6F79               	movwf	(_i2c_status+25)& (0+255),b
  2033  000428  0E00               	movlw	low (_returnReset shr (0+16))
  2034  00042A  6F7A               	movwf	(_i2c_status+26)& (0+255),b
  2035                           
  2036                           ; BSR set to: 0
  2037                           ;i2c_master.c: 140: i2c_status.callbackPayload[i2c_timeOut] = (0);
  2038  00042C  0E00               	movlw	0
  2039  00042E  6F86               	movwf	(_i2c_status+38)& (0+255),b
  2040  000430  0E00               	movlw	0
  2041  000432  6F87               	movwf	(_i2c_status+39)& (0+255),b
  2042                           
  2043                           ; BSR set to: 0
  2044                           ;i2c_master.c: 142: i2c1_driver_open();
  2045  000434  EC73  F007         	call	_i2c1_driver_open	;wreg free
  2046                           
  2047                           ;i2c_master.c: 143: mssp1_clearIRQ();
  2048  000438  EC90  F008         	call	_mssp1_clearIRQ	;wreg free
  2049                           
  2050                           ;i2c_master.c: 145: i2c1_driver_setBusCollisionISR(i2c_busCollisionISR);
  2051  00043C  0E3E               	movlw	low _i2c_busCollisionISR
  2052  00043E  6E16               	movwf	i2c1_driver_setBusCollisionISR@f,c
  2053  000440  0E11               	movlw	high _i2c_busCollisionISR
  2054  000442  6E17               	movwf	i2c1_driver_setBusCollisionISR@f+1,c
  2055  000444  EC05  F008         	call	_i2c1_driver_setBusCollisionISR	;wreg free
  2056                           
  2057                           ;i2c_master.c: 146: i2c1_driver_setI2cISR(i2c_ISR);
  2058  000448  0E40               	movlw	low _i2c_ISR
  2059  00044A  6E16               	movwf	i2c1_driver_setI2cISR@f,c
  2060  00044C  0E09               	movlw	high _i2c_ISR
  2061  00044E  6E17               	movwf	i2c1_driver_setI2cISR@f+1,c
  2062  000450  ECFE  F007         	call	_i2c1_driver_setI2cISR	;wreg free
  2063                           
  2064                           ;i2c_master.c: 151: ret = I2C_NOERR;
  2065  000454  0E00               	movlw	0
  2066  000456  6E1A               	movwf	i2c_open@ret,c
  2067  000458                     l354:
  2068                           
  2069                           ;i2c_master.c: 152: }
  2070                           ;i2c_master.c: 153: return ret;
  2071  000458  501A               	movf	i2c_open@ret,w,c
  2072  00045A  0012               	return	
  2073  00045C                     __end_of_i2c_open:
  2074                           	opt stack 0
  2075                           tblptru	equ	0xFF8
  2076                           tblptrh	equ	0xFF7
  2077                           tblptrl	equ	0xFF6
  2078                           tablat	equ	0xFF5
  2079                           prodl	equ	0xFF3
  2080                           intcon	equ	0xFF2
  2081                           postinc0	equ	0xFEE
  2082                           wreg	equ	0xFE8
  2083                           postdec1	equ	0xFE5
  2084                           plusw1	equ	0xFE3
  2085                           fsr1l	equ	0xFE1
  2086                           indf2	equ	0xFDF
  2087                           postinc2	equ	0xFDE
  2088                           plusw2	equ	0xFDB
  2089                           fsr2h	equ	0xFDA
  2090                           fsr2l	equ	0xFD9
  2091                           status	equ	0xFD8
  2092                           
  2093 ;; *************** function _i2c1_driver_setI2cISR *****************
  2094 ;; Defined at:
  2095 ;;		line 262 in file "mcc_generated_files/i2c1_driver.c"
  2096 ;; Parameters:    Size  Location     Type
  2097 ;;  f               3   21[COMRAM] PTR void 
  2098 ;;		 -> i2c_ISR(1), 
  2099 ;; Auto vars:     Size  Location     Type
  2100 ;;		None
  2101 ;; Return value:  Size  Location     Type
  2102 ;;                  1    wreg      void 
  2103 ;; Registers used:
  2104 ;;		wreg, status,2, status,0
  2105 ;; Tracked objects:
  2106 ;;		On entry : 0/0
  2107 ;;		On exit  : 0/0
  2108 ;;		Unchanged: 0/0
  2109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2110 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2113 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2114 ;;Total ram usage:        3 bytes
  2115 ;; Hardware stack levels used:    1
  2116 ;; Hardware stack levels required when called:    6
  2117 ;; This function calls:
  2118 ;;		Nothing
  2119 ;; This function is called by:
  2120 ;;		_i2c_open
  2121 ;; This function uses a non-reentrant model
  2122 ;;
  2123                           
  2124                           	psect	text9
  2125  000FFC                     __ptext9:
  2126                           	opt stack 0
  2127  000FFC                     _i2c1_driver_setI2cISR:
  2128                           	opt stack 19
  2129                           
  2130                           ;i2c1_driver.c: 263: i2c1_driver_i2cISR = f;
  2131                           
  2132                           ;incstack = 0
  2133  000FFC  C016  F041         	movff	i2c1_driver_setI2cISR@f,_i2c1_driver_i2cISR
  2134  001000  C017  F042         	movff	i2c1_driver_setI2cISR@f+1,_i2c1_driver_i2cISR+1
  2135  001004  C018  F043         	movff	i2c1_driver_setI2cISR@f+2,_i2c1_driver_i2cISR+2
  2136  001008  0012               	return		;funcret
  2137  00100A                     __end_of_i2c1_driver_setI2cISR:
  2138                           	opt stack 0
  2139                           tblptru	equ	0xFF8
  2140                           tblptrh	equ	0xFF7
  2141                           tblptrl	equ	0xFF6
  2142                           tablat	equ	0xFF5
  2143                           prodl	equ	0xFF3
  2144                           intcon	equ	0xFF2
  2145                           postinc0	equ	0xFEE
  2146                           wreg	equ	0xFE8
  2147                           postdec1	equ	0xFE5
  2148                           plusw1	equ	0xFE3
  2149                           fsr1l	equ	0xFE1
  2150                           indf2	equ	0xFDF
  2151                           postinc2	equ	0xFDE
  2152                           plusw2	equ	0xFDB
  2153                           fsr2h	equ	0xFDA
  2154                           fsr2l	equ	0xFD9
  2155                           status	equ	0xFD8
  2156                           
  2157 ;; *************** function _i2c1_driver_setBusCollisionISR *****************
  2158 ;; Defined at:
  2159 ;;		line 258 in file "mcc_generated_files/i2c1_driver.c"
  2160 ;; Parameters:    Size  Location     Type
  2161 ;;  f               3   21[COMRAM] PTR void 
  2162 ;;		 -> i2c_busCollisionISR(1), 
  2163 ;; Auto vars:     Size  Location     Type
  2164 ;;		None
  2165 ;; Return value:  Size  Location     Type
  2166 ;;                  1    wreg      void 
  2167 ;; Registers used:
  2168 ;;		wreg, status,2, status,0
  2169 ;; Tracked objects:
  2170 ;;		On entry : 0/0
  2171 ;;		On exit  : 0/0
  2172 ;;		Unchanged: 0/0
  2173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2174 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2177 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2178 ;;Total ram usage:        3 bytes
  2179 ;; Hardware stack levels used:    1
  2180 ;; Hardware stack levels required when called:    6
  2181 ;; This function calls:
  2182 ;;		Nothing
  2183 ;; This function is called by:
  2184 ;;		_i2c_open
  2185 ;; This function uses a non-reentrant model
  2186 ;;
  2187                           
  2188                           	psect	text10
  2189  00100A                     __ptext10:
  2190                           	opt stack 0
  2191  00100A                     _i2c1_driver_setBusCollisionISR:
  2192                           	opt stack 19
  2193                           
  2194                           ;i2c1_driver.c: 259: i2c1_driver_busCollisionISR = f;
  2195                           
  2196                           ;incstack = 0
  2197  00100A  C016  F044         	movff	i2c1_driver_setBusCollisionISR@f,_i2c1_driver_busCollisionISR
  2198  00100E  C017  F045         	movff	i2c1_driver_setBusCollisionISR@f+1,_i2c1_driver_busCollisionISR+1
  2199  001012  C018  F046         	movff	i2c1_driver_setBusCollisionISR@f+2,_i2c1_driver_busCollisionISR+2
  2200  001016  0012               	return		;funcret
  2201  001018                     __end_of_i2c1_driver_setBusCollisionISR:
  2202                           	opt stack 0
  2203                           tblptru	equ	0xFF8
  2204                           tblptrh	equ	0xFF7
  2205                           tblptrl	equ	0xFF6
  2206                           tablat	equ	0xFF5
  2207                           prodl	equ	0xFF3
  2208                           intcon	equ	0xFF2
  2209                           postinc0	equ	0xFEE
  2210                           wreg	equ	0xFE8
  2211                           postdec1	equ	0xFE5
  2212                           plusw1	equ	0xFE3
  2213                           fsr1l	equ	0xFE1
  2214                           indf2	equ	0xFDF
  2215                           postinc2	equ	0xFDE
  2216                           plusw2	equ	0xFDB
  2217                           fsr2h	equ	0xFDA
  2218                           fsr2l	equ	0xFD9
  2219                           status	equ	0xFD8
  2220                           
  2221 ;; *************** function _i2c1_driver_open *****************
  2222 ;; Defined at:
  2223 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
  2224 ;; Parameters:    Size  Location     Type
  2225 ;;		None
  2226 ;; Auto vars:     Size  Location     Type
  2227 ;;		None
  2228 ;; Return value:  Size  Location     Type
  2229 ;;		None               void
  2230 ;; Registers used:
  2231 ;;		wreg, status,2
  2232 ;; Tracked objects:
  2233 ;;		On entry : 0/0
  2234 ;;		On exit  : 0/0
  2235 ;;		Unchanged: 0/0
  2236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2241 ;;Total ram usage:        0 bytes
  2242 ;; Hardware stack levels used:    1
  2243 ;; Hardware stack levels required when called:    6
  2244 ;; This function calls:
  2245 ;;		Nothing
  2246 ;; This function is called by:
  2247 ;;		_i2c_open
  2248 ;; This function uses a non-reentrant model
  2249 ;;
  2250                           
  2251                           	psect	text11
  2252  000EE6                     __ptext11:
  2253                           	opt stack 0
  2254  000EE6                     _i2c1_driver_open:
  2255                           	opt stack 19
  2256                           
  2257                           ;i2c1_driver.c: 85: if(!SSP1CON1bits.SSPEN)
  2258                           
  2259                           ;incstack = 0
  2260  000EE6  BA96               	btfsc	3990,5,c	;volatile
  2261  000EE8  0012               	return	
  2262                           
  2263                           ;i2c1_driver.c: 86: {
  2264                           ;i2c1_driver.c: 87: SSP1STAT = 0x00;
  2265  000EEA  0E00               	movlw	0
  2266  000EEC  6E95               	movwf	3989,c	;volatile
  2267                           
  2268                           ;i2c1_driver.c: 88: SSP1CON1 = 0x28;
  2269  000EEE  0E28               	movlw	40
  2270  000EF0  6E96               	movwf	3990,c	;volatile
  2271                           
  2272                           ;i2c1_driver.c: 89: SSP1CON2 = 0x00;
  2273  000EF2  0E00               	movlw	0
  2274  000EF4  6E97               	movwf	3991,c	;volatile
  2275                           
  2276                           ;i2c1_driver.c: 90: SSP1ADD = 0x4;
  2277  000EF6  0E04               	movlw	4
  2278  000EF8  6E93               	movwf	3987,c	;volatile
  2279                           
  2280                           ;i2c1_driver.c: 93: else
  2281                           ;i2c1_driver.c: 94: return 0;
  2282                           ;	Return value of _i2c1_driver_open is never used
  2283                           
  2284                           ;i2c1_driver.c: 92: }
  2285                           
  2286                           ;i2c1_driver.c: 91: return 1;
  2287                           ;	Return value of _i2c1_driver_open is never used
  2288  000EFA  0012               	return	
  2289  000EFC                     __end_of_i2c1_driver_open:
  2290                           	opt stack 0
  2291                           tblptru	equ	0xFF8
  2292                           tblptrh	equ	0xFF7
  2293                           tblptrl	equ	0xFF6
  2294                           tablat	equ	0xFF5
  2295                           prodl	equ	0xFF3
  2296                           intcon	equ	0xFF2
  2297                           postinc0	equ	0xFEE
  2298                           wreg	equ	0xFE8
  2299                           postdec1	equ	0xFE5
  2300                           plusw1	equ	0xFE3
  2301                           fsr1l	equ	0xFE1
  2302                           indf2	equ	0xFDF
  2303                           postinc2	equ	0xFDE
  2304                           plusw2	equ	0xFDB
  2305                           fsr2h	equ	0xFDA
  2306                           fsr2l	equ	0xFD9
  2307                           status	equ	0xFD8
  2308                           
  2309 ;; *************** function _i2c_masterRead *****************
  2310 ;; Defined at:
  2311 ;;		line 217 in file "mcc_generated_files/drivers/i2c_master.c"
  2312 ;; Parameters:    Size  Location     Type
  2313 ;;		None
  2314 ;; Auto vars:     Size  Location     Type
  2315 ;;		None
  2316 ;; Return value:  Size  Location     Type
  2317 ;;                  1    wreg      enum E11785
  2318 ;; Registers used:
  2319 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2320 ;; Tracked objects:
  2321 ;;		On entry : 0/0
  2322 ;;		On exit  : 0/0
  2323 ;;		Unchanged: 0/0
  2324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2329 ;;Total ram usage:        0 bytes
  2330 ;; Hardware stack levels used:    1
  2331 ;; Hardware stack levels required when called:   13
  2332 ;; This function calls:
  2333 ;;		_i2c_masterOperation
  2334 ;; This function is called by:
  2335 ;;		_i2c_readNBytes
  2336 ;; This function uses a non-reentrant model
  2337 ;;
  2338                           
  2339                           	psect	text12
  2340  0010B8                     __ptext12:
  2341                           	opt stack 0
  2342  0010B8                     _i2c_masterRead:
  2343                           	opt stack 13
  2344                           
  2345                           ;i2c_master.c: 219: return i2c_masterOperation(1);
  2346                           ;	Return value of _i2c_masterRead is never used
  2347                           
  2348                           ;incstack = 0
  2349  0010B8  0E01               	movlw	1
  2350  0010BA  EC48  F006         	call	_i2c_masterOperation
  2351  0010BE  0012               	return	
  2352  0010C0                     __end_of_i2c_masterRead:
  2353                           	opt stack 0
  2354                           tblptru	equ	0xFF8
  2355                           tblptrh	equ	0xFF7
  2356                           tblptrl	equ	0xFF6
  2357                           tablat	equ	0xFF5
  2358                           prodl	equ	0xFF3
  2359                           intcon	equ	0xFF2
  2360                           postinc0	equ	0xFEE
  2361                           wreg	equ	0xFE8
  2362                           postdec1	equ	0xFE5
  2363                           plusw1	equ	0xFE3
  2364                           fsr1l	equ	0xFE1
  2365                           indf2	equ	0xFDF
  2366                           postinc2	equ	0xFDE
  2367                           plusw2	equ	0xFDB
  2368                           fsr2h	equ	0xFDA
  2369                           fsr2l	equ	0xFD9
  2370                           status	equ	0xFD8
  2371                           
  2372 ;; *************** function _i2c_masterOperation *****************
  2373 ;; Defined at:
  2374 ;;		line 193 in file "mcc_generated_files/drivers/i2c_master.c"
  2375 ;; Parameters:    Size  Location     Type
  2376 ;;  read            1    wreg     unsigned char 
  2377 ;; Auto vars:     Size  Location     Type
  2378 ;;  read            1   24[COMRAM] unsigned char 
  2379 ;;  ret             1   25[COMRAM] enum E11785
  2380 ;; Return value:  Size  Location     Type
  2381 ;;                  1    wreg      enum E11785
  2382 ;; Registers used:
  2383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2384 ;; Tracked objects:
  2385 ;;		On entry : 0/0
  2386 ;;		On exit  : 0/0
  2387 ;;		Unchanged: 0/0
  2388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2390 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2392 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2393 ;;Total ram usage:        2 bytes
  2394 ;; Hardware stack levels used:    1
  2395 ;; Hardware stack levels required when called:   12
  2396 ;; This function calls:
  2397 ;;		_i2c1_driver_start
  2398 ;;		_i2c_poller
  2399 ;;		_mssp1_IRQisEnabled
  2400 ;; This function is called by:
  2401 ;;		_i2c_masterRead
  2402 ;;		_i2c_masterWrite
  2403 ;; This function uses a non-reentrant model
  2404 ;;
  2405                           
  2406                           	psect	text13
  2407  000C90                     __ptext13:
  2408                           	opt stack 0
  2409  000C90                     _i2c_masterOperation:
  2410                           	opt stack 13
  2411                           
  2412                           ;incstack = 0
  2413                           ;i2c_masterOperation@read stored from wreg
  2414  000C90  6E19               	movwf	i2c_masterOperation@read,c
  2415                           
  2416                           ;i2c_master.c: 195: i2c_error_t ret = I2C_BUSY;
  2417  000C92  0E01               	movlw	1
  2418  000C94  6E1A               	movwf	i2c_masterOperation@ret,c
  2419                           
  2420                           ;i2c_master.c: 196: if(!i2c_status.busy)
  2421  000C96  0100               	movlb	0	; () banked
  2422  000C98  B160               	btfsc	_i2c_status& (0+255),0,b
  2423  000C9A  D011               	goto	l375
  2424                           
  2425                           ; BSR set to: 0
  2426                           ;i2c_master.c: 197: {
  2427                           ;i2c_master.c: 198: i2c_status.busy = 1;
  2428  000C9C  8160               	bsf	_i2c_status& (0+255),0,b
  2429                           
  2430                           ; BSR set to: 0
  2431                           ;i2c_master.c: 199: ret = I2C_NOERR;
  2432  000C9E  0E00               	movlw	0
  2433  000CA0  6E1A               	movwf	i2c_masterOperation@ret,c
  2434                           
  2435                           ; BSR set to: 0
  2436                           ;i2c_master.c: 201: if(read)
  2437  000CA2  5019               	movf	i2c_masterOperation@read,w,c
  2438  000CA4  B4D8               	btfsc	status,2,c
  2439  000CA6  D002               	goto	l373
  2440                           
  2441                           ; BSR set to: 0
  2442                           ;i2c_master.c: 202: {
  2443                           ;i2c_master.c: 203: i2c_status.state = I2C_SEND_ADR_READ;
  2444  000CA8  0E01               	movlw	1
  2445  000CAA  D001               	goto	L3
  2446  000CAC                     l373:
  2447                           
  2448                           ; BSR set to: 0
  2449                           ;i2c_master.c: 205: else
  2450                           ;i2c_master.c: 206: {
  2451                           ;i2c_master.c: 207: i2c_status.state = I2C_SEND_ADR_WRITE;
  2452                           
  2453                           ; BSR set to: 0
  2454  000CAC  0E02               	movlw	2
  2455  000CAE                     L3:
  2456  000CAE  6F6A               	movwf	(_i2c_status+10)& (0+255),b
  2457                           
  2458                           ; BSR set to: 0
  2459                           ;i2c_master.c: 208: }
  2460                           ;i2c_master.c: 209: i2c1_driver_start();
  2461                           
  2462                           ; BSR set to: 0
  2463  000CB0  ECAD  F008         	call	_i2c1_driver_start	;wreg free
  2464                           
  2465                           ;i2c_master.c: 211: if(! mssp1_IRQisEnabled())
  2466  000CB4  ECCB  F007         	call	_mssp1_IRQisEnabled	;wreg free
  2467  000CB8  A0D8               	btfss	status,0,c
  2468                           
  2469                           ;i2c_master.c: 212: i2c_poller();
  2470  000CBA  EC34  F007         	call	_i2c_poller	;wreg free
  2471  000CBE                     l375:
  2472                           
  2473                           ;i2c_master.c: 213: }
  2474                           ;i2c_master.c: 214: return ret;
  2475  000CBE  501A               	movf	i2c_masterOperation@ret,w,c
  2476  000CC0  0012               	return	
  2477  000CC2                     __end_of_i2c_masterOperation:
  2478                           	opt stack 0
  2479                           tblptru	equ	0xFF8
  2480                           tblptrh	equ	0xFF7
  2481                           tblptrl	equ	0xFF6
  2482                           tablat	equ	0xFF5
  2483                           prodl	equ	0xFF3
  2484                           intcon	equ	0xFF2
  2485                           postinc0	equ	0xFEE
  2486                           wreg	equ	0xFE8
  2487                           postdec1	equ	0xFE5
  2488                           plusw1	equ	0xFE3
  2489                           fsr1l	equ	0xFE1
  2490                           indf2	equ	0xFDF
  2491                           postinc2	equ	0xFDE
  2492                           plusw2	equ	0xFDB
  2493                           fsr2h	equ	0xFDA
  2494                           fsr2l	equ	0xFD9
  2495                           status	equ	0xFD8
  2496                           
  2497 ;; *************** function _mssp1_IRQisEnabled *****************
  2498 ;; Defined at:
  2499 ;;		line 43 in file "mcc_generated_files/i2c1_driver.c"
  2500 ;; Parameters:    Size  Location     Type
  2501 ;;		None
  2502 ;; Auto vars:     Size  Location     Type
  2503 ;;		None
  2504 ;; Return value:  Size  Location     Type
  2505 ;;		None               void
  2506 ;; Registers used:
  2507 ;;		wreg, status,0
  2508 ;; Tracked objects:
  2509 ;;		On entry : 0/0
  2510 ;;		On exit  : 0/0
  2511 ;;		Unchanged: 0/0
  2512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2515 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2516 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2517 ;;Total ram usage:        1 bytes
  2518 ;; Hardware stack levels used:    1
  2519 ;; Hardware stack levels required when called:    6
  2520 ;; This function calls:
  2521 ;;		Nothing
  2522 ;; This function is called by:
  2523 ;;		_i2c_masterOperation
  2524 ;; This function uses a non-reentrant model
  2525 ;;
  2526                           
  2527                           	psect	text14
  2528  000F96                     __ptext14:
  2529                           	opt stack 0
  2530  000F96                     _mssp1_IRQisEnabled:
  2531                           	opt stack 18
  2532                           
  2533                           ;i2c1_driver.c: 45: return PIE3bits.SSP1IE;
  2534                           
  2535                           ;incstack = 0
  2536  000F96  010E               	movlb	14	; () banked
  2537  000F98  A1C5               	btfss	197,0,b	;volatile
  2538  000F9A  D003               	goto	u1690
  2539  000F9C  6A16               	clrf	??_mssp1_IRQisEnabled& (0+255),c
  2540  000F9E  2A16               	incf	??_mssp1_IRQisEnabled& (0+255),f,c
  2541  000FA0  D001               	goto	u1698
  2542  000FA2                     u1690:
  2543  000FA2  6A16               	clrf	??_mssp1_IRQisEnabled& (0+255),c
  2544  000FA4                     u1698:
  2545  000FA4  3016               	rrcf	??_mssp1_IRQisEnabled,w,c
  2546  000FA6  0012               	return	
  2547  000FA8                     __end_of_mssp1_IRQisEnabled:
  2548                           	opt stack 0
  2549                           tblptru	equ	0xFF8
  2550                           tblptrh	equ	0xFF7
  2551                           tblptrl	equ	0xFF6
  2552                           tablat	equ	0xFF5
  2553                           prodl	equ	0xFF3
  2554                           intcon	equ	0xFF2
  2555                           postinc0	equ	0xFEE
  2556                           wreg	equ	0xFE8
  2557                           postdec1	equ	0xFE5
  2558                           plusw1	equ	0xFE3
  2559                           fsr1l	equ	0xFE1
  2560                           indf2	equ	0xFDF
  2561                           postinc2	equ	0xFDE
  2562                           plusw2	equ	0xFDB
  2563                           fsr2h	equ	0xFDA
  2564                           fsr2l	equ	0xFD9
  2565                           status	equ	0xFD8
  2566                           
  2567 ;; *************** function _i2c_poller *****************
  2568 ;; Defined at:
  2569 ;;		line 230 in file "mcc_generated_files/drivers/i2c_master.c"
  2570 ;; Parameters:    Size  Location     Type
  2571 ;;		None
  2572 ;; Auto vars:     Size  Location     Type
  2573 ;;		None
  2574 ;; Return value:  Size  Location     Type
  2575 ;;                  1    wreg      void 
  2576 ;; Registers used:
  2577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2578 ;; Tracked objects:
  2579 ;;		On entry : 0/0
  2580 ;;		On exit  : 0/0
  2581 ;;		Unchanged: 0/0
  2582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2586 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2587 ;;Total ram usage:        0 bytes
  2588 ;; Hardware stack levels used:    1
  2589 ;; Hardware stack levels required when called:   11
  2590 ;; This function calls:
  2591 ;;		_i2c_ISR
  2592 ;;		_mssp1_waitForEvent
  2593 ;; This function is called by:
  2594 ;;		_i2c_masterOperation
  2595 ;; This function uses a non-reentrant model
  2596 ;;
  2597                           
  2598                           	psect	text15
  2599  000E68                     __ptext15:
  2600                           	opt stack 0
  2601  000E68                     _i2c_poller:
  2602                           	opt stack 13
  2603                           
  2604                           ;i2c_master.c: 232: while(i2c_status.busy)
  2605                           
  2606                           ;incstack = 0
  2607  000E68  D008               	goto	l385
  2608  000E6A                     
  2609                           ;i2c_master.c: 233: {
  2610                           ;i2c_master.c: 234: mssp1_waitForEvent((0));
  2611  000E6A  0E00               	movlw	0
  2612  000E6C  6E16               	movwf	mssp1_waitForEvent@timeout,c
  2613  000E6E  0E00               	movlw	0
  2614  000E70  6E17               	movwf	mssp1_waitForEvent@timeout+1,c
  2615  000E72  EC7E  F007         	call	_mssp1_waitForEvent	;wreg free
  2616                           
  2617                           ;i2c_master.c: 235: i2c_ISR();
  2618  000E76  ECA0  F004         	call	_i2c_ISR	;wreg free
  2619  000E7A                     l385:
  2620  000E7A  0100               	movlb	0	; () banked
  2621  000E7C  A160               	btfss	_i2c_status& (0+255),0,b
  2622  000E7E  0012               	return	
  2623  000E80  D7F4               	goto	l386
  2624  000E82                     __end_of_i2c_poller:
  2625                           	opt stack 0
  2626                           tblptru	equ	0xFF8
  2627                           tblptrh	equ	0xFF7
  2628                           tblptrl	equ	0xFF6
  2629                           tablat	equ	0xFF5
  2630                           prodl	equ	0xFF3
  2631                           intcon	equ	0xFF2
  2632                           postinc0	equ	0xFEE
  2633                           wreg	equ	0xFE8
  2634                           postdec1	equ	0xFE5
  2635                           plusw1	equ	0xFE3
  2636                           fsr1l	equ	0xFE1
  2637                           indf2	equ	0xFDF
  2638                           postinc2	equ	0xFDE
  2639                           plusw2	equ	0xFDB
  2640                           fsr2h	equ	0xFDA
  2641                           fsr2l	equ	0xFD9
  2642                           status	equ	0xFD8
  2643                           
  2644 ;; *************** function _mssp1_waitForEvent *****************
  2645 ;; Defined at:
  2646 ;;		line 68 in file "mcc_generated_files/i2c1_driver.c"
  2647 ;; Parameters:    Size  Location     Type
  2648 ;;  timeout         2   21[COMRAM] PTR unsigned int 
  2649 ;;		 -> NULL(0), 
  2650 ;; Auto vars:     Size  Location     Type
  2651 ;;		None
  2652 ;; Return value:  Size  Location     Type
  2653 ;;                  1    wreg      void 
  2654 ;; Registers used:
  2655 ;;		wreg
  2656 ;; Tracked objects:
  2657 ;;		On entry : 0/0
  2658 ;;		On exit  : 0/0
  2659 ;;		Unchanged: 0/0
  2660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2661 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2664 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2665 ;;Total ram usage:        2 bytes
  2666 ;; Hardware stack levels used:    1
  2667 ;; Hardware stack levels required when called:    6
  2668 ;; This function calls:
  2669 ;;		Nothing
  2670 ;; This function is called by:
  2671 ;;		_i2c_poller
  2672 ;; This function uses a non-reentrant model
  2673 ;;
  2674                           
  2675                           	psect	text16
  2676  000EFC                     __ptext16:
  2677                           	opt stack 0
  2678  000EFC                     _mssp1_waitForEvent:
  2679                           	opt stack 17
  2680                           
  2681                           ;i2c1_driver.c: 73: if(PIR3bits.SSP1IF == 0)
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;incstack = 0
  2685  000EFC  010E               	movlb	14	; () banked
  2686  000EFE  B1CD               	btfsc	205,0,b	;volatile
  2687  000F00  0012               	return	
  2688  000F02                     u1640:
  2689                           
  2690                           ;i2c1_driver.c: 76: {
  2691                           ;i2c1_driver.c: 77: if(PIR3bits.SSP1IF) break;
  2692                           
  2693                           ;i2c1_driver.c: 74: {
  2694                           ;i2c1_driver.c: 75: while(1)
  2695  000F02  010E               	movlb	14	; () banked
  2696  000F04  B1CD               	btfsc	205,0,b	;volatile
  2697  000F06  0012               	return	
  2698                           
  2699                           ; BSR set to: 14
  2700                           ;i2c1_driver.c: 78: _delay((unsigned long)((100)*(2000000/4000000.0)));
  2701                           
  2702                           ; BSR set to: 14
  2703                           
  2704                           ; BSR set to: 14
  2705  000F08  0E10               	movlw	16
  2706  000F0A                     u2297:
  2707  000F0A  2EE8               	decfsz	wreg,f,c
  2708  000F0C  D7FE               	bra	u2297
  2709  000F0E  D000               	nop2	
  2710  000F10  D7F8               	goto	u1640
  2711  000F12                     __end_of_mssp1_waitForEvent:
  2712                           	opt stack 0
  2713                           tblptru	equ	0xFF8
  2714                           tblptrh	equ	0xFF7
  2715                           tblptrl	equ	0xFF6
  2716                           tablat	equ	0xFF5
  2717                           prodl	equ	0xFF3
  2718                           intcon	equ	0xFF2
  2719                           postinc0	equ	0xFEE
  2720                           wreg	equ	0xFE8
  2721                           postdec1	equ	0xFE5
  2722                           plusw1	equ	0xFE3
  2723                           fsr1l	equ	0xFE1
  2724                           indf2	equ	0xFDF
  2725                           postinc2	equ	0xFDE
  2726                           plusw2	equ	0xFDB
  2727                           fsr2h	equ	0xFDA
  2728                           fsr2l	equ	0xFD9
  2729                           status	equ	0xFD8
  2730                           
  2731 ;; *************** function _i2c_ISR *****************
  2732 ;; Defined at:
  2733 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
  2734 ;; Parameters:    Size  Location     Type
  2735 ;;		None
  2736 ;; Auto vars:     Size  Location     Type
  2737 ;;		None
  2738 ;; Return value:  Size  Location     Type
  2739 ;;                  1    wreg      void 
  2740 ;; Registers used:
  2741 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2742 ;; Tracked objects:
  2743 ;;		On entry : 0/0
  2744 ;;		On exit  : 0/0
  2745 ;;		Unchanged: 0/0
  2746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2751 ;;Total ram usage:        0 bytes
  2752 ;; Hardware stack levels used:    1
  2753 ;; Hardware stack levels required when called:   10
  2754 ;; This function calls:
  2755 ;;		_do_I2C_DO_ACK
  2756 ;;		_do_I2C_DO_ADDRESS_NACK
  2757 ;;		_do_I2C_DO_NACK_RESTART
  2758 ;;		_do_I2C_DO_NACK_STOP
  2759 ;;		_do_I2C_IDLE
  2760 ;;		_do_I2C_RCEN
  2761 ;;		_do_I2C_RESET
  2762 ;;		_do_I2C_RX
  2763 ;;		_do_I2C_SEND_ADR_READ
  2764 ;;		_do_I2C_SEND_ADR_WRITE
  2765 ;;		_do_I2C_SEND_RESTART
  2766 ;;		_do_I2C_SEND_RESTART_READ
  2767 ;;		_do_I2C_SEND_RESTART_WRITE
  2768 ;;		_do_I2C_SEND_STOP
  2769 ;;		_do_I2C_TX
  2770 ;;		_do_I2C_TX_EMPTY
  2771 ;;		_i2c1_driver_isNACK
  2772 ;;		_mssp1_clearIRQ
  2773 ;; This function is called by:
  2774 ;;		_i2c_open
  2775 ;;		_i2c_poller
  2776 ;;		_INTERRUPT_InterruptManager
  2777 ;; This function uses a non-reentrant model
  2778 ;;
  2779                           
  2780                           	psect	text17
  2781  000940                     __ptext17:
  2782                           	opt stack 0
  2783  000940                     _i2c_ISR:
  2784                           	opt stack 0
  2785                           
  2786                           ;Skip over the trampoline to the duplicate function for level 2
  2787  000940  B247               	btfsc	btemp,1,c
  2788  000942  EF38  F005         	goto	i2_i2c_ISR
  2789  000946                     _i2c_ISR$intlevel0:
  2790                           	opt stack 13
  2791                           
  2792                           ;i2c_master.c: 421: mssp1_clearIRQ();
  2793                           
  2794                           ;incstack = 0
  2795  000946  EC90  F008         	call	_mssp1_clearIRQ	;wreg free
  2796                           
  2797                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c1_driver_isNACK())
  2798  00094A  0100               	movlb	0	; () banked
  2799  00094C  A760               	btfss	_i2c_status& (0+255),3,b
  2800  00094E  D007               	goto	l475
  2801                           
  2802                           ; BSR set to: 0
  2803  000950  ECAA  F007         	call	_i2c1_driver_isNACK	;wreg free
  2804  000954  A0D8               	btfss	status,0,c
  2805  000956  D003               	goto	l475
  2806                           
  2807                           ;i2c_master.c: 428: {
  2808                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
  2809  000958  0E0F               	movlw	15
  2810  00095A  0100               	movlb	0	; () banked
  2811  00095C  6F6A               	movwf	(_i2c_status+10)& (0+255),b
  2812  00095E                     l475:
  2813                           
  2814                           ;i2c_master.c: 430: }
  2815                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
  2816                           
  2817                           ; BSR set to: 0
  2818  00095E  0100               	movlb	0	; () banked
  2819  000960  516A               	movf	(_i2c_status+10)& (0+255),w,b
  2820  000962  0D03               	mullw	3
  2821  000964  0E92               	movlw	low _fsmStateTable
  2822  000966  24F3               	addwf	prodl,w,c
  2823  000968  6ED9               	movwf	fsr2l,c
  2824  00096A  0E00               	movlw	high _fsmStateTable
  2825  00096C  20F4               	addwfc	prodh,w,c
  2826  00096E  6EDA               	movwf	fsr2h,c
  2827  000970  D801               	call	u1688
  2828  000972  D00A               	goto	u1689
  2829  000974                     u1688:
  2830  000974  0005               	push	
  2831  000976  6EFA               	movwf	pclath,c
  2832  000978  50DE               	movf	postinc2,w,c
  2833  00097A  6EFD               	movwf	tosl,c
  2834  00097C  50DE               	movf	postinc2,w,c
  2835  00097E  6EFE               	movwf	tosh,c
  2836  000980  50DE               	movf	postinc2,w,c
  2837  000982  6EFF               	movwf	tosu,c
  2838  000984  50FA               	movf	pclath,w,c
  2839  000986  0012               	return		;indir
  2840  000988                     u1689:
  2841  000988  0100               	movlb	0	; () banked
  2842  00098A  6F6A               	movwf	(_i2c_status+10)& (0+255),b
  2843                           
  2844                           ; BSR set to: 0
  2845  00098C  0012               	return		;funcret
  2846  00098E                     __end_of_i2c_ISR:
  2847                           	opt stack 0
  2848                           tosu	equ	0xFFF
  2849                           tosh	equ	0xFFE
  2850                           tosl	equ	0xFFD
  2851                           pclath	equ	0xFFA
  2852                           tblptru	equ	0xFF8
  2853                           tblptrh	equ	0xFF7
  2854                           tblptrl	equ	0xFF6
  2855                           tablat	equ	0xFF5
  2856                           prodh	equ	0xFF4
  2857                           prodl	equ	0xFF3
  2858                           intcon	equ	0xFF2
  2859                           postinc0	equ	0xFEE
  2860                           wreg	equ	0xFE8
  2861                           postdec1	equ	0xFE5
  2862                           plusw1	equ	0xFE3
  2863                           fsr1l	equ	0xFE1
  2864                           indf2	equ	0xFDF
  2865                           postinc2	equ	0xFDE
  2866                           plusw2	equ	0xFDB
  2867                           fsr2h	equ	0xFDA
  2868                           fsr2l	equ	0xFD9
  2869                           status	equ	0xFD8
  2870                           
  2871 ;; *************** function _do_I2C_RX *****************
  2872 ;; Defined at:
  2873 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
  2874 ;; Parameters:    Size  Location     Type
  2875 ;;		None
  2876 ;; Auto vars:     Size  Location     Type
  2877 ;;		None
  2878 ;; Return value:  Size  Location     Type
  2879 ;;                  1    wreg      enum E11956
  2880 ;; Registers used:
  2881 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2882 ;; Tracked objects:
  2883 ;;		On entry : 0/0
  2884 ;;		On exit  : 0/0
  2885 ;;		Unchanged: 0/0
  2886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2890 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2891 ;;Total ram usage:        0 bytes
  2892 ;; Hardware stack levels used:    1
  2893 ;; Hardware stack levels required when called:    9
  2894 ;; This function calls:
  2895 ;;		Absolute function
  2896 ;;		_do_I2C_DO_NACK_RESTART
  2897 ;;		_do_I2C_DO_NACK_STOP
  2898 ;;		_i2c1_driver_getRXData
  2899 ;;		_i2c1_driver_sendACK
  2900 ;;		_i2c_restartWrite
  2901 ;;		_rd1RegCompleteHandler
  2902 ;;		_rd2RegCompleteHandler
  2903 ;;		_rdBlkRegCompleteHandler
  2904 ;;		_returnReset
  2905 ;;		_returnStop
  2906 ;;		_wr1RegCompleteHandler
  2907 ;;		_wr2RegCompleteHandler
  2908 ;; This function is called by:
  2909 ;;		_i2c_ISR
  2910 ;;		i2_i2c_ISR
  2911 ;; This function uses a non-reentrant model
  2912 ;;
  2913                           
  2914                           	psect	text18
  2915  0006AC                     __ptext18:
  2916                           	opt stack 0
  2917  0006AC                     _do_I2C_RX:
  2918                           	opt stack 0
  2919                           
  2920                           ; BSR set to: 0
  2921                           ;Skip over the trampoline to the duplicate function for level 2
  2922  0006AC  B247               	btfsc	btemp,1,c
  2923  0006AE  EF0B  F004         	goto	i2_do_I2C_RX
  2924  0006B2                     _do_I2C_RX$intlevel0:
  2925                           	opt stack 13
  2926                           
  2927                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c1_driver_getRXData();
  2928                           
  2929                           ;incstack = 0
  2930  0006B2  ECA5  F008         	call	_i2c1_driver_getRXData	;wreg free
  2931  0006B6  C062  FFD9         	movff	_i2c_status+2,fsr2l
  2932  0006BA  C063  FFDA         	movff	_i2c_status+3,fsr2h
  2933  0006BE  6EDF               	movwf	indf2,c
  2934  0006C0  0100               	movlb	0	; () banked
  2935  0006C2  4B62               	infsnz	(_i2c_status+2)& (0+255),f,b
  2936  0006C4  2B63               	incf	(_i2c_status+3)& (0+255),f,b
  2937                           
  2938                           ; BSR set to: 0
  2939                           ;i2c_master.c: 360: if(--i2c_status.data_length)
  2940  0006C6  0764               	decf	(_i2c_status+4)& (0+255),f,b
  2941  0006C8  A0D8               	btfss	status,0,c
  2942  0006CA  0765               	decf	(_i2c_status+5)& (0+255),f,b
  2943  0006CC  5164               	movf	(_i2c_status+4)& (0+255),w,b
  2944  0006CE  1165               	iorwf	(_i2c_status+5)& (0+255),w,b
  2945  0006D0  B4D8               	btfsc	status,2,c
  2946  0006D2  D004               	goto	l451
  2947                           
  2948                           ; BSR set to: 0
  2949                           ;i2c_master.c: 361: {
  2950                           ;i2c_master.c: 362: i2c1_driver_sendACK();
  2951  0006D4  EC8A  F008         	call	_i2c1_driver_sendACK	;wreg free
  2952                           
  2953                           ;i2c_master.c: 363: return I2C_RCEN;
  2954  0006D8  0E05               	movlw	5
  2955                           
  2956                           ;i2c_master.c: 364: }
  2957  0006DA  0012               	return	
  2958  0006DC                     l451:
  2959                           
  2960                           ; BSR set to: 0
  2961                           ;i2c_master.c: 365: else
  2962                           ;i2c_master.c: 366: {
  2963                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
  2964  0006DC  8560               	bsf	_i2c_status& (0+255),2,b
  2965                           
  2966                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  2967  0006DE  D006               	goto	l454
  2968  0006E0                     
  2969                           ;i2c_master.c: 371: case i2c_restart_read:
  2970                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
  2971                           
  2972                           ; BSR set to: 0
  2973                           
  2974                           ; BSR set to: 0
  2975  0006E0  EC0C  F008         	call	_do_I2C_DO_NACK_RESTART	;wreg free
  2976  0006E4  0012               	return	
  2977  0006E6                     
  2978                           ;i2c_master.c: 375: case i2c_stop:
  2979                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
  2980                           
  2981                           ;i2c_master.c: 374: case i2c_continue:
  2982  0006E6  EC13  F008         	call	_do_I2C_DO_NACK_STOP	;wreg free
  2983                           
  2984                           ;i2c_master.c: 377: }
  2985  0006EA  0012               	return	
  2986  0006EC                     l454:
  2987  0006EC  C07E  F021         	movff	_i2c_status+30,returnStop@p
  2988  0006F0  C07F  F022         	movff	_i2c_status+31,returnStop@p+1
  2989  0006F4  EE20  F06C         	lfsr	2,_i2c_status+12
  2990  0006F8  D801               	call	u1628
  2991  0006FA  D00A               	goto	u1629
  2992  0006FC                     u1628:
  2993  0006FC  0005               	push	
  2994  0006FE  6EFA               	movwf	pclath,c
  2995  000700  50DE               	movf	postinc2,w,c
  2996  000702  6EFD               	movwf	tosl,c
  2997  000704  50DE               	movf	postinc2,w,c
  2998  000706  6EFE               	movwf	tosh,c
  2999  000708  50DE               	movf	postinc2,w,c
  3000  00070A  6EFF               	movwf	tosu,c
  3001  00070C  50FA               	movf	pclath,w,c
  3002  00070E  0012               	return		;indir
  3003  000710                     u1629:
  3004                           
  3005                           ; Switch size 1, requested type "space"
  3006                           ; Number of cases is 4, Range of values is 1 to 4
  3007                           ; switch strategies available:
  3008                           ; Name         Instructions Cycles
  3009                           ; simple_byte           13     7 (average)
  3010                           ;	Chosen strategy is simple_byte
  3011  000710  0A01               	xorlw	1	; case 1
  3012  000712  B4D8               	btfsc	status,2,c
  3013  000714  D7E8               	goto	l457
  3014  000716  0A03               	xorlw	3	; case 2
  3015  000718  B4D8               	btfsc	status,2,c
  3016  00071A  D7E2               	goto	l455
  3017  00071C  0A01               	xorlw	1	; case 3
  3018  00071E  B4D8               	btfsc	status,2,c
  3019  000720  D7DF               	goto	l455
  3020  000722  0A07               	xorlw	7	; case 4
  3021  000724  D7E0               	goto	l457
  3022  000726                     __end_of_do_I2C_RX:
  3023                           	opt stack 0
  3024                           tosu	equ	0xFFF
  3025                           tosh	equ	0xFFE
  3026                           tosl	equ	0xFFD
  3027                           pclath	equ	0xFFA
  3028                           tblptru	equ	0xFF8
  3029                           tblptrh	equ	0xFF7
  3030                           tblptrl	equ	0xFF6
  3031                           tablat	equ	0xFF5
  3032                           prodh	equ	0xFF4
  3033                           prodl	equ	0xFF3
  3034                           intcon	equ	0xFF2
  3035                           postinc0	equ	0xFEE
  3036                           wreg	equ	0xFE8
  3037                           postdec1	equ	0xFE5
  3038                           plusw1	equ	0xFE3
  3039                           fsr1l	equ	0xFE1
  3040                           indf2	equ	0xFDF
  3041                           postinc2	equ	0xFDE
  3042                           plusw2	equ	0xFDB
  3043                           fsr2h	equ	0xFDA
  3044                           fsr2l	equ	0xFD9
  3045                           status	equ	0xFD8
  3046                           
  3047 ;; *************** function _do_I2C_TX *****************
  3048 ;; Defined at:
  3049 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
  3050 ;; Parameters:    Size  Location     Type
  3051 ;;		None
  3052 ;; Auto vars:     Size  Location     Type
  3053 ;;		None
  3054 ;; Return value:  Size  Location     Type
  3055 ;;                  1    wreg      enum E11956
  3056 ;; Registers used:
  3057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3058 ;; Tracked objects:
  3059 ;;		On entry : 0/0
  3060 ;;		On exit  : 0/0
  3061 ;;		Unchanged: 0/0
  3062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3064 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3066 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3067 ;;Total ram usage:        2 bytes
  3068 ;; Hardware stack levels used:    1
  3069 ;; Hardware stack levels required when called:    9
  3070 ;; This function calls:
  3071 ;;		Absolute function
  3072 ;;		_do_I2C_SEND_RESTART_READ
  3073 ;;		_do_I2C_SEND_RESTART_WRITE
  3074 ;;		_do_I2C_SEND_STOP
  3075 ;;		_i2c1_driver_TXData
  3076 ;;		_i2c1_driver_isNACK
  3077 ;;		_i2c_restartWrite
  3078 ;;		_rd1RegCompleteHandler
  3079 ;;		_rd2RegCompleteHandler
  3080 ;;		_rdBlkRegCompleteHandler
  3081 ;;		_returnReset
  3082 ;;		_returnStop
  3083 ;;		_wr1RegCompleteHandler
  3084 ;;		_wr2RegCompleteHandler
  3085 ;; This function is called by:
  3086 ;;		_i2c_ISR
  3087 ;;		i2_i2c_ISR
  3088 ;; This function uses a non-reentrant model
  3089 ;;
  3090                           
  3091                           	psect	text19
  3092  0004F4                     __ptext19:
  3093                           	opt stack 0
  3094  0004F4                     _do_I2C_TX:
  3095                           	opt stack 0
  3096                           
  3097                           ;Skip over the trampoline to the duplicate function for level 2
  3098  0004F4  B247               	btfsc	btemp,1,c
  3099  0004F6  EF0E  F003         	goto	i2_do_I2C_TX
  3100  0004FA                     _do_I2C_TX$intlevel0:
  3101                           	opt stack 13
  3102                           
  3103                           ;i2c_master.c: 335: if(i2c1_driver_isNACK())
  3104                           
  3105                           ;incstack = 0
  3106  0004FA  ECAA  F007         	call	_i2c1_driver_isNACK	;wreg free
  3107  0004FE  B0D8               	btfsc	status,0,c
  3108  000500  D00A               	goto	l436
  3109  000502  D026               	goto	l435
  3110  000504                     
  3111                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
  3112  000504  EC36  F008         	call	_do_I2C_SEND_RESTART_READ	;wreg free
  3113  000508  0012               	return	
  3114  00050A                     
  3115                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
  3116  00050A  EC2F  F008         	call	_do_I2C_SEND_RESTART_WRITE	;wreg free
  3117  00050E  0012               	return	
  3118  000510                     
  3119                           ;i2c_master.c: 345: case i2c_stop:
  3120                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
  3121                           
  3122                           ;i2c_master.c: 344: case i2c_continue:
  3123  000510  EC21  F008         	call	_do_I2C_SEND_STOP	;wreg free
  3124                           
  3125                           ;i2c_master.c: 347: }
  3126  000514  0012               	return	
  3127  000516                     l436:
  3128  000516  C084  F021         	movff	_i2c_status+36,returnStop@p
  3129  00051A  C085  F022         	movff	_i2c_status+37,returnStop@p+1
  3130  00051E  EE20  F075         	lfsr	2,_i2c_status+21
  3131  000522  D801               	call	u1598
  3132  000524  D00A               	goto	u1599
  3133  000526                     u1598:
  3134  000526  0005               	push	
  3135  000528  6EFA               	movwf	pclath,c
  3136  00052A  50DE               	movf	postinc2,w,c
  3137  00052C  6EFD               	movwf	tosl,c
  3138  00052E  50DE               	movf	postinc2,w,c
  3139  000530  6EFE               	movwf	tosh,c
  3140  000532  50DE               	movf	postinc2,w,c
  3141  000534  6EFF               	movwf	tosu,c
  3142  000536  50FA               	movf	pclath,w,c
  3143  000538  0012               	return		;indir
  3144  00053A                     u1599:
  3145                           
  3146                           ; Switch size 1, requested type "space"
  3147                           ; Number of cases is 4, Range of values is 1 to 4
  3148                           ; switch strategies available:
  3149                           ; Name         Instructions Cycles
  3150                           ; simple_byte           13     7 (average)
  3151                           ;	Chosen strategy is simple_byte
  3152  00053A  0A01               	xorlw	1	; case 1
  3153  00053C  B4D8               	btfsc	status,2,c
  3154  00053E  D7E8               	goto	l440
  3155  000540  0A03               	xorlw	3	; case 2
  3156  000542  B4D8               	btfsc	status,2,c
  3157  000544  D7DF               	goto	l437
  3158  000546  0A01               	xorlw	1	; case 3
  3159  000548  B4D8               	btfsc	status,2,c
  3160  00054A  D7DF               	goto	l439
  3161  00054C  0A07               	xorlw	7	; case 4
  3162  00054E  D7E0               	goto	l440
  3163  000550                     l435:
  3164                           
  3165                           ;i2c_master.c: 349: else
  3166                           ;i2c_master.c: 350: {
  3167                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
  3168  000550  0100               	movlb	0	; () banked
  3169  000552  9760               	bcf	_i2c_status& (0+255),3,b
  3170                           
  3171                           ; BSR set to: 0
  3172                           ;i2c_master.c: 352: i2c1_driver_TXData(*i2c_status.data_ptr++);
  3173  000554  C062  FFD9         	movff	_i2c_status+2,fsr2l
  3174  000558  C063  FFDA         	movff	_i2c_status+3,fsr2h
  3175  00055C  4B62               	infsnz	(_i2c_status+2)& (0+255),f,b
  3176  00055E  2B63               	incf	(_i2c_status+3)& (0+255),f,b
  3177  000560  50DF               	movf	indf2,w,c
  3178  000562  EC60  F008         	call	_i2c1_driver_TXData
  3179                           
  3180                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  3181  000566  0100               	movlb	0	; () banked
  3182  000568  0764               	decf	(_i2c_status+4)& (0+255),f,b
  3183  00056A  A0D8               	btfss	status,0,c
  3184  00056C  0765               	decf	(_i2c_status+5)& (0+255),f,b
  3185  00056E  5164               	movf	(_i2c_status+4)& (0+255),w,b
  3186  000570  1165               	iorwf	(_i2c_status+5)& (0+255),w,b
  3187  000572  A4D8               	btfss	status,2,c
  3188  000574  D004               	goto	l446
  3189                           
  3190                           ; BSR set to: 0
  3191  000576  0E00               	movlw	0
  3192  000578  6E18               	movwf	_do_I2C_TX$1036+1,c
  3193  00057A  0E06               	movlw	6
  3194  00057C  D003               	goto	L4
  3195  00057E                     l446:
  3196                           
  3197                           ; BSR set to: 0
  3198                           
  3199                           ; BSR set to: 0
  3200  00057E  0E00               	movlw	0
  3201  000580  6E18               	movwf	_do_I2C_TX$1036+1,c
  3202  000582  0E03               	movlw	3
  3203  000584                     L4:
  3204  000584  6E17               	movwf	_do_I2C_TX$1036,c
  3205                           
  3206                           ; BSR set to: 0
  3207  000586  5017               	movf	_do_I2C_TX$1036,w,c
  3208                           
  3209                           ; BSR set to: 0
  3210  000588  0012               	return	
  3211  00058A                     __end_of_do_I2C_TX:
  3212                           	opt stack 0
  3213                           tosu	equ	0xFFF
  3214                           tosh	equ	0xFFE
  3215                           tosl	equ	0xFFD
  3216                           pclath	equ	0xFFA
  3217                           tblptru	equ	0xFF8
  3218                           tblptrh	equ	0xFF7
  3219                           tblptrl	equ	0xFF6
  3220                           tablat	equ	0xFF5
  3221                           prodh	equ	0xFF4
  3222                           prodl	equ	0xFF3
  3223                           intcon	equ	0xFF2
  3224                           postinc0	equ	0xFEE
  3225                           wreg	equ	0xFE8
  3226                           postdec1	equ	0xFE5
  3227                           plusw1	equ	0xFE3
  3228                           fsr1l	equ	0xFE1
  3229                           indf2	equ	0xFDF
  3230                           postinc2	equ	0xFDE
  3231                           plusw2	equ	0xFDB
  3232                           fsr2h	equ	0xFDA
  3233                           fsr2l	equ	0xFD9
  3234                           status	equ	0xFD8
  3235                           
  3236 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
  3237 ;; Defined at:
  3238 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
  3239 ;; Parameters:    Size  Location     Type
  3240 ;;		None
  3241 ;; Auto vars:     Size  Location     Type
  3242 ;;		None
  3243 ;; Return value:  Size  Location     Type
  3244 ;;                  1    wreg      enum E11956
  3245 ;; Registers used:
  3246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3247 ;; Tracked objects:
  3248 ;;		On entry : 0/0
  3249 ;;		On exit  : 0/0
  3250 ;;		Unchanged: 0/0
  3251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3256 ;;Total ram usage:        0 bytes
  3257 ;; Hardware stack levels used:    1
  3258 ;; Hardware stack levels required when called:    9
  3259 ;; This function calls:
  3260 ;;		Absolute function
  3261 ;;		_do_I2C_SEND_RESTART
  3262 ;;		_do_I2C_SEND_STOP
  3263 ;;		_i2c_restartWrite
  3264 ;;		_rd1RegCompleteHandler
  3265 ;;		_rd2RegCompleteHandler
  3266 ;;		_rdBlkRegCompleteHandler
  3267 ;;		_returnReset
  3268 ;;		_returnStop
  3269 ;;		_wr1RegCompleteHandler
  3270 ;;		_wr2RegCompleteHandler
  3271 ;; This function is called by:
  3272 ;;		_i2c_ISR
  3273 ;;		i2_i2c_ISR
  3274 ;; This function uses a non-reentrant model
  3275 ;;
  3276                           
  3277                           	psect	text20
  3278  00098E                     __ptext20:
  3279                           	opt stack 0
  3280  00098E                     _do_I2C_DO_ADDRESS_NACK:
  3281                           	opt stack 0
  3282                           
  3283                           ;Skip over the trampoline to the duplicate function for level 2
  3284  00098E  B247               	btfsc	btemp,1,c
  3285  000990  EF5C  F005         	goto	i2_do_I2C_DO_ADDRESS_NACK
  3286  000994                     _do_I2C_DO_ADDRESS_NACK$intlevel0:
  3287                           	opt stack 13
  3288                           
  3289                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
  3290                           
  3291                           ;incstack = 0
  3292  000994  0100               	movlb	0	; () banked
  3293  000996  9760               	bcf	_i2c_status& (0+255),3,b
  3294                           
  3295                           ; BSR set to: 0
  3296                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
  3297  000998  0E02               	movlw	2
  3298  00099A  6F6B               	movwf	(_i2c_status+11)& (0+255),b
  3299                           
  3300                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  3301  00099C  D006               	goto	l427
  3302  00099E                     
  3303                           ;i2c_master.c: 326: case i2c_restart_write:
  3304                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
  3305                           
  3306                           ; BSR set to: 0
  3307                           
  3308                           ; BSR set to: 0
  3309  00099E  EC28  F008         	call	_do_I2C_SEND_RESTART	;wreg free
  3310  0009A2  0012               	return	
  3311  0009A4                     
  3312                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
  3313  0009A4  EC21  F008         	call	_do_I2C_SEND_STOP	;wreg free
  3314                           
  3315                           ;i2c_master.c: 330: }
  3316  0009A8  0012               	return	
  3317  0009AA                     l427:
  3318  0009AA  C082  F021         	movff	_i2c_status+34,returnStop@p
  3319  0009AE  C083  F022         	movff	_i2c_status+35,returnStop@p+1
  3320  0009B2  EE20  F072         	lfsr	2,_i2c_status+18
  3321  0009B6  D801               	call	u1578
  3322  0009B8  D00A               	goto	u1579
  3323  0009BA                     u1578:
  3324  0009BA  0005               	push	
  3325  0009BC  6EFA               	movwf	pclath,c
  3326  0009BE  50DE               	movf	postinc2,w,c
  3327  0009C0  6EFD               	movwf	tosl,c
  3328  0009C2  50DE               	movf	postinc2,w,c
  3329  0009C4  6EFE               	movwf	tosh,c
  3330  0009C6  50DE               	movf	postinc2,w,c
  3331  0009C8  6EFF               	movwf	tosu,c
  3332  0009CA  50FA               	movf	pclath,w,c
  3333  0009CC  0012               	return		;indir
  3334  0009CE                     u1579:
  3335                           
  3336                           ; Switch size 1, requested type "space"
  3337                           ; Number of cases is 2, Range of values is 2 to 3
  3338                           ; switch strategies available:
  3339                           ; Name         Instructions Cycles
  3340                           ; simple_byte            7     4 (average)
  3341                           ;	Chosen strategy is simple_byte
  3342  0009CE  0A02               	xorlw	2	; case 2
  3343  0009D0  B4D8               	btfsc	status,2,c
  3344  0009D2  D7E5               	goto	l428
  3345  0009D4  0A01               	xorlw	1	; case 3
  3346  0009D6  B4D8               	btfsc	status,2,c
  3347  0009D8  D7E2               	goto	l428
  3348  0009DA  D7E4               	goto	l431
  3349  0009DC                     __end_of_do_I2C_DO_ADDRESS_NACK:
  3350                           	opt stack 0
  3351                           tosu	equ	0xFFF
  3352                           tosh	equ	0xFFE
  3353                           tosl	equ	0xFFD
  3354                           pclath	equ	0xFFA
  3355                           tblptru	equ	0xFF8
  3356                           tblptrh	equ	0xFF7
  3357                           tblptrl	equ	0xFF6
  3358                           tablat	equ	0xFF5
  3359                           prodh	equ	0xFF4
  3360                           prodl	equ	0xFF3
  3361                           intcon	equ	0xFF2
  3362                           postinc0	equ	0xFEE
  3363                           wreg	equ	0xFE8
  3364                           postdec1	equ	0xFE5
  3365                           plusw1	equ	0xFE3
  3366                           fsr1l	equ	0xFE1
  3367                           indf2	equ	0xFDF
  3368                           postinc2	equ	0xFDE
  3369                           plusw2	equ	0xFDB
  3370                           fsr2h	equ	0xFDA
  3371                           fsr2l	equ	0xFD9
  3372                           status	equ	0xFD8
  3373                           
  3374 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
  3375 ;; Defined at:
  3376 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
  3377 ;; Parameters:    Size  Location     Type
  3378 ;;		None
  3379 ;; Auto vars:     Size  Location     Type
  3380 ;;		None
  3381 ;; Return value:  Size  Location     Type
  3382 ;;                  1    wreg      enum E11956
  3383 ;; Registers used:
  3384 ;;		wreg, cstack
  3385 ;; Tracked objects:
  3386 ;;		On entry : 0/0
  3387 ;;		On exit  : 0/0
  3388 ;;		Unchanged: 0/0
  3389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3393 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3394 ;;Total ram usage:        0 bytes
  3395 ;; Hardware stack levels used:    1
  3396 ;; Hardware stack levels required when called:    7
  3397 ;; This function calls:
  3398 ;;		_i2c1_driver_sendNACK
  3399 ;; This function is called by:
  3400 ;;		_do_I2C_RX
  3401 ;;		_i2c_ISR
  3402 ;;		i2_i2c_ISR
  3403 ;; This function uses a non-reentrant model
  3404 ;;
  3405                           
  3406                           	psect	text21
  3407  001018                     __ptext21:
  3408                           	opt stack 0
  3409  001018                     _do_I2C_DO_NACK_RESTART:
  3410                           	opt stack 0
  3411                           
  3412                           ;Skip over the trampoline to the duplicate function for level 2
  3413  001018  B247               	btfsc	btemp,1,c
  3414  00101A  EF64  F008         	goto	i2_do_I2C_DO_NACK_RESTART
  3415  00101E                     _do_I2C_DO_NACK_RESTART$intlevel0:
  3416                           	opt stack 14
  3417                           
  3418                           ;i2c_master.c: 313: i2c1_driver_sendNACK();
  3419                           
  3420                           ;incstack = 0
  3421  00101E  EC87  F008         	call	_i2c1_driver_sendNACK	;wreg free
  3422                           
  3423                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
  3424  001022  0E09               	movlw	9
  3425  001024  0012               	return	
  3426  001026                     __end_of_do_I2C_DO_NACK_RESTART:
  3427                           	opt stack 0
  3428                           tosu	equ	0xFFF
  3429                           tosh	equ	0xFFE
  3430                           tosl	equ	0xFFD
  3431                           pclath	equ	0xFFA
  3432                           tblptru	equ	0xFF8
  3433                           tblptrh	equ	0xFF7
  3434                           tblptrl	equ	0xFF6
  3435                           tablat	equ	0xFF5
  3436                           prodh	equ	0xFF4
  3437                           prodl	equ	0xFF3
  3438                           intcon	equ	0xFF2
  3439                           postinc0	equ	0xFEE
  3440                           wreg	equ	0xFE8
  3441                           postdec1	equ	0xFE5
  3442                           plusw1	equ	0xFE3
  3443                           fsr1l	equ	0xFE1
  3444                           indf2	equ	0xFDF
  3445                           postinc2	equ	0xFDE
  3446                           plusw2	equ	0xFDB
  3447                           fsr2h	equ	0xFDA
  3448                           fsr2l	equ	0xFD9
  3449                           status	equ	0xFD8
  3450                           
  3451 ;; *************** function _do_I2C_DO_NACK_STOP *****************
  3452 ;; Defined at:
  3453 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
  3454 ;; Parameters:    Size  Location     Type
  3455 ;;		None
  3456 ;; Auto vars:     Size  Location     Type
  3457 ;;		None
  3458 ;; Return value:  Size  Location     Type
  3459 ;;                  1    wreg      enum E11956
  3460 ;; Registers used:
  3461 ;;		wreg, cstack
  3462 ;; Tracked objects:
  3463 ;;		On entry : 0/0
  3464 ;;		On exit  : 0/0
  3465 ;;		Unchanged: 0/0
  3466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3470 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3471 ;;Total ram usage:        0 bytes
  3472 ;; Hardware stack levels used:    1
  3473 ;; Hardware stack levels required when called:    7
  3474 ;; This function calls:
  3475 ;;		_i2c1_driver_sendNACK
  3476 ;; This function is called by:
  3477 ;;		_do_I2C_RX
  3478 ;;		_i2c_ISR
  3479 ;;		i2_i2c_ISR
  3480 ;; This function uses a non-reentrant model
  3481 ;;
  3482                           
  3483                           	psect	text22
  3484  001026                     __ptext22:
  3485                           	opt stack 0
  3486  001026                     _do_I2C_DO_NACK_STOP:
  3487                           	opt stack 0
  3488                           
  3489                           ;Skip over the trampoline to the duplicate function for level 2
  3490  001026  B247               	btfsc	btemp,1,c
  3491  001028  EF68  F008         	goto	i2_do_I2C_DO_NACK_STOP
  3492  00102C                     _do_I2C_DO_NACK_STOP$intlevel0:
  3493                           	opt stack 14
  3494                           
  3495                           ;i2c_master.c: 307: i2c1_driver_sendNACK();
  3496                           
  3497                           ;incstack = 0
  3498  00102C  EC87  F008         	call	_i2c1_driver_sendNACK	;wreg free
  3499                           
  3500                           ;i2c_master.c: 308: return I2C_SEND_STOP;
  3501  001030  0E0A               	movlw	10
  3502  001032  0012               	return	
  3503  001034                     __end_of_do_I2C_DO_NACK_STOP:
  3504                           	opt stack 0
  3505                           tosu	equ	0xFFF
  3506                           tosh	equ	0xFFE
  3507                           tosl	equ	0xFFD
  3508                           pclath	equ	0xFFA
  3509                           tblptru	equ	0xFF8
  3510                           tblptrh	equ	0xFF7
  3511                           tblptrl	equ	0xFF6
  3512                           tablat	equ	0xFF5
  3513                           prodh	equ	0xFF4
  3514                           prodl	equ	0xFF3
  3515                           intcon	equ	0xFF2
  3516                           postinc0	equ	0xFEE
  3517                           wreg	equ	0xFE8
  3518                           postdec1	equ	0xFE5
  3519                           plusw1	equ	0xFE3
  3520                           fsr1l	equ	0xFE1
  3521                           indf2	equ	0xFDF
  3522                           postinc2	equ	0xFDE
  3523                           plusw2	equ	0xFDB
  3524                           fsr2h	equ	0xFDA
  3525                           fsr2l	equ	0xFD9
  3526                           status	equ	0xFD8
  3527                           
  3528 ;; *************** function _do_I2C_DO_ACK *****************
  3529 ;; Defined at:
  3530 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
  3531 ;; Parameters:    Size  Location     Type
  3532 ;;		None
  3533 ;; Auto vars:     Size  Location     Type
  3534 ;;		None
  3535 ;; Return value:  Size  Location     Type
  3536 ;;                  1    wreg      enum E11956
  3537 ;; Registers used:
  3538 ;;		wreg, cstack
  3539 ;; Tracked objects:
  3540 ;;		On entry : 0/0
  3541 ;;		On exit  : 0/0
  3542 ;;		Unchanged: 0/0
  3543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3548 ;;Total ram usage:        0 bytes
  3549 ;; Hardware stack levels used:    1
  3550 ;; Hardware stack levels required when called:    7
  3551 ;; This function calls:
  3552 ;;		_i2c1_driver_sendACK
  3553 ;; This function is called by:
  3554 ;;		_i2c_ISR
  3555 ;;		i2_i2c_ISR
  3556 ;; This function uses a non-reentrant model
  3557 ;;
  3558                           
  3559                           	psect	text23
  3560  001034                     __ptext23:
  3561                           	opt stack 0
  3562  001034                     _do_I2C_DO_ACK:
  3563                           	opt stack 0
  3564                           
  3565                           ;Skip over the trampoline to the duplicate function for level 2
  3566  001034  B247               	btfsc	btemp,1,c
  3567  001036  EF6C  F008         	goto	i2_do_I2C_DO_ACK
  3568  00103A                     _do_I2C_DO_ACK$intlevel0:
  3569                           	opt stack 15
  3570                           
  3571                           ;i2c_master.c: 301: i2c1_driver_sendACK();
  3572                           
  3573                           ;incstack = 0
  3574  00103A  EC8A  F008         	call	_i2c1_driver_sendACK	;wreg free
  3575                           
  3576                           ;i2c_master.c: 302: return I2C_RCEN;
  3577  00103E  0E05               	movlw	5
  3578  001040  0012               	return	
  3579  001042                     __end_of_do_I2C_DO_ACK:
  3580                           	opt stack 0
  3581                           tosu	equ	0xFFF
  3582                           tosh	equ	0xFFE
  3583                           tosl	equ	0xFFD
  3584                           pclath	equ	0xFFA
  3585                           tblptru	equ	0xFF8
  3586                           tblptrh	equ	0xFF7
  3587                           tblptrl	equ	0xFF6
  3588                           tablat	equ	0xFF5
  3589                           prodh	equ	0xFF4
  3590                           prodl	equ	0xFF3
  3591                           intcon	equ	0xFF2
  3592                           postinc0	equ	0xFEE
  3593                           wreg	equ	0xFE8
  3594                           postdec1	equ	0xFE5
  3595                           plusw1	equ	0xFE3
  3596                           fsr1l	equ	0xFE1
  3597                           indf2	equ	0xFDF
  3598                           postinc2	equ	0xFDE
  3599                           plusw2	equ	0xFDB
  3600                           fsr2h	equ	0xFDA
  3601                           fsr2l	equ	0xFD9
  3602                           status	equ	0xFD8
  3603                           
  3604 ;; *************** function _do_I2C_RCEN *****************
  3605 ;; Defined at:
  3606 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
  3607 ;; Parameters:    Size  Location     Type
  3608 ;;		None
  3609 ;; Auto vars:     Size  Location     Type
  3610 ;;		None
  3611 ;; Return value:  Size  Location     Type
  3612 ;;                  1    wreg      enum E11956
  3613 ;; Registers used:
  3614 ;;		wreg, cstack
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/0
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3624 ;;Total ram usage:        0 bytes
  3625 ;; Hardware stack levels used:    1
  3626 ;; Hardware stack levels required when called:    7
  3627 ;; This function calls:
  3628 ;;		_i2c1_driver_startRX
  3629 ;; This function is called by:
  3630 ;;		_i2c_ISR
  3631 ;;		i2_i2c_ISR
  3632 ;; This function uses a non-reentrant model
  3633 ;;
  3634                           
  3635                           	psect	text24
  3636  000FA8                     __ptext24:
  3637                           	opt stack 0
  3638  000FA8                     _do_I2C_RCEN:
  3639                           	opt stack 0
  3640                           
  3641                           ;Skip over the trampoline to the duplicate function for level 2
  3642  000FA8  B247               	btfsc	btemp,1,c
  3643  000FAA  EF3D  F008         	goto	i2_do_I2C_RCEN
  3644  000FAE                     _do_I2C_RCEN$intlevel0:
  3645                           	opt stack 15
  3646                           
  3647                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
  3648                           
  3649                           ;incstack = 0
  3650  000FAE  0100               	movlb	0	; () banked
  3651  000FB0  9760               	bcf	_i2c_status& (0+255),3,b
  3652                           
  3653                           ; BSR set to: 0
  3654                           ;i2c_master.c: 295: i2c1_driver_startRX();
  3655  000FB2  ECA7  F008         	call	_i2c1_driver_startRX	;wreg free
  3656                           
  3657                           ;i2c_master.c: 296: return I2C_RX;
  3658  000FB6  0E04               	movlw	4
  3659  000FB8  0012               	return	
  3660  000FBA                     __end_of_do_I2C_RCEN:
  3661                           	opt stack 0
  3662                           tosu	equ	0xFFF
  3663                           tosh	equ	0xFFE
  3664                           tosl	equ	0xFFD
  3665                           pclath	equ	0xFFA
  3666                           tblptru	equ	0xFF8
  3667                           tblptrh	equ	0xFF7
  3668                           tblptrl	equ	0xFF6
  3669                           tablat	equ	0xFF5
  3670                           prodh	equ	0xFF4
  3671                           prodl	equ	0xFF3
  3672                           intcon	equ	0xFF2
  3673                           postinc0	equ	0xFEE
  3674                           wreg	equ	0xFE8
  3675                           postdec1	equ	0xFE5
  3676                           plusw1	equ	0xFE3
  3677                           fsr1l	equ	0xFE1
  3678                           indf2	equ	0xFDF
  3679                           postinc2	equ	0xFDE
  3680                           plusw2	equ	0xFDB
  3681                           fsr2h	equ	0xFDA
  3682                           fsr2l	equ	0xFD9
  3683                           status	equ	0xFD8
  3684                           
  3685 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
  3686 ;; Defined at:
  3687 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
  3688 ;; Parameters:    Size  Location     Type
  3689 ;;		None
  3690 ;; Auto vars:     Size  Location     Type
  3691 ;;		None
  3692 ;; Return value:  Size  Location     Type
  3693 ;;                  1    wreg      enum E11956
  3694 ;; Registers used:
  3695 ;;		wreg, status,2, status,0, cstack
  3696 ;; Tracked objects:
  3697 ;;		On entry : 0/0
  3698 ;;		On exit  : 0/0
  3699 ;;		Unchanged: 0/0
  3700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3705 ;;Total ram usage:        0 bytes
  3706 ;; Hardware stack levels used:    1
  3707 ;; Hardware stack levels required when called:    7
  3708 ;; This function calls:
  3709 ;;		_i2c1_driver_TXData
  3710 ;; This function is called by:
  3711 ;;		_i2c_ISR
  3712 ;;		i2_i2c_ISR
  3713 ;; This function uses a non-reentrant model
  3714 ;;
  3715                           
  3716                           	psect	text25
  3717  000F12                     __ptext25:
  3718                           	opt stack 0
  3719  000F12                     _do_I2C_SEND_ADR_WRITE:
  3720                           	opt stack 0
  3721                           
  3722                           ;Skip over the trampoline to the duplicate function for level 2
  3723  000F12  B247               	btfsc	btemp,1,c
  3724  000F14  EFE6  F007         	goto	i2_do_I2C_SEND_ADR_WRITE
  3725  000F18                     _do_I2C_SEND_ADR_WRITE$intlevel0:
  3726                           	opt stack 15
  3727                           
  3728                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
  3729                           
  3730                           ;incstack = 0
  3731  000F18  0100               	movlb	0	; () banked
  3732  000F1A  8760               	bsf	_i2c_status& (0+255),3,b
  3733                           
  3734                           ; BSR set to: 0
  3735                           ;i2c_master.c: 288: i2c1_driver_TXData(i2c_status.address << 1);
  3736  000F1C  5161               	movf	(_i2c_status+1)& (0+255),w,b
  3737  000F1E  2561               	addwf	(_i2c_status+1)& (0+255),w,b
  3738  000F20  EC60  F008         	call	_i2c1_driver_TXData
  3739                           
  3740                           ;i2c_master.c: 289: return I2C_TX;
  3741  000F24  0E03               	movlw	3
  3742  000F26  0012               	return	
  3743  000F28                     __end_of_do_I2C_SEND_ADR_WRITE:
  3744                           	opt stack 0
  3745                           tosu	equ	0xFFF
  3746                           tosh	equ	0xFFE
  3747                           tosl	equ	0xFFD
  3748                           pclath	equ	0xFFA
  3749                           tblptru	equ	0xFF8
  3750                           tblptrh	equ	0xFF7
  3751                           tblptrl	equ	0xFF6
  3752                           tablat	equ	0xFF5
  3753                           prodh	equ	0xFF4
  3754                           prodl	equ	0xFF3
  3755                           intcon	equ	0xFF2
  3756                           postinc0	equ	0xFEE
  3757                           wreg	equ	0xFE8
  3758                           postdec1	equ	0xFE5
  3759                           plusw1	equ	0xFE3
  3760                           fsr1l	equ	0xFE1
  3761                           indf2	equ	0xFDF
  3762                           postinc2	equ	0xFDE
  3763                           plusw2	equ	0xFDB
  3764                           fsr2h	equ	0xFDA
  3765                           fsr2l	equ	0xFD9
  3766                           status	equ	0xFD8
  3767                           
  3768 ;; *************** function _do_I2C_SEND_ADR_READ *****************
  3769 ;; Defined at:
  3770 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
  3771 ;; Parameters:    Size  Location     Type
  3772 ;;		None
  3773 ;; Auto vars:     Size  Location     Type
  3774 ;;		None
  3775 ;; Return value:  Size  Location     Type
  3776 ;;                  1    wreg      enum E11956
  3777 ;; Registers used:
  3778 ;;		wreg, status,0, cstack
  3779 ;; Tracked objects:
  3780 ;;		On entry : 0/0
  3781 ;;		On exit  : 0/0
  3782 ;;		Unchanged: 0/0
  3783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3788 ;;Total ram usage:        0 bytes
  3789 ;; Hardware stack levels used:    1
  3790 ;; Hardware stack levels required when called:    7
  3791 ;; This function calls:
  3792 ;;		_i2c1_driver_TXData
  3793 ;; This function is called by:
  3794 ;;		_i2c_ISR
  3795 ;;		i2_i2c_ISR
  3796 ;; This function uses a non-reentrant model
  3797 ;;
  3798                           
  3799                           	psect	text26
  3800  000F28                     __ptext26:
  3801                           	opt stack 0
  3802  000F28                     _do_I2C_SEND_ADR_READ:
  3803                           	opt stack 0
  3804                           
  3805                           ;Skip over the trampoline to the duplicate function for level 2
  3806  000F28  B247               	btfsc	btemp,1,c
  3807  000F2A  EFEE  F007         	goto	i2_do_I2C_SEND_ADR_READ
  3808  000F2E                     _do_I2C_SEND_ADR_READ$intlevel0:
  3809                           	opt stack 15
  3810                           
  3811                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
  3812                           
  3813                           ;incstack = 0
  3814  000F2E  0100               	movlb	0	; () banked
  3815  000F30  8760               	bsf	_i2c_status& (0+255),3,b
  3816                           
  3817                           ; BSR set to: 0
  3818                           ;i2c_master.c: 281: i2c1_driver_TXData(i2c_status.address << 1 | 1);
  3819  000F32  80D8               	bsf	status,0,c
  3820  000F34  3561               	rlcf	(_i2c_status+1)& (0+255),w,b
  3821  000F36  EC60  F008         	call	_i2c1_driver_TXData
  3822                           
  3823                           ;i2c_master.c: 282: return I2C_RCEN;
  3824  000F3A  0E05               	movlw	5
  3825  000F3C  0012               	return	
  3826  000F3E                     __end_of_do_I2C_SEND_ADR_READ:
  3827                           	opt stack 0
  3828                           tosu	equ	0xFFF
  3829                           tosh	equ	0xFFE
  3830                           tosl	equ	0xFFD
  3831                           pclath	equ	0xFFA
  3832                           tblptru	equ	0xFF8
  3833                           tblptrh	equ	0xFF7
  3834                           tblptrl	equ	0xFF6
  3835                           tablat	equ	0xFF5
  3836                           prodh	equ	0xFF4
  3837                           prodl	equ	0xFF3
  3838                           intcon	equ	0xFF2
  3839                           postinc0	equ	0xFEE
  3840                           wreg	equ	0xFE8
  3841                           postdec1	equ	0xFE5
  3842                           plusw1	equ	0xFE3
  3843                           fsr1l	equ	0xFE1
  3844                           indf2	equ	0xFDF
  3845                           postinc2	equ	0xFDE
  3846                           plusw2	equ	0xFDB
  3847                           fsr2h	equ	0xFDA
  3848                           fsr2l	equ	0xFD9
  3849                           status	equ	0xFD8
  3850                           
  3851 ;; *************** function _do_I2C_SEND_STOP *****************
  3852 ;; Defined at:
  3853 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  3854 ;; Parameters:    Size  Location     Type
  3855 ;;		None
  3856 ;; Auto vars:     Size  Location     Type
  3857 ;;		None
  3858 ;; Return value:  Size  Location     Type
  3859 ;;                  1    wreg      enum E11956
  3860 ;; Registers used:
  3861 ;;		wreg, cstack
  3862 ;; Tracked objects:
  3863 ;;		On entry : 0/0
  3864 ;;		On exit  : 0/0
  3865 ;;		Unchanged: 0/0
  3866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3871 ;;Total ram usage:        0 bytes
  3872 ;; Hardware stack levels used:    1
  3873 ;; Hardware stack levels required when called:    7
  3874 ;; This function calls:
  3875 ;;		_i2c1_driver_stop
  3876 ;; This function is called by:
  3877 ;;		_do_I2C_DO_ADDRESS_NACK
  3878 ;;		_do_I2C_TX
  3879 ;;		_do_I2C_TX_EMPTY
  3880 ;;		_i2c_ISR
  3881 ;;		i2_i2c_ISR
  3882 ;; This function uses a non-reentrant model
  3883 ;;
  3884                           
  3885                           	psect	text27
  3886  001042                     __ptext27:
  3887                           	opt stack 0
  3888  001042                     _do_I2C_SEND_STOP:
  3889                           	opt stack 0
  3890                           
  3891                           ;Skip over the trampoline to the duplicate function for level 2
  3892  001042  B247               	btfsc	btemp,1,c
  3893  001044  EF70  F008         	goto	i2_do_I2C_SEND_STOP
  3894  001048                     _do_I2C_SEND_STOP$intlevel0:
  3895                           	opt stack 14
  3896                           
  3897                           ;i2c_master.c: 274: i2c1_driver_stop();
  3898                           
  3899                           ;incstack = 0
  3900  001048  ECA9  F008         	call	_i2c1_driver_stop	;wreg free
  3901                           
  3902                           ;i2c_master.c: 275: return I2C_IDLE;
  3903  00104C  0E00               	movlw	0
  3904  00104E  0012               	return	
  3905  001050                     __end_of_do_I2C_SEND_STOP:
  3906                           	opt stack 0
  3907                           tosu	equ	0xFFF
  3908                           tosh	equ	0xFFE
  3909                           tosl	equ	0xFFD
  3910                           pclath	equ	0xFFA
  3911                           tblptru	equ	0xFF8
  3912                           tblptrh	equ	0xFF7
  3913                           tblptrl	equ	0xFF6
  3914                           tablat	equ	0xFF5
  3915                           prodh	equ	0xFF4
  3916                           prodl	equ	0xFF3
  3917                           intcon	equ	0xFF2
  3918                           postinc0	equ	0xFEE
  3919                           wreg	equ	0xFE8
  3920                           postdec1	equ	0xFE5
  3921                           plusw1	equ	0xFE3
  3922                           fsr1l	equ	0xFE1
  3923                           indf2	equ	0xFDF
  3924                           postinc2	equ	0xFDE
  3925                           plusw2	equ	0xFDB
  3926                           fsr2h	equ	0xFDA
  3927                           fsr2l	equ	0xFD9
  3928                           status	equ	0xFD8
  3929                           
  3930 ;; *************** function _do_I2C_SEND_RESTART *****************
  3931 ;; Defined at:
  3932 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
  3933 ;; Parameters:    Size  Location     Type
  3934 ;;		None
  3935 ;; Auto vars:     Size  Location     Type
  3936 ;;		None
  3937 ;; Return value:  Size  Location     Type
  3938 ;;                  1    wreg      enum E11956
  3939 ;; Registers used:
  3940 ;;		wreg, cstack
  3941 ;; Tracked objects:
  3942 ;;		On entry : 0/0
  3943 ;;		On exit  : 0/0
  3944 ;;		Unchanged: 0/0
  3945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3950 ;;Total ram usage:        0 bytes
  3951 ;; Hardware stack levels used:    1
  3952 ;; Hardware stack levels required when called:    7
  3953 ;; This function calls:
  3954 ;;		_i2c1_driver_restart
  3955 ;; This function is called by:
  3956 ;;		_do_I2C_DO_ADDRESS_NACK
  3957 ;;		_do_I2C_TX_EMPTY
  3958 ;;		_i2c_ISR
  3959 ;;		i2_i2c_ISR
  3960 ;; This function uses a non-reentrant model
  3961 ;;
  3962                           
  3963                           	psect	text28
  3964  001050                     __ptext28:
  3965                           	opt stack 0
  3966  001050                     _do_I2C_SEND_RESTART:
  3967                           	opt stack 0
  3968                           
  3969                           ;Skip over the trampoline to the duplicate function for level 2
  3970  001050  B247               	btfsc	btemp,1,c
  3971  001052  EF74  F008         	goto	i2_do_I2C_SEND_RESTART
  3972  001056                     _do_I2C_SEND_RESTART$intlevel0:
  3973                           	opt stack 14
  3974                           
  3975                           ;i2c_master.c: 268: i2c1_driver_restart();
  3976                           
  3977                           ;incstack = 0
  3978  001056  ECAB  F008         	call	_i2c1_driver_restart	;wreg free
  3979                           
  3980                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
  3981  00105A  0E01               	movlw	1
  3982  00105C  0012               	return	
  3983  00105E                     __end_of_do_I2C_SEND_RESTART:
  3984                           	opt stack 0
  3985                           tosu	equ	0xFFF
  3986                           tosh	equ	0xFFE
  3987                           tosl	equ	0xFFD
  3988                           pclath	equ	0xFFA
  3989                           tblptru	equ	0xFF8
  3990                           tblptrh	equ	0xFF7
  3991                           tblptrl	equ	0xFF6
  3992                           tablat	equ	0xFF5
  3993                           prodh	equ	0xFF4
  3994                           prodl	equ	0xFF3
  3995                           intcon	equ	0xFF2
  3996                           postinc0	equ	0xFEE
  3997                           wreg	equ	0xFE8
  3998                           postdec1	equ	0xFE5
  3999                           plusw1	equ	0xFE3
  4000                           fsr1l	equ	0xFE1
  4001                           indf2	equ	0xFDF
  4002                           postinc2	equ	0xFDE
  4003                           plusw2	equ	0xFDB
  4004                           fsr2h	equ	0xFDA
  4005                           fsr2l	equ	0xFD9
  4006                           status	equ	0xFD8
  4007                           
  4008 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
  4009 ;; Defined at:
  4010 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
  4011 ;; Parameters:    Size  Location     Type
  4012 ;;		None
  4013 ;; Auto vars:     Size  Location     Type
  4014 ;;		None
  4015 ;; Return value:  Size  Location     Type
  4016 ;;                  1    wreg      enum E11956
  4017 ;; Registers used:
  4018 ;;		wreg, cstack
  4019 ;; Tracked objects:
  4020 ;;		On entry : 0/0
  4021 ;;		On exit  : 0/0
  4022 ;;		Unchanged: 0/0
  4023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4027 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4028 ;;Total ram usage:        0 bytes
  4029 ;; Hardware stack levels used:    1
  4030 ;; Hardware stack levels required when called:    7
  4031 ;; This function calls:
  4032 ;;		_i2c1_driver_restart
  4033 ;; This function is called by:
  4034 ;;		_do_I2C_TX
  4035 ;;		_i2c_ISR
  4036 ;;		i2_i2c_ISR
  4037 ;; This function uses a non-reentrant model
  4038 ;;
  4039                           
  4040                           	psect	text29
  4041  00105E                     __ptext29:
  4042                           	opt stack 0
  4043  00105E                     _do_I2C_SEND_RESTART_WRITE:
  4044                           	opt stack 0
  4045                           
  4046                           ;Skip over the trampoline to the duplicate function for level 2
  4047  00105E  B247               	btfsc	btemp,1,c
  4048  001060  EF78  F008         	goto	i2_do_I2C_SEND_RESTART_WRITE
  4049  001064                     _do_I2C_SEND_RESTART_WRITE$intlevel0:
  4050                           	opt stack 14
  4051                           
  4052                           ;i2c_master.c: 262: i2c1_driver_restart();
  4053                           
  4054                           ;incstack = 0
  4055  001064  ECAB  F008         	call	_i2c1_driver_restart	;wreg free
  4056                           
  4057                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
  4058  001068  0E02               	movlw	2
  4059  00106A  0012               	return	
  4060  00106C                     __end_of_do_I2C_SEND_RESTART_WRITE:
  4061                           	opt stack 0
  4062                           tosu	equ	0xFFF
  4063                           tosh	equ	0xFFE
  4064                           tosl	equ	0xFFD
  4065                           pclath	equ	0xFFA
  4066                           tblptru	equ	0xFF8
  4067                           tblptrh	equ	0xFF7
  4068                           tblptrl	equ	0xFF6
  4069                           tablat	equ	0xFF5
  4070                           prodh	equ	0xFF4
  4071                           prodl	equ	0xFF3
  4072                           intcon	equ	0xFF2
  4073                           postinc0	equ	0xFEE
  4074                           wreg	equ	0xFE8
  4075                           postdec1	equ	0xFE5
  4076                           plusw1	equ	0xFE3
  4077                           fsr1l	equ	0xFE1
  4078                           indf2	equ	0xFDF
  4079                           postinc2	equ	0xFDE
  4080                           plusw2	equ	0xFDB
  4081                           fsr2h	equ	0xFDA
  4082                           fsr2l	equ	0xFD9
  4083                           status	equ	0xFD8
  4084                           
  4085 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
  4086 ;; Defined at:
  4087 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
  4088 ;; Parameters:    Size  Location     Type
  4089 ;;		None
  4090 ;; Auto vars:     Size  Location     Type
  4091 ;;		None
  4092 ;; Return value:  Size  Location     Type
  4093 ;;                  1    wreg      enum E11956
  4094 ;; Registers used:
  4095 ;;		wreg, cstack
  4096 ;; Tracked objects:
  4097 ;;		On entry : 0/0
  4098 ;;		On exit  : 0/0
  4099 ;;		Unchanged: 0/0
  4100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4105 ;;Total ram usage:        0 bytes
  4106 ;; Hardware stack levels used:    1
  4107 ;; Hardware stack levels required when called:    7
  4108 ;; This function calls:
  4109 ;;		_i2c1_driver_restart
  4110 ;; This function is called by:
  4111 ;;		_do_I2C_TX
  4112 ;;		_i2c_ISR
  4113 ;;		i2_i2c_ISR
  4114 ;; This function uses a non-reentrant model
  4115 ;;
  4116                           
  4117                           	psect	text30
  4118  00106C                     __ptext30:
  4119                           	opt stack 0
  4120  00106C                     _do_I2C_SEND_RESTART_READ:
  4121                           	opt stack 0
  4122                           
  4123                           ;Skip over the trampoline to the duplicate function for level 2
  4124  00106C  B247               	btfsc	btemp,1,c
  4125  00106E  EF7C  F008         	goto	i2_do_I2C_SEND_RESTART_READ
  4126  001072                     _do_I2C_SEND_RESTART_READ$intlevel0:
  4127                           	opt stack 14
  4128                           
  4129                           ;i2c_master.c: 256: i2c1_driver_restart();
  4130                           
  4131                           ;incstack = 0
  4132  001072  ECAB  F008         	call	_i2c1_driver_restart	;wreg free
  4133                           
  4134                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
  4135  001076  0E01               	movlw	1
  4136  001078  0012               	return	
  4137  00107A                     __end_of_do_I2C_SEND_RESTART_READ:
  4138                           	opt stack 0
  4139                           tosu	equ	0xFFF
  4140                           tosh	equ	0xFFE
  4141                           tosl	equ	0xFFD
  4142                           pclath	equ	0xFFA
  4143                           tblptru	equ	0xFF8
  4144                           tblptrh	equ	0xFF7
  4145                           tblptrl	equ	0xFF6
  4146                           tablat	equ	0xFF5
  4147                           prodh	equ	0xFF4
  4148                           prodl	equ	0xFF3
  4149                           intcon	equ	0xFF2
  4150                           postinc0	equ	0xFEE
  4151                           wreg	equ	0xFE8
  4152                           postdec1	equ	0xFE5
  4153                           plusw1	equ	0xFE3
  4154                           fsr1l	equ	0xFE1
  4155                           indf2	equ	0xFDF
  4156                           postinc2	equ	0xFDE
  4157                           plusw2	equ	0xFDB
  4158                           fsr2h	equ	0xFDA
  4159                           fsr2l	equ	0xFD9
  4160                           status	equ	0xFD8
  4161                           
  4162 ;; *************** function _do_I2C_IDLE *****************
  4163 ;; Defined at:
  4164 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;		None
  4167 ;; Auto vars:     Size  Location     Type
  4168 ;;		None
  4169 ;; Return value:  Size  Location     Type
  4170 ;;                  1    wreg      enum E11956
  4171 ;; Registers used:
  4172 ;;		wreg, status,2
  4173 ;; Tracked objects:
  4174 ;;		On entry : 0/0
  4175 ;;		On exit  : 0/0
  4176 ;;		Unchanged: 0/0
  4177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4182 ;;Total ram usage:        0 bytes
  4183 ;; Hardware stack levels used:    1
  4184 ;; Hardware stack levels required when called:    6
  4185 ;; This function calls:
  4186 ;;		Nothing
  4187 ;; This function is called by:
  4188 ;;		_i2c_ISR
  4189 ;;		i2_i2c_ISR
  4190 ;; This function uses a non-reentrant model
  4191 ;;
  4192                           
  4193                           	psect	text31
  4194  000FBA                     __ptext31:
  4195                           	opt stack 0
  4196  000FBA                     _do_I2C_IDLE:
  4197                           	opt stack 0
  4198                           
  4199                           ;Skip over the trampoline to the duplicate function for level 2
  4200  000FBA  B247               	btfsc	btemp,1,c
  4201  000FBC  EF43  F008         	goto	i2_do_I2C_IDLE
  4202  000FC0                     _do_I2C_IDLE$intlevel0:
  4203                           	opt stack 16
  4204                           
  4205                           ;i2c_master.c: 249: i2c_status.busy = 0;
  4206                           
  4207                           ;incstack = 0
  4208  000FC0  0100               	movlb	0	; () banked
  4209  000FC2  9160               	bcf	_i2c_status& (0+255),0,b
  4210                           
  4211                           ; BSR set to: 0
  4212                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
  4213  000FC4  0E00               	movlw	0
  4214  000FC6  6F6B               	movwf	(_i2c_status+11)& (0+255),b
  4215                           
  4216                           ; BSR set to: 0
  4217                           ;i2c_master.c: 251: return I2C_RESET;
  4218  000FC8  0E0E               	movlw	14
  4219  000FCA  0012               	return	
  4220  000FCC                     __end_of_do_I2C_IDLE:
  4221                           	opt stack 0
  4222                           tosu	equ	0xFFF
  4223                           tosh	equ	0xFFE
  4224                           tosl	equ	0xFFD
  4225                           pclath	equ	0xFFA
  4226                           tblptru	equ	0xFF8
  4227                           tblptrh	equ	0xFF7
  4228                           tblptrl	equ	0xFF6
  4229                           tablat	equ	0xFF5
  4230                           prodh	equ	0xFF4
  4231                           prodl	equ	0xFF3
  4232                           intcon	equ	0xFF2
  4233                           postinc0	equ	0xFEE
  4234                           wreg	equ	0xFE8
  4235                           postdec1	equ	0xFE5
  4236                           plusw1	equ	0xFE3
  4237                           fsr1l	equ	0xFE1
  4238                           indf2	equ	0xFDF
  4239                           postinc2	equ	0xFDE
  4240                           plusw2	equ	0xFDB
  4241                           fsr2h	equ	0xFDA
  4242                           fsr2l	equ	0xFD9
  4243                           status	equ	0xFD8
  4244                           
  4245 ;; *************** function _do_I2C_RESET *****************
  4246 ;; Defined at:
  4247 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
  4248 ;; Parameters:    Size  Location     Type
  4249 ;;		None
  4250 ;; Auto vars:     Size  Location     Type
  4251 ;;		None
  4252 ;; Return value:  Size  Location     Type
  4253 ;;                  1    wreg      enum E11956
  4254 ;; Registers used:
  4255 ;;		wreg, status,2, cstack
  4256 ;; Tracked objects:
  4257 ;;		On entry : 0/0
  4258 ;;		On exit  : 0/0
  4259 ;;		Unchanged: 0/0
  4260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4264 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4265 ;;Total ram usage:        0 bytes
  4266 ;; Hardware stack levels used:    1
  4267 ;; Hardware stack levels required when called:    7
  4268 ;; This function calls:
  4269 ;;		_i2c1_driver_resetBus
  4270 ;; This function is called by:
  4271 ;;		_i2c_ISR
  4272 ;;		i2_i2c_ISR
  4273 ;; This function uses a non-reentrant model
  4274 ;;
  4275                           
  4276                           	psect	text32
  4277  000F3E                     __ptext32:
  4278                           	opt stack 0
  4279  000F3E                     _do_I2C_RESET:
  4280                           	opt stack 0
  4281                           
  4282                           ; BSR set to: 0
  4283                           ;Skip over the trampoline to the duplicate function for level 2
  4284  000F3E  B247               	btfsc	btemp,1,c
  4285  000F40  EFF6  F007         	goto	i2_do_I2C_RESET
  4286  000F44                     _do_I2C_RESET$intlevel0:
  4287                           	opt stack 15
  4288                           
  4289                           ;i2c_master.c: 241: i2c1_driver_resetBus();
  4290                           
  4291                           ;incstack = 0
  4292  000F44  ECBF  F008         	call	_i2c1_driver_resetBus	;wreg free
  4293                           
  4294                           ;i2c_master.c: 242: i2c_status.busy = 0;
  4295  000F48  0100               	movlb	0	; () banked
  4296  000F4A  9160               	bcf	_i2c_status& (0+255),0,b
  4297                           
  4298                           ; BSR set to: 0
  4299                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
  4300  000F4C  0E00               	movlw	0
  4301  000F4E  6F6B               	movwf	(_i2c_status+11)& (0+255),b
  4302                           
  4303                           ; BSR set to: 0
  4304                           ;i2c_master.c: 244: return I2C_RESET;
  4305  000F50  0E0E               	movlw	14
  4306  000F52  0012               	return	
  4307  000F54                     __end_of_do_I2C_RESET:
  4308                           	opt stack 0
  4309                           tosu	equ	0xFFF
  4310                           tosh	equ	0xFFE
  4311                           tosl	equ	0xFFD
  4312                           pclath	equ	0xFFA
  4313                           tblptru	equ	0xFF8
  4314                           tblptrh	equ	0xFF7
  4315                           tblptrl	equ	0xFF6
  4316                           tablat	equ	0xFF5
  4317                           prodh	equ	0xFF4
  4318                           prodl	equ	0xFF3
  4319                           intcon	equ	0xFF2
  4320                           postinc0	equ	0xFEE
  4321                           wreg	equ	0xFE8
  4322                           postdec1	equ	0xFE5
  4323                           plusw1	equ	0xFE3
  4324                           fsr1l	equ	0xFE1
  4325                           indf2	equ	0xFDF
  4326                           postinc2	equ	0xFDE
  4327                           plusw2	equ	0xFDB
  4328                           fsr2h	equ	0xFDA
  4329                           fsr2l	equ	0xFD9
  4330                           status	equ	0xFD8
  4331                           
  4332 ;; *************** function _do_I2C_TX_EMPTY *****************
  4333 ;; Defined at:
  4334 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
  4335 ;; Parameters:    Size  Location     Type
  4336 ;;		None
  4337 ;; Auto vars:     Size  Location     Type
  4338 ;;		None
  4339 ;; Return value:  Size  Location     Type
  4340 ;;                  1    wreg      enum E11956
  4341 ;; Registers used:
  4342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  4343 ;; Tracked objects:
  4344 ;;		On entry : 0/0
  4345 ;;		On exit  : 0/0
  4346 ;;		Unchanged: 0/0
  4347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4352 ;;Total ram usage:        0 bytes
  4353 ;; Hardware stack levels used:    1
  4354 ;; Hardware stack levels required when called:    9
  4355 ;; This function calls:
  4356 ;;		Absolute function
  4357 ;;		_do_I2C_SEND_RESTART
  4358 ;;		_do_I2C_SEND_STOP
  4359 ;;		_i2c_restartWrite
  4360 ;;		_mssp1_setIRQ
  4361 ;;		_rd1RegCompleteHandler
  4362 ;;		_rd2RegCompleteHandler
  4363 ;;		_rdBlkRegCompleteHandler
  4364 ;;		_returnReset
  4365 ;;		_returnStop
  4366 ;;		_wr1RegCompleteHandler
  4367 ;;		_wr2RegCompleteHandler
  4368 ;; This function is called by:
  4369 ;;		_i2c_ISR
  4370 ;;		i2_i2c_ISR
  4371 ;; This function uses a non-reentrant model
  4372 ;;
  4373                           
  4374                           	psect	text33
  4375  00088A                     __ptext33:
  4376                           	opt stack 0
  4377  00088A                     _do_I2C_TX_EMPTY:
  4378                           	opt stack 0
  4379                           
  4380                           ; BSR set to: 0
  4381                           ;Skip over the trampoline to the duplicate function for level 2
  4382  00088A  B247               	btfsc	btemp,1,c
  4383  00088C  EF74  F004         	goto	i2_do_I2C_TX_EMPTY
  4384  000890                     _do_I2C_TX_EMPTY$intlevel0:
  4385                           	opt stack 13
  4386                           
  4387                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
  4388                           
  4389                           ;incstack = 0
  4390  000890  0100               	movlb	0	; () banked
  4391  000892  8560               	bsf	_i2c_status& (0+255),2,b
  4392                           
  4393                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  4394  000894  D00A               	goto	l463
  4395  000896                     
  4396                           ;i2c_master.c: 388: case i2c_restart_write:
  4397                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
  4398                           
  4399                           ; BSR set to: 0
  4400                           
  4401                           ; BSR set to: 0
  4402  000896  EC28  F008         	call	_do_I2C_SEND_RESTART	;wreg free
  4403  00089A  0012               	return	
  4404  00089C                     
  4405                           ;i2c_master.c: 391: mssp1_setIRQ();
  4406  00089C  EC84  F008         	call	_mssp1_setIRQ	;wreg free
  4407                           
  4408                           ;i2c_master.c: 392: return I2C_TX;
  4409  0008A0  0E03               	movlw	3
  4410  0008A2  0012               	return	
  4411  0008A4                     
  4412                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
  4413                           
  4414                           ;i2c_master.c: 394: case i2c_stop:
  4415  0008A4  EC21  F008         	call	_do_I2C_SEND_STOP	;wreg free
  4416                           
  4417                           ;i2c_master.c: 396: }
  4418  0008A8  0012               	return	
  4419  0008AA                     l463:
  4420  0008AA  C07E  F021         	movff	_i2c_status+30,returnStop@p
  4421  0008AE  C07F  F022         	movff	_i2c_status+31,returnStop@p+1
  4422  0008B2  EE20  F06C         	lfsr	2,_i2c_status+12
  4423  0008B6  D801               	call	u1638
  4424  0008B8  D00A               	goto	u1639
  4425  0008BA                     u1638:
  4426  0008BA  0005               	push	
  4427  0008BC  6EFA               	movwf	pclath,c
  4428  0008BE  50DE               	movf	postinc2,w,c
  4429  0008C0  6EFD               	movwf	tosl,c
  4430  0008C2  50DE               	movf	postinc2,w,c
  4431  0008C4  6EFE               	movwf	tosh,c
  4432  0008C6  50DE               	movf	postinc2,w,c
  4433  0008C8  6EFF               	movwf	tosu,c
  4434  0008CA  50FA               	movf	pclath,w,c
  4435  0008CC  0012               	return		;indir
  4436  0008CE                     u1639:
  4437                           
  4438                           ; Switch size 1, requested type "space"
  4439                           ; Number of cases is 4, Range of values is 1 to 4
  4440                           ; switch strategies available:
  4441                           ; Name         Instructions Cycles
  4442                           ; simple_byte           13     7 (average)
  4443                           ;	Chosen strategy is simple_byte
  4444  0008CE  0A01               	xorlw	1	; case 1
  4445  0008D0  B4D8               	btfsc	status,2,c
  4446  0008D2  D7E8               	goto	l468
  4447  0008D4  0A03               	xorlw	3	; case 2
  4448  0008D6  B4D8               	btfsc	status,2,c
  4449  0008D8  D7DE               	goto	l464
  4450  0008DA  0A01               	xorlw	1	; case 3
  4451  0008DC  B4D8               	btfsc	status,2,c
  4452  0008DE  D7DB               	goto	l464
  4453  0008E0  0A07               	xorlw	7	; case 4
  4454  0008E2  B4D8               	btfsc	status,2,c
  4455  0008E4  D7DB               	goto	l467
  4456  0008E6  D7DE               	goto	l468
  4457  0008E8                     __end_of_do_I2C_TX_EMPTY:
  4458                           	opt stack 0
  4459                           tosu	equ	0xFFF
  4460                           tosh	equ	0xFFE
  4461                           tosl	equ	0xFFD
  4462                           pclath	equ	0xFFA
  4463                           tblptru	equ	0xFF8
  4464                           tblptrh	equ	0xFF7
  4465                           tblptrl	equ	0xFF6
  4466                           tablat	equ	0xFF5
  4467                           prodh	equ	0xFF4
  4468                           prodl	equ	0xFF3
  4469                           intcon	equ	0xFF2
  4470                           postinc0	equ	0xFEE
  4471                           wreg	equ	0xFE8
  4472                           postdec1	equ	0xFE5
  4473                           plusw1	equ	0xFE3
  4474                           fsr1l	equ	0xFE1
  4475                           indf2	equ	0xFDF
  4476                           postinc2	equ	0xFDE
  4477                           plusw2	equ	0xFDB
  4478                           fsr2h	equ	0xFDA
  4479                           fsr2l	equ	0xFD9
  4480                           status	equ	0xFD8
  4481                           
  4482 ;; *************** function _mssp1_setIRQ *****************
  4483 ;; Defined at:
  4484 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
  4485 ;; Parameters:    Size  Location     Type
  4486 ;;		None
  4487 ;; Auto vars:     Size  Location     Type
  4488 ;;		None
  4489 ;; Return value:  Size  Location     Type
  4490 ;;                  1    wreg      void 
  4491 ;; Registers used:
  4492 ;;		None
  4493 ;; Tracked objects:
  4494 ;;		On entry : 0/0
  4495 ;;		On exit  : 0/0
  4496 ;;		Unchanged: 0/0
  4497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4502 ;;Total ram usage:        0 bytes
  4503 ;; Hardware stack levels used:    1
  4504 ;; Hardware stack levels required when called:    6
  4505 ;; This function calls:
  4506 ;;		Nothing
  4507 ;; This function is called by:
  4508 ;;		_do_I2C_TX_EMPTY
  4509 ;; This function uses a non-reentrant model
  4510 ;;
  4511                           
  4512                           	psect	text34
  4513  001108                     __ptext34:
  4514                           	opt stack 0
  4515  001108                     _mssp1_setIRQ:
  4516                           	opt stack 15
  4517                           
  4518                           ;i2c1_driver.c: 60: PIR3bits.SSP1IF = 1;
  4519                           
  4520                           ;incstack = 0
  4521  001108  010E               	movlb	14	; () banked
  4522  00110A  81CD               	bsf	205,0,b	;volatile
  4523                           
  4524                           ; BSR set to: 14
  4525  00110C  0012               	return		;funcret
  4526  00110E                     __end_of_mssp1_setIRQ:
  4527                           	opt stack 0
  4528                           tosu	equ	0xFFF
  4529                           tosh	equ	0xFFE
  4530                           tosl	equ	0xFFD
  4531                           pclath	equ	0xFFA
  4532                           tblptru	equ	0xFF8
  4533                           tblptrh	equ	0xFF7
  4534                           tblptrl	equ	0xFF6
  4535                           tablat	equ	0xFF5
  4536                           prodh	equ	0xFF4
  4537                           prodl	equ	0xFF3
  4538                           intcon	equ	0xFF2
  4539                           postinc0	equ	0xFEE
  4540                           wreg	equ	0xFE8
  4541                           postdec1	equ	0xFE5
  4542                           plusw1	equ	0xFE3
  4543                           fsr1l	equ	0xFE1
  4544                           indf2	equ	0xFDF
  4545                           postinc2	equ	0xFDE
  4546                           plusw2	equ	0xFDB
  4547                           fsr2h	equ	0xFDA
  4548                           fsr2l	equ	0xFD9
  4549                           status	equ	0xFD8
  4550                           
  4551 ;; *************** function _i2c1_driver_isNACK *****************
  4552 ;; Defined at:
  4553 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
  4554 ;; Parameters:    Size  Location     Type
  4555 ;;		None
  4556 ;; Auto vars:     Size  Location     Type
  4557 ;;		None
  4558 ;; Return value:  Size  Location     Type
  4559 ;;		None               void
  4560 ;; Registers used:
  4561 ;;		wreg, status,2, status,0
  4562 ;; Tracked objects:
  4563 ;;		On entry : 0/0
  4564 ;;		On exit  : 0/0
  4565 ;;		Unchanged: 0/0
  4566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4569 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4570 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4571 ;;Total ram usage:        1 bytes
  4572 ;; Hardware stack levels used:    1
  4573 ;; Hardware stack levels required when called:    6
  4574 ;; This function calls:
  4575 ;;		Nothing
  4576 ;; This function is called by:
  4577 ;;		_do_I2C_TX
  4578 ;;		_i2c_ISR
  4579 ;; This function uses a non-reentrant model
  4580 ;;
  4581                           
  4582                           	psect	text35
  4583  000F54                     __ptext35:
  4584                           	opt stack 0
  4585  000F54                     _i2c1_driver_isNACK:
  4586                           	opt stack 16
  4587                           
  4588                           ;i2c1_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
  4589                           
  4590                           ; BSR set to: 14
  4591                           ;incstack = 0
  4592  000F54  5097               	movf	3991,w,c	;volatile
  4593  000F56  0BBF               	andlw	-65
  4594  000F58  0940               	iorlw	64
  4595  000F5A  6E97               	movwf	3991,c	;volatile
  4596  000F5C  3897               	swapf	3991,w,c	;volatile
  4597  000F5E  32E8               	rrcf	wreg,f,c
  4598  000F60  32E8               	rrcf	wreg,f,c
  4599  000F62  0B01               	andlw	1
  4600  000F64  6E16               	movwf	??_i2c1_driver_isNACK& (0+255),c
  4601  000F66  3016               	rrcf	??_i2c1_driver_isNACK,w,c
  4602  000F68  0012               	return	
  4603  000F6A                     __end_of_i2c1_driver_isNACK:
  4604                           	opt stack 0
  4605                           tosu	equ	0xFFF
  4606                           tosh	equ	0xFFE
  4607                           tosl	equ	0xFFD
  4608                           pclath	equ	0xFFA
  4609                           tblptru	equ	0xFF8
  4610                           tblptrh	equ	0xFF7
  4611                           tblptrl	equ	0xFF6
  4612                           tablat	equ	0xFF5
  4613                           prodh	equ	0xFF4
  4614                           prodl	equ	0xFF3
  4615                           intcon	equ	0xFF2
  4616                           postinc0	equ	0xFEE
  4617                           wreg	equ	0xFE8
  4618                           postdec1	equ	0xFE5
  4619                           plusw1	equ	0xFE3
  4620                           fsr1l	equ	0xFE1
  4621                           indf2	equ	0xFDF
  4622                           postinc2	equ	0xFDE
  4623                           plusw2	equ	0xFDB
  4624                           fsr2h	equ	0xFDA
  4625                           fsr2l	equ	0xFD9
  4626                           status	equ	0xFD8
  4627                           
  4628 ;; *************** function _i2c1_driver_TXData *****************
  4629 ;; Defined at:
  4630 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
  4631 ;; Parameters:    Size  Location     Type
  4632 ;;  d               1    wreg     unsigned char 
  4633 ;; Auto vars:     Size  Location     Type
  4634 ;;  d               1   21[COMRAM] unsigned char 
  4635 ;; Return value:  Size  Location     Type
  4636 ;;                  1    wreg      void 
  4637 ;; Registers used:
  4638 ;;		wreg
  4639 ;; Tracked objects:
  4640 ;;		On entry : 0/0
  4641 ;;		On exit  : 0/0
  4642 ;;		Unchanged: 0/0
  4643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4645 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4647 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4648 ;;Total ram usage:        1 bytes
  4649 ;; Hardware stack levels used:    1
  4650 ;; Hardware stack levels required when called:    6
  4651 ;; This function calls:
  4652 ;;		Nothing
  4653 ;; This function is called by:
  4654 ;;		_do_I2C_SEND_ADR_READ
  4655 ;;		_do_I2C_SEND_ADR_WRITE
  4656 ;;		_do_I2C_TX
  4657 ;; This function uses a non-reentrant model
  4658 ;;
  4659                           
  4660                           	psect	text36
  4661  0010C0                     __ptext36:
  4662                           	opt stack 0
  4663  0010C0                     _i2c1_driver_TXData:
  4664                           	opt stack 15
  4665                           
  4666                           ;incstack = 0
  4667                           ;i2c1_driver_TXData@d stored from wreg
  4668  0010C0  6E16               	movwf	i2c1_driver_TXData@d,c
  4669                           
  4670                           ;i2c1_driver.c: 188: SSP1BUF = d;
  4671  0010C2  C016  FF92         	movff	i2c1_driver_TXData@d,3986	;volatile
  4672  0010C6  0012               	return		;funcret
  4673  0010C8                     __end_of_i2c1_driver_TXData:
  4674                           	opt stack 0
  4675                           tosu	equ	0xFFF
  4676                           tosh	equ	0xFFE
  4677                           tosl	equ	0xFFD
  4678                           pclath	equ	0xFFA
  4679                           tblptru	equ	0xFF8
  4680                           tblptrh	equ	0xFF7
  4681                           tblptrl	equ	0xFF6
  4682                           tablat	equ	0xFF5
  4683                           prodh	equ	0xFF4
  4684                           prodl	equ	0xFF3
  4685                           intcon	equ	0xFF2
  4686                           postinc0	equ	0xFEE
  4687                           wreg	equ	0xFE8
  4688                           postdec1	equ	0xFE5
  4689                           plusw1	equ	0xFE3
  4690                           fsr1l	equ	0xFE1
  4691                           indf2	equ	0xFDF
  4692                           postinc2	equ	0xFDE
  4693                           plusw2	equ	0xFDB
  4694                           fsr2h	equ	0xFDA
  4695                           fsr2l	equ	0xFD9
  4696                           status	equ	0xFD8
  4697                           
  4698 ;; *************** function _i2c1_driver_getRXData *****************
  4699 ;; Defined at:
  4700 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
  4701 ;; Parameters:    Size  Location     Type
  4702 ;;		None
  4703 ;; Auto vars:     Size  Location     Type
  4704 ;;		None
  4705 ;; Return value:  Size  Location     Type
  4706 ;;                  1    wreg      unsigned char 
  4707 ;; Registers used:
  4708 ;;		wreg, status,2
  4709 ;; Tracked objects:
  4710 ;;		On entry : 0/0
  4711 ;;		On exit  : 0/0
  4712 ;;		Unchanged: 0/0
  4713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4718 ;;Total ram usage:        0 bytes
  4719 ;; Hardware stack levels used:    1
  4720 ;; Hardware stack levels required when called:    6
  4721 ;; This function calls:
  4722 ;;		Nothing
  4723 ;; This function is called by:
  4724 ;;		_do_I2C_RX
  4725 ;; This function uses a non-reentrant model
  4726 ;;
  4727                           
  4728                           	psect	text37
  4729  00114A                     __ptext37:
  4730                           	opt stack 0
  4731  00114A                     _i2c1_driver_getRXData:
  4732                           	opt stack 15
  4733                           
  4734                           ;i2c1_driver.c: 173: return SSP1BUF;
  4735                           
  4736                           ;incstack = 0
  4737  00114A  5092               	movf	3986,w,c	;volatile
  4738  00114C  0012               	return	
  4739  00114E                     __end_of_i2c1_driver_getRXData:
  4740                           	opt stack 0
  4741                           tosu	equ	0xFFF
  4742                           tosh	equ	0xFFE
  4743                           tosl	equ	0xFFD
  4744                           pclath	equ	0xFFA
  4745                           tblptru	equ	0xFF8
  4746                           tblptrh	equ	0xFF7
  4747                           tblptrl	equ	0xFF6
  4748                           tablat	equ	0xFF5
  4749                           prodh	equ	0xFF4
  4750                           prodl	equ	0xFF3
  4751                           intcon	equ	0xFF2
  4752                           postinc0	equ	0xFEE
  4753                           wreg	equ	0xFE8
  4754                           postdec1	equ	0xFE5
  4755                           plusw1	equ	0xFE3
  4756                           fsr1l	equ	0xFE1
  4757                           indf2	equ	0xFDF
  4758                           postinc2	equ	0xFDE
  4759                           plusw2	equ	0xFDB
  4760                           fsr2h	equ	0xFDA
  4761                           fsr2l	equ	0xFD9
  4762                           status	equ	0xFD8
  4763                           
  4764 ;; *************** function _i2c1_driver_sendNACK *****************
  4765 ;; Defined at:
  4766 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
  4767 ;; Parameters:    Size  Location     Type
  4768 ;;		None
  4769 ;; Auto vars:     Size  Location     Type
  4770 ;;		None
  4771 ;; Return value:  Size  Location     Type
  4772 ;;                  1    wreg      void 
  4773 ;; Registers used:
  4774 ;;		None
  4775 ;; Tracked objects:
  4776 ;;		On entry : 0/0
  4777 ;;		On exit  : 0/0
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4783 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4784 ;;Total ram usage:        0 bytes
  4785 ;; Hardware stack levels used:    1
  4786 ;; Hardware stack levels required when called:    6
  4787 ;; This function calls:
  4788 ;;		Nothing
  4789 ;; This function is called by:
  4790 ;;		_do_I2C_DO_NACK_STOP
  4791 ;;		_do_I2C_DO_NACK_RESTART
  4792 ;; This function uses a non-reentrant model
  4793 ;;
  4794                           
  4795                           	psect	text38
  4796  00110E                     __ptext38:
  4797                           	opt stack 0
  4798  00110E                     _i2c1_driver_sendNACK:
  4799                           	opt stack 14
  4800                           
  4801                           ;i2c1_driver.c: 204: SSP1CON2bits.ACKDT = 1;
  4802                           
  4803                           ;incstack = 0
  4804  00110E  8A97               	bsf	3991,5,c	;volatile
  4805                           
  4806                           ;i2c1_driver.c: 205: SSP1CON2bits.ACKEN = 1;
  4807  001110  8897               	bsf	3991,4,c	;volatile
  4808  001112  0012               	return		;funcret
  4809  001114                     __end_of_i2c1_driver_sendNACK:
  4810                           	opt stack 0
  4811                           tosu	equ	0xFFF
  4812                           tosh	equ	0xFFE
  4813                           tosl	equ	0xFFD
  4814                           pclath	equ	0xFFA
  4815                           tblptru	equ	0xFF8
  4816                           tblptrh	equ	0xFF7
  4817                           tblptrl	equ	0xFF6
  4818                           tablat	equ	0xFF5
  4819                           prodh	equ	0xFF4
  4820                           prodl	equ	0xFF3
  4821                           intcon	equ	0xFF2
  4822                           postinc0	equ	0xFEE
  4823                           wreg	equ	0xFE8
  4824                           postdec1	equ	0xFE5
  4825                           plusw1	equ	0xFE3
  4826                           fsr1l	equ	0xFE1
  4827                           indf2	equ	0xFDF
  4828                           postinc2	equ	0xFDE
  4829                           plusw2	equ	0xFDB
  4830                           fsr2h	equ	0xFDA
  4831                           fsr2l	equ	0xFD9
  4832                           status	equ	0xFD8
  4833                           
  4834 ;; *************** function _i2c1_driver_resetBus *****************
  4835 ;; Defined at:
  4836 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
  4837 ;; Parameters:    Size  Location     Type
  4838 ;;		None
  4839 ;; Auto vars:     Size  Location     Type
  4840 ;;		None
  4841 ;; Return value:  Size  Location     Type
  4842 ;;                  1    wreg      void 
  4843 ;; Registers used:
  4844 ;;		None
  4845 ;; Tracked objects:
  4846 ;;		On entry : 0/0
  4847 ;;		On exit  : 0/0
  4848 ;;		Unchanged: 0/0
  4849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4854 ;;Total ram usage:        0 bytes
  4855 ;; Hardware stack levels used:    1
  4856 ;; Hardware stack levels required when called:    6
  4857 ;; This function calls:
  4858 ;;		Nothing
  4859 ;; This function is called by:
  4860 ;;		_do_I2C_RESET
  4861 ;; This function uses a non-reentrant model
  4862 ;;
  4863                           
  4864                           	psect	text39
  4865  00117E                     __ptext39:
  4866                           	opt stack 0
  4867  00117E                     _i2c1_driver_resetBus:
  4868                           	opt stack 15
  4869                           
  4870                           ;incstack = 0
  4871  00117E  0012               	return		;funcret
  4872  001180                     __end_of_i2c1_driver_resetBus:
  4873                           	opt stack 0
  4874                           tosu	equ	0xFFF
  4875                           tosh	equ	0xFFE
  4876                           tosl	equ	0xFFD
  4877                           pclath	equ	0xFFA
  4878                           tblptru	equ	0xFF8
  4879                           tblptrh	equ	0xFF7
  4880                           tblptrl	equ	0xFF6
  4881                           tablat	equ	0xFF5
  4882                           prodh	equ	0xFF4
  4883                           prodl	equ	0xFF3
  4884                           intcon	equ	0xFF2
  4885                           postinc0	equ	0xFEE
  4886                           wreg	equ	0xFE8
  4887                           postdec1	equ	0xFE5
  4888                           plusw1	equ	0xFE3
  4889                           fsr1l	equ	0xFE1
  4890                           indf2	equ	0xFDF
  4891                           postinc2	equ	0xFDE
  4892                           plusw2	equ	0xFDB
  4893                           fsr2h	equ	0xFDA
  4894                           fsr2l	equ	0xFD9
  4895                           status	equ	0xFD8
  4896                           
  4897 ;; *************** function _i2c1_driver_startRX *****************
  4898 ;; Defined at:
  4899 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
  4900 ;; Parameters:    Size  Location     Type
  4901 ;;		None
  4902 ;; Auto vars:     Size  Location     Type
  4903 ;;		None
  4904 ;; Return value:  Size  Location     Type
  4905 ;;                  1    wreg      void 
  4906 ;; Registers used:
  4907 ;;		None
  4908 ;; Tracked objects:
  4909 ;;		On entry : 0/0
  4910 ;;		On exit  : 0/0
  4911 ;;		Unchanged: 0/0
  4912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4916 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4917 ;;Total ram usage:        0 bytes
  4918 ;; Hardware stack levels used:    1
  4919 ;; Hardware stack levels required when called:    6
  4920 ;; This function calls:
  4921 ;;		Nothing
  4922 ;; This function is called by:
  4923 ;;		_do_I2C_RCEN
  4924 ;; This function uses a non-reentrant model
  4925 ;;
  4926                           
  4927                           	psect	text40
  4928  00114E                     __ptext40:
  4929                           	opt stack 0
  4930  00114E                     _i2c1_driver_startRX:
  4931                           	opt stack 15
  4932                           
  4933                           ;i2c1_driver.c: 168: SSP1CON2bits.RCEN = 1;
  4934                           
  4935                           ;incstack = 0
  4936  00114E  8697               	bsf	3991,3,c	;volatile
  4937  001150  0012               	return		;funcret
  4938  001152                     __end_of_i2c1_driver_startRX:
  4939                           	opt stack 0
  4940                           tosu	equ	0xFFF
  4941                           tosh	equ	0xFFE
  4942                           tosl	equ	0xFFD
  4943                           pclath	equ	0xFFA
  4944                           tblptru	equ	0xFF8
  4945                           tblptrh	equ	0xFF7
  4946                           tblptrl	equ	0xFF6
  4947                           tablat	equ	0xFF5
  4948                           prodh	equ	0xFF4
  4949                           prodl	equ	0xFF3
  4950                           intcon	equ	0xFF2
  4951                           postinc0	equ	0xFEE
  4952                           wreg	equ	0xFE8
  4953                           postdec1	equ	0xFE5
  4954                           plusw1	equ	0xFE3
  4955                           fsr1l	equ	0xFE1
  4956                           indf2	equ	0xFDF
  4957                           postinc2	equ	0xFDE
  4958                           plusw2	equ	0xFDB
  4959                           fsr2h	equ	0xFDA
  4960                           fsr2l	equ	0xFD9
  4961                           status	equ	0xFD8
  4962                           
  4963 ;; *************** function _rdBlkRegCompleteHandler *****************
  4964 ;; Defined at:
  4965 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  4966 ;; Parameters:    Size  Location     Type
  4967 ;;  p               2   32[COMRAM] PTR void 
  4968 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  4969 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  4970 ;; Auto vars:     Size  Location     Type
  4971 ;;		None
  4972 ;; Return value:  Size  Location     Type
  4973 ;;                  1    wreg      enum E97
  4974 ;; Registers used:
  4975 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4976 ;; Tracked objects:
  4977 ;;		On entry : 0/0
  4978 ;;		On exit  : 0/0
  4979 ;;		Unchanged: 0/0
  4980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4981 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4984 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4985 ;;Total ram usage:        2 bytes
  4986 ;; Hardware stack levels used:    1
  4987 ;; Hardware stack levels required when called:    8
  4988 ;; This function calls:
  4989 ;;		_i2c_setBuffer
  4990 ;;		_i2c_setDataCompleteCallback
  4991 ;; This function is called by:
  4992 ;;		_i2c_readDataBlock
  4993 ;;		_do_I2C_DO_ADDRESS_NACK
  4994 ;;		_do_I2C_TX
  4995 ;;		_do_I2C_RX
  4996 ;;		_do_I2C_TX_EMPTY
  4997 ;;		i2_do_I2C_DO_ADDRESS_NACK
  4998 ;;		i2_do_I2C_TX
  4999 ;;		i2_do_I2C_RX
  5000 ;;		i2_do_I2C_TX_EMPTY
  5001 ;; This function uses a non-reentrant model
  5002 ;;
  5003                           
  5004                           	psect	text41
  5005  000A26                     __ptext41:
  5006                           	opt stack 0
  5007  000A26                     _rdBlkRegCompleteHandler:
  5008                           	opt stack 0
  5009                           
  5010                           ;Skip over the trampoline to the duplicate function for level 2
  5011  000A26  B247               	btfsc	btemp,1,c
  5012  000A28  EF80  F005         	goto	i2_rdBlkRegCompleteHandler
  5013  000A2C                     _rdBlkRegCompleteHandler$intlevel0:
  5014                           	opt stack 13
  5015                           
  5016                           ;i2c_simple_master.c: 136: i2c_setBuffer(((buf_t *)p)->data,((buf_t*)p)->len);
  5017                           
  5018                           ;incstack = 0
  5019  000A2C  EE20 F002          	lfsr	2,2
  5020  000A30  5021               	movf	rdBlkRegCompleteHandler@p,w,c
  5021  000A32  26D9               	addwf	fsr2l,f,c
  5022  000A34  5022               	movf	rdBlkRegCompleteHandler@p+1,w,c
  5023  000A36  22DA               	addwfc	fsr2h,f,c
  5024  000A38  CFDE F016          	movff	postinc2,i2c_setBuffer@buffer
  5025  000A3C  CFDD F017          	movff	postdec2,i2c_setBuffer@buffer+1
  5026  000A40  C021  FFD9         	movff	rdBlkRegCompleteHandler@p,fsr2l
  5027  000A44  C022  FFDA         	movff	rdBlkRegCompleteHandler@p+1,fsr2h
  5028  000A48  CFDE F018          	movff	postinc2,i2c_setBuffer@bufferSize
  5029  000A4C  CFDD F019          	movff	postdec2,i2c_setBuffer@bufferSize+1
  5030  000A50  EC41  F007         	call	_i2c_setBuffer	;wreg free
  5031                           
  5032                           ;i2c_simple_master.c: 137: i2c_setDataCompleteCallback((0),(0));
  5033  000A54  0E00               	movlw	0
  5034  000A56  6E1C               	movwf	i2c_setDataCompleteCallback@cb,c
  5035  000A58  0E00               	movlw	0
  5036  000A5A  6E1D               	movwf	i2c_setDataCompleteCallback@cb+1,c
  5037  000A5C  0E00               	movlw	0
  5038  000A5E  6E1E               	movwf	i2c_setDataCompleteCallback@cb+2,c
  5039  000A60  0E00               	movlw	0
  5040  000A62  6E1F               	movwf	i2c_setDataCompleteCallback@p,c
  5041  000A64  0E00               	movlw	0
  5042  000A66  6E20               	movwf	i2c_setDataCompleteCallback@p+1,c
  5043  000A68  EC0A  F007         	call	_i2c_setDataCompleteCallback	;wreg free
  5044                           
  5045                           ;i2c_simple_master.c: 138: return i2c_restart_read;
  5046  000A6C  0E02               	movlw	2
  5047  000A6E  0012               	return	
  5048  000A70                     __end_of_rdBlkRegCompleteHandler:
  5049                           	opt stack 0
  5050                           tosu	equ	0xFFF
  5051                           tosh	equ	0xFFE
  5052                           tosl	equ	0xFFD
  5053                           pclath	equ	0xFFA
  5054                           tblptru	equ	0xFF8
  5055                           tblptrh	equ	0xFF7
  5056                           tblptrl	equ	0xFF6
  5057                           tablat	equ	0xFF5
  5058                           prodh	equ	0xFF4
  5059                           prodl	equ	0xFF3
  5060                           intcon	equ	0xFF2
  5061                           postinc0	equ	0xFEE
  5062                           wreg	equ	0xFE8
  5063                           postdec1	equ	0xFE5
  5064                           plusw1	equ	0xFE3
  5065                           fsr1l	equ	0xFE1
  5066                           indf2	equ	0xFDF
  5067                           postinc2	equ	0xFDE
  5068                           postdec2	equ	0xFDD
  5069                           plusw2	equ	0xFDB
  5070                           fsr2h	equ	0xFDA
  5071                           fsr2l	equ	0xFD9
  5072                           status	equ	0xFD8
  5073                           
  5074 ;; *************** function _rd2RegCompleteHandler *****************
  5075 ;; Defined at:
  5076 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  5077 ;; Parameters:    Size  Location     Type
  5078 ;;  p               2   32[COMRAM] PTR void 
  5079 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  5080 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  5081 ;; Auto vars:     Size  Location     Type
  5082 ;;		None
  5083 ;; Return value:  Size  Location     Type
  5084 ;;                  1    wreg      enum E97
  5085 ;; Registers used:
  5086 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5087 ;; Tracked objects:
  5088 ;;		On entry : 0/0
  5089 ;;		On exit  : 0/0
  5090 ;;		Unchanged: 0/0
  5091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5092 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5095 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5096 ;;Total ram usage:        2 bytes
  5097 ;; Hardware stack levels used:    1
  5098 ;; Hardware stack levels required when called:    8
  5099 ;; This function calls:
  5100 ;;		_i2c_setBuffer
  5101 ;;		_i2c_setDataCompleteCallback
  5102 ;; This function is called by:
  5103 ;;		_i2c_read2ByteRegister
  5104 ;;		_do_I2C_DO_ADDRESS_NACK
  5105 ;;		_do_I2C_TX
  5106 ;;		_do_I2C_RX
  5107 ;;		_do_I2C_TX_EMPTY
  5108 ;;		i2_do_I2C_DO_ADDRESS_NACK
  5109 ;;		i2_do_I2C_TX
  5110 ;;		i2_do_I2C_RX
  5111 ;;		i2_do_I2C_TX_EMPTY
  5112 ;; This function uses a non-reentrant model
  5113 ;;
  5114                           
  5115                           	psect	text42
  5116  000B86                     __ptext42:
  5117                           	opt stack 0
  5118  000B86                     _rd2RegCompleteHandler:
  5119                           	opt stack 0
  5120                           
  5121                           ;Skip over the trampoline to the duplicate function for level 2
  5122  000B86  B247               	btfsc	btemp,1,c
  5123  000B88  EF79  F006         	goto	i2_rd2RegCompleteHandler
  5124  000B8C                     _rd2RegCompleteHandler$intlevel0:
  5125                           	opt stack 13
  5126                           
  5127                           ;i2c_simple_master.c: 89: i2c_setBuffer(p,2);
  5128                           
  5129                           ;incstack = 0
  5130  000B8C  C021  F016         	movff	rd2RegCompleteHandler@p,i2c_setBuffer@buffer
  5131  000B90  C022  F017         	movff	rd2RegCompleteHandler@p+1,i2c_setBuffer@buffer+1
  5132  000B94  0E00               	movlw	0
  5133  000B96  6E19               	movwf	i2c_setBuffer@bufferSize+1,c
  5134  000B98  0E02               	movlw	2
  5135  000B9A  6E18               	movwf	i2c_setBuffer@bufferSize,c
  5136  000B9C  EC41  F007         	call	_i2c_setBuffer	;wreg free
  5137                           
  5138                           ;i2c_simple_master.c: 90: i2c_setDataCompleteCallback((0),(0));
  5139  000BA0  0E00               	movlw	0
  5140  000BA2  6E1C               	movwf	i2c_setDataCompleteCallback@cb,c
  5141  000BA4  0E00               	movlw	0
  5142  000BA6  6E1D               	movwf	i2c_setDataCompleteCallback@cb+1,c
  5143  000BA8  0E00               	movlw	0
  5144  000BAA  6E1E               	movwf	i2c_setDataCompleteCallback@cb+2,c
  5145  000BAC  0E00               	movlw	0
  5146  000BAE  6E1F               	movwf	i2c_setDataCompleteCallback@p,c
  5147  000BB0  0E00               	movlw	0
  5148  000BB2  6E20               	movwf	i2c_setDataCompleteCallback@p+1,c
  5149  000BB4  EC0A  F007         	call	_i2c_setDataCompleteCallback	;wreg free
  5150                           
  5151                           ;i2c_simple_master.c: 91: return i2c_restart_read;
  5152  000BB8  0E02               	movlw	2
  5153  000BBA  0012               	return	
  5154  000BBC                     __end_of_rd2RegCompleteHandler:
  5155                           	opt stack 0
  5156                           tosu	equ	0xFFF
  5157                           tosh	equ	0xFFE
  5158                           tosl	equ	0xFFD
  5159                           pclath	equ	0xFFA
  5160                           tblptru	equ	0xFF8
  5161                           tblptrh	equ	0xFF7
  5162                           tblptrl	equ	0xFF6
  5163                           tablat	equ	0xFF5
  5164                           prodh	equ	0xFF4
  5165                           prodl	equ	0xFF3
  5166                           intcon	equ	0xFF2
  5167                           postinc0	equ	0xFEE
  5168                           wreg	equ	0xFE8
  5169                           postdec1	equ	0xFE5
  5170                           plusw1	equ	0xFE3
  5171                           fsr1l	equ	0xFE1
  5172                           indf2	equ	0xFDF
  5173                           postinc2	equ	0xFDE
  5174                           postdec2	equ	0xFDD
  5175                           plusw2	equ	0xFDB
  5176                           fsr2h	equ	0xFDA
  5177                           fsr2l	equ	0xFD9
  5178                           status	equ	0xFD8
  5179                           
  5180 ;; *************** function _rd1RegCompleteHandler *****************
  5181 ;; Defined at:
  5182 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  5183 ;; Parameters:    Size  Location     Type
  5184 ;;  p               2   32[COMRAM] PTR void 
  5185 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  5186 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  5187 ;; Auto vars:     Size  Location     Type
  5188 ;;		None
  5189 ;; Return value:  Size  Location     Type
  5190 ;;                  1    wreg      enum E97
  5191 ;; Registers used:
  5192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5193 ;; Tracked objects:
  5194 ;;		On entry : 0/0
  5195 ;;		On exit  : 0/0
  5196 ;;		Unchanged: 0/0
  5197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5198 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5201 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5202 ;;Total ram usage:        2 bytes
  5203 ;; Hardware stack levels used:    1
  5204 ;; Hardware stack levels required when called:    8
  5205 ;; This function calls:
  5206 ;;		_i2c_setBuffer
  5207 ;;		_i2c_setDataCompleteCallback
  5208 ;; This function is called by:
  5209 ;;		_i2c_read1ByteRegister
  5210 ;;		_do_I2C_DO_ADDRESS_NACK
  5211 ;;		_do_I2C_TX
  5212 ;;		_do_I2C_RX
  5213 ;;		_do_I2C_TX_EMPTY
  5214 ;;		i2_do_I2C_DO_ADDRESS_NACK
  5215 ;;		i2_do_I2C_TX
  5216 ;;		i2_do_I2C_RX
  5217 ;;		i2_do_I2C_TX_EMPTY
  5218 ;; This function uses a non-reentrant model
  5219 ;;
  5220                           
  5221                           	psect	text43
  5222  000BBC                     __ptext43:
  5223                           	opt stack 0
  5224  000BBC                     _rd1RegCompleteHandler:
  5225                           	opt stack 0
  5226                           
  5227                           ;Skip over the trampoline to the duplicate function for level 2
  5228  000BBC  B247               	btfsc	btemp,1,c
  5229  000BBE  EF91  F006         	goto	i2_rd1RegCompleteHandler
  5230  000BC2                     _rd1RegCompleteHandler$intlevel0:
  5231                           	opt stack 13
  5232                           
  5233                           ;i2c_simple_master.c: 60: i2c_setBuffer(p,1);
  5234                           
  5235                           ;incstack = 0
  5236  000BC2  C021  F016         	movff	rd1RegCompleteHandler@p,i2c_setBuffer@buffer
  5237  000BC6  C022  F017         	movff	rd1RegCompleteHandler@p+1,i2c_setBuffer@buffer+1
  5238  000BCA  0E00               	movlw	0
  5239  000BCC  6E19               	movwf	i2c_setBuffer@bufferSize+1,c
  5240  000BCE  0E01               	movlw	1
  5241  000BD0  6E18               	movwf	i2c_setBuffer@bufferSize,c
  5242  000BD2  EC41  F007         	call	_i2c_setBuffer	;wreg free
  5243                           
  5244                           ;i2c_simple_master.c: 61: i2c_setDataCompleteCallback((0),(0));
  5245  000BD6  0E00               	movlw	0
  5246  000BD8  6E1C               	movwf	i2c_setDataCompleteCallback@cb,c
  5247  000BDA  0E00               	movlw	0
  5248  000BDC  6E1D               	movwf	i2c_setDataCompleteCallback@cb+1,c
  5249  000BDE  0E00               	movlw	0
  5250  000BE0  6E1E               	movwf	i2c_setDataCompleteCallback@cb+2,c
  5251  000BE2  0E00               	movlw	0
  5252  000BE4  6E1F               	movwf	i2c_setDataCompleteCallback@p,c
  5253  000BE6  0E00               	movlw	0
  5254  000BE8  6E20               	movwf	i2c_setDataCompleteCallback@p+1,c
  5255  000BEA  EC0A  F007         	call	_i2c_setDataCompleteCallback	;wreg free
  5256                           
  5257                           ;i2c_simple_master.c: 62: return i2c_restart_read;
  5258  000BEE  0E02               	movlw	2
  5259  000BF0  0012               	return	
  5260  000BF2                     __end_of_rd1RegCompleteHandler:
  5261                           	opt stack 0
  5262                           tosu	equ	0xFFF
  5263                           tosh	equ	0xFFE
  5264                           tosl	equ	0xFFD
  5265                           pclath	equ	0xFFA
  5266                           tblptru	equ	0xFF8
  5267                           tblptrh	equ	0xFF7
  5268                           tblptrl	equ	0xFF6
  5269                           tablat	equ	0xFF5
  5270                           prodh	equ	0xFF4
  5271                           prodl	equ	0xFF3
  5272                           intcon	equ	0xFF2
  5273                           postinc0	equ	0xFEE
  5274                           wreg	equ	0xFE8
  5275                           postdec1	equ	0xFE5
  5276                           plusw1	equ	0xFE3
  5277                           fsr1l	equ	0xFE1
  5278                           indf2	equ	0xFDF
  5279                           postinc2	equ	0xFDE
  5280                           postdec2	equ	0xFDD
  5281                           plusw2	equ	0xFDB
  5282                           fsr2h	equ	0xFDA
  5283                           fsr2l	equ	0xFD9
  5284                           status	equ	0xFD8
  5285                           
  5286 ;; *************** function _wr1RegCompleteHandler *****************
  5287 ;; Defined at:
  5288 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  5289 ;; Parameters:    Size  Location     Type
  5290 ;;  p               2   32[COMRAM] PTR void 
  5291 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  5292 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  5293 ;; Auto vars:     Size  Location     Type
  5294 ;;		None
  5295 ;; Return value:  Size  Location     Type
  5296 ;;                  1    wreg      enum E97
  5297 ;; Registers used:
  5298 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5299 ;; Tracked objects:
  5300 ;;		On entry : 0/0
  5301 ;;		On exit  : 0/0
  5302 ;;		Unchanged: 0/0
  5303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5304 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5307 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5308 ;;Total ram usage:        2 bytes
  5309 ;; Hardware stack levels used:    1
  5310 ;; Hardware stack levels required when called:    8
  5311 ;; This function calls:
  5312 ;;		_i2c_setBuffer
  5313 ;;		_i2c_setDataCompleteCallback
  5314 ;; This function is called by:
  5315 ;;		_i2c_write1ByteRegister
  5316 ;;		_do_I2C_DO_ADDRESS_NACK
  5317 ;;		_do_I2C_TX
  5318 ;;		_do_I2C_RX
  5319 ;;		_do_I2C_TX_EMPTY
  5320 ;;		i2_do_I2C_DO_ADDRESS_NACK
  5321 ;;		i2_do_I2C_TX
  5322 ;;		i2_do_I2C_RX
  5323 ;;		i2_do_I2C_TX_EMPTY
  5324 ;; This function uses a non-reentrant model
  5325 ;;
  5326                           
  5327                           	psect	text44
  5328  000BF2                     __ptext44:
  5329                           	opt stack 0
  5330  000BF2                     _wr1RegCompleteHandler:
  5331                           	opt stack 0
  5332                           
  5333                           ;Skip over the trampoline to the duplicate function for level 2
  5334  000BF2  B247               	btfsc	btemp,1,c
  5335  000BF4  EFA9  F006         	goto	i2_wr1RegCompleteHandler
  5336  000BF8                     _wr1RegCompleteHandler$intlevel0:
  5337                           	opt stack 13
  5338                           
  5339                           ;i2c_simple_master.c: 33: i2c_setBuffer(p,1);
  5340                           
  5341                           ;incstack = 0
  5342  000BF8  C021  F016         	movff	wr1RegCompleteHandler@p,i2c_setBuffer@buffer
  5343  000BFC  C022  F017         	movff	wr1RegCompleteHandler@p+1,i2c_setBuffer@buffer+1
  5344  000C00  0E00               	movlw	0
  5345  000C02  6E19               	movwf	i2c_setBuffer@bufferSize+1,c
  5346  000C04  0E01               	movlw	1
  5347  000C06  6E18               	movwf	i2c_setBuffer@bufferSize,c
  5348  000C08  EC41  F007         	call	_i2c_setBuffer	;wreg free
  5349                           
  5350                           ;i2c_simple_master.c: 34: i2c_setDataCompleteCallback((0),(0));
  5351  000C0C  0E00               	movlw	0
  5352  000C0E  6E1C               	movwf	i2c_setDataCompleteCallback@cb,c
  5353  000C10  0E00               	movlw	0
  5354  000C12  6E1D               	movwf	i2c_setDataCompleteCallback@cb+1,c
  5355  000C14  0E00               	movlw	0
  5356  000C16  6E1E               	movwf	i2c_setDataCompleteCallback@cb+2,c
  5357  000C18  0E00               	movlw	0
  5358  000C1A  6E1F               	movwf	i2c_setDataCompleteCallback@p,c
  5359  000C1C  0E00               	movlw	0
  5360  000C1E  6E20               	movwf	i2c_setDataCompleteCallback@p+1,c
  5361  000C20  EC0A  F007         	call	_i2c_setDataCompleteCallback	;wreg free
  5362                           
  5363                           ;i2c_simple_master.c: 35: return i2c_continue;
  5364  000C24  0E04               	movlw	4
  5365  000C26  0012               	return	
  5366  000C28                     __end_of_wr1RegCompleteHandler:
  5367                           	opt stack 0
  5368                           tosu	equ	0xFFF
  5369                           tosh	equ	0xFFE
  5370                           tosl	equ	0xFFD
  5371                           pclath	equ	0xFFA
  5372                           tblptru	equ	0xFF8
  5373                           tblptrh	equ	0xFF7
  5374                           tblptrl	equ	0xFF6
  5375                           tablat	equ	0xFF5
  5376                           prodh	equ	0xFF4
  5377                           prodl	equ	0xFF3
  5378                           intcon	equ	0xFF2
  5379                           postinc0	equ	0xFEE
  5380                           wreg	equ	0xFE8
  5381                           postdec1	equ	0xFE5
  5382                           plusw1	equ	0xFE3
  5383                           fsr1l	equ	0xFE1
  5384                           indf2	equ	0xFDF
  5385                           postinc2	equ	0xFDE
  5386                           postdec2	equ	0xFDD
  5387                           plusw2	equ	0xFDB
  5388                           fsr2h	equ	0xFDA
  5389                           fsr2l	equ	0xFD9
  5390                           status	equ	0xFD8
  5391                           
  5392 ;; *************** function _i2c_restartWrite *****************
  5393 ;; Defined at:
  5394 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
  5395 ;; Parameters:    Size  Location     Type
  5396 ;;  p               2   32[COMRAM] PTR void 
  5397 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  5398 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  5399 ;; Auto vars:     Size  Location     Type
  5400 ;;		None
  5401 ;; Return value:  Size  Location     Type
  5402 ;;                  1    wreg      enum E96
  5403 ;; Registers used:
  5404 ;;		wreg
  5405 ;; Tracked objects:
  5406 ;;		On entry : 0/0
  5407 ;;		On exit  : 0/0
  5408 ;;		Unchanged: 0/0
  5409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5410 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5413 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5414 ;;Total ram usage:        2 bytes
  5415 ;; Hardware stack levels used:    1
  5416 ;; Hardware stack levels required when called:    6
  5417 ;; This function calls:
  5418 ;;		Nothing
  5419 ;; This function is called by:
  5420 ;;		_i2c_writeNBytes
  5421 ;;		_i2c_write1ByteRegister
  5422 ;;		_i2c_read1ByteRegister
  5423 ;;		_i2c_read2ByteRegister
  5424 ;;		_i2c_write2ByteRegister
  5425 ;;		_i2c_readDataBlock
  5426 ;;		_do_I2C_DO_ADDRESS_NACK
  5427 ;;		_do_I2C_TX
  5428 ;;		_do_I2C_RX
  5429 ;;		_do_I2C_TX_EMPTY
  5430 ;;		i2_do_I2C_DO_ADDRESS_NACK
  5431 ;;		i2_do_I2C_TX
  5432 ;;		i2_do_I2C_RX
  5433 ;;		i2_do_I2C_TX_EMPTY
  5434 ;; This function uses a non-reentrant model
  5435 ;;
  5436                           
  5437                           	psect	text45
  5438  001092                     __ptext45:
  5439                           	opt stack 0
  5440  001092                     _i2c_restartWrite:
  5441                           	opt stack 0
  5442                           
  5443                           ;Skip over the trampoline to the duplicate function for level 2
  5444  001092  B247               	btfsc	btemp,1,c
  5445  001094  EFB5  F008         	goto	i2_i2c_restartWrite
  5446  001098                     _i2c_restartWrite$intlevel0:
  5447                           	opt stack 15
  5448                           
  5449                           ;i2c_types.c: 37: return i2c_restart_write;
  5450                           
  5451                           ;incstack = 0
  5452  001098  0E03               	movlw	3
  5453  00109A  0012               	return	
  5454  00109C                     __end_of_i2c_restartWrite:
  5455                           	opt stack 0
  5456                           tosu	equ	0xFFF
  5457                           tosh	equ	0xFFE
  5458                           tosl	equ	0xFFD
  5459                           pclath	equ	0xFFA
  5460                           tblptru	equ	0xFF8
  5461                           tblptrh	equ	0xFF7
  5462                           tblptrl	equ	0xFF6
  5463                           tablat	equ	0xFF5
  5464                           prodh	equ	0xFF4
  5465                           prodl	equ	0xFF3
  5466                           intcon	equ	0xFF2
  5467                           postinc0	equ	0xFEE
  5468                           wreg	equ	0xFE8
  5469                           postdec1	equ	0xFE5
  5470                           plusw1	equ	0xFE3
  5471                           fsr1l	equ	0xFE1
  5472                           indf2	equ	0xFDF
  5473                           postinc2	equ	0xFDE
  5474                           postdec2	equ	0xFDD
  5475                           plusw2	equ	0xFDB
  5476                           fsr2h	equ	0xFDA
  5477                           fsr2l	equ	0xFD9
  5478                           status	equ	0xFD8
  5479                           
  5480 ;; *************** function _returnReset *****************
  5481 ;; Defined at:
  5482 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
  5483 ;; Parameters:    Size  Location     Type
  5484 ;;  p               2   32[COMRAM] PTR void 
  5485 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  5486 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  5487 ;; Auto vars:     Size  Location     Type
  5488 ;;		None
  5489 ;; Return value:  Size  Location     Type
  5490 ;;                  1    wreg      enum E11790
  5491 ;; Registers used:
  5492 ;;		wreg
  5493 ;; Tracked objects:
  5494 ;;		On entry : 0/0
  5495 ;;		On exit  : 0/0
  5496 ;;		Unchanged: 0/0
  5497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5498 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5501 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5502 ;;Total ram usage:        2 bytes
  5503 ;; Hardware stack levels used:    1
  5504 ;; Hardware stack levels required when called:    6
  5505 ;; This function calls:
  5506 ;;		Nothing
  5507 ;; This function is called by:
  5508 ;;		_i2c_open
  5509 ;;		_do_I2C_DO_ADDRESS_NACK
  5510 ;;		_do_I2C_TX
  5511 ;;		_do_I2C_RX
  5512 ;;		_do_I2C_TX_EMPTY
  5513 ;;		i2_do_I2C_DO_ADDRESS_NACK
  5514 ;;		i2_do_I2C_TX
  5515 ;;		i2_do_I2C_RX
  5516 ;;		i2_do_I2C_TX_EMPTY
  5517 ;; This function uses a non-reentrant model
  5518 ;;
  5519                           
  5520                           	psect	text46
  5521  00109C                     __ptext46:
  5522                           	opt stack 0
  5523  00109C                     _returnReset:
  5524                           	opt stack 0
  5525                           
  5526                           ;Skip over the trampoline to the duplicate function for level 2
  5527  00109C  B247               	btfsc	btemp,1,c
  5528  00109E  EFB7  F008         	goto	i2_returnReset
  5529  0010A2                     _returnReset$intlevel0:
  5530                           	opt stack 15
  5531                           
  5532                           ;i2c_master.c: 450: return i2c_reset_link;
  5533                           
  5534                           ;incstack = 0
  5535  0010A2  0E05               	movlw	5
  5536  0010A4  0012               	return	
  5537  0010A6                     __end_of_returnReset:
  5538                           	opt stack 0
  5539                           tosu	equ	0xFFF
  5540                           tosh	equ	0xFFE
  5541                           tosl	equ	0xFFD
  5542                           pclath	equ	0xFFA
  5543                           tblptru	equ	0xFF8
  5544                           tblptrh	equ	0xFF7
  5545                           tblptrl	equ	0xFF6
  5546                           tablat	equ	0xFF5
  5547                           prodh	equ	0xFF4
  5548                           prodl	equ	0xFF3
  5549                           intcon	equ	0xFF2
  5550                           postinc0	equ	0xFEE
  5551                           wreg	equ	0xFE8
  5552                           postdec1	equ	0xFE5
  5553                           plusw1	equ	0xFE3
  5554                           fsr1l	equ	0xFE1
  5555                           indf2	equ	0xFDF
  5556                           postinc2	equ	0xFDE
  5557                           postdec2	equ	0xFDD
  5558                           plusw2	equ	0xFDB
  5559                           fsr2h	equ	0xFDA
  5560                           fsr2l	equ	0xFD9
  5561                           status	equ	0xFD8
  5562                           
  5563 ;; *************** function _returnStop *****************
  5564 ;; Defined at:
  5565 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
  5566 ;; Parameters:    Size  Location     Type
  5567 ;;  p               2   32[COMRAM] PTR void 
  5568 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  5569 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  5570 ;; Auto vars:     Size  Location     Type
  5571 ;;		None
  5572 ;; Return value:  Size  Location     Type
  5573 ;;                  1    wreg      enum E11790
  5574 ;; Registers used:
  5575 ;;		wreg
  5576 ;; Tracked objects:
  5577 ;;		On entry : 0/0
  5578 ;;		On exit  : 0/0
  5579 ;;		Unchanged: 0/0
  5580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5581 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5584 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5585 ;;Total ram usage:        2 bytes
  5586 ;; Hardware stack levels used:    1
  5587 ;; Hardware stack levels required when called:    6
  5588 ;; This function calls:
  5589 ;;		Nothing
  5590 ;; This function is called by:
  5591 ;;		_i2c_open
  5592 ;;		_setCallBack
  5593 ;;		_do_I2C_DO_ADDRESS_NACK
  5594 ;;		_do_I2C_TX
  5595 ;;		_do_I2C_RX
  5596 ;;		_do_I2C_TX_EMPTY
  5597 ;;		i2_do_I2C_DO_ADDRESS_NACK
  5598 ;;		i2_do_I2C_TX
  5599 ;;		i2_do_I2C_RX
  5600 ;;		i2_do_I2C_TX_EMPTY
  5601 ;; This function uses a non-reentrant model
  5602 ;;
  5603                           
  5604                           	psect	text47
  5605  0010A6                     __ptext47:
  5606                           	opt stack 0
  5607  0010A6                     _returnStop:
  5608                           	opt stack 0
  5609                           
  5610                           ;Skip over the trampoline to the duplicate function for level 2
  5611  0010A6  B247               	btfsc	btemp,1,c
  5612  0010A8  EFB9  F008         	goto	i2_returnStop
  5613  0010AC                     _returnStop$intlevel0:
  5614                           	opt stack 15
  5615                           
  5616                           ;i2c_master.c: 445: return i2c_stop;
  5617                           
  5618                           ;incstack = 0
  5619  0010AC  0E01               	movlw	1
  5620  0010AE  0012               	return	
  5621  0010B0                     __end_of_returnStop:
  5622                           	opt stack 0
  5623                           tosu	equ	0xFFF
  5624                           tosh	equ	0xFFE
  5625                           tosl	equ	0xFFD
  5626                           pclath	equ	0xFFA
  5627                           tblptru	equ	0xFF8
  5628                           tblptrh	equ	0xFF7
  5629                           tblptrl	equ	0xFF6
  5630                           tablat	equ	0xFF5
  5631                           prodh	equ	0xFF4
  5632                           prodl	equ	0xFF3
  5633                           intcon	equ	0xFF2
  5634                           postinc0	equ	0xFEE
  5635                           wreg	equ	0xFE8
  5636                           postdec1	equ	0xFE5
  5637                           plusw1	equ	0xFE3
  5638                           fsr1l	equ	0xFE1
  5639                           indf2	equ	0xFDF
  5640                           postinc2	equ	0xFDE
  5641                           postdec2	equ	0xFDD
  5642                           plusw2	equ	0xFDB
  5643                           fsr2h	equ	0xFDA
  5644                           fsr2l	equ	0xFD9
  5645                           status	equ	0xFD8
  5646                           
  5647 ;; *************** function _wr2RegCompleteHandler *****************
  5648 ;; Defined at:
  5649 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  5650 ;; Parameters:    Size  Location     Type
  5651 ;;  p               2   32[COMRAM] PTR void 
  5652 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  5653 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  5654 ;; Auto vars:     Size  Location     Type
  5655 ;;		None
  5656 ;; Return value:  Size  Location     Type
  5657 ;;                  1    wreg      enum E97
  5658 ;; Registers used:
  5659 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5660 ;; Tracked objects:
  5661 ;;		On entry : 0/0
  5662 ;;		On exit  : 0/0
  5663 ;;		Unchanged: 0/0
  5664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5665 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5668 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5669 ;;Total ram usage:        2 bytes
  5670 ;; Hardware stack levels used:    1
  5671 ;; Hardware stack levels required when called:    8
  5672 ;; This function calls:
  5673 ;;		_i2c_setBuffer
  5674 ;;		_i2c_setDataCompleteCallback
  5675 ;; This function is called by:
  5676 ;;		_i2c_write2ByteRegister
  5677 ;;		_do_I2C_DO_ADDRESS_NACK
  5678 ;;		_do_I2C_TX
  5679 ;;		_do_I2C_RX
  5680 ;;		_do_I2C_TX_EMPTY
  5681 ;;		i2_do_I2C_DO_ADDRESS_NACK
  5682 ;;		i2_do_I2C_TX
  5683 ;;		i2_do_I2C_RX
  5684 ;;		i2_do_I2C_TX_EMPTY
  5685 ;; This function uses a non-reentrant model
  5686 ;;
  5687                           
  5688                           	psect	text48
  5689  000C28                     __ptext48:
  5690                           	opt stack 0
  5691  000C28                     _wr2RegCompleteHandler:
  5692                           	opt stack 0
  5693                           
  5694                           ;Skip over the trampoline to the duplicate function for level 2
  5695  000C28  B247               	btfsc	btemp,1,c
  5696  000C2A  EFC1  F006         	goto	i2_wr2RegCompleteHandler
  5697  000C2E                     _wr2RegCompleteHandler$intlevel0:
  5698                           	opt stack 13
  5699                           
  5700                           ;i2c_simple_master.c: 112: i2c_setBuffer(p,2);
  5701                           
  5702                           ;incstack = 0
  5703  000C2E  C021  F016         	movff	wr2RegCompleteHandler@p,i2c_setBuffer@buffer
  5704  000C32  C022  F017         	movff	wr2RegCompleteHandler@p+1,i2c_setBuffer@buffer+1
  5705  000C36  0E00               	movlw	0
  5706  000C38  6E19               	movwf	i2c_setBuffer@bufferSize+1,c
  5707  000C3A  0E02               	movlw	2
  5708  000C3C  6E18               	movwf	i2c_setBuffer@bufferSize,c
  5709  000C3E  EC41  F007         	call	_i2c_setBuffer	;wreg free
  5710                           
  5711                           ;i2c_simple_master.c: 113: i2c_setDataCompleteCallback((0),(0));
  5712  000C42  0E00               	movlw	0
  5713  000C44  6E1C               	movwf	i2c_setDataCompleteCallback@cb,c
  5714  000C46  0E00               	movlw	0
  5715  000C48  6E1D               	movwf	i2c_setDataCompleteCallback@cb+1,c
  5716  000C4A  0E00               	movlw	0
  5717  000C4C  6E1E               	movwf	i2c_setDataCompleteCallback@cb+2,c
  5718  000C4E  0E00               	movlw	0
  5719  000C50  6E1F               	movwf	i2c_setDataCompleteCallback@p,c
  5720  000C52  0E00               	movlw	0
  5721  000C54  6E20               	movwf	i2c_setDataCompleteCallback@p+1,c
  5722  000C56  EC0A  F007         	call	_i2c_setDataCompleteCallback	;wreg free
  5723                           
  5724                           ;i2c_simple_master.c: 114: return i2c_continue;
  5725  000C5A  0E04               	movlw	4
  5726  000C5C  0012               	return	
  5727  000C5E                     __end_of_wr2RegCompleteHandler:
  5728                           	opt stack 0
  5729                           tosu	equ	0xFFF
  5730                           tosh	equ	0xFFE
  5731                           tosl	equ	0xFFD
  5732                           pclath	equ	0xFFA
  5733                           tblptru	equ	0xFF8
  5734                           tblptrh	equ	0xFF7
  5735                           tblptrl	equ	0xFF6
  5736                           tablat	equ	0xFF5
  5737                           prodh	equ	0xFF4
  5738                           prodl	equ	0xFF3
  5739                           intcon	equ	0xFF2
  5740                           postinc0	equ	0xFEE
  5741                           wreg	equ	0xFE8
  5742                           postdec1	equ	0xFE5
  5743                           plusw1	equ	0xFE3
  5744                           fsr1l	equ	0xFE1
  5745                           indf2	equ	0xFDF
  5746                           postinc2	equ	0xFDE
  5747                           postdec2	equ	0xFDD
  5748                           plusw2	equ	0xFDB
  5749                           fsr2h	equ	0xFDA
  5750                           fsr2l	equ	0xFD9
  5751                           status	equ	0xFD8
  5752                           
  5753 ;; *************** function _i2c_setDataCompleteCallback *****************
  5754 ;; Defined at:
  5755 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
  5756 ;; Parameters:    Size  Location     Type
  5757 ;;  cb              3   27[COMRAM] PTR FTN(PTR void ,)enum 
  5758 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  5759 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
  5760 ;;  p               2   30[COMRAM] PTR void 
  5761 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  5762 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  5763 ;; Auto vars:     Size  Location     Type
  5764 ;;		None
  5765 ;; Return value:  Size  Location     Type
  5766 ;;                  1    wreg      void 
  5767 ;; Registers used:
  5768 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5769 ;; Tracked objects:
  5770 ;;		On entry : 0/0
  5771 ;;		On exit  : 0/0
  5772 ;;		Unchanged: 0/0
  5773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5774 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5777 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5778 ;;Total ram usage:        5 bytes
  5779 ;; Hardware stack levels used:    1
  5780 ;; Hardware stack levels required when called:    7
  5781 ;; This function calls:
  5782 ;;		_setCallBack
  5783 ;; This function is called by:
  5784 ;;		_wr1RegCompleteHandler
  5785 ;;		_rd1RegCompleteHandler
  5786 ;;		_rd2RegCompleteHandler
  5787 ;;		_wr2RegCompleteHandler
  5788 ;;		_rdBlkRegCompleteHandler
  5789 ;;		_i2c_write1ByteRegister
  5790 ;;		_i2c_read1ByteRegister
  5791 ;;		_i2c_read2ByteRegister
  5792 ;;		_i2c_write2ByteRegister
  5793 ;;		_i2c_readDataBlock
  5794 ;; This function uses a non-reentrant model
  5795 ;;
  5796                           
  5797                           	psect	text49
  5798  000E14                     __ptext49:
  5799                           	opt stack 0
  5800  000E14                     _i2c_setDataCompleteCallback:
  5801                           	opt stack 13
  5802                           
  5803                           ;i2c_master.c: 91: setCallBack(i2c_dataComplete,cb,p);
  5804                           
  5805                           ;incstack = 0
  5806  000E14  C01C  F016         	movff	i2c_setDataCompleteCallback@cb,setCallBack@cb
  5807  000E18  C01D  F017         	movff	i2c_setDataCompleteCallback@cb+1,setCallBack@cb+1
  5808  000E1C  C01E  F018         	movff	i2c_setDataCompleteCallback@cb+2,setCallBack@cb+2
  5809  000E20  C01F  F019         	movff	i2c_setDataCompleteCallback@p,setCallBack@p
  5810  000E24  C020  F01A         	movff	i2c_setDataCompleteCallback@p+1,setCallBack@p+1
  5811  000E28  0E00               	movlw	0
  5812  000E2A  EC93  F003         	call	_setCallBack
  5813  000E2E  0012               	return		;funcret
  5814  000E30                     __end_of_i2c_setDataCompleteCallback:
  5815                           	opt stack 0
  5816                           tosu	equ	0xFFF
  5817                           tosh	equ	0xFFE
  5818                           tosl	equ	0xFFD
  5819                           pclath	equ	0xFFA
  5820                           tblptru	equ	0xFF8
  5821                           tblptrh	equ	0xFF7
  5822                           tblptrl	equ	0xFF6
  5823                           tablat	equ	0xFF5
  5824                           prodh	equ	0xFF4
  5825                           prodl	equ	0xFF3
  5826                           intcon	equ	0xFF2
  5827                           postinc0	equ	0xFEE
  5828                           wreg	equ	0xFE8
  5829                           postdec1	equ	0xFE5
  5830                           plusw1	equ	0xFE3
  5831                           fsr1l	equ	0xFE1
  5832                           indf2	equ	0xFDF
  5833                           postinc2	equ	0xFDE
  5834                           postdec2	equ	0xFDD
  5835                           plusw2	equ	0xFDB
  5836                           fsr2h	equ	0xFDA
  5837                           fsr2l	equ	0xFD9
  5838                           status	equ	0xFD8
  5839                           
  5840 ;; *************** function _setCallBack *****************
  5841 ;; Defined at:
  5842 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
  5843 ;; Parameters:    Size  Location     Type
  5844 ;;  idx             1    wreg     enum E11974
  5845 ;;  cb              3   21[COMRAM] PTR FTN(PTR void ,)enum 
  5846 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
  5847 ;;		 -> wr1RegCompleteHandler(1), i2c_restartWrite(1), Absolute function(1), 
  5848 ;;  p               2   24[COMRAM] PTR void 
  5849 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  5850 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  5851 ;; Auto vars:     Size  Location     Type
  5852 ;;  idx             1   26[COMRAM] enum E11974
  5853 ;; Return value:  Size  Location     Type
  5854 ;;                  1    wreg      void 
  5855 ;; Registers used:
  5856 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5857 ;; Tracked objects:
  5858 ;;		On entry : 0/0
  5859 ;;		On exit  : 0/0
  5860 ;;		Unchanged: 0/0
  5861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5862 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5863 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5865 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5866 ;;Total ram usage:        6 bytes
  5867 ;; Hardware stack levels used:    1
  5868 ;; Hardware stack levels required when called:    6
  5869 ;; This function calls:
  5870 ;;		Nothing
  5871 ;; This function is called by:
  5872 ;;		_i2c_setDataCompleteCallback
  5873 ;;		_i2c_setAddressNACKCallback
  5874 ;;		_i2c_setWriteCollisionCallback
  5875 ;;		_i2c_setDataNACKCallback
  5876 ;;		_i2c_setTimeOutCallback
  5877 ;; This function uses a non-reentrant model
  5878 ;;
  5879                           
  5880                           	psect	text50
  5881  000726                     __ptext50:
  5882                           	opt stack 0
  5883  000726                     _setCallBack:
  5884                           	opt stack 19
  5885                           
  5886                           ;incstack = 0
  5887                           ;setCallBack@idx stored from wreg
  5888  000726  6E1B               	movwf	setCallBack@idx,c
  5889                           
  5890                           ;i2c_master.c: 455: if(cb)
  5891  000728  5016               	movf	setCallBack@cb,w,c
  5892  00072A  1017               	iorwf	setCallBack@cb+1,w,c
  5893  00072C  1018               	iorwf	setCallBack@cb+2,w,c
  5894  00072E  B4D8               	btfsc	status,2,c
  5895  000730  D01B               	goto	l488
  5896                           
  5897                           ;i2c_master.c: 456: {
  5898                           ;i2c_master.c: 457: i2c_status.callbackTable[idx] = cb;
  5899  000732  501B               	movf	setCallBack@idx,w,c
  5900  000734  0D03               	mullw	3
  5901  000736  0E6C               	movlw	low (_i2c_status+12)
  5902  000738  24F3               	addwf	prodl,w,c
  5903  00073A  6ED9               	movwf	fsr2l,c
  5904  00073C  0E00               	movlw	high (_i2c_status+12)
  5905  00073E  20F4               	addwfc	prodh,w,c
  5906  000740  6EDA               	movwf	fsr2h,c
  5907  000742  C016  FFDE         	movff	setCallBack@cb,postinc2
  5908  000746  C017  FFDE         	movff	setCallBack@cb+1,postinc2
  5909  00074A  C018  FFDE         	movff	setCallBack@cb+2,postinc2
  5910                           
  5911                           ;i2c_master.c: 458: i2c_status.callbackPayload[idx] = p;
  5912  00074E  501B               	movf	setCallBack@idx,w,c
  5913  000750  0D02               	mullw	2
  5914  000752  0E7E               	movlw	low (_i2c_status+30)
  5915  000754  24F3               	addwf	prodl,w,c
  5916  000756  6ED9               	movwf	fsr2l,c
  5917  000758  0E00               	movlw	high (_i2c_status+30)
  5918  00075A  20F4               	addwfc	prodh,w,c
  5919  00075C  6EDA               	movwf	fsr2h,c
  5920  00075E  C019  FFDE         	movff	setCallBack@p,postinc2
  5921  000762  C01A  FFDD         	movff	setCallBack@p+1,postdec2
  5922                           
  5923                           ;i2c_master.c: 459: }
  5924  000766  0012               	return	
  5925  000768                     l488:
  5926                           
  5927                           ;i2c_master.c: 460: else
  5928                           ;i2c_master.c: 461: {
  5929                           ;i2c_master.c: 462: i2c_status.callbackTable[idx] = returnStop;
  5930  000768  501B               	movf	setCallBack@idx,w,c
  5931  00076A  0D03               	mullw	3
  5932  00076C  0E6C               	movlw	low (_i2c_status+12)
  5933  00076E  24F3               	addwf	prodl,w,c
  5934  000770  6ED9               	movwf	fsr2l,c
  5935  000772  0E00               	movlw	high (_i2c_status+12)
  5936  000774  20F4               	addwfc	prodh,w,c
  5937  000776  6EDA               	movwf	fsr2h,c
  5938  000778  0EA6               	movlw	low _returnStop
  5939  00077A  6EDE               	movwf	postinc2,c
  5940  00077C  0E10               	movlw	high _returnStop
  5941  00077E  6EDE               	movwf	postinc2,c
  5942  000780  0E00               	movlw	low (_returnStop shr (0+16))
  5943  000782  6EDE               	movwf	postinc2,c
  5944                           
  5945                           ;i2c_master.c: 463: i2c_status.callbackPayload[idx] = (0);
  5946  000784  501B               	movf	setCallBack@idx,w,c
  5947  000786  0D02               	mullw	2
  5948  000788  0E7E               	movlw	low (_i2c_status+30)
  5949  00078A  24F3               	addwf	prodl,w,c
  5950  00078C  6ED9               	movwf	fsr2l,c
  5951  00078E  0E00               	movlw	high (_i2c_status+30)
  5952  000790  20F4               	addwfc	prodh,w,c
  5953  000792  6EDA               	movwf	fsr2h,c
  5954  000794  0E00               	movlw	0
  5955  000796  6EDE               	movwf	postinc2,c
  5956  000798  0E00               	movlw	0
  5957  00079A  6EDD               	movwf	postdec2,c
  5958  00079C  0012               	return	
  5959  00079E                     __end_of_setCallBack:
  5960                           	opt stack 0
  5961                           tosu	equ	0xFFF
  5962                           tosh	equ	0xFFE
  5963                           tosl	equ	0xFFD
  5964                           pclath	equ	0xFFA
  5965                           tblptru	equ	0xFF8
  5966                           tblptrh	equ	0xFF7
  5967                           tblptrl	equ	0xFF6
  5968                           tablat	equ	0xFF5
  5969                           prodh	equ	0xFF4
  5970                           prodl	equ	0xFF3
  5971                           intcon	equ	0xFF2
  5972                           postinc0	equ	0xFEE
  5973                           wreg	equ	0xFE8
  5974                           postdec1	equ	0xFE5
  5975                           plusw1	equ	0xFE3
  5976                           fsr1l	equ	0xFE1
  5977                           indf2	equ	0xFDF
  5978                           postinc2	equ	0xFDE
  5979                           postdec2	equ	0xFDD
  5980                           plusw2	equ	0xFDB
  5981                           fsr2h	equ	0xFDA
  5982                           fsr2l	equ	0xFD9
  5983                           status	equ	0xFD8
  5984                           
  5985 ;; *************** function _i2c_setBuffer *****************
  5986 ;; Defined at:
  5987 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
  5988 ;; Parameters:    Size  Location     Type
  5989 ;;  buffer          2   21[COMRAM] PTR void 
  5990 ;;		 -> readIoExpander@rec(1), readIoExpander@data(2), i2c_readDataBlock@reg(1), i2c_readDataBlock@d(4), 
  5991 ;;		 -> i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@reg(1), i2c_read2ByteRegist
      +er@result(2), 
  5992 ;;		 -> i2c_read1ByteRegister@reg(1), i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister
      +@data(1), 
  5993 ;;		 -> NULL(0), 
  5994 ;;  bufferSize      2   23[COMRAM] unsigned int 
  5995 ;; Auto vars:     Size  Location     Type
  5996 ;;		None
  5997 ;; Return value:  Size  Location     Type
  5998 ;;                  1    wreg      void 
  5999 ;; Registers used:
  6000 ;;		wreg, status,2, status,0
  6001 ;; Tracked objects:
  6002 ;;		On entry : 0/0
  6003 ;;		On exit  : 0/0
  6004 ;;		Unchanged: 0/0
  6005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6006 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6009 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6010 ;;Total ram usage:        4 bytes
  6011 ;; Hardware stack levels used:    1
  6012 ;; Hardware stack levels required when called:    6
  6013 ;; This function calls:
  6014 ;;		Nothing
  6015 ;; This function is called by:
  6016 ;;		_wr1RegCompleteHandler
  6017 ;;		_i2c_writeNBytes
  6018 ;;		_rd1RegCompleteHandler
  6019 ;;		_rd2RegCompleteHandler
  6020 ;;		_wr2RegCompleteHandler
  6021 ;;		_rdBlkRegCompleteHandler
  6022 ;;		_i2c_readNBytes
  6023 ;;		_i2c_write1ByteRegister
  6024 ;;		_i2c_read1ByteRegister
  6025 ;;		_i2c_read2ByteRegister
  6026 ;;		_i2c_write2ByteRegister
  6027 ;;		_i2c_readDataBlock
  6028 ;; This function uses a non-reentrant model
  6029 ;;
  6030                           
  6031                           	psect	text51
  6032  000E82                     __ptext51:
  6033                           	opt stack 0
  6034  000E82                     _i2c_setBuffer:
  6035                           	opt stack 20
  6036                           
  6037                           ;i2c_master.c: 186: if(i2c_status.bufferFree)
  6038                           
  6039                           ;incstack = 0
  6040  000E82  0100               	movlb	0	; () banked
  6041  000E84  A560               	btfss	_i2c_status& (0+255),2,b
  6042  000E86  0012               	return	
  6043                           
  6044                           ; BSR set to: 0
  6045                           ;i2c_master.c: 187: {
  6046                           ;i2c_master.c: 188: i2c_status.data_ptr = buffer;
  6047  000E88  C016  F062         	movff	i2c_setBuffer@buffer,_i2c_status+2
  6048  000E8C  C017  F063         	movff	i2c_setBuffer@buffer+1,_i2c_status+3
  6049                           
  6050                           ; BSR set to: 0
  6051                           ;i2c_master.c: 189: i2c_status.data_length = bufferSize;
  6052  000E90  C018  F064         	movff	i2c_setBuffer@bufferSize,_i2c_status+4
  6053  000E94  C019  F065         	movff	i2c_setBuffer@bufferSize+1,_i2c_status+5
  6054                           
  6055                           ; BSR set to: 0
  6056                           ;i2c_master.c: 190: i2c_status.bufferFree = 0;
  6057  000E98  9560               	bcf	_i2c_status& (0+255),2,b
  6058  000E9A  0012               	return	
  6059  000E9C                     __end_of_i2c_setBuffer:
  6060                           	opt stack 0
  6061                           tosu	equ	0xFFF
  6062                           tosh	equ	0xFFE
  6063                           tosl	equ	0xFFD
  6064                           pclath	equ	0xFFA
  6065                           tblptru	equ	0xFF8
  6066                           tblptrh	equ	0xFF7
  6067                           tblptrl	equ	0xFF6
  6068                           tablat	equ	0xFF5
  6069                           prodh	equ	0xFF4
  6070                           prodl	equ	0xFF3
  6071                           intcon	equ	0xFF2
  6072                           postinc0	equ	0xFEE
  6073                           wreg	equ	0xFE8
  6074                           postdec1	equ	0xFE5
  6075                           plusw1	equ	0xFE3
  6076                           fsr1l	equ	0xFE1
  6077                           indf2	equ	0xFDF
  6078                           postinc2	equ	0xFDE
  6079                           postdec2	equ	0xFDD
  6080                           plusw2	equ	0xFDB
  6081                           fsr2h	equ	0xFDA
  6082                           fsr2l	equ	0xFD9
  6083                           status	equ	0xFD8
  6084                           
  6085 ;; *************** function _i2c1_driver_stop *****************
  6086 ;; Defined at:
  6087 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
  6088 ;; Parameters:    Size  Location     Type
  6089 ;;		None
  6090 ;; Auto vars:     Size  Location     Type
  6091 ;;		None
  6092 ;; Return value:  Size  Location     Type
  6093 ;;                  1    wreg      void 
  6094 ;; Registers used:
  6095 ;;		None
  6096 ;; Tracked objects:
  6097 ;;		On entry : 0/0
  6098 ;;		On exit  : 0/0
  6099 ;;		Unchanged: 0/0
  6100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6105 ;;Total ram usage:        0 bytes
  6106 ;; Hardware stack levels used:    1
  6107 ;; Hardware stack levels required when called:    6
  6108 ;; This function calls:
  6109 ;;		Nothing
  6110 ;; This function is called by:
  6111 ;;		_do_I2C_SEND_STOP
  6112 ;; This function uses a non-reentrant model
  6113 ;;
  6114                           
  6115                           	psect	text52
  6116  001152                     __ptext52:
  6117                           	opt stack 0
  6118  001152                     _i2c1_driver_stop:
  6119                           	opt stack 14
  6120                           
  6121                           ;i2c1_driver.c: 158: SSP1CON2bits.PEN = 1;
  6122                           
  6123                           ; BSR set to: 0
  6124                           ;incstack = 0
  6125  001152  8497               	bsf	3991,2,c	;volatile
  6126  001154  0012               	return		;funcret
  6127  001156                     __end_of_i2c1_driver_stop:
  6128                           	opt stack 0
  6129                           tosu	equ	0xFFF
  6130                           tosh	equ	0xFFE
  6131                           tosl	equ	0xFFD
  6132                           pclath	equ	0xFFA
  6133                           tblptru	equ	0xFF8
  6134                           tblptrh	equ	0xFF7
  6135                           tblptrl	equ	0xFF6
  6136                           tablat	equ	0xFF5
  6137                           prodh	equ	0xFF4
  6138                           prodl	equ	0xFF3
  6139                           intcon	equ	0xFF2
  6140                           postinc0	equ	0xFEE
  6141                           wreg	equ	0xFE8
  6142                           postdec1	equ	0xFE5
  6143                           plusw1	equ	0xFE3
  6144                           fsr1l	equ	0xFE1
  6145                           indf2	equ	0xFDF
  6146                           postinc2	equ	0xFDE
  6147                           postdec2	equ	0xFDD
  6148                           plusw2	equ	0xFDB
  6149                           fsr2h	equ	0xFDA
  6150                           fsr2l	equ	0xFD9
  6151                           status	equ	0xFD8
  6152                           
  6153 ;; *************** function _i2c1_driver_restart *****************
  6154 ;; Defined at:
  6155 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
  6156 ;; Parameters:    Size  Location     Type
  6157 ;;		None
  6158 ;; Auto vars:     Size  Location     Type
  6159 ;;		None
  6160 ;; Return value:  Size  Location     Type
  6161 ;;                  1    wreg      void 
  6162 ;; Registers used:
  6163 ;;		None
  6164 ;; Tracked objects:
  6165 ;;		On entry : 0/0
  6166 ;;		On exit  : 0/0
  6167 ;;		Unchanged: 0/0
  6168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6173 ;;Total ram usage:        0 bytes
  6174 ;; Hardware stack levels used:    1
  6175 ;; Hardware stack levels required when called:    6
  6176 ;; This function calls:
  6177 ;;		Nothing
  6178 ;; This function is called by:
  6179 ;;		_do_I2C_SEND_RESTART_READ
  6180 ;;		_do_I2C_SEND_RESTART_WRITE
  6181 ;;		_do_I2C_SEND_RESTART
  6182 ;; This function uses a non-reentrant model
  6183 ;;
  6184                           
  6185                           	psect	text53
  6186  001156                     __ptext53:
  6187                           	opt stack 0
  6188  001156                     _i2c1_driver_restart:
  6189                           	opt stack 14
  6190                           
  6191                           ;i2c1_driver.c: 153: SSP1CON2bits.RSEN = 1;
  6192                           
  6193                           ;incstack = 0
  6194  001156  8297               	bsf	3991,1,c	;volatile
  6195  001158  0012               	return		;funcret
  6196  00115A                     __end_of_i2c1_driver_restart:
  6197                           	opt stack 0
  6198                           tosu	equ	0xFFF
  6199                           tosh	equ	0xFFE
  6200                           tosl	equ	0xFFD
  6201                           pclath	equ	0xFFA
  6202                           tblptru	equ	0xFF8
  6203                           tblptrh	equ	0xFF7
  6204                           tblptrl	equ	0xFF6
  6205                           tablat	equ	0xFF5
  6206                           prodh	equ	0xFF4
  6207                           prodl	equ	0xFF3
  6208                           intcon	equ	0xFF2
  6209                           postinc0	equ	0xFEE
  6210                           wreg	equ	0xFE8
  6211                           postdec1	equ	0xFE5
  6212                           plusw1	equ	0xFE3
  6213                           fsr1l	equ	0xFE1
  6214                           indf2	equ	0xFDF
  6215                           postinc2	equ	0xFDE
  6216                           postdec2	equ	0xFDD
  6217                           plusw2	equ	0xFDB
  6218                           fsr2h	equ	0xFDA
  6219                           fsr2l	equ	0xFD9
  6220                           status	equ	0xFD8
  6221                           
  6222 ;; *************** function _i2c1_driver_sendACK *****************
  6223 ;; Defined at:
  6224 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
  6225 ;; Parameters:    Size  Location     Type
  6226 ;;		None
  6227 ;; Auto vars:     Size  Location     Type
  6228 ;;		None
  6229 ;; Return value:  Size  Location     Type
  6230 ;;                  1    wreg      void 
  6231 ;; Registers used:
  6232 ;;		None
  6233 ;; Tracked objects:
  6234 ;;		On entry : 0/0
  6235 ;;		On exit  : 0/0
  6236 ;;		Unchanged: 0/0
  6237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6242 ;;Total ram usage:        0 bytes
  6243 ;; Hardware stack levels used:    1
  6244 ;; Hardware stack levels required when called:    6
  6245 ;; This function calls:
  6246 ;;		Nothing
  6247 ;; This function is called by:
  6248 ;;		_do_I2C_DO_ACK
  6249 ;;		_do_I2C_RX
  6250 ;; This function uses a non-reentrant model
  6251 ;;
  6252                           
  6253                           	psect	text54
  6254  001114                     __ptext54:
  6255                           	opt stack 0
  6256  001114                     _i2c1_driver_sendACK:
  6257                           	opt stack 15
  6258                           
  6259                           ;i2c1_driver.c: 198: SSP1CON2bits.ACKDT = 0;
  6260                           
  6261                           ;incstack = 0
  6262  001114  9A97               	bcf	3991,5,c	;volatile
  6263                           
  6264                           ;i2c1_driver.c: 199: SSP1CON2bits.ACKEN = 1;
  6265  001116  8897               	bsf	3991,4,c	;volatile
  6266  001118  0012               	return		;funcret
  6267  00111A                     __end_of_i2c1_driver_sendACK:
  6268                           	opt stack 0
  6269                           tosu	equ	0xFFF
  6270                           tosh	equ	0xFFE
  6271                           tosl	equ	0xFFD
  6272                           pclath	equ	0xFFA
  6273                           tblptru	equ	0xFF8
  6274                           tblptrh	equ	0xFF7
  6275                           tblptrl	equ	0xFF6
  6276                           tablat	equ	0xFF5
  6277                           prodh	equ	0xFF4
  6278                           prodl	equ	0xFF3
  6279                           intcon	equ	0xFF2
  6280                           postinc0	equ	0xFEE
  6281                           wreg	equ	0xFE8
  6282                           postdec1	equ	0xFE5
  6283                           plusw1	equ	0xFE3
  6284                           fsr1l	equ	0xFE1
  6285                           indf2	equ	0xFDF
  6286                           postinc2	equ	0xFDE
  6287                           postdec2	equ	0xFDD
  6288                           plusw2	equ	0xFDB
  6289                           fsr2h	equ	0xFDA
  6290                           fsr2l	equ	0xFD9
  6291                           status	equ	0xFD8
  6292                           
  6293 ;; *************** function _i2c1_driver_start *****************
  6294 ;; Defined at:
  6295 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
  6296 ;; Parameters:    Size  Location     Type
  6297 ;;		None
  6298 ;; Auto vars:     Size  Location     Type
  6299 ;;		None
  6300 ;; Return value:  Size  Location     Type
  6301 ;;                  1    wreg      void 
  6302 ;; Registers used:
  6303 ;;		None
  6304 ;; Tracked objects:
  6305 ;;		On entry : 0/0
  6306 ;;		On exit  : 0/0
  6307 ;;		Unchanged: 0/0
  6308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6313 ;;Total ram usage:        0 bytes
  6314 ;; Hardware stack levels used:    1
  6315 ;; Hardware stack levels required when called:    6
  6316 ;; This function calls:
  6317 ;;		Nothing
  6318 ;; This function is called by:
  6319 ;;		_i2c_masterOperation
  6320 ;; This function uses a non-reentrant model
  6321 ;;
  6322                           
  6323                           	psect	text55
  6324  00115A                     __ptext55:
  6325                           	opt stack 0
  6326  00115A                     _i2c1_driver_start:
  6327                           	opt stack 18
  6328                           
  6329                           ;i2c1_driver.c: 148: SSP1CON2bits.SEN = 1;
  6330                           
  6331                           ;incstack = 0
  6332  00115A  8097               	bsf	3991,0,c	;volatile
  6333  00115C  0012               	return		;funcret
  6334  00115E                     __end_of_i2c1_driver_start:
  6335                           	opt stack 0
  6336                           tosu	equ	0xFFF
  6337                           tosh	equ	0xFFE
  6338                           tosl	equ	0xFFD
  6339                           pclath	equ	0xFFA
  6340                           tblptru	equ	0xFF8
  6341                           tblptrh	equ	0xFF7
  6342                           tblptrl	equ	0xFF6
  6343                           tablat	equ	0xFF5
  6344                           prodh	equ	0xFF4
  6345                           prodl	equ	0xFF3
  6346                           intcon	equ	0xFF2
  6347                           postinc0	equ	0xFEE
  6348                           wreg	equ	0xFE8
  6349                           postdec1	equ	0xFE5
  6350                           plusw1	equ	0xFE3
  6351                           fsr1l	equ	0xFE1
  6352                           indf2	equ	0xFDF
  6353                           postinc2	equ	0xFDE
  6354                           postdec2	equ	0xFDD
  6355                           plusw2	equ	0xFDB
  6356                           fsr2h	equ	0xFDA
  6357                           fsr2l	equ	0xFD9
  6358                           status	equ	0xFD8
  6359                           
  6360 ;; *************** function _i2c_close *****************
  6361 ;; Defined at:
  6362 ;;		line 162 in file "mcc_generated_files/drivers/i2c_master.c"
  6363 ;; Parameters:    Size  Location     Type
  6364 ;;		None
  6365 ;; Auto vars:     Size  Location     Type
  6366 ;;  ret             1   21[COMRAM] enum E11785
  6367 ;; Return value:  Size  Location     Type
  6368 ;;                  1    wreg      enum E11785
  6369 ;; Registers used:
  6370 ;;		wreg, status,2, cstack
  6371 ;; Tracked objects:
  6372 ;;		On entry : 0/0
  6373 ;;		On exit  : 0/0
  6374 ;;		Unchanged: 0/0
  6375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6377 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6379 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6380 ;;Total ram usage:        1 bytes
  6381 ;; Hardware stack levels used:    1
  6382 ;; Hardware stack levels required when called:    7
  6383 ;; This function calls:
  6384 ;;		_mssp1_clearIRQ
  6385 ;;		_mssp1_disableIRQ
  6386 ;; This function is called by:
  6387 ;;		_i2c_writeNBytes
  6388 ;;		_i2c_readNBytes
  6389 ;;		_i2c_write1ByteRegister
  6390 ;;		_i2c_read1ByteRegister
  6391 ;;		_i2c_read2ByteRegister
  6392 ;;		_i2c_write2ByteRegister
  6393 ;;		_i2c_readDataBlock
  6394 ;; This function uses a non-reentrant model
  6395 ;;
  6396                           
  6397                           	psect	text56
  6398  000DDA                     __ptext56:
  6399                           	opt stack 0
  6400  000DDA                     _i2c_close:
  6401                           	opt stack 19
  6402                           
  6403                           ;i2c_master.c: 164: i2c_error_t ret = I2C_BUSY;
  6404                           
  6405                           ;incstack = 0
  6406  000DDA  0E01               	movlw	1
  6407  000DDC  6E16               	movwf	i2c_close@ret,c
  6408                           
  6409                           ;i2c_master.c: 165: if(!i2c_status.busy)
  6410  000DDE  0100               	movlb	0	; () banked
  6411  000DE0  B160               	btfsc	_i2c_status& (0+255),0,b
  6412  000DE2  D008               	goto	l361
  6413                           
  6414                           ; BSR set to: 0
  6415                           ;i2c_master.c: 166: {
  6416                           ;i2c_master.c: 167: i2c_status.inUse = 0;
  6417  000DE4  9360               	bcf	_i2c_status& (0+255),1,b
  6418                           
  6419                           ;i2c_master.c: 169: i2c_status.address = 0xff;
  6420  000DE6  6961               	setf	(_i2c_status+1)& (0+255),b
  6421                           
  6422                           ; BSR set to: 0
  6423                           ;i2c_master.c: 170: mssp1_clearIRQ();
  6424  000DE8  EC90  F008         	call	_mssp1_clearIRQ	;wreg free
  6425                           
  6426                           ;i2c_master.c: 171: mssp1_disableIRQ();
  6427  000DEC  EC8D  F008         	call	_mssp1_disableIRQ	;wreg free
  6428                           
  6429                           ;i2c_master.c: 172: ret = i2c_status.error;
  6430  000DF0  C06B  F016         	movff	_i2c_status+11,i2c_close@ret
  6431  000DF4                     l361:
  6432                           
  6433                           ;i2c_master.c: 173: }
  6434                           ;i2c_master.c: 174: return ret;
  6435  000DF4  5016               	movf	i2c_close@ret,w,c
  6436  000DF6  0012               	return	
  6437  000DF8                     __end_of_i2c_close:
  6438                           	opt stack 0
  6439                           tosu	equ	0xFFF
  6440                           tosh	equ	0xFFE
  6441                           tosl	equ	0xFFD
  6442                           pclath	equ	0xFFA
  6443                           tblptru	equ	0xFF8
  6444                           tblptrh	equ	0xFF7
  6445                           tblptrl	equ	0xFF6
  6446                           tablat	equ	0xFF5
  6447                           prodh	equ	0xFF4
  6448                           prodl	equ	0xFF3
  6449                           intcon	equ	0xFF2
  6450                           postinc0	equ	0xFEE
  6451                           wreg	equ	0xFE8
  6452                           postdec1	equ	0xFE5
  6453                           plusw1	equ	0xFE3
  6454                           fsr1l	equ	0xFE1
  6455                           indf2	equ	0xFDF
  6456                           postinc2	equ	0xFDE
  6457                           postdec2	equ	0xFDD
  6458                           plusw2	equ	0xFDB
  6459                           fsr2h	equ	0xFDA
  6460                           fsr2l	equ	0xFD9
  6461                           status	equ	0xFD8
  6462                           
  6463 ;; *************** function _mssp1_disableIRQ *****************
  6464 ;; Defined at:
  6465 ;;		line 48 in file "mcc_generated_files/i2c1_driver.c"
  6466 ;; Parameters:    Size  Location     Type
  6467 ;;		None
  6468 ;; Auto vars:     Size  Location     Type
  6469 ;;		None
  6470 ;; Return value:  Size  Location     Type
  6471 ;;                  1    wreg      void 
  6472 ;; Registers used:
  6473 ;;		None
  6474 ;; Tracked objects:
  6475 ;;		On entry : 0/0
  6476 ;;		On exit  : 0/0
  6477 ;;		Unchanged: 0/0
  6478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6483 ;;Total ram usage:        0 bytes
  6484 ;; Hardware stack levels used:    1
  6485 ;; Hardware stack levels required when called:    6
  6486 ;; This function calls:
  6487 ;;		Nothing
  6488 ;; This function is called by:
  6489 ;;		_i2c_close
  6490 ;;		_i2c_setTimeOut
  6491 ;; This function uses a non-reentrant model
  6492 ;;
  6493                           
  6494                           	psect	text57
  6495  00111A                     __ptext57:
  6496                           	opt stack 0
  6497  00111A                     _mssp1_disableIRQ:
  6498                           	opt stack 19
  6499                           
  6500                           ;i2c1_driver.c: 50: PIE3bits.SSP1IE = 0;
  6501                           
  6502                           ;incstack = 0
  6503  00111A  010E               	movlb	14	; () banked
  6504  00111C  91C5               	bcf	197,0,b	;volatile
  6505                           
  6506                           ; BSR set to: 14
  6507  00111E  0012               	return		;funcret
  6508  001120                     __end_of_mssp1_disableIRQ:
  6509                           	opt stack 0
  6510                           tosu	equ	0xFFF
  6511                           tosh	equ	0xFFE
  6512                           tosl	equ	0xFFD
  6513                           pclath	equ	0xFFA
  6514                           tblptru	equ	0xFF8
  6515                           tblptrh	equ	0xFF7
  6516                           tblptrl	equ	0xFF6
  6517                           tablat	equ	0xFF5
  6518                           prodh	equ	0xFF4
  6519                           prodl	equ	0xFF3
  6520                           intcon	equ	0xFF2
  6521                           postinc0	equ	0xFEE
  6522                           wreg	equ	0xFE8
  6523                           postdec1	equ	0xFE5
  6524                           plusw1	equ	0xFE3
  6525                           fsr1l	equ	0xFE1
  6526                           indf2	equ	0xFDF
  6527                           postinc2	equ	0xFDE
  6528                           postdec2	equ	0xFDD
  6529                           plusw2	equ	0xFDB
  6530                           fsr2h	equ	0xFDA
  6531                           fsr2l	equ	0xFD9
  6532                           status	equ	0xFD8
  6533                           
  6534 ;; *************** function _mssp1_clearIRQ *****************
  6535 ;; Defined at:
  6536 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
  6537 ;; Parameters:    Size  Location     Type
  6538 ;;		None
  6539 ;; Auto vars:     Size  Location     Type
  6540 ;;		None
  6541 ;; Return value:  Size  Location     Type
  6542 ;;                  1    wreg      void 
  6543 ;; Registers used:
  6544 ;;		None
  6545 ;; Tracked objects:
  6546 ;;		On entry : 0/0
  6547 ;;		On exit  : 0/0
  6548 ;;		Unchanged: 0/0
  6549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6554 ;;Total ram usage:        0 bytes
  6555 ;; Hardware stack levels used:    1
  6556 ;; Hardware stack levels required when called:    6
  6557 ;; This function calls:
  6558 ;;		Nothing
  6559 ;; This function is called by:
  6560 ;;		_i2c_open
  6561 ;;		_i2c_close
  6562 ;;		_i2c_ISR
  6563 ;; This function uses a non-reentrant model
  6564 ;;
  6565                           
  6566                           	psect	text58
  6567  001120                     __ptext58:
  6568                           	opt stack 0
  6569  001120                     _mssp1_clearIRQ:
  6570                           	opt stack 19
  6571                           
  6572                           ;i2c1_driver.c: 55: PIR3bits.SSP1IF = 0;
  6573                           
  6574                           ; BSR set to: 14
  6575                           ;incstack = 0
  6576  001120  010E               	movlb	14	; () banked
  6577  001122  91CD               	bcf	205,0,b	;volatile
  6578                           
  6579                           ; BSR set to: 14
  6580  001124  0012               	return		;funcret
  6581  001126                     __end_of_mssp1_clearIRQ:
  6582                           	opt stack 0
  6583                           tosu	equ	0xFFF
  6584                           tosh	equ	0xFFE
  6585                           tosl	equ	0xFFD
  6586                           pclath	equ	0xFFA
  6587                           tblptru	equ	0xFF8
  6588                           tblptrh	equ	0xFF7
  6589                           tblptrl	equ	0xFF6
  6590                           tablat	equ	0xFF5
  6591                           prodh	equ	0xFF4
  6592                           prodl	equ	0xFF3
  6593                           intcon	equ	0xFF2
  6594                           postinc0	equ	0xFEE
  6595                           wreg	equ	0xFE8
  6596                           postdec1	equ	0xFE5
  6597                           plusw1	equ	0xFE3
  6598                           fsr1l	equ	0xFE1
  6599                           indf2	equ	0xFDF
  6600                           postinc2	equ	0xFDE
  6601                           postdec2	equ	0xFDD
  6602                           plusw2	equ	0xFDB
  6603                           fsr2h	equ	0xFDA
  6604                           fsr2l	equ	0xFD9
  6605                           status	equ	0xFD8
  6606                           
  6607 ;; *************** function _abs *****************
  6608 ;; Defined at:
  6609 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  6610 ;; Parameters:    Size  Location     Type
  6611 ;;  a               2   21[COMRAM] int 
  6612 ;; Auto vars:     Size  Location     Type
  6613 ;;		None
  6614 ;; Return value:  Size  Location     Type
  6615 ;;                  2   21[COMRAM] int 
  6616 ;; Registers used:
  6617 ;;		wreg, status,2, status,0
  6618 ;; Tracked objects:
  6619 ;;		On entry : 0/0
  6620 ;;		On exit  : 0/0
  6621 ;;		Unchanged: 0/0
  6622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6623 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6625 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6626 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6627 ;;Total ram usage:        4 bytes
  6628 ;; Hardware stack levels used:    1
  6629 ;; Hardware stack levels required when called:    6
  6630 ;; This function calls:
  6631 ;;		Nothing
  6632 ;; This function is called by:
  6633 ;;		_main
  6634 ;; This function uses a non-reentrant model
  6635 ;;
  6636                           
  6637                           	psect	text59
  6638  000DB2                     __ptext59:
  6639                           	opt stack 0
  6640  000DB2                     _abs:
  6641                           	opt stack 24
  6642                           
  6643                           ; BSR set to: 14
  6644                           ;incstack = 0
  6645  000DB2  AE17               	btfss	abs@a+1,7,c
  6646  000DB4  D00D               	goto	l758
  6647  000DB6  C016  F018         	movff	abs@a,??_abs
  6648  000DBA  C017  F019         	movff	abs@a+1,??_abs+1
  6649  000DBE  1E18               	comf	??_abs,f,c
  6650  000DC0  1E19               	comf	??_abs+1,f,c
  6651  000DC2  4A18               	infsnz	??_abs,f,c
  6652  000DC4  2A19               	incf	??_abs+1,f,c
  6653  000DC6  C018  F016         	movff	??_abs,?_abs
  6654  000DCA  C019  F017         	movff	??_abs+1,?_abs+1
  6655  000DCE  0012               	return	
  6656  000DD0                     l758:
  6657  000DD0  C016  F016         	movff	abs@a,?_abs
  6658  000DD4  C017  F017         	movff	abs@a+1,?_abs+1
  6659  000DD8  0012               	return		;funcret
  6660  000DDA                     __end_of_abs:
  6661                           	opt stack 0
  6662                           tosu	equ	0xFFF
  6663                           tosh	equ	0xFFE
  6664                           tosl	equ	0xFFD
  6665                           pclath	equ	0xFFA
  6666                           tblptru	equ	0xFF8
  6667                           tblptrh	equ	0xFF7
  6668                           tblptrl	equ	0xFF6
  6669                           tablat	equ	0xFF5
  6670                           prodh	equ	0xFF4
  6671                           prodl	equ	0xFF3
  6672                           intcon	equ	0xFF2
  6673                           postinc0	equ	0xFEE
  6674                           wreg	equ	0xFE8
  6675                           postdec1	equ	0xFE5
  6676                           plusw1	equ	0xFE3
  6677                           fsr1l	equ	0xFE1
  6678                           indf2	equ	0xFDF
  6679                           postinc2	equ	0xFDE
  6680                           postdec2	equ	0xFDD
  6681                           plusw2	equ	0xFDB
  6682                           fsr2h	equ	0xFDA
  6683                           fsr2l	equ	0xFD9
  6684                           status	equ	0xFD8
  6685                           
  6686 ;; *************** function _SYSTEM_Initialize *****************
  6687 ;; Defined at:
  6688 ;;		line 116 in file "mcc_generated_files/mcc.c"
  6689 ;; Parameters:    Size  Location     Type
  6690 ;;		None
  6691 ;; Auto vars:     Size  Location     Type
  6692 ;;		None
  6693 ;; Return value:  Size  Location     Type
  6694 ;;                  1    wreg      void 
  6695 ;; Registers used:
  6696 ;;		wreg, status,2, cstack
  6697 ;; Tracked objects:
  6698 ;;		On entry : 0/0
  6699 ;;		On exit  : 0/0
  6700 ;;		Unchanged: 0/0
  6701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6706 ;;Total ram usage:        0 bytes
  6707 ;; Hardware stack levels used:    1
  6708 ;; Hardware stack levels required when called:    7
  6709 ;; This function calls:
  6710 ;;		_EUSART2_Initialize
  6711 ;;		_INTERRUPT_Initialize
  6712 ;;		_OSCILLATOR_Initialize
  6713 ;;		_PIN_MANAGER_Initialize
  6714 ;;		_PMD_Initialize
  6715 ;; This function is called by:
  6716 ;;		_main
  6717 ;; This function uses a non-reentrant model
  6718 ;;
  6719                           
  6720                           	psect	text60
  6721  000F6A                     __ptext60:
  6722                           	opt stack 0
  6723  000F6A                     _SYSTEM_Initialize:
  6724                           	opt stack 23
  6725                           
  6726                           ;mcc.c: 118: INTERRUPT_Initialize();
  6727                           
  6728                           ;incstack = 0
  6729  000F6A  ECAF  F008         	call	_INTERRUPT_Initialize	;wreg free
  6730                           
  6731                           ;mcc.c: 119: PMD_Initialize();
  6732  000F6E  EC18  F007         	call	_PMD_Initialize	;wreg free
  6733                           
  6734                           ;mcc.c: 120: PIN_MANAGER_Initialize();
  6735  000F72  ECC5  F002         	call	_PIN_MANAGER_Initialize	;wreg free
  6736                           
  6737                           ;mcc.c: 121: OSCILLATOR_Initialize();
  6738  000F76  EC5B  F007         	call	_OSCILLATOR_Initialize	;wreg free
  6739                           
  6740                           ;mcc.c: 122: EUSART2_Initialize();
  6741  000F7A  EC67  F007         	call	_EUSART2_Initialize	;wreg free
  6742  000F7E  0012               	return		;funcret
  6743  000F80                     __end_of_SYSTEM_Initialize:
  6744                           	opt stack 0
  6745                           tosu	equ	0xFFF
  6746                           tosh	equ	0xFFE
  6747                           tosl	equ	0xFFD
  6748                           pclath	equ	0xFFA
  6749                           tblptru	equ	0xFF8
  6750                           tblptrh	equ	0xFF7
  6751                           tblptrl	equ	0xFF6
  6752                           tablat	equ	0xFF5
  6753                           prodh	equ	0xFF4
  6754                           prodl	equ	0xFF3
  6755                           intcon	equ	0xFF2
  6756                           postinc0	equ	0xFEE
  6757                           wreg	equ	0xFE8
  6758                           postdec1	equ	0xFE5
  6759                           plusw1	equ	0xFE3
  6760                           fsr1l	equ	0xFE1
  6761                           indf2	equ	0xFDF
  6762                           postinc2	equ	0xFDE
  6763                           postdec2	equ	0xFDD
  6764                           plusw2	equ	0xFDB
  6765                           fsr2h	equ	0xFDA
  6766                           fsr2l	equ	0xFD9
  6767                           status	equ	0xFD8
  6768                           
  6769 ;; *************** function _PMD_Initialize *****************
  6770 ;; Defined at:
  6771 ;;		line 139 in file "mcc_generated_files/mcc.c"
  6772 ;; Parameters:    Size  Location     Type
  6773 ;;		None
  6774 ;; Auto vars:     Size  Location     Type
  6775 ;;		None
  6776 ;; Return value:  Size  Location     Type
  6777 ;;                  1    wreg      void 
  6778 ;; Registers used:
  6779 ;;		wreg, status,2
  6780 ;; Tracked objects:
  6781 ;;		On entry : 0/0
  6782 ;;		On exit  : 0/0
  6783 ;;		Unchanged: 0/0
  6784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6789 ;;Total ram usage:        0 bytes
  6790 ;; Hardware stack levels used:    1
  6791 ;; Hardware stack levels required when called:    6
  6792 ;; This function calls:
  6793 ;;		Nothing
  6794 ;; This function is called by:
  6795 ;;		_SYSTEM_Initialize
  6796 ;; This function uses a non-reentrant model
  6797 ;;
  6798                           
  6799                           	psect	text61
  6800  000E30                     __ptext61:
  6801                           	opt stack 0
  6802  000E30                     _PMD_Initialize:
  6803                           	opt stack 23
  6804                           
  6805                           ;mcc.c: 142: PMD0 = 0x00;
  6806                           
  6807                           ;incstack = 0
  6808  000E30  0E00               	movlw	0
  6809  000E32  010E               	movlb	14	; () banked
  6810  000E34  6FE1               	movwf	225,b	;volatile
  6811                           
  6812                           ;mcc.c: 144: PMD1 = 0x00;
  6813  000E36  0E00               	movlw	0
  6814  000E38  6FE2               	movwf	226,b	;volatile
  6815                           
  6816                           ;mcc.c: 146: PMD2 = 0x00;
  6817  000E3A  0E00               	movlw	0
  6818  000E3C  6FE3               	movwf	227,b	;volatile
  6819                           
  6820                           ;mcc.c: 148: PMD3 = 0x00;
  6821  000E3E  0E00               	movlw	0
  6822  000E40  6FE4               	movwf	228,b	;volatile
  6823                           
  6824                           ;mcc.c: 150: PMD4 = 0x00;
  6825  000E42  0E00               	movlw	0
  6826  000E44  6FE5               	movwf	229,b	;volatile
  6827                           
  6828                           ;mcc.c: 152: PMD5 = 0x00;
  6829  000E46  0E00               	movlw	0
  6830  000E48  6FE6               	movwf	230,b	;volatile
  6831                           
  6832                           ; BSR set to: 14
  6833  000E4A  0012               	return		;funcret
  6834  000E4C                     __end_of_PMD_Initialize:
  6835                           	opt stack 0
  6836                           tosu	equ	0xFFF
  6837                           tosh	equ	0xFFE
  6838                           tosl	equ	0xFFD
  6839                           pclath	equ	0xFFA
  6840                           tblptru	equ	0xFF8
  6841                           tblptrh	equ	0xFF7
  6842                           tblptrl	equ	0xFF6
  6843                           tablat	equ	0xFF5
  6844                           prodh	equ	0xFF4
  6845                           prodl	equ	0xFF3
  6846                           intcon	equ	0xFF2
  6847                           postinc0	equ	0xFEE
  6848                           wreg	equ	0xFE8
  6849                           postdec1	equ	0xFE5
  6850                           plusw1	equ	0xFE3
  6851                           fsr1l	equ	0xFE1
  6852                           indf2	equ	0xFDF
  6853                           postinc2	equ	0xFDE
  6854                           postdec2	equ	0xFDD
  6855                           plusw2	equ	0xFDB
  6856                           fsr2h	equ	0xFDA
  6857                           fsr2l	equ	0xFD9
  6858                           status	equ	0xFD8
  6859                           
  6860 ;; *************** function _PIN_MANAGER_Initialize *****************
  6861 ;; Defined at:
  6862 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  6863 ;; Parameters:    Size  Location     Type
  6864 ;;		None
  6865 ;; Auto vars:     Size  Location     Type
  6866 ;;		None
  6867 ;; Return value:  Size  Location     Type
  6868 ;;                  1    wreg      void 
  6869 ;; Registers used:
  6870 ;;		wreg, status,2
  6871 ;; Tracked objects:
  6872 ;;		On entry : 0/0
  6873 ;;		On exit  : 0/0
  6874 ;;		Unchanged: 0/0
  6875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6879 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6880 ;;Total ram usage:        0 bytes
  6881 ;; Hardware stack levels used:    1
  6882 ;; Hardware stack levels required when called:    6
  6883 ;; This function calls:
  6884 ;;		Nothing
  6885 ;; This function is called by:
  6886 ;;		_SYSTEM_Initialize
  6887 ;; This function uses a non-reentrant model
  6888 ;;
  6889                           
  6890                           	psect	text62
  6891  00058A                     __ptext62:
  6892                           	opt stack 0
  6893  00058A                     _PIN_MANAGER_Initialize:
  6894                           	opt stack 23
  6895                           
  6896                           ;pin_manager.c: 57: LATE = 0x00;
  6897                           
  6898                           ; BSR set to: 14
  6899                           ;incstack = 0
  6900  00058A  0E00               	movlw	0
  6901  00058C  6E87               	movwf	3975,c	;volatile
  6902                           
  6903                           ;pin_manager.c: 58: LATD = 0x00;
  6904  00058E  0E00               	movlw	0
  6905  000590  6E86               	movwf	3974,c	;volatile
  6906                           
  6907                           ;pin_manager.c: 59: LATA = 0x0C;
  6908  000592  0E0C               	movlw	12
  6909  000594  6E83               	movwf	3971,c	;volatile
  6910                           
  6911                           ;pin_manager.c: 60: LATB = 0x00;
  6912  000596  0E00               	movlw	0
  6913  000598  6E84               	movwf	3972,c	;volatile
  6914                           
  6915                           ;pin_manager.c: 61: LATC = 0x00;
  6916  00059A  0E00               	movlw	0
  6917  00059C  6E85               	movwf	3973,c	;volatile
  6918                           
  6919                           ;pin_manager.c: 66: TRISE = 0x07;
  6920  00059E  0E07               	movlw	7
  6921  0005A0  6E8C               	movwf	3980,c	;volatile
  6922                           
  6923                           ;pin_manager.c: 67: TRISA = 0xEB;
  6924  0005A2  0EEB               	movlw	235
  6925  0005A4  6E88               	movwf	3976,c	;volatile
  6926                           
  6927                           ;pin_manager.c: 68: TRISB = 0xFF;
  6928  0005A6  6889               	setf	3977,c	;volatile
  6929                           
  6930                           ;pin_manager.c: 69: TRISC = 0xDF;
  6931  0005A8  0EDF               	movlw	223
  6932  0005AA  6E8A               	movwf	3978,c	;volatile
  6933                           
  6934                           ;pin_manager.c: 70: TRISD = 0x7F;
  6935  0005AC  0E7F               	movlw	127
  6936  0005AE  6E8B               	movwf	3979,c	;volatile
  6937                           
  6938                           ;pin_manager.c: 75: ANSELC = 0xE7;
  6939  0005B0  0EE7               	movlw	231
  6940  0005B2  010F               	movlb	15	; () banked
  6941  0005B4  6F21               	movwf	33,b	;volatile
  6942                           
  6943                           ; BSR set to: 15
  6944                           ;pin_manager.c: 76: ANSELB = 0xFF;
  6945  0005B6  6919               	setf	25,b	;volatile
  6946                           
  6947                           ;pin_manager.c: 77: ANSELD = 0xF7;
  6948  0005B8  0EF7               	movlw	247
  6949  0005BA  6F26               	movwf	38,b	;volatile
  6950                           
  6951                           ;pin_manager.c: 78: ANSELE = 0x07;
  6952  0005BC  0E07               	movlw	7
  6953  0005BE  6F2E               	movwf	46,b	;volatile
  6954                           
  6955                           ; BSR set to: 15
  6956                           ;pin_manager.c: 79: ANSELA = 0xFF;
  6957  0005C0  6911               	setf	17,b	;volatile
  6958                           
  6959                           ;pin_manager.c: 84: WPUD = 0x88;
  6960  0005C2  0E88               	movlw	136
  6961  0005C4  6F25               	movwf	37,b	;volatile
  6962                           
  6963                           ;pin_manager.c: 85: WPUE = 0x00;
  6964  0005C6  0E00               	movlw	0
  6965  0005C8  6F2D               	movwf	45,b	;volatile
  6966                           
  6967                           ;pin_manager.c: 86: WPUB = 0x02;
  6968  0005CA  0E02               	movlw	2
  6969  0005CC  6F18               	movwf	24,b	;volatile
  6970                           
  6971                           ;pin_manager.c: 87: WPUA = 0x00;
  6972  0005CE  0E00               	movlw	0
  6973  0005D0  6F10               	movwf	16,b	;volatile
  6974                           
  6975                           ;pin_manager.c: 88: WPUC = 0x18;
  6976  0005D2  0E18               	movlw	24
  6977  0005D4  6F20               	movwf	32,b	;volatile
  6978                           
  6979                           ;pin_manager.c: 93: ODCONE = 0x00;
  6980  0005D6  0E00               	movlw	0
  6981  0005D8  6F2C               	movwf	44,b	;volatile
  6982                           
  6983                           ;pin_manager.c: 94: ODCONA = 0x00;
  6984  0005DA  0E00               	movlw	0
  6985  0005DC  6F0F               	movwf	15,b	;volatile
  6986                           
  6987                           ;pin_manager.c: 95: ODCONB = 0x00;
  6988  0005DE  0E00               	movlw	0
  6989  0005E0  6F17               	movwf	23,b	;volatile
  6990                           
  6991                           ;pin_manager.c: 96: ODCONC = 0x00;
  6992  0005E2  0E00               	movlw	0
  6993  0005E4  6F1F               	movwf	31,b	;volatile
  6994                           
  6995                           ;pin_manager.c: 97: ODCOND = 0x00;
  6996  0005E6  0E00               	movlw	0
  6997  0005E8  6F24               	movwf	36,b	;volatile
  6998                           
  6999                           ;pin_manager.c: 104: RC3PPS = 0x0F;
  7000  0005EA  0E0F               	movlw	15
  7001  0005EC  010E               	movlb	14	; () banked
  7002  0005EE  6FFA               	movwf	250,b	;volatile
  7003                           
  7004                           ;pin_manager.c: 105: RC4PPS = 0x10;
  7005  0005F0  0E10               	movlw	16
  7006  0005F2  6FFB               	movwf	251,b	;volatile
  7007                           
  7008                           ; BSR set to: 14
  7009                           ;pin_manager.c: 106: SSP1CLKPPSbits.SSPCLKPPS = 0x13;
  7010  0005F4  81B7               	bsf	183,0,b	;volatile
  7011  0005F6  83B7               	bsf	183,1,b	;volatile
  7012  0005F8  95B7               	bcf	183,2,b	;volatile
  7013  0005FA  97B7               	bcf	183,3,b	;volatile
  7014  0005FC  89B7               	bsf	183,4,b	;volatile
  7015                           
  7016                           ;pin_manager.c: 107: RD7PPS = 0x0B;
  7017  0005FE  0E0B               	movlw	11
  7018  000600  010F               	movlb	15	; () banked
  7019  000602  6F06               	movwf	6,b	;volatile
  7020                           
  7021                           ; BSR set to: 15
  7022                           ;pin_manager.c: 108: RX2PPSbits.RXPPS = 0x1B;
  7023  000604  010E               	movlb	14	; () banked
  7024  000606  818D               	bsf	141,0,b	;volatile
  7025  000608  838D               	bsf	141,1,b	;volatile
  7026  00060A  958D               	bcf	141,2,b	;volatile
  7027  00060C  878D               	bsf	141,3,b	;volatile
  7028  00060E  898D               	bsf	141,4,b	;volatile
  7029                           
  7030                           ; BSR set to: 14
  7031                           ;pin_manager.c: 109: SSP1DATPPSbits.SSPDATPPS = 0x14;
  7032  000610  91B8               	bcf	184,0,b	;volatile
  7033  000612  93B8               	bcf	184,1,b	;volatile
  7034  000614  85B8               	bsf	184,2,b	;volatile
  7035  000616  97B8               	bcf	184,3,b	;volatile
  7036  000618  89B8               	bsf	184,4,b	;volatile
  7037                           
  7038                           ; BSR set to: 14
  7039  00061A  0012               	return		;funcret
  7040  00061C                     __end_of_PIN_MANAGER_Initialize:
  7041                           	opt stack 0
  7042                           tosu	equ	0xFFF
  7043                           tosh	equ	0xFFE
  7044                           tosl	equ	0xFFD
  7045                           pclath	equ	0xFFA
  7046                           tblptru	equ	0xFF8
  7047                           tblptrh	equ	0xFF7
  7048                           tblptrl	equ	0xFF6
  7049                           tablat	equ	0xFF5
  7050                           prodh	equ	0xFF4
  7051                           prodl	equ	0xFF3
  7052                           intcon	equ	0xFF2
  7053                           postinc0	equ	0xFEE
  7054                           wreg	equ	0xFE8
  7055                           postdec1	equ	0xFE5
  7056                           plusw1	equ	0xFE3
  7057                           fsr1l	equ	0xFE1
  7058                           indf2	equ	0xFDF
  7059                           postinc2	equ	0xFDE
  7060                           postdec2	equ	0xFDD
  7061                           plusw2	equ	0xFDB
  7062                           fsr2h	equ	0xFDA
  7063                           fsr2l	equ	0xFD9
  7064                           status	equ	0xFD8
  7065                           
  7066 ;; *************** function _OSCILLATOR_Initialize *****************
  7067 ;; Defined at:
  7068 ;;		line 125 in file "mcc_generated_files/mcc.c"
  7069 ;; Parameters:    Size  Location     Type
  7070 ;;		None
  7071 ;; Auto vars:     Size  Location     Type
  7072 ;;		None
  7073 ;; Return value:  Size  Location     Type
  7074 ;;                  1    wreg      void 
  7075 ;; Registers used:
  7076 ;;		wreg, status,2
  7077 ;; Tracked objects:
  7078 ;;		On entry : 0/0
  7079 ;;		On exit  : 0/0
  7080 ;;		Unchanged: 0/0
  7081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7086 ;;Total ram usage:        0 bytes
  7087 ;; Hardware stack levels used:    1
  7088 ;; Hardware stack levels required when called:    6
  7089 ;; This function calls:
  7090 ;;		Nothing
  7091 ;; This function is called by:
  7092 ;;		_SYSTEM_Initialize
  7093 ;; This function uses a non-reentrant model
  7094 ;;
  7095                           
  7096                           	psect	text63
  7097  000EB6                     __ptext63:
  7098                           	opt stack 0
  7099  000EB6                     _OSCILLATOR_Initialize:
  7100                           	opt stack 23
  7101                           
  7102                           ;mcc.c: 128: OSCCON1 = 0x62;
  7103                           
  7104                           ; BSR set to: 14
  7105                           ;incstack = 0
  7106  000EB6  0E62               	movlw	98
  7107  000EB8  010E               	movlb	14	; () banked
  7108  000EBA  6FD8               	movwf	216,b	;volatile
  7109                           
  7110                           ;mcc.c: 130: OSCCON3 = 0x00;
  7111  000EBC  0E00               	movlw	0
  7112  000EBE  6FDA               	movwf	218,b	;volatile
  7113                           
  7114                           ;mcc.c: 132: OSCEN = 0x00;
  7115  000EC0  0E00               	movlw	0
  7116  000EC2  6FDC               	movwf	220,b	;volatile
  7117                           
  7118                           ;mcc.c: 134: OSCFRQ = 0x03;
  7119  000EC4  0E03               	movlw	3
  7120  000EC6  6FDE               	movwf	222,b	;volatile
  7121                           
  7122                           ;mcc.c: 136: OSCTUNE = 0x20;
  7123  000EC8  0E20               	movlw	32
  7124  000ECA  6FDD               	movwf	221,b	;volatile
  7125                           
  7126                           ; BSR set to: 14
  7127  000ECC  0012               	return		;funcret
  7128  000ECE                     __end_of_OSCILLATOR_Initialize:
  7129                           	opt stack 0
  7130                           tosu	equ	0xFFF
  7131                           tosh	equ	0xFFE
  7132                           tosl	equ	0xFFD
  7133                           pclath	equ	0xFFA
  7134                           tblptru	equ	0xFF8
  7135                           tblptrh	equ	0xFF7
  7136                           tblptrl	equ	0xFF6
  7137                           tablat	equ	0xFF5
  7138                           prodh	equ	0xFF4
  7139                           prodl	equ	0xFF3
  7140                           intcon	equ	0xFF2
  7141                           postinc0	equ	0xFEE
  7142                           wreg	equ	0xFE8
  7143                           postdec1	equ	0xFE5
  7144                           plusw1	equ	0xFE3
  7145                           fsr1l	equ	0xFE1
  7146                           indf2	equ	0xFDF
  7147                           postinc2	equ	0xFDE
  7148                           postdec2	equ	0xFDD
  7149                           plusw2	equ	0xFDB
  7150                           fsr2h	equ	0xFDA
  7151                           fsr2l	equ	0xFD9
  7152                           status	equ	0xFD8
  7153                           
  7154 ;; *************** function _INTERRUPT_Initialize *****************
  7155 ;; Defined at:
  7156 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  7157 ;; Parameters:    Size  Location     Type
  7158 ;;		None
  7159 ;; Auto vars:     Size  Location     Type
  7160 ;;		None
  7161 ;; Return value:  Size  Location     Type
  7162 ;;                  1    wreg      void 
  7163 ;; Registers used:
  7164 ;;		None
  7165 ;; Tracked objects:
  7166 ;;		On entry : 0/0
  7167 ;;		On exit  : 0/0
  7168 ;;		Unchanged: 0/0
  7169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7174 ;;Total ram usage:        0 bytes
  7175 ;; Hardware stack levels used:    1
  7176 ;; Hardware stack levels required when called:    6
  7177 ;; This function calls:
  7178 ;;		Nothing
  7179 ;; This function is called by:
  7180 ;;		_SYSTEM_Initialize
  7181 ;; This function uses a non-reentrant model
  7182 ;;
  7183                           
  7184                           	psect	text64
  7185  00115E                     __ptext64:
  7186                           	opt stack 0
  7187  00115E                     _INTERRUPT_Initialize:
  7188                           	opt stack 23
  7189                           
  7190                           ;interrupt_manager.c: 54: INTCONbits.IPEN = 0;
  7191                           
  7192                           ; BSR set to: 14
  7193                           ;incstack = 0
  7194  00115E  9AF2               	bcf	intcon,5,c	;volatile
  7195  001160  0012               	return		;funcret
  7196  001162                     __end_of_INTERRUPT_Initialize:
  7197                           	opt stack 0
  7198                           tosu	equ	0xFFF
  7199                           tosh	equ	0xFFE
  7200                           tosl	equ	0xFFD
  7201                           pclath	equ	0xFFA
  7202                           tblptru	equ	0xFF8
  7203                           tblptrh	equ	0xFF7
  7204                           tblptrl	equ	0xFF6
  7205                           tablat	equ	0xFF5
  7206                           prodh	equ	0xFF4
  7207                           prodl	equ	0xFF3
  7208                           intcon	equ	0xFF2
  7209                           postinc0	equ	0xFEE
  7210                           wreg	equ	0xFE8
  7211                           postdec1	equ	0xFE5
  7212                           plusw1	equ	0xFE3
  7213                           fsr1l	equ	0xFE1
  7214                           indf2	equ	0xFDF
  7215                           postinc2	equ	0xFDE
  7216                           postdec2	equ	0xFDD
  7217                           plusw2	equ	0xFDB
  7218                           fsr2h	equ	0xFDA
  7219                           fsr2l	equ	0xFD9
  7220                           status	equ	0xFD8
  7221                           
  7222 ;; *************** function _EUSART2_Initialize *****************
  7223 ;; Defined at:
  7224 ;;		line 55 in file "mcc_generated_files/eusart2.c"
  7225 ;; Parameters:    Size  Location     Type
  7226 ;;		None
  7227 ;; Auto vars:     Size  Location     Type
  7228 ;;		None
  7229 ;; Return value:  Size  Location     Type
  7230 ;;                  1    wreg      void 
  7231 ;; Registers used:
  7232 ;;		wreg, status,2
  7233 ;; Tracked objects:
  7234 ;;		On entry : 0/0
  7235 ;;		On exit  : 0/0
  7236 ;;		Unchanged: 0/0
  7237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7242 ;;Total ram usage:        0 bytes
  7243 ;; Hardware stack levels used:    1
  7244 ;; Hardware stack levels required when called:    6
  7245 ;; This function calls:
  7246 ;;		Nothing
  7247 ;; This function is called by:
  7248 ;;		_SYSTEM_Initialize
  7249 ;;		_main
  7250 ;; This function uses a non-reentrant model
  7251 ;;
  7252                           
  7253                           	psect	text65
  7254  000ECE                     __ptext65:
  7255                           	opt stack 0
  7256  000ECE                     _EUSART2_Initialize:
  7257                           	opt stack 23
  7258                           
  7259                           ;eusart2.c: 60: BAUD2CON = 0x08;
  7260                           
  7261                           ;incstack = 0
  7262  000ECE  0E08               	movlw	8
  7263  000ED0  010E               	movlb	14	; () banked
  7264  000ED2  6F9F               	movwf	159,b	;volatile
  7265                           
  7266                           ;eusart2.c: 63: RC2STA = 0x90;
  7267  000ED4  0E90               	movlw	144
  7268  000ED6  6F9D               	movwf	157,b	;volatile
  7269                           
  7270                           ;eusart2.c: 66: TX2STA = 0x24;
  7271  000ED8  0E24               	movlw	36
  7272  000EDA  6F9E               	movwf	158,b	;volatile
  7273                           
  7274                           ;eusart2.c: 69: SP2BRGL = 0x33;
  7275  000EDC  0E33               	movlw	51
  7276  000EDE  6F9B               	movwf	155,b	;volatile
  7277                           
  7278                           ;eusart2.c: 72: SP2BRGH = 0x00;
  7279  000EE0  0E00               	movlw	0
  7280  000EE2  6F9C               	movwf	156,b	;volatile
  7281                           
  7282                           ; BSR set to: 14
  7283  000EE4  0012               	return		;funcret
  7284  000EE6                     __end_of_EUSART2_Initialize:
  7285                           	opt stack 0
  7286                           tosu	equ	0xFFF
  7287                           tosh	equ	0xFFE
  7288                           tosl	equ	0xFFD
  7289                           pclath	equ	0xFFA
  7290                           tblptru	equ	0xFF8
  7291                           tblptrh	equ	0xFF7
  7292                           tblptrl	equ	0xFF6
  7293                           tablat	equ	0xFF5
  7294                           prodh	equ	0xFF4
  7295                           prodl	equ	0xFF3
  7296                           intcon	equ	0xFF2
  7297                           postinc0	equ	0xFEE
  7298                           wreg	equ	0xFE8
  7299                           postdec1	equ	0xFE5
  7300                           plusw1	equ	0xFE3
  7301                           fsr1l	equ	0xFE1
  7302                           indf2	equ	0xFDF
  7303                           postinc2	equ	0xFDE
  7304                           postdec2	equ	0xFDD
  7305                           plusw2	equ	0xFDB
  7306                           fsr2h	equ	0xFDA
  7307                           fsr2l	equ	0xFD9
  7308                           status	equ	0xFD8
  7309                           
  7310 ;; *************** function _INTERRUPT_InterruptManager *****************
  7311 ;; Defined at:
  7312 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  7313 ;; Parameters:    Size  Location     Type
  7314 ;;		None
  7315 ;; Auto vars:     Size  Location     Type
  7316 ;;		None
  7317 ;; Return value:  Size  Location     Type
  7318 ;;                  1    wreg      void 
  7319 ;; Registers used:
  7320 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  7321 ;; Tracked objects:
  7322 ;;		On entry : 0/0
  7323 ;;		On exit  : 0/0
  7324 ;;		Unchanged: 0/0
  7325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7328 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7329 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7330 ;;Total ram usage:       18 bytes
  7331 ;; Hardware stack levels used:    1
  7332 ;; Hardware stack levels required when called:    5
  7333 ;; This function calls:
  7334 ;;		Absolute function
  7335 ;;		_i2c_busCollisionISR
  7336 ;;		i2_i2c_ISR
  7337 ;; This function is called by:
  7338 ;;		Interrupt level 2
  7339 ;; This function uses a non-reentrant model
  7340 ;;
  7341                           
  7342                           	psect	intcode
  7343  000008                     __pintcode:
  7344                           	opt stack 0
  7345  000008                     _INTERRUPT_InterruptManager:
  7346                           	opt stack 13
  7347                           
  7348                           ; BSR set to: 14
  7349                           ;incstack = 0
  7350  000008  8247               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7351  00000A  CFFA F004          	movff	pclath,??_INTERRUPT_InterruptManager
  7352  00000E  CFFB F005          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  7353  000012  CFE9 F006          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  7354  000016  CFEA F007          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  7355  00001A  CFE1 F008          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  7356  00001E  CFE2 F009          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  7357  000022  CFD9 F00A          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  7358  000026  CFDA F00B          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  7359  00002A  CFF3 F00C          	movff	prodl,??_INTERRUPT_InterruptManager+8
  7360  00002E  CFF4 F00D          	movff	prodh,??_INTERRUPT_InterruptManager+9
  7361  000032  CFF6 F00E          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  7362  000036  CFF7 F00F          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  7363  00003A  CFF8 F010          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  7364  00003E  CFF5 F011          	movff	tablat,??_INTERRUPT_InterruptManager+13
  7365  000042  C047  F012         	movff	btemp,??_INTERRUPT_InterruptManager+14
  7366  000046  C048  F013         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  7367  00004A  C049  F014         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  7368  00004E  C04A  F015         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  7369                           
  7370                           ;interrupt_manager.c: 60: if(INTCONbits.PEIE == 1)
  7371  000052  ACF2               	btfss	intcon,6,c	;volatile
  7372  000054  D01D               	goto	i2u208_49
  7373                           
  7374                           ;interrupt_manager.c: 61: {
  7375                           ;interrupt_manager.c: 62: if(PIE3bits.BCL1IE == 1 && PIR3bits.BCL1IF == 1)
  7376  000056  010E               	movlb	14	; () banked
  7377  000058  B3C5               	btfsc	197,1,b	;volatile
  7378                           
  7379                           ; BSR set to: 14
  7380  00005A  A3CD               	btfss	205,1,b	;volatile
  7381  00005C  D00A               	goto	i2l273
  7382                           
  7383                           ; BSR set to: 14
  7384                           ;interrupt_manager.c: 63: {
  7385                           ;interrupt_manager.c: 64: i2c1_driver_busCollisionISR();
  7386  00005E  D801               	call	i2u205_48
  7387  000060  D017               	goto	i2u208_49
  7388  000062                     i2u205_48:
  7389  000062  0005               	push	
  7390  000064  6EFA               	movwf	pclath,c
  7391  000066  5044               	movf	_i2c1_driver_busCollisionISR,w,c
  7392  000068  6EFD               	movwf	tosl,c
  7393  00006A  5045               	movf	_i2c1_driver_busCollisionISR+1,w,c
  7394  00006C  6EFE               	movwf	tosh,c
  7395  00006E  5046               	movf	_i2c1_driver_busCollisionISR+2,w,c
  7396  000070  D00C               	goto	L5
  7397  000072                     i2l273:
  7398                           
  7399                           ; BSR set to: 14
  7400                           ;interrupt_manager.c: 66: else if(PIE3bits.SSP1IE == 1 && PIR3bits.SSP1IF == 1)
  7401  000072  B1C5               	btfsc	197,0,b	;volatile
  7402                           
  7403                           ; BSR set to: 14
  7404  000074  A1CD               	btfss	205,0,b	;volatile
  7405  000076  D00C               	goto	i2u208_49
  7406                           
  7407                           ; BSR set to: 14
  7408                           ;interrupt_manager.c: 67: {
  7409                           ;interrupt_manager.c: 68: i2c1_driver_i2cISR();
  7410  000078  D801               	call	i2u208_48
  7411  00007A  D00A               	goto	i2u208_49
  7412  00007C                     i2u208_48:
  7413  00007C  0005               	push	
  7414  00007E  6EFA               	movwf	pclath,c
  7415  000080  5041               	movf	_i2c1_driver_i2cISR,w,c
  7416  000082  6EFD               	movwf	tosl,c
  7417  000084  5042               	movf	_i2c1_driver_i2cISR+1,w,c
  7418  000086  6EFE               	movwf	tosh,c
  7419  000088  5043               	movf	_i2c1_driver_i2cISR+2,w,c
  7420  00008A                     L5:
  7421  00008A  6EFF               	movwf	tosu,c
  7422  00008C  50FA               	movf	pclath,w,c
  7423  00008E  0012               	return		;indir
  7424  000090                     i2u208_49:
  7425                           
  7426                           ;interrupt_manager.c: 75: else
  7427                           ;interrupt_manager.c: 76: {
  7428                           
  7429                           ;interrupt_manager.c: 73: }
  7430                           ;interrupt_manager.c: 74: }
  7431                           
  7432                           ;interrupt_manager.c: 70: else
  7433                           ;interrupt_manager.c: 71: {
  7434                           
  7435                           ;interrupt_manager.c: 69: }
  7436  000090  C015  F04A         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  7437  000094  C014  F049         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  7438  000098  C013  F048         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  7439  00009C  C012  F047         	movff	??_INTERRUPT_InterruptManager+14,btemp
  7440  0000A0  C011  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  7441  0000A4  C010  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  7442  0000A8  C00F  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  7443  0000AC  C00E  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  7444  0000B0  C00D  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  7445  0000B4  C00C  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  7446  0000B8  C00B  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  7447  0000BC  C00A  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  7448  0000C0  C009  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  7449  0000C4  C008  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  7450  0000C8  C007  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  7451  0000CC  C006  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  7452  0000D0  C005  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  7453  0000D4  C004  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  7454  0000D8  9247               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7455  0000DA  0011               	retfie		f
  7456  0000DC                     __end_of_INTERRUPT_InterruptManager:
  7457                           	opt stack 0
  7458                           tosu	equ	0xFFF
  7459                           tosh	equ	0xFFE
  7460                           tosl	equ	0xFFD
  7461                           pclatu	equ	0xFFB
  7462                           pclath	equ	0xFFA
  7463                           tblptru	equ	0xFF8
  7464                           tblptrh	equ	0xFF7
  7465                           tblptrl	equ	0xFF6
  7466                           tablat	equ	0xFF5
  7467                           prodh	equ	0xFF4
  7468                           prodl	equ	0xFF3
  7469                           intcon	equ	0xFF2
  7470                           postinc0	equ	0xFEE
  7471                           fsr0h	equ	0xFEA
  7472                           fsr0l	equ	0xFE9
  7473                           wreg	equ	0xFE8
  7474                           postdec1	equ	0xFE5
  7475                           plusw1	equ	0xFE3
  7476                           fsr1h	equ	0xFE2
  7477                           fsr1l	equ	0xFE1
  7478                           indf2	equ	0xFDF
  7479                           postinc2	equ	0xFDE
  7480                           postdec2	equ	0xFDD
  7481                           plusw2	equ	0xFDB
  7482                           fsr2h	equ	0xFDA
  7483                           fsr2l	equ	0xFD9
  7484                           status	equ	0xFD8
  7485                           
  7486 ;; *************** function i2_i2c_ISR *****************
  7487 ;; Defined at:
  7488 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
  7489 ;; Parameters:    Size  Location     Type
  7490 ;;		None
  7491 ;; Auto vars:     Size  Location     Type
  7492 ;;		None
  7493 ;; Return value:  Size  Location     Type
  7494 ;;                  1    wreg      void 
  7495 ;; Registers used:
  7496 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  7497 ;; Tracked objects:
  7498 ;;		On entry : 0/0
  7499 ;;		On exit  : 0/0
  7500 ;;		Unchanged: 0/0
  7501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7506 ;;Total ram usage:        0 bytes
  7507 ;; Hardware stack levels used:    1
  7508 ;; Hardware stack levels required when called:    4
  7509 ;; This function calls:
  7510 ;;		i2_do_I2C_DO_ACK
  7511 ;;		i2_do_I2C_DO_ADDRESS_NACK
  7512 ;;		i2_do_I2C_DO_NACK_RESTART
  7513 ;;		i2_do_I2C_DO_NACK_STOP
  7514 ;;		i2_do_I2C_IDLE
  7515 ;;		i2_do_I2C_RCEN
  7516 ;;		i2_do_I2C_RESET
  7517 ;;		i2_do_I2C_RX
  7518 ;;		i2_do_I2C_SEND_ADR_READ
  7519 ;;		i2_do_I2C_SEND_ADR_WRITE
  7520 ;;		i2_do_I2C_SEND_RESTART
  7521 ;;		i2_do_I2C_SEND_RESTART_READ
  7522 ;;		i2_do_I2C_SEND_RESTART_WRITE
  7523 ;;		i2_do_I2C_SEND_STOP
  7524 ;;		i2_do_I2C_TX
  7525 ;;		i2_do_I2C_TX_EMPTY
  7526 ;;		i2_i2c1_driver_isNACK
  7527 ;;		i2_mssp1_clearIRQ
  7528 ;; This function is called by:
  7529 ;; This function uses a non-reentrant model
  7530 ;;
  7531                           
  7532                           	psect	text67
  7533  000A70                     __ptext67:
  7534                           	opt stack 0
  7535  000A70                     i2_i2c_ISR:
  7536                           	opt stack 13
  7537                           
  7538                           ;i2c_master.c: 421: mssp1_clearIRQ();
  7539                           
  7540                           ;incstack = 0
  7541  000A70  EC93  F008         	call	i2_mssp1_clearIRQ	;wreg free
  7542                           
  7543                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c1_driver_isNACK())
  7544  000A74  0100               	movlb	0	; () banked
  7545  000A76  A760               	btfss	_i2c_status& (0+255),3,b
  7546  000A78  D007               	goto	i2l475
  7547                           
  7548                           ; BSR set to: 0
  7549  000A7A  ECC0  F007         	call	i2_i2c1_driver_isNACK	;wreg free
  7550  000A7E  A0D8               	btfss	status,0,c
  7551  000A80  D003               	goto	i2l475
  7552                           
  7553                           ;i2c_master.c: 428: {
  7554                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
  7555  000A82  0E0F               	movlw	15
  7556  000A84  0100               	movlb	0	; () banked
  7557  000A86  6F6A               	movwf	(_i2c_status+10)& (0+255),b
  7558  000A88                     i2l475:
  7559                           
  7560                           ;i2c_master.c: 430: }
  7561                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
  7562                           
  7563                           ; BSR set to: 0
  7564  000A88  0100               	movlb	0	; () banked
  7565  000A8A  516A               	movf	(_i2c_status+10)& (0+255),w,b
  7566  000A8C  0D03               	mullw	3
  7567  000A8E  0E92               	movlw	low _fsmStateTable
  7568  000A90  24F3               	addwf	prodl,w,c
  7569  000A92  6ED9               	movwf	fsr2l,c
  7570  000A94  0E00               	movlw	high _fsmStateTable
  7571  000A96  20F4               	addwfc	prodh,w,c
  7572  000A98  6EDA               	movwf	fsr2h,c
  7573  000A9A  D801               	call	i2u201_48
  7574  000A9C  D00A               	goto	i2u201_49
  7575  000A9E                     i2u201_48:
  7576  000A9E  0005               	push	
  7577  000AA0  6EFA               	movwf	pclath,c
  7578  000AA2  50DE               	movf	postinc2,w,c
  7579  000AA4  6EFD               	movwf	tosl,c
  7580  000AA6  50DE               	movf	postinc2,w,c
  7581  000AA8  6EFE               	movwf	tosh,c
  7582  000AAA  50DE               	movf	postinc2,w,c
  7583  000AAC  6EFF               	movwf	tosu,c
  7584  000AAE  50FA               	movf	pclath,w,c
  7585  000AB0  0012               	return		;indir
  7586  000AB2                     i2u201_49:
  7587  000AB2  0100               	movlb	0	; () banked
  7588  000AB4  6F6A               	movwf	(_i2c_status+10)& (0+255),b
  7589                           
  7590                           ; BSR set to: 0
  7591  000AB6  0012               	return		;funcret
  7592  000AB8                     __end_ofi2_i2c_ISR:
  7593                           	opt stack 0
  7594                           tosu	equ	0xFFF
  7595                           tosh	equ	0xFFE
  7596                           tosl	equ	0xFFD
  7597                           pclatu	equ	0xFFB
  7598                           pclath	equ	0xFFA
  7599                           tblptru	equ	0xFF8
  7600                           tblptrh	equ	0xFF7
  7601                           tblptrl	equ	0xFF6
  7602                           tablat	equ	0xFF5
  7603                           prodh	equ	0xFF4
  7604                           prodl	equ	0xFF3
  7605                           intcon	equ	0xFF2
  7606                           postinc0	equ	0xFEE
  7607                           fsr0h	equ	0xFEA
  7608                           fsr0l	equ	0xFE9
  7609                           wreg	equ	0xFE8
  7610                           postdec1	equ	0xFE5
  7611                           plusw1	equ	0xFE3
  7612                           fsr1h	equ	0xFE2
  7613                           fsr1l	equ	0xFE1
  7614                           indf2	equ	0xFDF
  7615                           postinc2	equ	0xFDE
  7616                           postdec2	equ	0xFDD
  7617                           plusw2	equ	0xFDB
  7618                           fsr2h	equ	0xFDA
  7619                           fsr2l	equ	0xFD9
  7620                           status	equ	0xFD8
  7621                           
  7622 ;; *************** function i2_mssp1_clearIRQ *****************
  7623 ;; Defined at:
  7624 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
  7625 ;; Parameters:    Size  Location     Type
  7626 ;;		None
  7627 ;; Auto vars:     Size  Location     Type
  7628 ;;		None
  7629 ;; Return value:  Size  Location     Type
  7630 ;;                  1    wreg      void 
  7631 ;; Registers used:
  7632 ;;		None
  7633 ;; Tracked objects:
  7634 ;;		On entry : 0/0
  7635 ;;		On exit  : 0/0
  7636 ;;		Unchanged: 0/0
  7637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7642 ;;Total ram usage:        0 bytes
  7643 ;; Hardware stack levels used:    1
  7644 ;; This function calls:
  7645 ;;		Nothing
  7646 ;; This function is called by:
  7647 ;;		i2_i2c_ISR
  7648 ;; This function uses a non-reentrant model
  7649 ;;
  7650                           
  7651                           	psect	text68
  7652  001126                     __ptext68:
  7653                           	opt stack 0
  7654  001126                     i2_mssp1_clearIRQ:
  7655                           	opt stack 16
  7656                           
  7657                           ;i2c1_driver.c: 55: PIR3bits.SSP1IF = 0;
  7658                           
  7659                           ; BSR set to: 0
  7660                           ;incstack = 0
  7661  001126  010E               	movlb	14	; () banked
  7662  001128  91CD               	bcf	205,0,b	;volatile
  7663                           
  7664                           ; BSR set to: 14
  7665  00112A  0012               	return		;funcret
  7666  00112C                     __end_ofi2_mssp1_clearIRQ:
  7667                           	opt stack 0
  7668                           tosu	equ	0xFFF
  7669                           tosh	equ	0xFFE
  7670                           tosl	equ	0xFFD
  7671                           pclatu	equ	0xFFB
  7672                           pclath	equ	0xFFA
  7673                           tblptru	equ	0xFF8
  7674                           tblptrh	equ	0xFF7
  7675                           tblptrl	equ	0xFF6
  7676                           tablat	equ	0xFF5
  7677                           prodh	equ	0xFF4
  7678                           prodl	equ	0xFF3
  7679                           intcon	equ	0xFF2
  7680                           postinc0	equ	0xFEE
  7681                           fsr0h	equ	0xFEA
  7682                           fsr0l	equ	0xFE9
  7683                           wreg	equ	0xFE8
  7684                           postdec1	equ	0xFE5
  7685                           plusw1	equ	0xFE3
  7686                           fsr1h	equ	0xFE2
  7687                           fsr1l	equ	0xFE1
  7688                           indf2	equ	0xFDF
  7689                           postinc2	equ	0xFDE
  7690                           postdec2	equ	0xFDD
  7691                           plusw2	equ	0xFDB
  7692                           fsr2h	equ	0xFDA
  7693                           fsr2l	equ	0xFD9
  7694                           status	equ	0xFD8
  7695                           
  7696 ;; *************** function i2_do_I2C_RX *****************
  7697 ;; Defined at:
  7698 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
  7699 ;; Parameters:    Size  Location     Type
  7700 ;;		None
  7701 ;; Auto vars:     Size  Location     Type
  7702 ;;		None
  7703 ;; Return value:  Size  Location     Type
  7704 ;;                  1    wreg      enum E11956
  7705 ;; Registers used:
  7706 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  7707 ;; Tracked objects:
  7708 ;;		On entry : 0/0
  7709 ;;		On exit  : 0/0
  7710 ;;		Unchanged: 0/0
  7711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7716 ;;Total ram usage:        0 bytes
  7717 ;; Hardware stack levels used:    1
  7718 ;; Hardware stack levels required when called:    3
  7719 ;; This function calls:
  7720 ;;		Absolute function
  7721 ;;		i2_do_I2C_DO_NACK_RESTART
  7722 ;;		i2_do_I2C_DO_NACK_STOP
  7723 ;;		i2_i2c1_driver_getRXData
  7724 ;;		i2_i2c1_driver_sendACK
  7725 ;;		i2_i2c_restartWrite
  7726 ;;		i2_rd1RegCompleteHandler
  7727 ;;		i2_rd2RegCompleteHandler
  7728 ;;		i2_rdBlkRegCompleteHandler
  7729 ;;		i2_returnReset
  7730 ;;		i2_returnStop
  7731 ;;		i2_wr1RegCompleteHandler
  7732 ;;		i2_wr2RegCompleteHandler
  7733 ;; This function is called by:
  7734 ;; This function uses a non-reentrant model
  7735 ;;
  7736                           
  7737                           	psect	text69
  7738  000816                     __ptext69:
  7739                           	opt stack 0
  7740  000816                     i2_do_I2C_RX:
  7741                           	opt stack 13
  7742                           
  7743                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c1_driver_getRXData();
  7744                           
  7745                           ; BSR set to: 14
  7746                           ;incstack = 0
  7747  000816  ECB1  F008         	call	i2_i2c1_driver_getRXData	;wreg free
  7748  00081A  C062  FFD9         	movff	_i2c_status+2,fsr2l
  7749  00081E  C063  FFDA         	movff	_i2c_status+3,fsr2h
  7750  000822  6EDF               	movwf	indf2,c
  7751  000824  0100               	movlb	0	; () banked
  7752  000826  4B62               	infsnz	(_i2c_status+2)& (0+255),f,b
  7753  000828  2B63               	incf	(_i2c_status+3)& (0+255),f,b
  7754                           
  7755                           ; BSR set to: 0
  7756                           ;i2c_master.c: 360: if(--i2c_status.data_length)
  7757  00082A  0764               	decf	(_i2c_status+4)& (0+255),f,b
  7758  00082C  A0D8               	btfss	status,0,c
  7759  00082E  0765               	decf	(_i2c_status+5)& (0+255),f,b
  7760  000830  5164               	movf	(_i2c_status+4)& (0+255),w,b
  7761  000832  1165               	iorwf	(_i2c_status+5)& (0+255),w,b
  7762  000834  B4D8               	btfsc	status,2,c
  7763  000836  D004               	goto	i2l451
  7764                           
  7765                           ; BSR set to: 0
  7766                           ;i2c_master.c: 361: {
  7767                           ;i2c_master.c: 362: i2c1_driver_sendACK();
  7768  000838  EC9C  F008         	call	i2_i2c1_driver_sendACK	;wreg free
  7769                           
  7770                           ;i2c_master.c: 363: return I2C_RCEN;
  7771  00083C  0E05               	movlw	5
  7772                           
  7773                           ;i2c_master.c: 364: }
  7774  00083E  0012               	return	
  7775  000840                     i2l451:
  7776                           
  7777                           ; BSR set to: 0
  7778                           ;i2c_master.c: 365: else
  7779                           ;i2c_master.c: 366: {
  7780                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
  7781  000840  8560               	bsf	_i2c_status& (0+255),2,b
  7782                           
  7783                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  7784  000842  D006               	goto	i2l454
  7785  000844                     
  7786                           ;i2c_master.c: 371: case i2c_restart_read:
  7787                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
  7788                           
  7789                           ; BSR set to: 0
  7790                           
  7791                           ; BSR set to: 0
  7792  000844  EC64  F008         	call	i2_do_I2C_DO_NACK_RESTART	;wreg free
  7793  000848  0012               	return	
  7794  00084A                     
  7795                           ;i2c_master.c: 375: case i2c_stop:
  7796                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
  7797                           
  7798                           ;i2c_master.c: 374: case i2c_continue:
  7799  00084A  EC68  F008         	call	i2_do_I2C_DO_NACK_STOP	;wreg free
  7800                           
  7801                           ;i2c_master.c: 377: }
  7802  00084E  0012               	return	
  7803  000850                     i2l454:
  7804  000850  C07E  F00C         	movff	_i2c_status+30,i2returnStop@p
  7805  000854  C07F  F00D         	movff	_i2c_status+31,i2returnStop@p+1
  7806  000858  EE20  F06C         	lfsr	2,_i2c_status+12
  7807  00085C  D801               	call	i2u193_48
  7808  00085E  D00A               	goto	i2u193_49
  7809  000860                     i2u193_48:
  7810  000860  0005               	push	
  7811  000862  6EFA               	movwf	pclath,c
  7812  000864  50DE               	movf	postinc2,w,c
  7813  000866  6EFD               	movwf	tosl,c
  7814  000868  50DE               	movf	postinc2,w,c
  7815  00086A  6EFE               	movwf	tosh,c
  7816  00086C  50DE               	movf	postinc2,w,c
  7817  00086E  6EFF               	movwf	tosu,c
  7818  000870  50FA               	movf	pclath,w,c
  7819  000872  0012               	return		;indir
  7820  000874                     i2u193_49:
  7821                           
  7822                           ; Switch size 1, requested type "space"
  7823                           ; Number of cases is 4, Range of values is 1 to 4
  7824                           ; switch strategies available:
  7825                           ; Name         Instructions Cycles
  7826                           ; simple_byte           13     7 (average)
  7827                           ;	Chosen strategy is simple_byte
  7828  000874  0A01               	xorlw	1	; case 1
  7829  000876  B4D8               	btfsc	status,2,c
  7830  000878  D7E8               	goto	i2l457
  7831  00087A  0A03               	xorlw	3	; case 2
  7832  00087C  B4D8               	btfsc	status,2,c
  7833  00087E  D7E2               	goto	i2l455
  7834  000880  0A01               	xorlw	1	; case 3
  7835  000882  B4D8               	btfsc	status,2,c
  7836  000884  D7DF               	goto	i2l455
  7837  000886  0A07               	xorlw	7	; case 4
  7838  000888  D7E0               	goto	i2l457
  7839  00088A                     __end_ofi2_do_I2C_RX:
  7840                           	opt stack 0
  7841                           tosu	equ	0xFFF
  7842                           tosh	equ	0xFFE
  7843                           tosl	equ	0xFFD
  7844                           pclatu	equ	0xFFB
  7845                           pclath	equ	0xFFA
  7846                           tblptru	equ	0xFF8
  7847                           tblptrh	equ	0xFF7
  7848                           tblptrl	equ	0xFF6
  7849                           tablat	equ	0xFF5
  7850                           prodh	equ	0xFF4
  7851                           prodl	equ	0xFF3
  7852                           intcon	equ	0xFF2
  7853                           postinc0	equ	0xFEE
  7854                           fsr0h	equ	0xFEA
  7855                           fsr0l	equ	0xFE9
  7856                           wreg	equ	0xFE8
  7857                           postdec1	equ	0xFE5
  7858                           plusw1	equ	0xFE3
  7859                           fsr1h	equ	0xFE2
  7860                           fsr1l	equ	0xFE1
  7861                           indf2	equ	0xFDF
  7862                           postinc2	equ	0xFDE
  7863                           postdec2	equ	0xFDD
  7864                           plusw2	equ	0xFDB
  7865                           fsr2h	equ	0xFDA
  7866                           fsr2l	equ	0xFD9
  7867                           status	equ	0xFD8
  7868                           
  7869 ;; *************** function i2_do_I2C_TX *****************
  7870 ;; Defined at:
  7871 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
  7872 ;; Parameters:    Size  Location     Type
  7873 ;;		None
  7874 ;; Auto vars:     Size  Location     Type
  7875 ;;		None
  7876 ;; Return value:  Size  Location     Type
  7877 ;;                  1    wreg      enum E11956
  7878 ;; Registers used:
  7879 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  7880 ;; Tracked objects:
  7881 ;;		On entry : 0/0
  7882 ;;		On exit  : 0/0
  7883 ;;		Unchanged: 0/0
  7884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7886 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7888 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7889 ;;Total ram usage:        2 bytes
  7890 ;; Hardware stack levels used:    1
  7891 ;; Hardware stack levels required when called:    3
  7892 ;; This function calls:
  7893 ;;		Absolute function
  7894 ;;		i2_do_I2C_SEND_RESTART_READ
  7895 ;;		i2_do_I2C_SEND_RESTART_WRITE
  7896 ;;		i2_do_I2C_SEND_STOP
  7897 ;;		i2_i2c1_driver_TXData
  7898 ;;		i2_i2c1_driver_isNACK
  7899 ;;		i2_i2c_restartWrite
  7900 ;;		i2_rd1RegCompleteHandler
  7901 ;;		i2_rd2RegCompleteHandler
  7902 ;;		i2_rdBlkRegCompleteHandler
  7903 ;;		i2_returnReset
  7904 ;;		i2_returnStop
  7905 ;;		i2_wr1RegCompleteHandler
  7906 ;;		i2_wr2RegCompleteHandler
  7907 ;; This function is called by:
  7908 ;; This function uses a non-reentrant model
  7909 ;;
  7910                           
  7911                           	psect	text70
  7912  00061C                     __ptext70:
  7913                           	opt stack 0
  7914  00061C                     i2_do_I2C_TX:
  7915                           	opt stack 13
  7916                           
  7917                           ;i2c_master.c: 335: if(i2c1_driver_isNACK())
  7918                           
  7919                           ;incstack = 0
  7920  00061C  ECC0  F007         	call	i2_i2c1_driver_isNACK	;wreg free
  7921  000620  B0D8               	btfsc	status,0,c
  7922  000622  D00A               	goto	i2l436
  7923  000624  D026               	goto	i2l435
  7924  000626                     
  7925                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
  7926  000626  EC7C  F008         	call	i2_do_I2C_SEND_RESTART_READ	;wreg free
  7927  00062A  0012               	return	
  7928  00062C                     
  7929                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
  7930  00062C  EC78  F008         	call	i2_do_I2C_SEND_RESTART_WRITE	;wreg free
  7931  000630  0012               	return	
  7932  000632                     
  7933                           ;i2c_master.c: 345: case i2c_stop:
  7934                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
  7935                           
  7936                           ;i2c_master.c: 344: case i2c_continue:
  7937  000632  EC70  F008         	call	i2_do_I2C_SEND_STOP	;wreg free
  7938                           
  7939                           ;i2c_master.c: 347: }
  7940  000636  0012               	return	
  7941  000638                     i2l436:
  7942  000638  C084  F00C         	movff	_i2c_status+36,i2returnStop@p
  7943  00063C  C085  F00D         	movff	_i2c_status+37,i2returnStop@p+1
  7944  000640  EE20  F075         	lfsr	2,_i2c_status+21
  7945  000644  D801               	call	i2u190_48
  7946  000646  D00A               	goto	i2u190_49
  7947  000648                     i2u190_48:
  7948  000648  0005               	push	
  7949  00064A  6EFA               	movwf	pclath,c
  7950  00064C  50DE               	movf	postinc2,w,c
  7951  00064E  6EFD               	movwf	tosl,c
  7952  000650  50DE               	movf	postinc2,w,c
  7953  000652  6EFE               	movwf	tosh,c
  7954  000654  50DE               	movf	postinc2,w,c
  7955  000656  6EFF               	movwf	tosu,c
  7956  000658  50FA               	movf	pclath,w,c
  7957  00065A  0012               	return		;indir
  7958  00065C                     i2u190_49:
  7959                           
  7960                           ; Switch size 1, requested type "space"
  7961                           ; Number of cases is 4, Range of values is 1 to 4
  7962                           ; switch strategies available:
  7963                           ; Name         Instructions Cycles
  7964                           ; simple_byte           13     7 (average)
  7965                           ;	Chosen strategy is simple_byte
  7966  00065C  0A01               	xorlw	1	; case 1
  7967  00065E  B4D8               	btfsc	status,2,c
  7968  000660  D7E8               	goto	i2l440
  7969  000662  0A03               	xorlw	3	; case 2
  7970  000664  B4D8               	btfsc	status,2,c
  7971  000666  D7DF               	goto	i2l437
  7972  000668  0A01               	xorlw	1	; case 3
  7973  00066A  B4D8               	btfsc	status,2,c
  7974  00066C  D7DF               	goto	i2l439
  7975  00066E  0A07               	xorlw	7	; case 4
  7976  000670  D7E0               	goto	i2l440
  7977  000672                     i2l435:
  7978                           
  7979                           ;i2c_master.c: 349: else
  7980                           ;i2c_master.c: 350: {
  7981                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
  7982  000672  0100               	movlb	0	; () banked
  7983  000674  9760               	bcf	_i2c_status& (0+255),3,b
  7984                           
  7985                           ; BSR set to: 0
  7986                           ;i2c_master.c: 352: i2c1_driver_TXData(*i2c_status.data_ptr++);
  7987  000676  C062  FFD9         	movff	_i2c_status+2,fsr2l
  7988  00067A  C063  FFDA         	movff	_i2c_status+3,fsr2h
  7989  00067E  4B62               	infsnz	(_i2c_status+2)& (0+255),f,b
  7990  000680  2B63               	incf	(_i2c_status+3)& (0+255),f,b
  7991  000682  50DF               	movf	indf2,w,c
  7992  000684  EC80  F008         	call	i2_i2c1_driver_TXData
  7993                           
  7994                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
  7995  000688  0100               	movlb	0	; () banked
  7996  00068A  0764               	decf	(_i2c_status+4)& (0+255),f,b
  7997  00068C  A0D8               	btfss	status,0,c
  7998  00068E  0765               	decf	(_i2c_status+5)& (0+255),f,b
  7999  000690  5164               	movf	(_i2c_status+4)& (0+255),w,b
  8000  000692  1165               	iorwf	(_i2c_status+5)& (0+255),w,b
  8001  000694  A4D8               	btfss	status,2,c
  8002  000696  D004               	goto	i2l446
  8003                           
  8004                           ; BSR set to: 0
  8005  000698  0E00               	movlw	0
  8006  00069A  6E03               	movwf	i2_do_I2C_TX$1036+1,c
  8007  00069C  0E06               	movlw	6
  8008  00069E  D003               	goto	L6
  8009  0006A0                     i2l446:
  8010                           
  8011                           ; BSR set to: 0
  8012                           
  8013                           ; BSR set to: 0
  8014  0006A0  0E00               	movlw	0
  8015  0006A2  6E03               	movwf	i2_do_I2C_TX$1036+1,c
  8016  0006A4  0E03               	movlw	3
  8017  0006A6                     L6:
  8018  0006A6  6E02               	movwf	i2_do_I2C_TX$1036,c
  8019                           
  8020                           ; BSR set to: 0
  8021  0006A8  5002               	movf	i2_do_I2C_TX$1036,w,c
  8022                           
  8023                           ; BSR set to: 0
  8024  0006AA  0012               	return	
  8025  0006AC                     __end_ofi2_do_I2C_TX:
  8026                           	opt stack 0
  8027                           tosu	equ	0xFFF
  8028                           tosh	equ	0xFFE
  8029                           tosl	equ	0xFFD
  8030                           pclatu	equ	0xFFB
  8031                           pclath	equ	0xFFA
  8032                           tblptru	equ	0xFF8
  8033                           tblptrh	equ	0xFF7
  8034                           tblptrl	equ	0xFF6
  8035                           tablat	equ	0xFF5
  8036                           prodh	equ	0xFF4
  8037                           prodl	equ	0xFF3
  8038                           intcon	equ	0xFF2
  8039                           postinc0	equ	0xFEE
  8040                           fsr0h	equ	0xFEA
  8041                           fsr0l	equ	0xFE9
  8042                           wreg	equ	0xFE8
  8043                           postdec1	equ	0xFE5
  8044                           plusw1	equ	0xFE3
  8045                           fsr1h	equ	0xFE2
  8046                           fsr1l	equ	0xFE1
  8047                           indf2	equ	0xFDF
  8048                           postinc2	equ	0xFDE
  8049                           postdec2	equ	0xFDD
  8050                           plusw2	equ	0xFDB
  8051                           fsr2h	equ	0xFDA
  8052                           fsr2l	equ	0xFD9
  8053                           status	equ	0xFD8
  8054                           
  8055 ;; *************** function i2_do_I2C_DO_ADDRESS_NACK *****************
  8056 ;; Defined at:
  8057 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
  8058 ;; Parameters:    Size  Location     Type
  8059 ;;		None
  8060 ;; Auto vars:     Size  Location     Type
  8061 ;;		None
  8062 ;; Return value:  Size  Location     Type
  8063 ;;                  1    wreg      enum E11956
  8064 ;; Registers used:
  8065 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  8066 ;; Tracked objects:
  8067 ;;		On entry : 0/0
  8068 ;;		On exit  : 0/0
  8069 ;;		Unchanged: 0/0
  8070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8074 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8075 ;;Total ram usage:        0 bytes
  8076 ;; Hardware stack levels used:    1
  8077 ;; Hardware stack levels required when called:    3
  8078 ;; This function calls:
  8079 ;;		Absolute function
  8080 ;;		i2_do_I2C_SEND_RESTART
  8081 ;;		i2_do_I2C_SEND_STOP
  8082 ;;		i2_i2c_restartWrite
  8083 ;;		i2_rd1RegCompleteHandler
  8084 ;;		i2_rd2RegCompleteHandler
  8085 ;;		i2_rdBlkRegCompleteHandler
  8086 ;;		i2_returnReset
  8087 ;;		i2_returnStop
  8088 ;;		i2_wr1RegCompleteHandler
  8089 ;;		i2_wr2RegCompleteHandler
  8090 ;; This function is called by:
  8091 ;; This function uses a non-reentrant model
  8092 ;;
  8093                           
  8094                           	psect	text71
  8095  000AB8                     __ptext71:
  8096                           	opt stack 0
  8097  000AB8                     i2_do_I2C_DO_ADDRESS_NACK:
  8098                           	opt stack 13
  8099                           
  8100                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
  8101                           
  8102                           ;incstack = 0
  8103  000AB8  0100               	movlb	0	; () banked
  8104  000ABA  9760               	bcf	_i2c_status& (0+255),3,b
  8105                           
  8106                           ; BSR set to: 0
  8107                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
  8108  000ABC  0E02               	movlw	2
  8109  000ABE  6F6B               	movwf	(_i2c_status+11)& (0+255),b
  8110                           
  8111                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
  8112  000AC0  D006               	goto	i2l427
  8113  000AC2                     
  8114                           ;i2c_master.c: 326: case i2c_restart_write:
  8115                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
  8116                           
  8117                           ; BSR set to: 0
  8118                           
  8119                           ; BSR set to: 0
  8120  000AC2  EC74  F008         	call	i2_do_I2C_SEND_RESTART	;wreg free
  8121  000AC6  0012               	return	
  8122  000AC8                     
  8123                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
  8124  000AC8  EC70  F008         	call	i2_do_I2C_SEND_STOP	;wreg free
  8125                           
  8126                           ;i2c_master.c: 330: }
  8127  000ACC  0012               	return	
  8128  000ACE                     i2l427:
  8129  000ACE  C082  F00C         	movff	_i2c_status+34,i2returnStop@p
  8130  000AD2  C083  F00D         	movff	_i2c_status+35,i2returnStop@p+1
  8131  000AD6  EE20  F072         	lfsr	2,_i2c_status+18
  8132  000ADA  D801               	call	i2u188_48
  8133  000ADC  D00A               	goto	i2u188_49
  8134  000ADE                     i2u188_48:
  8135  000ADE  0005               	push	
  8136  000AE0  6EFA               	movwf	pclath,c
  8137  000AE2  50DE               	movf	postinc2,w,c
  8138  000AE4  6EFD               	movwf	tosl,c
  8139  000AE6  50DE               	movf	postinc2,w,c
  8140  000AE8  6EFE               	movwf	tosh,c
  8141  000AEA  50DE               	movf	postinc2,w,c
  8142  000AEC  6EFF               	movwf	tosu,c
  8143  000AEE  50FA               	movf	pclath,w,c
  8144  000AF0  0012               	return		;indir
  8145  000AF2                     i2u188_49:
  8146                           
  8147                           ; Switch size 1, requested type "space"
  8148                           ; Number of cases is 2, Range of values is 2 to 3
  8149                           ; switch strategies available:
  8150                           ; Name         Instructions Cycles
  8151                           ; simple_byte            7     4 (average)
  8152                           ;	Chosen strategy is simple_byte
  8153  000AF2  0A02               	xorlw	2	; case 2
  8154  000AF4  B4D8               	btfsc	status,2,c
  8155  000AF6  D7E5               	goto	i2l428
  8156  000AF8  0A01               	xorlw	1	; case 3
  8157  000AFA  B4D8               	btfsc	status,2,c
  8158  000AFC  D7E2               	goto	i2l428
  8159  000AFE  D7E4               	goto	i2l431
  8160  000B00                     __end_ofi2_do_I2C_DO_ADDRESS_NACK:
  8161                           	opt stack 0
  8162                           tosu	equ	0xFFF
  8163                           tosh	equ	0xFFE
  8164                           tosl	equ	0xFFD
  8165                           pclatu	equ	0xFFB
  8166                           pclath	equ	0xFFA
  8167                           tblptru	equ	0xFF8
  8168                           tblptrh	equ	0xFF7
  8169                           tblptrl	equ	0xFF6
  8170                           tablat	equ	0xFF5
  8171                           prodh	equ	0xFF4
  8172                           prodl	equ	0xFF3
  8173                           intcon	equ	0xFF2
  8174                           postinc0	equ	0xFEE
  8175                           fsr0h	equ	0xFEA
  8176                           fsr0l	equ	0xFE9
  8177                           wreg	equ	0xFE8
  8178                           postdec1	equ	0xFE5
  8179                           plusw1	equ	0xFE3
  8180                           fsr1h	equ	0xFE2
  8181                           fsr1l	equ	0xFE1
  8182                           indf2	equ	0xFDF
  8183                           postinc2	equ	0xFDE
  8184                           postdec2	equ	0xFDD
  8185                           plusw2	equ	0xFDB
  8186                           fsr2h	equ	0xFDA
  8187                           fsr2l	equ	0xFD9
  8188                           status	equ	0xFD8
  8189                           
  8190 ;; *************** function i2_do_I2C_DO_NACK_RESTART *****************
  8191 ;; Defined at:
  8192 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
  8193 ;; Parameters:    Size  Location     Type
  8194 ;;		None
  8195 ;; Auto vars:     Size  Location     Type
  8196 ;;		None
  8197 ;; Return value:  Size  Location     Type
  8198 ;;                  1    wreg      enum E11956
  8199 ;; Registers used:
  8200 ;;		wreg, cstack
  8201 ;; Tracked objects:
  8202 ;;		On entry : 0/0
  8203 ;;		On exit  : 0/0
  8204 ;;		Unchanged: 0/0
  8205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8210 ;;Total ram usage:        0 bytes
  8211 ;; Hardware stack levels used:    1
  8212 ;; Hardware stack levels required when called:    1
  8213 ;; This function calls:
  8214 ;;		i2_i2c1_driver_sendNACK
  8215 ;; This function is called by:
  8216 ;;		i2_do_I2C_RX
  8217 ;; This function uses a non-reentrant model
  8218 ;;
  8219                           
  8220                           	psect	text72
  8221  0010C8                     __ptext72:
  8222                           	opt stack 0
  8223  0010C8                     i2_do_I2C_DO_NACK_RESTART:
  8224                           	opt stack 14
  8225                           
  8226                           ;i2c_master.c: 313: i2c1_driver_sendNACK();
  8227                           
  8228                           ;incstack = 0
  8229  0010C8  EC99  F008         	call	i2_i2c1_driver_sendNACK	;wreg free
  8230                           
  8231                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
  8232  0010CC  0E09               	movlw	9
  8233  0010CE  0012               	return	
  8234  0010D0                     __end_ofi2_do_I2C_DO_NACK_RESTART:
  8235                           	opt stack 0
  8236                           tosu	equ	0xFFF
  8237                           tosh	equ	0xFFE
  8238                           tosl	equ	0xFFD
  8239                           pclatu	equ	0xFFB
  8240                           pclath	equ	0xFFA
  8241                           tblptru	equ	0xFF8
  8242                           tblptrh	equ	0xFF7
  8243                           tblptrl	equ	0xFF6
  8244                           tablat	equ	0xFF5
  8245                           prodh	equ	0xFF4
  8246                           prodl	equ	0xFF3
  8247                           intcon	equ	0xFF2
  8248                           postinc0	equ	0xFEE
  8249                           fsr0h	equ	0xFEA
  8250                           fsr0l	equ	0xFE9
  8251                           wreg	equ	0xFE8
  8252                           postdec1	equ	0xFE5
  8253                           plusw1	equ	0xFE3
  8254                           fsr1h	equ	0xFE2
  8255                           fsr1l	equ	0xFE1
  8256                           indf2	equ	0xFDF
  8257                           postinc2	equ	0xFDE
  8258                           postdec2	equ	0xFDD
  8259                           plusw2	equ	0xFDB
  8260                           fsr2h	equ	0xFDA
  8261                           fsr2l	equ	0xFD9
  8262                           status	equ	0xFD8
  8263                           
  8264 ;; *************** function i2_do_I2C_DO_NACK_STOP *****************
  8265 ;; Defined at:
  8266 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
  8267 ;; Parameters:    Size  Location     Type
  8268 ;;		None
  8269 ;; Auto vars:     Size  Location     Type
  8270 ;;		None
  8271 ;; Return value:  Size  Location     Type
  8272 ;;                  1    wreg      enum E11956
  8273 ;; Registers used:
  8274 ;;		wreg, cstack
  8275 ;; Tracked objects:
  8276 ;;		On entry : 0/0
  8277 ;;		On exit  : 0/0
  8278 ;;		Unchanged: 0/0
  8279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8284 ;;Total ram usage:        0 bytes
  8285 ;; Hardware stack levels used:    1
  8286 ;; Hardware stack levels required when called:    1
  8287 ;; This function calls:
  8288 ;;		i2_i2c1_driver_sendNACK
  8289 ;; This function is called by:
  8290 ;;		i2_do_I2C_RX
  8291 ;; This function uses a non-reentrant model
  8292 ;;
  8293                           
  8294                           	psect	text73
  8295  0010D0                     __ptext73:
  8296                           	opt stack 0
  8297  0010D0                     i2_do_I2C_DO_NACK_STOP:
  8298                           	opt stack 14
  8299                           
  8300                           ;i2c_master.c: 307: i2c1_driver_sendNACK();
  8301                           
  8302                           ;incstack = 0
  8303  0010D0  EC99  F008         	call	i2_i2c1_driver_sendNACK	;wreg free
  8304                           
  8305                           ;i2c_master.c: 308: return I2C_SEND_STOP;
  8306  0010D4  0E0A               	movlw	10
  8307  0010D6  0012               	return	
  8308  0010D8                     __end_ofi2_do_I2C_DO_NACK_STOP:
  8309                           	opt stack 0
  8310                           tosu	equ	0xFFF
  8311                           tosh	equ	0xFFE
  8312                           tosl	equ	0xFFD
  8313                           pclatu	equ	0xFFB
  8314                           pclath	equ	0xFFA
  8315                           tblptru	equ	0xFF8
  8316                           tblptrh	equ	0xFF7
  8317                           tblptrl	equ	0xFF6
  8318                           tablat	equ	0xFF5
  8319                           prodh	equ	0xFF4
  8320                           prodl	equ	0xFF3
  8321                           intcon	equ	0xFF2
  8322                           postinc0	equ	0xFEE
  8323                           fsr0h	equ	0xFEA
  8324                           fsr0l	equ	0xFE9
  8325                           wreg	equ	0xFE8
  8326                           postdec1	equ	0xFE5
  8327                           plusw1	equ	0xFE3
  8328                           fsr1h	equ	0xFE2
  8329                           fsr1l	equ	0xFE1
  8330                           indf2	equ	0xFDF
  8331                           postinc2	equ	0xFDE
  8332                           postdec2	equ	0xFDD
  8333                           plusw2	equ	0xFDB
  8334                           fsr2h	equ	0xFDA
  8335                           fsr2l	equ	0xFD9
  8336                           status	equ	0xFD8
  8337                           
  8338 ;; *************** function i2_do_I2C_DO_ACK *****************
  8339 ;; Defined at:
  8340 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
  8341 ;; Parameters:    Size  Location     Type
  8342 ;;		None
  8343 ;; Auto vars:     Size  Location     Type
  8344 ;;		None
  8345 ;; Return value:  Size  Location     Type
  8346 ;;                  1    wreg      enum E11956
  8347 ;; Registers used:
  8348 ;;		wreg, cstack
  8349 ;; Tracked objects:
  8350 ;;		On entry : 0/0
  8351 ;;		On exit  : 0/0
  8352 ;;		Unchanged: 0/0
  8353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8358 ;;Total ram usage:        0 bytes
  8359 ;; Hardware stack levels used:    1
  8360 ;; Hardware stack levels required when called:    1
  8361 ;; This function calls:
  8362 ;;		i2_i2c1_driver_sendACK
  8363 ;; This function is called by:
  8364 ;; This function uses a non-reentrant model
  8365 ;;
  8366                           
  8367                           	psect	text74
  8368  0010D8                     __ptext74:
  8369                           	opt stack 0
  8370  0010D8                     i2_do_I2C_DO_ACK:
  8371                           	opt stack 15
  8372                           
  8373                           ;i2c_master.c: 301: i2c1_driver_sendACK();
  8374                           
  8375                           ;incstack = 0
  8376  0010D8  EC9C  F008         	call	i2_i2c1_driver_sendACK	;wreg free
  8377                           
  8378                           ;i2c_master.c: 302: return I2C_RCEN;
  8379  0010DC  0E05               	movlw	5
  8380  0010DE  0012               	return	
  8381  0010E0                     __end_ofi2_do_I2C_DO_ACK:
  8382                           	opt stack 0
  8383                           tosu	equ	0xFFF
  8384                           tosh	equ	0xFFE
  8385                           tosl	equ	0xFFD
  8386                           pclatu	equ	0xFFB
  8387                           pclath	equ	0xFFA
  8388                           tblptru	equ	0xFF8
  8389                           tblptrh	equ	0xFF7
  8390                           tblptrl	equ	0xFF6
  8391                           tablat	equ	0xFF5
  8392                           prodh	equ	0xFF4
  8393                           prodl	equ	0xFF3
  8394                           intcon	equ	0xFF2
  8395                           postinc0	equ	0xFEE
  8396                           fsr0h	equ	0xFEA
  8397                           fsr0l	equ	0xFE9
  8398                           wreg	equ	0xFE8
  8399                           postdec1	equ	0xFE5
  8400                           plusw1	equ	0xFE3
  8401                           fsr1h	equ	0xFE2
  8402                           fsr1l	equ	0xFE1
  8403                           indf2	equ	0xFDF
  8404                           postinc2	equ	0xFDE
  8405                           postdec2	equ	0xFDD
  8406                           plusw2	equ	0xFDB
  8407                           fsr2h	equ	0xFDA
  8408                           fsr2l	equ	0xFD9
  8409                           status	equ	0xFD8
  8410                           
  8411 ;; *************** function i2_do_I2C_RCEN *****************
  8412 ;; Defined at:
  8413 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
  8414 ;; Parameters:    Size  Location     Type
  8415 ;;		None
  8416 ;; Auto vars:     Size  Location     Type
  8417 ;;		None
  8418 ;; Return value:  Size  Location     Type
  8419 ;;                  1    wreg      enum E11956
  8420 ;; Registers used:
  8421 ;;		wreg, cstack
  8422 ;; Tracked objects:
  8423 ;;		On entry : 0/0
  8424 ;;		On exit  : 0/0
  8425 ;;		Unchanged: 0/0
  8426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8431 ;;Total ram usage:        0 bytes
  8432 ;; Hardware stack levels used:    1
  8433 ;; Hardware stack levels required when called:    1
  8434 ;; This function calls:
  8435 ;;		i2_i2c1_driver_startRX
  8436 ;; This function is called by:
  8437 ;; This function uses a non-reentrant model
  8438 ;;
  8439                           
  8440                           	psect	text75
  8441  00107A                     __ptext75:
  8442                           	opt stack 0
  8443  00107A                     i2_do_I2C_RCEN:
  8444                           	opt stack 15
  8445                           
  8446                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
  8447                           
  8448                           ;incstack = 0
  8449  00107A  0100               	movlb	0	; () banked
  8450  00107C  9760               	bcf	_i2c_status& (0+255),3,b
  8451                           
  8452                           ; BSR set to: 0
  8453                           ;i2c_master.c: 295: i2c1_driver_startRX();
  8454  00107E  ECB3  F008         	call	i2_i2c1_driver_startRX	;wreg free
  8455                           
  8456                           ;i2c_master.c: 296: return I2C_RX;
  8457  001082  0E04               	movlw	4
  8458  001084  0012               	return	
  8459  001086                     __end_ofi2_do_I2C_RCEN:
  8460                           	opt stack 0
  8461                           tosu	equ	0xFFF
  8462                           tosh	equ	0xFFE
  8463                           tosl	equ	0xFFD
  8464                           pclatu	equ	0xFFB
  8465                           pclath	equ	0xFFA
  8466                           tblptru	equ	0xFF8
  8467                           tblptrh	equ	0xFF7
  8468                           tblptrl	equ	0xFF6
  8469                           tablat	equ	0xFF5
  8470                           prodh	equ	0xFF4
  8471                           prodl	equ	0xFF3
  8472                           intcon	equ	0xFF2
  8473                           postinc0	equ	0xFEE
  8474                           fsr0h	equ	0xFEA
  8475                           fsr0l	equ	0xFE9
  8476                           wreg	equ	0xFE8
  8477                           postdec1	equ	0xFE5
  8478                           plusw1	equ	0xFE3
  8479                           fsr1h	equ	0xFE2
  8480                           fsr1l	equ	0xFE1
  8481                           indf2	equ	0xFDF
  8482                           postinc2	equ	0xFDE
  8483                           postdec2	equ	0xFDD
  8484                           plusw2	equ	0xFDB
  8485                           fsr2h	equ	0xFDA
  8486                           fsr2l	equ	0xFD9
  8487                           status	equ	0xFD8
  8488                           
  8489 ;; *************** function i2_do_I2C_SEND_ADR_WRITE *****************
  8490 ;; Defined at:
  8491 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
  8492 ;; Parameters:    Size  Location     Type
  8493 ;;		None
  8494 ;; Auto vars:     Size  Location     Type
  8495 ;;		None
  8496 ;; Return value:  Size  Location     Type
  8497 ;;                  1    wreg      enum E11956
  8498 ;; Registers used:
  8499 ;;		wreg, status,2, status,0, cstack
  8500 ;; Tracked objects:
  8501 ;;		On entry : 0/0
  8502 ;;		On exit  : 0/0
  8503 ;;		Unchanged: 0/0
  8504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8509 ;;Total ram usage:        0 bytes
  8510 ;; Hardware stack levels used:    1
  8511 ;; Hardware stack levels required when called:    1
  8512 ;; This function calls:
  8513 ;;		i2_i2c1_driver_TXData
  8514 ;; This function is called by:
  8515 ;; This function uses a non-reentrant model
  8516 ;;
  8517                           
  8518                           	psect	text76
  8519  000FCC                     __ptext76:
  8520                           	opt stack 0
  8521  000FCC                     i2_do_I2C_SEND_ADR_WRITE:
  8522                           	opt stack 15
  8523                           
  8524                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
  8525                           
  8526                           ;incstack = 0
  8527  000FCC  0100               	movlb	0	; () banked
  8528  000FCE  8760               	bsf	_i2c_status& (0+255),3,b
  8529                           
  8530                           ; BSR set to: 0
  8531                           ;i2c_master.c: 288: i2c1_driver_TXData(i2c_status.address << 1);
  8532  000FD0  5161               	movf	(_i2c_status+1)& (0+255),w,b
  8533  000FD2  2561               	addwf	(_i2c_status+1)& (0+255),w,b
  8534  000FD4  EC80  F008         	call	i2_i2c1_driver_TXData
  8535                           
  8536                           ;i2c_master.c: 289: return I2C_TX;
  8537  000FD8  0E03               	movlw	3
  8538  000FDA  0012               	return	
  8539  000FDC                     __end_ofi2_do_I2C_SEND_ADR_WRITE:
  8540                           	opt stack 0
  8541                           tosu	equ	0xFFF
  8542                           tosh	equ	0xFFE
  8543                           tosl	equ	0xFFD
  8544                           pclatu	equ	0xFFB
  8545                           pclath	equ	0xFFA
  8546                           tblptru	equ	0xFF8
  8547                           tblptrh	equ	0xFF7
  8548                           tblptrl	equ	0xFF6
  8549                           tablat	equ	0xFF5
  8550                           prodh	equ	0xFF4
  8551                           prodl	equ	0xFF3
  8552                           intcon	equ	0xFF2
  8553                           postinc0	equ	0xFEE
  8554                           fsr0h	equ	0xFEA
  8555                           fsr0l	equ	0xFE9
  8556                           wreg	equ	0xFE8
  8557                           postdec1	equ	0xFE5
  8558                           plusw1	equ	0xFE3
  8559                           fsr1h	equ	0xFE2
  8560                           fsr1l	equ	0xFE1
  8561                           indf2	equ	0xFDF
  8562                           postinc2	equ	0xFDE
  8563                           postdec2	equ	0xFDD
  8564                           plusw2	equ	0xFDB
  8565                           fsr2h	equ	0xFDA
  8566                           fsr2l	equ	0xFD9
  8567                           status	equ	0xFD8
  8568                           
  8569 ;; *************** function i2_do_I2C_SEND_ADR_READ *****************
  8570 ;; Defined at:
  8571 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
  8572 ;; Parameters:    Size  Location     Type
  8573 ;;		None
  8574 ;; Auto vars:     Size  Location     Type
  8575 ;;		None
  8576 ;; Return value:  Size  Location     Type
  8577 ;;                  1    wreg      enum E11956
  8578 ;; Registers used:
  8579 ;;		wreg, status,0, cstack
  8580 ;; Tracked objects:
  8581 ;;		On entry : 0/0
  8582 ;;		On exit  : 0/0
  8583 ;;		Unchanged: 0/0
  8584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8589 ;;Total ram usage:        0 bytes
  8590 ;; Hardware stack levels used:    1
  8591 ;; Hardware stack levels required when called:    1
  8592 ;; This function calls:
  8593 ;;		i2_i2c1_driver_TXData
  8594 ;; This function is called by:
  8595 ;; This function uses a non-reentrant model
  8596 ;;
  8597                           
  8598                           	psect	text77
  8599  000FDC                     __ptext77:
  8600                           	opt stack 0
  8601  000FDC                     i2_do_I2C_SEND_ADR_READ:
  8602                           	opt stack 15
  8603                           
  8604                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
  8605                           
  8606                           ;incstack = 0
  8607  000FDC  0100               	movlb	0	; () banked
  8608  000FDE  8760               	bsf	_i2c_status& (0+255),3,b
  8609                           
  8610                           ; BSR set to: 0
  8611                           ;i2c_master.c: 281: i2c1_driver_TXData(i2c_status.address << 1 | 1);
  8612  000FE0  80D8               	bsf	status,0,c
  8613  000FE2  3561               	rlcf	(_i2c_status+1)& (0+255),w,b
  8614  000FE4  EC80  F008         	call	i2_i2c1_driver_TXData
  8615                           
  8616                           ;i2c_master.c: 282: return I2C_RCEN;
  8617  000FE8  0E05               	movlw	5
  8618  000FEA  0012               	return	
  8619  000FEC                     __end_ofi2_do_I2C_SEND_ADR_READ:
  8620                           	opt stack 0
  8621                           tosu	equ	0xFFF
  8622                           tosh	equ	0xFFE
  8623                           tosl	equ	0xFFD
  8624                           pclatu	equ	0xFFB
  8625                           pclath	equ	0xFFA
  8626                           tblptru	equ	0xFF8
  8627                           tblptrh	equ	0xFF7
  8628                           tblptrl	equ	0xFF6
  8629                           tablat	equ	0xFF5
  8630                           prodh	equ	0xFF4
  8631                           prodl	equ	0xFF3
  8632                           intcon	equ	0xFF2
  8633                           postinc0	equ	0xFEE
  8634                           fsr0h	equ	0xFEA
  8635                           fsr0l	equ	0xFE9
  8636                           wreg	equ	0xFE8
  8637                           postdec1	equ	0xFE5
  8638                           plusw1	equ	0xFE3
  8639                           fsr1h	equ	0xFE2
  8640                           fsr1l	equ	0xFE1
  8641                           indf2	equ	0xFDF
  8642                           postinc2	equ	0xFDE
  8643                           postdec2	equ	0xFDD
  8644                           plusw2	equ	0xFDB
  8645                           fsr2h	equ	0xFDA
  8646                           fsr2l	equ	0xFD9
  8647                           status	equ	0xFD8
  8648                           
  8649 ;; *************** function i2_do_I2C_SEND_STOP *****************
  8650 ;; Defined at:
  8651 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
  8652 ;; Parameters:    Size  Location     Type
  8653 ;;		None
  8654 ;; Auto vars:     Size  Location     Type
  8655 ;;		None
  8656 ;; Return value:  Size  Location     Type
  8657 ;;                  1    wreg      enum E11956
  8658 ;; Registers used:
  8659 ;;		wreg, cstack
  8660 ;; Tracked objects:
  8661 ;;		On entry : 0/0
  8662 ;;		On exit  : 0/0
  8663 ;;		Unchanged: 0/0
  8664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8668 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8669 ;;Total ram usage:        0 bytes
  8670 ;; Hardware stack levels used:    1
  8671 ;; Hardware stack levels required when called:    1
  8672 ;; This function calls:
  8673 ;;		i2_i2c1_driver_stop
  8674 ;; This function is called by:
  8675 ;;		i2_do_I2C_DO_ADDRESS_NACK
  8676 ;;		i2_do_I2C_TX
  8677 ;;		i2_do_I2C_TX_EMPTY
  8678 ;; This function uses a non-reentrant model
  8679 ;;
  8680                           
  8681                           	psect	text78
  8682  0010E0                     __ptext78:
  8683                           	opt stack 0
  8684  0010E0                     i2_do_I2C_SEND_STOP:
  8685                           	opt stack 14
  8686                           
  8687                           ;i2c_master.c: 274: i2c1_driver_stop();
  8688                           
  8689                           ;incstack = 0
  8690  0010E0  ECBB  F008         	call	i2_i2c1_driver_stop	;wreg free
  8691                           
  8692                           ;i2c_master.c: 275: return I2C_IDLE;
  8693  0010E4  0E00               	movlw	0
  8694  0010E6  0012               	return	
  8695  0010E8                     __end_ofi2_do_I2C_SEND_STOP:
  8696                           	opt stack 0
  8697                           tosu	equ	0xFFF
  8698                           tosh	equ	0xFFE
  8699                           tosl	equ	0xFFD
  8700                           pclatu	equ	0xFFB
  8701                           pclath	equ	0xFFA
  8702                           tblptru	equ	0xFF8
  8703                           tblptrh	equ	0xFF7
  8704                           tblptrl	equ	0xFF6
  8705                           tablat	equ	0xFF5
  8706                           prodh	equ	0xFF4
  8707                           prodl	equ	0xFF3
  8708                           intcon	equ	0xFF2
  8709                           postinc0	equ	0xFEE
  8710                           fsr0h	equ	0xFEA
  8711                           fsr0l	equ	0xFE9
  8712                           wreg	equ	0xFE8
  8713                           postdec1	equ	0xFE5
  8714                           plusw1	equ	0xFE3
  8715                           fsr1h	equ	0xFE2
  8716                           fsr1l	equ	0xFE1
  8717                           indf2	equ	0xFDF
  8718                           postinc2	equ	0xFDE
  8719                           postdec2	equ	0xFDD
  8720                           plusw2	equ	0xFDB
  8721                           fsr2h	equ	0xFDA
  8722                           fsr2l	equ	0xFD9
  8723                           status	equ	0xFD8
  8724                           
  8725 ;; *************** function i2_do_I2C_SEND_RESTART *****************
  8726 ;; Defined at:
  8727 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
  8728 ;; Parameters:    Size  Location     Type
  8729 ;;		None
  8730 ;; Auto vars:     Size  Location     Type
  8731 ;;		None
  8732 ;; Return value:  Size  Location     Type
  8733 ;;                  1    wreg      enum E11956
  8734 ;; Registers used:
  8735 ;;		wreg, cstack
  8736 ;; Tracked objects:
  8737 ;;		On entry : 0/0
  8738 ;;		On exit  : 0/0
  8739 ;;		Unchanged: 0/0
  8740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8745 ;;Total ram usage:        0 bytes
  8746 ;; Hardware stack levels used:    1
  8747 ;; Hardware stack levels required when called:    1
  8748 ;; This function calls:
  8749 ;;		i2_i2c1_driver_restart
  8750 ;; This function is called by:
  8751 ;;		i2_do_I2C_DO_ADDRESS_NACK
  8752 ;;		i2_do_I2C_TX_EMPTY
  8753 ;; This function uses a non-reentrant model
  8754 ;;
  8755                           
  8756                           	psect	text79
  8757  0010E8                     __ptext79:
  8758                           	opt stack 0
  8759  0010E8                     i2_do_I2C_SEND_RESTART:
  8760                           	opt stack 14
  8761                           
  8762                           ;i2c_master.c: 268: i2c1_driver_restart();
  8763                           
  8764                           ;incstack = 0
  8765  0010E8  ECBD  F008         	call	i2_i2c1_driver_restart	;wreg free
  8766                           
  8767                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
  8768  0010EC  0E01               	movlw	1
  8769  0010EE  0012               	return	
  8770  0010F0                     __end_ofi2_do_I2C_SEND_RESTART:
  8771                           	opt stack 0
  8772                           tosu	equ	0xFFF
  8773                           tosh	equ	0xFFE
  8774                           tosl	equ	0xFFD
  8775                           pclatu	equ	0xFFB
  8776                           pclath	equ	0xFFA
  8777                           tblptru	equ	0xFF8
  8778                           tblptrh	equ	0xFF7
  8779                           tblptrl	equ	0xFF6
  8780                           tablat	equ	0xFF5
  8781                           prodh	equ	0xFF4
  8782                           prodl	equ	0xFF3
  8783                           intcon	equ	0xFF2
  8784                           postinc0	equ	0xFEE
  8785                           fsr0h	equ	0xFEA
  8786                           fsr0l	equ	0xFE9
  8787                           wreg	equ	0xFE8
  8788                           postdec1	equ	0xFE5
  8789                           plusw1	equ	0xFE3
  8790                           fsr1h	equ	0xFE2
  8791                           fsr1l	equ	0xFE1
  8792                           indf2	equ	0xFDF
  8793                           postinc2	equ	0xFDE
  8794                           postdec2	equ	0xFDD
  8795                           plusw2	equ	0xFDB
  8796                           fsr2h	equ	0xFDA
  8797                           fsr2l	equ	0xFD9
  8798                           status	equ	0xFD8
  8799                           
  8800 ;; *************** function i2_do_I2C_SEND_RESTART_WRITE *****************
  8801 ;; Defined at:
  8802 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
  8803 ;; Parameters:    Size  Location     Type
  8804 ;;		None
  8805 ;; Auto vars:     Size  Location     Type
  8806 ;;		None
  8807 ;; Return value:  Size  Location     Type
  8808 ;;                  1    wreg      enum E11956
  8809 ;; Registers used:
  8810 ;;		wreg, cstack
  8811 ;; Tracked objects:
  8812 ;;		On entry : 0/0
  8813 ;;		On exit  : 0/0
  8814 ;;		Unchanged: 0/0
  8815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8820 ;;Total ram usage:        0 bytes
  8821 ;; Hardware stack levels used:    1
  8822 ;; Hardware stack levels required when called:    1
  8823 ;; This function calls:
  8824 ;;		i2_i2c1_driver_restart
  8825 ;; This function is called by:
  8826 ;;		i2_do_I2C_TX
  8827 ;; This function uses a non-reentrant model
  8828 ;;
  8829                           
  8830                           	psect	text80
  8831  0010F0                     __ptext80:
  8832                           	opt stack 0
  8833  0010F0                     i2_do_I2C_SEND_RESTART_WRITE:
  8834                           	opt stack 14
  8835                           
  8836                           ;i2c_master.c: 262: i2c1_driver_restart();
  8837                           
  8838                           ;incstack = 0
  8839  0010F0  ECBD  F008         	call	i2_i2c1_driver_restart	;wreg free
  8840                           
  8841                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
  8842  0010F4  0E02               	movlw	2
  8843  0010F6  0012               	return	
  8844  0010F8                     __end_ofi2_do_I2C_SEND_RESTART_WRITE:
  8845                           	opt stack 0
  8846                           tosu	equ	0xFFF
  8847                           tosh	equ	0xFFE
  8848                           tosl	equ	0xFFD
  8849                           pclatu	equ	0xFFB
  8850                           pclath	equ	0xFFA
  8851                           tblptru	equ	0xFF8
  8852                           tblptrh	equ	0xFF7
  8853                           tblptrl	equ	0xFF6
  8854                           tablat	equ	0xFF5
  8855                           prodh	equ	0xFF4
  8856                           prodl	equ	0xFF3
  8857                           intcon	equ	0xFF2
  8858                           postinc0	equ	0xFEE
  8859                           fsr0h	equ	0xFEA
  8860                           fsr0l	equ	0xFE9
  8861                           wreg	equ	0xFE8
  8862                           postdec1	equ	0xFE5
  8863                           plusw1	equ	0xFE3
  8864                           fsr1h	equ	0xFE2
  8865                           fsr1l	equ	0xFE1
  8866                           indf2	equ	0xFDF
  8867                           postinc2	equ	0xFDE
  8868                           postdec2	equ	0xFDD
  8869                           plusw2	equ	0xFDB
  8870                           fsr2h	equ	0xFDA
  8871                           fsr2l	equ	0xFD9
  8872                           status	equ	0xFD8
  8873                           
  8874 ;; *************** function i2_do_I2C_SEND_RESTART_READ *****************
  8875 ;; Defined at:
  8876 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
  8877 ;; Parameters:    Size  Location     Type
  8878 ;;		None
  8879 ;; Auto vars:     Size  Location     Type
  8880 ;;		None
  8881 ;; Return value:  Size  Location     Type
  8882 ;;                  1    wreg      enum E11956
  8883 ;; Registers used:
  8884 ;;		wreg, cstack
  8885 ;; Tracked objects:
  8886 ;;		On entry : 0/0
  8887 ;;		On exit  : 0/0
  8888 ;;		Unchanged: 0/0
  8889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8894 ;;Total ram usage:        0 bytes
  8895 ;; Hardware stack levels used:    1
  8896 ;; Hardware stack levels required when called:    1
  8897 ;; This function calls:
  8898 ;;		i2_i2c1_driver_restart
  8899 ;; This function is called by:
  8900 ;;		i2_do_I2C_TX
  8901 ;; This function uses a non-reentrant model
  8902 ;;
  8903                           
  8904                           	psect	text81
  8905  0010F8                     __ptext81:
  8906                           	opt stack 0
  8907  0010F8                     i2_do_I2C_SEND_RESTART_READ:
  8908                           	opt stack 14
  8909                           
  8910                           ;i2c_master.c: 256: i2c1_driver_restart();
  8911                           
  8912                           ;incstack = 0
  8913  0010F8  ECBD  F008         	call	i2_i2c1_driver_restart	;wreg free
  8914                           
  8915                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
  8916  0010FC  0E01               	movlw	1
  8917  0010FE  0012               	return	
  8918  001100                     __end_ofi2_do_I2C_SEND_RESTART_READ:
  8919                           	opt stack 0
  8920                           tosu	equ	0xFFF
  8921                           tosh	equ	0xFFE
  8922                           tosl	equ	0xFFD
  8923                           pclatu	equ	0xFFB
  8924                           pclath	equ	0xFFA
  8925                           tblptru	equ	0xFF8
  8926                           tblptrh	equ	0xFF7
  8927                           tblptrl	equ	0xFF6
  8928                           tablat	equ	0xFF5
  8929                           prodh	equ	0xFF4
  8930                           prodl	equ	0xFF3
  8931                           intcon	equ	0xFF2
  8932                           postinc0	equ	0xFEE
  8933                           fsr0h	equ	0xFEA
  8934                           fsr0l	equ	0xFE9
  8935                           wreg	equ	0xFE8
  8936                           postdec1	equ	0xFE5
  8937                           plusw1	equ	0xFE3
  8938                           fsr1h	equ	0xFE2
  8939                           fsr1l	equ	0xFE1
  8940                           indf2	equ	0xFDF
  8941                           postinc2	equ	0xFDE
  8942                           postdec2	equ	0xFDD
  8943                           plusw2	equ	0xFDB
  8944                           fsr2h	equ	0xFDA
  8945                           fsr2l	equ	0xFD9
  8946                           status	equ	0xFD8
  8947                           
  8948 ;; *************** function i2_do_I2C_IDLE *****************
  8949 ;; Defined at:
  8950 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
  8951 ;; Parameters:    Size  Location     Type
  8952 ;;		None
  8953 ;; Auto vars:     Size  Location     Type
  8954 ;;		None
  8955 ;; Return value:  Size  Location     Type
  8956 ;;                  1    wreg      enum E11956
  8957 ;; Registers used:
  8958 ;;		wreg, status,2
  8959 ;; Tracked objects:
  8960 ;;		On entry : 0/0
  8961 ;;		On exit  : 0/0
  8962 ;;		Unchanged: 0/0
  8963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8968 ;;Total ram usage:        0 bytes
  8969 ;; Hardware stack levels used:    1
  8970 ;; This function calls:
  8971 ;;		Nothing
  8972 ;; This function is called by:
  8973 ;; This function uses a non-reentrant model
  8974 ;;
  8975                           
  8976                           	psect	text82
  8977  001086                     __ptext82:
  8978                           	opt stack 0
  8979  001086                     i2_do_I2C_IDLE:
  8980                           	opt stack 16
  8981                           
  8982                           ;i2c_master.c: 249: i2c_status.busy = 0;
  8983                           
  8984                           ;incstack = 0
  8985  001086  0100               	movlb	0	; () banked
  8986  001088  9160               	bcf	_i2c_status& (0+255),0,b
  8987                           
  8988                           ; BSR set to: 0
  8989                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
  8990  00108A  0E00               	movlw	0
  8991  00108C  6F6B               	movwf	(_i2c_status+11)& (0+255),b
  8992                           
  8993                           ; BSR set to: 0
  8994                           ;i2c_master.c: 251: return I2C_RESET;
  8995  00108E  0E0E               	movlw	14
  8996  001090  0012               	return	
  8997  001092                     __end_ofi2_do_I2C_IDLE:
  8998                           	opt stack 0
  8999                           tosu	equ	0xFFF
  9000                           tosh	equ	0xFFE
  9001                           tosl	equ	0xFFD
  9002                           pclatu	equ	0xFFB
  9003                           pclath	equ	0xFFA
  9004                           tblptru	equ	0xFF8
  9005                           tblptrh	equ	0xFF7
  9006                           tblptrl	equ	0xFF6
  9007                           tablat	equ	0xFF5
  9008                           prodh	equ	0xFF4
  9009                           prodl	equ	0xFF3
  9010                           intcon	equ	0xFF2
  9011                           postinc0	equ	0xFEE
  9012                           fsr0h	equ	0xFEA
  9013                           fsr0l	equ	0xFE9
  9014                           wreg	equ	0xFE8
  9015                           postdec1	equ	0xFE5
  9016                           plusw1	equ	0xFE3
  9017                           fsr1h	equ	0xFE2
  9018                           fsr1l	equ	0xFE1
  9019                           indf2	equ	0xFDF
  9020                           postinc2	equ	0xFDE
  9021                           postdec2	equ	0xFDD
  9022                           plusw2	equ	0xFDB
  9023                           fsr2h	equ	0xFDA
  9024                           fsr2l	equ	0xFD9
  9025                           status	equ	0xFD8
  9026                           
  9027 ;; *************** function i2_do_I2C_RESET *****************
  9028 ;; Defined at:
  9029 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
  9030 ;; Parameters:    Size  Location     Type
  9031 ;;		None
  9032 ;; Auto vars:     Size  Location     Type
  9033 ;;		None
  9034 ;; Return value:  Size  Location     Type
  9035 ;;                  1    wreg      enum E11956
  9036 ;; Registers used:
  9037 ;;		wreg, status,2, cstack
  9038 ;; Tracked objects:
  9039 ;;		On entry : 0/0
  9040 ;;		On exit  : 0/0
  9041 ;;		Unchanged: 0/0
  9042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9047 ;;Total ram usage:        0 bytes
  9048 ;; Hardware stack levels used:    1
  9049 ;; Hardware stack levels required when called:    1
  9050 ;; This function calls:
  9051 ;;		i2_i2c1_driver_resetBus
  9052 ;; This function is called by:
  9053 ;; This function uses a non-reentrant model
  9054 ;;
  9055                           
  9056                           	psect	text83
  9057  000FEC                     __ptext83:
  9058                           	opt stack 0
  9059  000FEC                     i2_do_I2C_RESET:
  9060                           	opt stack 15
  9061                           
  9062                           ;i2c_master.c: 241: i2c1_driver_resetBus();
  9063                           
  9064                           ; BSR set to: 0
  9065                           ;incstack = 0
  9066  000FEC  ECC0  F008         	call	i2_i2c1_driver_resetBus	;wreg free
  9067                           
  9068                           ;i2c_master.c: 242: i2c_status.busy = 0;
  9069  000FF0  0100               	movlb	0	; () banked
  9070  000FF2  9160               	bcf	_i2c_status& (0+255),0,b
  9071                           
  9072                           ; BSR set to: 0
  9073                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
  9074  000FF4  0E00               	movlw	0
  9075  000FF6  6F6B               	movwf	(_i2c_status+11)& (0+255),b
  9076                           
  9077                           ; BSR set to: 0
  9078                           ;i2c_master.c: 244: return I2C_RESET;
  9079  000FF8  0E0E               	movlw	14
  9080  000FFA  0012               	return	
  9081  000FFC                     __end_ofi2_do_I2C_RESET:
  9082                           	opt stack 0
  9083                           tosu	equ	0xFFF
  9084                           tosh	equ	0xFFE
  9085                           tosl	equ	0xFFD
  9086                           pclatu	equ	0xFFB
  9087                           pclath	equ	0xFFA
  9088                           tblptru	equ	0xFF8
  9089                           tblptrh	equ	0xFF7
  9090                           tblptrl	equ	0xFF6
  9091                           tablat	equ	0xFF5
  9092                           prodh	equ	0xFF4
  9093                           prodl	equ	0xFF3
  9094                           intcon	equ	0xFF2
  9095                           postinc0	equ	0xFEE
  9096                           fsr0h	equ	0xFEA
  9097                           fsr0l	equ	0xFE9
  9098                           wreg	equ	0xFE8
  9099                           postdec1	equ	0xFE5
  9100                           plusw1	equ	0xFE3
  9101                           fsr1h	equ	0xFE2
  9102                           fsr1l	equ	0xFE1
  9103                           indf2	equ	0xFDF
  9104                           postinc2	equ	0xFDE
  9105                           postdec2	equ	0xFDD
  9106                           plusw2	equ	0xFDB
  9107                           fsr2h	equ	0xFDA
  9108                           fsr2l	equ	0xFD9
  9109                           status	equ	0xFD8
  9110                           
  9111 ;; *************** function i2_do_I2C_TX_EMPTY *****************
  9112 ;; Defined at:
  9113 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
  9114 ;; Parameters:    Size  Location     Type
  9115 ;;		None
  9116 ;; Auto vars:     Size  Location     Type
  9117 ;;		None
  9118 ;; Return value:  Size  Location     Type
  9119 ;;                  1    wreg      enum E11956
  9120 ;; Registers used:
  9121 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  9122 ;; Tracked objects:
  9123 ;;		On entry : 0/0
  9124 ;;		On exit  : 0/0
  9125 ;;		Unchanged: 0/0
  9126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9131 ;;Total ram usage:        0 bytes
  9132 ;; Hardware stack levels used:    1
  9133 ;; Hardware stack levels required when called:    3
  9134 ;; This function calls:
  9135 ;;		Absolute function
  9136 ;;		i2_do_I2C_SEND_RESTART
  9137 ;;		i2_do_I2C_SEND_STOP
  9138 ;;		i2_i2c_restartWrite
  9139 ;;		i2_mssp1_setIRQ
  9140 ;;		i2_rd1RegCompleteHandler
  9141 ;;		i2_rd2RegCompleteHandler
  9142 ;;		i2_rdBlkRegCompleteHandler
  9143 ;;		i2_returnReset
  9144 ;;		i2_returnStop
  9145 ;;		i2_wr1RegCompleteHandler
  9146 ;;		i2_wr2RegCompleteHandler
  9147 ;; This function is called by:
  9148 ;; This function uses a non-reentrant model
  9149 ;;
  9150                           
  9151                           	psect	text84
  9152  0008E8                     __ptext84:
  9153                           	opt stack 0
  9154  0008E8                     i2_do_I2C_TX_EMPTY:
  9155                           	opt stack 13
  9156                           
  9157                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
  9158                           
  9159                           ; BSR set to: 0
  9160                           ;incstack = 0
  9161  0008E8  0100               	movlb	0	; () banked
  9162  0008EA  8560               	bsf	_i2c_status& (0+255),2,b
  9163                           
  9164                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
  9165  0008EC  D00A               	goto	i2l463
  9166  0008EE                     
  9167                           ;i2c_master.c: 388: case i2c_restart_write:
  9168                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
  9169                           
  9170                           ; BSR set to: 0
  9171                           
  9172                           ; BSR set to: 0
  9173  0008EE  EC74  F008         	call	i2_do_I2C_SEND_RESTART	;wreg free
  9174  0008F2  0012               	return	
  9175  0008F4                     
  9176                           ;i2c_master.c: 391: mssp1_setIRQ();
  9177  0008F4  EC96  F008         	call	i2_mssp1_setIRQ	;wreg free
  9178                           
  9179                           ;i2c_master.c: 392: return I2C_TX;
  9180  0008F8  0E03               	movlw	3
  9181  0008FA  0012               	return	
  9182  0008FC                     
  9183                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
  9184                           
  9185                           ;i2c_master.c: 394: case i2c_stop:
  9186  0008FC  EC70  F008         	call	i2_do_I2C_SEND_STOP	;wreg free
  9187                           
  9188                           ;i2c_master.c: 396: }
  9189  000900  0012               	return	
  9190  000902                     i2l463:
  9191  000902  C07E  F00C         	movff	_i2c_status+30,i2returnStop@p
  9192  000906  C07F  F00D         	movff	_i2c_status+31,i2returnStop@p+1
  9193  00090A  EE20  F06C         	lfsr	2,_i2c_status+12
  9194  00090E  D801               	call	i2u194_48
  9195  000910  D00A               	goto	i2u194_49
  9196  000912                     i2u194_48:
  9197  000912  0005               	push	
  9198  000914  6EFA               	movwf	pclath,c
  9199  000916  50DE               	movf	postinc2,w,c
  9200  000918  6EFD               	movwf	tosl,c
  9201  00091A  50DE               	movf	postinc2,w,c
  9202  00091C  6EFE               	movwf	tosh,c
  9203  00091E  50DE               	movf	postinc2,w,c
  9204  000920  6EFF               	movwf	tosu,c
  9205  000922  50FA               	movf	pclath,w,c
  9206  000924  0012               	return		;indir
  9207  000926                     i2u194_49:
  9208                           
  9209                           ; Switch size 1, requested type "space"
  9210                           ; Number of cases is 4, Range of values is 1 to 4
  9211                           ; switch strategies available:
  9212                           ; Name         Instructions Cycles
  9213                           ; simple_byte           13     7 (average)
  9214                           ;	Chosen strategy is simple_byte
  9215  000926  0A01               	xorlw	1	; case 1
  9216  000928  B4D8               	btfsc	status,2,c
  9217  00092A  D7E8               	goto	i2l468
  9218  00092C  0A03               	xorlw	3	; case 2
  9219  00092E  B4D8               	btfsc	status,2,c
  9220  000930  D7DE               	goto	i2l464
  9221  000932  0A01               	xorlw	1	; case 3
  9222  000934  B4D8               	btfsc	status,2,c
  9223  000936  D7DB               	goto	i2l464
  9224  000938  0A07               	xorlw	7	; case 4
  9225  00093A  B4D8               	btfsc	status,2,c
  9226  00093C  D7DB               	goto	i2l467
  9227  00093E  D7DE               	goto	i2l468
  9228  000940                     __end_ofi2_do_I2C_TX_EMPTY:
  9229                           	opt stack 0
  9230                           tosu	equ	0xFFF
  9231                           tosh	equ	0xFFE
  9232                           tosl	equ	0xFFD
  9233                           pclatu	equ	0xFFB
  9234                           pclath	equ	0xFFA
  9235                           tblptru	equ	0xFF8
  9236                           tblptrh	equ	0xFF7
  9237                           tblptrl	equ	0xFF6
  9238                           tablat	equ	0xFF5
  9239                           prodh	equ	0xFF4
  9240                           prodl	equ	0xFF3
  9241                           intcon	equ	0xFF2
  9242                           postinc0	equ	0xFEE
  9243                           fsr0h	equ	0xFEA
  9244                           fsr0l	equ	0xFE9
  9245                           wreg	equ	0xFE8
  9246                           postdec1	equ	0xFE5
  9247                           plusw1	equ	0xFE3
  9248                           fsr1h	equ	0xFE2
  9249                           fsr1l	equ	0xFE1
  9250                           indf2	equ	0xFDF
  9251                           postinc2	equ	0xFDE
  9252                           postdec2	equ	0xFDD
  9253                           plusw2	equ	0xFDB
  9254                           fsr2h	equ	0xFDA
  9255                           fsr2l	equ	0xFD9
  9256                           status	equ	0xFD8
  9257                           
  9258 ;; *************** function i2_mssp1_setIRQ *****************
  9259 ;; Defined at:
  9260 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
  9261 ;; Parameters:    Size  Location     Type
  9262 ;;		None
  9263 ;; Auto vars:     Size  Location     Type
  9264 ;;		None
  9265 ;; Return value:  Size  Location     Type
  9266 ;;                  1    wreg      void 
  9267 ;; Registers used:
  9268 ;;		None
  9269 ;; Tracked objects:
  9270 ;;		On entry : 0/0
  9271 ;;		On exit  : 0/0
  9272 ;;		Unchanged: 0/0
  9273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9277 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9278 ;;Total ram usage:        0 bytes
  9279 ;; Hardware stack levels used:    1
  9280 ;; This function calls:
  9281 ;;		Nothing
  9282 ;; This function is called by:
  9283 ;;		i2_do_I2C_TX_EMPTY
  9284 ;; This function uses a non-reentrant model
  9285 ;;
  9286                           
  9287                           	psect	text85
  9288  00112C                     __ptext85:
  9289                           	opt stack 0
  9290  00112C                     i2_mssp1_setIRQ:
  9291                           	opt stack 15
  9292                           
  9293                           ;i2c1_driver.c: 60: PIR3bits.SSP1IF = 1;
  9294                           
  9295                           ;incstack = 0
  9296  00112C  010E               	movlb	14	; () banked
  9297  00112E  81CD               	bsf	205,0,b	;volatile
  9298                           
  9299                           ; BSR set to: 14
  9300  001130  0012               	return		;funcret
  9301  001132                     __end_ofi2_mssp1_setIRQ:
  9302                           	opt stack 0
  9303                           tosu	equ	0xFFF
  9304                           tosh	equ	0xFFE
  9305                           tosl	equ	0xFFD
  9306                           pclatu	equ	0xFFB
  9307                           pclath	equ	0xFFA
  9308                           tblptru	equ	0xFF8
  9309                           tblptrh	equ	0xFF7
  9310                           tblptrl	equ	0xFF6
  9311                           tablat	equ	0xFF5
  9312                           prodh	equ	0xFF4
  9313                           prodl	equ	0xFF3
  9314                           intcon	equ	0xFF2
  9315                           postinc0	equ	0xFEE
  9316                           fsr0h	equ	0xFEA
  9317                           fsr0l	equ	0xFE9
  9318                           wreg	equ	0xFE8
  9319                           postdec1	equ	0xFE5
  9320                           plusw1	equ	0xFE3
  9321                           fsr1h	equ	0xFE2
  9322                           fsr1l	equ	0xFE1
  9323                           indf2	equ	0xFDF
  9324                           postinc2	equ	0xFDE
  9325                           postdec2	equ	0xFDD
  9326                           plusw2	equ	0xFDB
  9327                           fsr2h	equ	0xFDA
  9328                           fsr2l	equ	0xFD9
  9329                           status	equ	0xFD8
  9330                           
  9331 ;; *************** function i2_i2c1_driver_isNACK *****************
  9332 ;; Defined at:
  9333 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
  9334 ;; Parameters:    Size  Location     Type
  9335 ;;		None
  9336 ;; Auto vars:     Size  Location     Type
  9337 ;;		None
  9338 ;; Return value:  Size  Location     Type
  9339 ;;		None               void
  9340 ;; Registers used:
  9341 ;;		wreg, status,2, status,0
  9342 ;; Tracked objects:
  9343 ;;		On entry : 0/0
  9344 ;;		On exit  : 0/0
  9345 ;;		Unchanged: 0/0
  9346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9349 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9350 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9351 ;;Total ram usage:        1 bytes
  9352 ;; Hardware stack levels used:    1
  9353 ;; This function calls:
  9354 ;;		Nothing
  9355 ;; This function is called by:
  9356 ;;		i2_do_I2C_TX
  9357 ;;		i2_i2c_ISR
  9358 ;; This function uses a non-reentrant model
  9359 ;;
  9360                           
  9361                           	psect	text86
  9362  000F80                     __ptext86:
  9363                           	opt stack 0
  9364  000F80                     i2_i2c1_driver_isNACK:
  9365                           	opt stack 16
  9366                           
  9367                           ;i2c1_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
  9368                           
  9369                           ; BSR set to: 14
  9370                           ;incstack = 0
  9371  000F80  5097               	movf	3991,w,c	;volatile
  9372  000F82  0BBF               	andlw	-65
  9373  000F84  0940               	iorlw	64
  9374  000F86  6E97               	movwf	3991,c	;volatile
  9375  000F88  3897               	swapf	3991,w,c	;volatile
  9376  000F8A  32E8               	rrcf	wreg,f,c
  9377  000F8C  32E8               	rrcf	wreg,f,c
  9378  000F8E  0B01               	andlw	1
  9379  000F90  6E01               	movwf	??i2_i2c1_driver_isNACK& (0+255),c
  9380  000F92  3001               	rrcf	??i2_i2c1_driver_isNACK,w,c
  9381  000F94  0012               	return	
  9382  000F96                     __end_ofi2_i2c1_driver_isNACK:
  9383                           	opt stack 0
  9384                           tosu	equ	0xFFF
  9385                           tosh	equ	0xFFE
  9386                           tosl	equ	0xFFD
  9387                           pclatu	equ	0xFFB
  9388                           pclath	equ	0xFFA
  9389                           tblptru	equ	0xFF8
  9390                           tblptrh	equ	0xFF7
  9391                           tblptrl	equ	0xFF6
  9392                           tablat	equ	0xFF5
  9393                           prodh	equ	0xFF4
  9394                           prodl	equ	0xFF3
  9395                           intcon	equ	0xFF2
  9396                           postinc0	equ	0xFEE
  9397                           fsr0h	equ	0xFEA
  9398                           fsr0l	equ	0xFE9
  9399                           wreg	equ	0xFE8
  9400                           postdec1	equ	0xFE5
  9401                           plusw1	equ	0xFE3
  9402                           fsr1h	equ	0xFE2
  9403                           fsr1l	equ	0xFE1
  9404                           indf2	equ	0xFDF
  9405                           postinc2	equ	0xFDE
  9406                           postdec2	equ	0xFDD
  9407                           plusw2	equ	0xFDB
  9408                           fsr2h	equ	0xFDA
  9409                           fsr2l	equ	0xFD9
  9410                           status	equ	0xFD8
  9411                           
  9412 ;; *************** function i2_i2c1_driver_TXData *****************
  9413 ;; Defined at:
  9414 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
  9415 ;; Parameters:    Size  Location     Type
  9416 ;;  d               1    wreg     unsigned char 
  9417 ;; Auto vars:     Size  Location     Type
  9418 ;;  d               1    0[COMRAM] unsigned char 
  9419 ;; Return value:  Size  Location     Type
  9420 ;;                  1    wreg      void 
  9421 ;; Registers used:
  9422 ;;		wreg
  9423 ;; Tracked objects:
  9424 ;;		On entry : 0/0
  9425 ;;		On exit  : 0/0
  9426 ;;		Unchanged: 0/0
  9427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9429 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9431 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9432 ;;Total ram usage:        1 bytes
  9433 ;; Hardware stack levels used:    1
  9434 ;; This function calls:
  9435 ;;		Nothing
  9436 ;; This function is called by:
  9437 ;;		i2_do_I2C_SEND_ADR_READ
  9438 ;;		i2_do_I2C_SEND_ADR_WRITE
  9439 ;;		i2_do_I2C_TX
  9440 ;; This function uses a non-reentrant model
  9441 ;;
  9442                           
  9443                           	psect	text87
  9444  001100                     __ptext87:
  9445                           	opt stack 0
  9446  001100                     i2_i2c1_driver_TXData:
  9447                           	opt stack 15
  9448                           
  9449                           ;incstack = 0
  9450                           ;i2i2c1_driver_TXData@d stored from wreg
  9451  001100  6E01               	movwf	i2i2c1_driver_TXData@d,c
  9452                           
  9453                           ;i2c1_driver.c: 188: SSP1BUF = d;
  9454  001102  C001  FF92         	movff	i2i2c1_driver_TXData@d,3986	;volatile
  9455  001106  0012               	return		;funcret
  9456  001108                     __end_ofi2_i2c1_driver_TXData:
  9457                           	opt stack 0
  9458                           tosu	equ	0xFFF
  9459                           tosh	equ	0xFFE
  9460                           tosl	equ	0xFFD
  9461                           pclatu	equ	0xFFB
  9462                           pclath	equ	0xFFA
  9463                           tblptru	equ	0xFF8
  9464                           tblptrh	equ	0xFF7
  9465                           tblptrl	equ	0xFF6
  9466                           tablat	equ	0xFF5
  9467                           prodh	equ	0xFF4
  9468                           prodl	equ	0xFF3
  9469                           intcon	equ	0xFF2
  9470                           postinc0	equ	0xFEE
  9471                           fsr0h	equ	0xFEA
  9472                           fsr0l	equ	0xFE9
  9473                           wreg	equ	0xFE8
  9474                           postdec1	equ	0xFE5
  9475                           plusw1	equ	0xFE3
  9476                           fsr1h	equ	0xFE2
  9477                           fsr1l	equ	0xFE1
  9478                           indf2	equ	0xFDF
  9479                           postinc2	equ	0xFDE
  9480                           postdec2	equ	0xFDD
  9481                           plusw2	equ	0xFDB
  9482                           fsr2h	equ	0xFDA
  9483                           fsr2l	equ	0xFD9
  9484                           status	equ	0xFD8
  9485                           
  9486 ;; *************** function i2_i2c1_driver_getRXData *****************
  9487 ;; Defined at:
  9488 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
  9489 ;; Parameters:    Size  Location     Type
  9490 ;;		None
  9491 ;; Auto vars:     Size  Location     Type
  9492 ;;		None
  9493 ;; Return value:  Size  Location     Type
  9494 ;;                  1    wreg      unsigned char 
  9495 ;; Registers used:
  9496 ;;		wreg, status,2
  9497 ;; Tracked objects:
  9498 ;;		On entry : 0/0
  9499 ;;		On exit  : 0/0
  9500 ;;		Unchanged: 0/0
  9501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9506 ;;Total ram usage:        0 bytes
  9507 ;; Hardware stack levels used:    1
  9508 ;; This function calls:
  9509 ;;		Nothing
  9510 ;; This function is called by:
  9511 ;;		i2_do_I2C_RX
  9512 ;; This function uses a non-reentrant model
  9513 ;;
  9514                           
  9515                           	psect	text88
  9516  001162                     __ptext88:
  9517                           	opt stack 0
  9518  001162                     i2_i2c1_driver_getRXData:
  9519                           	opt stack 15
  9520                           
  9521                           ;i2c1_driver.c: 173: return SSP1BUF;
  9522                           
  9523                           ;incstack = 0
  9524  001162  5092               	movf	3986,w,c	;volatile
  9525  001164  0012               	return	
  9526  001166                     __end_ofi2_i2c1_driver_getRXData:
  9527                           	opt stack 0
  9528                           tosu	equ	0xFFF
  9529                           tosh	equ	0xFFE
  9530                           tosl	equ	0xFFD
  9531                           pclatu	equ	0xFFB
  9532                           pclath	equ	0xFFA
  9533                           tblptru	equ	0xFF8
  9534                           tblptrh	equ	0xFF7
  9535                           tblptrl	equ	0xFF6
  9536                           tablat	equ	0xFF5
  9537                           prodh	equ	0xFF4
  9538                           prodl	equ	0xFF3
  9539                           intcon	equ	0xFF2
  9540                           postinc0	equ	0xFEE
  9541                           fsr0h	equ	0xFEA
  9542                           fsr0l	equ	0xFE9
  9543                           wreg	equ	0xFE8
  9544                           postdec1	equ	0xFE5
  9545                           plusw1	equ	0xFE3
  9546                           fsr1h	equ	0xFE2
  9547                           fsr1l	equ	0xFE1
  9548                           indf2	equ	0xFDF
  9549                           postinc2	equ	0xFDE
  9550                           postdec2	equ	0xFDD
  9551                           plusw2	equ	0xFDB
  9552                           fsr2h	equ	0xFDA
  9553                           fsr2l	equ	0xFD9
  9554                           status	equ	0xFD8
  9555                           
  9556 ;; *************** function i2_i2c1_driver_sendNACK *****************
  9557 ;; Defined at:
  9558 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
  9559 ;; Parameters:    Size  Location     Type
  9560 ;;		None
  9561 ;; Auto vars:     Size  Location     Type
  9562 ;;		None
  9563 ;; Return value:  Size  Location     Type
  9564 ;;                  1    wreg      void 
  9565 ;; Registers used:
  9566 ;;		None
  9567 ;; Tracked objects:
  9568 ;;		On entry : 0/0
  9569 ;;		On exit  : 0/0
  9570 ;;		Unchanged: 0/0
  9571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9576 ;;Total ram usage:        0 bytes
  9577 ;; Hardware stack levels used:    1
  9578 ;; This function calls:
  9579 ;;		Nothing
  9580 ;; This function is called by:
  9581 ;;		i2_do_I2C_DO_NACK_STOP
  9582 ;;		i2_do_I2C_DO_NACK_RESTART
  9583 ;; This function uses a non-reentrant model
  9584 ;;
  9585                           
  9586                           	psect	text89
  9587  001132                     __ptext89:
  9588                           	opt stack 0
  9589  001132                     i2_i2c1_driver_sendNACK:
  9590                           	opt stack 14
  9591                           
  9592                           ;i2c1_driver.c: 204: SSP1CON2bits.ACKDT = 1;
  9593                           
  9594                           ;incstack = 0
  9595  001132  8A97               	bsf	3991,5,c	;volatile
  9596                           
  9597                           ;i2c1_driver.c: 205: SSP1CON2bits.ACKEN = 1;
  9598  001134  8897               	bsf	3991,4,c	;volatile
  9599  001136  0012               	return		;funcret
  9600  001138                     __end_ofi2_i2c1_driver_sendNACK:
  9601                           	opt stack 0
  9602                           tosu	equ	0xFFF
  9603                           tosh	equ	0xFFE
  9604                           tosl	equ	0xFFD
  9605                           pclatu	equ	0xFFB
  9606                           pclath	equ	0xFFA
  9607                           tblptru	equ	0xFF8
  9608                           tblptrh	equ	0xFF7
  9609                           tblptrl	equ	0xFF6
  9610                           tablat	equ	0xFF5
  9611                           prodh	equ	0xFF4
  9612                           prodl	equ	0xFF3
  9613                           intcon	equ	0xFF2
  9614                           postinc0	equ	0xFEE
  9615                           fsr0h	equ	0xFEA
  9616                           fsr0l	equ	0xFE9
  9617                           wreg	equ	0xFE8
  9618                           postdec1	equ	0xFE5
  9619                           plusw1	equ	0xFE3
  9620                           fsr1h	equ	0xFE2
  9621                           fsr1l	equ	0xFE1
  9622                           indf2	equ	0xFDF
  9623                           postinc2	equ	0xFDE
  9624                           postdec2	equ	0xFDD
  9625                           plusw2	equ	0xFDB
  9626                           fsr2h	equ	0xFDA
  9627                           fsr2l	equ	0xFD9
  9628                           status	equ	0xFD8
  9629                           
  9630 ;; *************** function i2_i2c1_driver_resetBus *****************
  9631 ;; Defined at:
  9632 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
  9633 ;; Parameters:    Size  Location     Type
  9634 ;;		None
  9635 ;; Auto vars:     Size  Location     Type
  9636 ;;		None
  9637 ;; Return value:  Size  Location     Type
  9638 ;;                  1    wreg      void 
  9639 ;; Registers used:
  9640 ;;		None
  9641 ;; Tracked objects:
  9642 ;;		On entry : 0/0
  9643 ;;		On exit  : 0/0
  9644 ;;		Unchanged: 0/0
  9645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9650 ;;Total ram usage:        0 bytes
  9651 ;; Hardware stack levels used:    1
  9652 ;; This function calls:
  9653 ;;		Nothing
  9654 ;; This function is called by:
  9655 ;;		i2_do_I2C_RESET
  9656 ;; This function uses a non-reentrant model
  9657 ;;
  9658                           
  9659                           	psect	text90
  9660  001180                     __ptext90:
  9661                           	opt stack 0
  9662  001180                     i2_i2c1_driver_resetBus:
  9663                           	opt stack 15
  9664                           
  9665                           ;incstack = 0
  9666  001180  0012               	return		;funcret
  9667  001182                     __end_ofi2_i2c1_driver_resetBus:
  9668                           	opt stack 0
  9669                           tosu	equ	0xFFF
  9670                           tosh	equ	0xFFE
  9671                           tosl	equ	0xFFD
  9672                           pclatu	equ	0xFFB
  9673                           pclath	equ	0xFFA
  9674                           tblptru	equ	0xFF8
  9675                           tblptrh	equ	0xFF7
  9676                           tblptrl	equ	0xFF6
  9677                           tablat	equ	0xFF5
  9678                           prodh	equ	0xFF4
  9679                           prodl	equ	0xFF3
  9680                           intcon	equ	0xFF2
  9681                           postinc0	equ	0xFEE
  9682                           fsr0h	equ	0xFEA
  9683                           fsr0l	equ	0xFE9
  9684                           wreg	equ	0xFE8
  9685                           postdec1	equ	0xFE5
  9686                           plusw1	equ	0xFE3
  9687                           fsr1h	equ	0xFE2
  9688                           fsr1l	equ	0xFE1
  9689                           indf2	equ	0xFDF
  9690                           postinc2	equ	0xFDE
  9691                           postdec2	equ	0xFDD
  9692                           plusw2	equ	0xFDB
  9693                           fsr2h	equ	0xFDA
  9694                           fsr2l	equ	0xFD9
  9695                           status	equ	0xFD8
  9696                           
  9697 ;; *************** function i2_i2c1_driver_startRX *****************
  9698 ;; Defined at:
  9699 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
  9700 ;; Parameters:    Size  Location     Type
  9701 ;;		None
  9702 ;; Auto vars:     Size  Location     Type
  9703 ;;		None
  9704 ;; Return value:  Size  Location     Type
  9705 ;;                  1    wreg      void 
  9706 ;; Registers used:
  9707 ;;		None
  9708 ;; Tracked objects:
  9709 ;;		On entry : 0/0
  9710 ;;		On exit  : 0/0
  9711 ;;		Unchanged: 0/0
  9712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9716 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9717 ;;Total ram usage:        0 bytes
  9718 ;; Hardware stack levels used:    1
  9719 ;; This function calls:
  9720 ;;		Nothing
  9721 ;; This function is called by:
  9722 ;;		i2_do_I2C_RCEN
  9723 ;; This function uses a non-reentrant model
  9724 ;;
  9725                           
  9726                           	psect	text91
  9727  001166                     __ptext91:
  9728                           	opt stack 0
  9729  001166                     i2_i2c1_driver_startRX:
  9730                           	opt stack 15
  9731                           
  9732                           ;i2c1_driver.c: 168: SSP1CON2bits.RCEN = 1;
  9733                           
  9734                           ;incstack = 0
  9735  001166  8697               	bsf	3991,3,c	;volatile
  9736  001168  0012               	return		;funcret
  9737  00116A                     __end_ofi2_i2c1_driver_startRX:
  9738                           	opt stack 0
  9739                           tosu	equ	0xFFF
  9740                           tosh	equ	0xFFE
  9741                           tosl	equ	0xFFD
  9742                           pclatu	equ	0xFFB
  9743                           pclath	equ	0xFFA
  9744                           tblptru	equ	0xFF8
  9745                           tblptrh	equ	0xFF7
  9746                           tblptrl	equ	0xFF6
  9747                           tablat	equ	0xFF5
  9748                           prodh	equ	0xFF4
  9749                           prodl	equ	0xFF3
  9750                           intcon	equ	0xFF2
  9751                           postinc0	equ	0xFEE
  9752                           fsr0h	equ	0xFEA
  9753                           fsr0l	equ	0xFE9
  9754                           wreg	equ	0xFE8
  9755                           postdec1	equ	0xFE5
  9756                           plusw1	equ	0xFE3
  9757                           fsr1h	equ	0xFE2
  9758                           fsr1l	equ	0xFE1
  9759                           indf2	equ	0xFDF
  9760                           postinc2	equ	0xFDE
  9761                           postdec2	equ	0xFDD
  9762                           plusw2	equ	0xFDB
  9763                           fsr2h	equ	0xFDA
  9764                           fsr2l	equ	0xFD9
  9765                           status	equ	0xFD8
  9766                           
  9767 ;; *************** function i2_rdBlkRegCompleteHandler *****************
  9768 ;; Defined at:
  9769 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  9770 ;; Parameters:    Size  Location     Type
  9771 ;;  p               2   11[COMRAM] PTR void 
  9772 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  9773 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  9774 ;; Auto vars:     Size  Location     Type
  9775 ;;		None
  9776 ;; Return value:  Size  Location     Type
  9777 ;;                  1    wreg      enum E97
  9778 ;; Registers used:
  9779 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9780 ;; Tracked objects:
  9781 ;;		On entry : 0/0
  9782 ;;		On exit  : 0/0
  9783 ;;		Unchanged: 0/0
  9784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9785 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9788 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9789 ;;Total ram usage:        2 bytes
  9790 ;; Hardware stack levels used:    1
  9791 ;; Hardware stack levels required when called:    2
  9792 ;; This function calls:
  9793 ;;		i2_i2c_setBuffer
  9794 ;;		i2_i2c_setDataCompleteCallback
  9795 ;; This function is called by:
  9796 ;; This function uses a non-reentrant model
  9797 ;;
  9798                           
  9799                           	psect	text92
  9800  000B00                     __ptext92:
  9801                           	opt stack 0
  9802  000B00                     i2_rdBlkRegCompleteHandler:
  9803                           	opt stack 13
  9804                           
  9805                           ;i2c_simple_master.c: 136: i2c_setBuffer(((buf_t *)p)->data,((buf_t*)p)->len);
  9806                           
  9807                           ;incstack = 0
  9808  000B00  EE20 F002          	lfsr	2,2
  9809  000B04  500C               	movf	i2rdBlkRegCompleteHandler@p,w,c
  9810  000B06  26D9               	addwf	fsr2l,f,c
  9811  000B08  500D               	movf	i2rdBlkRegCompleteHandler@p+1,w,c
  9812  000B0A  22DA               	addwfc	fsr2h,f,c
  9813  000B0C  CFDE F001          	movff	postinc2,i2i2c_setBuffer@buffer
  9814  000B10  CFDD F002          	movff	postdec2,i2i2c_setBuffer@buffer+1
  9815  000B14  C00C  FFD9         	movff	i2rdBlkRegCompleteHandler@p,fsr2l
  9816  000B18  C00D  FFDA         	movff	i2rdBlkRegCompleteHandler@p+1,fsr2h
  9817  000B1C  CFDE F003          	movff	postinc2,i2i2c_setBuffer@bufferSize
  9818  000B20  CFDD F004          	movff	postdec2,i2i2c_setBuffer@bufferSize+1
  9819  000B24  EC4E  F007         	call	i2_i2c_setBuffer	;wreg free
  9820                           
  9821                           ;i2c_simple_master.c: 137: i2c_setDataCompleteCallback((0),(0));
  9822  000B28  0E00               	movlw	0
  9823  000B2A  6E07               	movwf	i2i2c_setDataCompleteCallback@cb,c
  9824  000B2C  0E00               	movlw	0
  9825  000B2E  6E08               	movwf	i2i2c_setDataCompleteCallback@cb+1,c
  9826  000B30  0E00               	movlw	0
  9827  000B32  6E09               	movwf	i2i2c_setDataCompleteCallback@cb+2,c
  9828  000B34  0E00               	movlw	0
  9829  000B36  6E0A               	movwf	i2i2c_setDataCompleteCallback@p,c
  9830  000B38  0E00               	movlw	0
  9831  000B3A  6E0B               	movwf	i2i2c_setDataCompleteCallback@p+1,c
  9832  000B3C  EC26  F007         	call	i2_i2c_setDataCompleteCallback	;wreg free
  9833                           
  9834                           ;i2c_simple_master.c: 138: return i2c_restart_read;
  9835  000B40  0E02               	movlw	2
  9836  000B42  0012               	return	
  9837  000B44                     __end_ofi2_rdBlkRegCompleteHandler:
  9838                           	opt stack 0
  9839                           tosu	equ	0xFFF
  9840                           tosh	equ	0xFFE
  9841                           tosl	equ	0xFFD
  9842                           pclatu	equ	0xFFB
  9843                           pclath	equ	0xFFA
  9844                           tblptru	equ	0xFF8
  9845                           tblptrh	equ	0xFF7
  9846                           tblptrl	equ	0xFF6
  9847                           tablat	equ	0xFF5
  9848                           prodh	equ	0xFF4
  9849                           prodl	equ	0xFF3
  9850                           intcon	equ	0xFF2
  9851                           postinc0	equ	0xFEE
  9852                           fsr0h	equ	0xFEA
  9853                           fsr0l	equ	0xFE9
  9854                           wreg	equ	0xFE8
  9855                           postdec1	equ	0xFE5
  9856                           plusw1	equ	0xFE3
  9857                           fsr1h	equ	0xFE2
  9858                           fsr1l	equ	0xFE1
  9859                           indf2	equ	0xFDF
  9860                           postinc2	equ	0xFDE
  9861                           postdec2	equ	0xFDD
  9862                           plusw2	equ	0xFDB
  9863                           fsr2h	equ	0xFDA
  9864                           fsr2l	equ	0xFD9
  9865                           status	equ	0xFD8
  9866                           
  9867 ;; *************** function i2_rd2RegCompleteHandler *****************
  9868 ;; Defined at:
  9869 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  9870 ;; Parameters:    Size  Location     Type
  9871 ;;  p               2   11[COMRAM] PTR void 
  9872 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  9873 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  9874 ;; Auto vars:     Size  Location     Type
  9875 ;;		None
  9876 ;; Return value:  Size  Location     Type
  9877 ;;                  1    wreg      enum E97
  9878 ;; Registers used:
  9879 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9880 ;; Tracked objects:
  9881 ;;		On entry : 0/0
  9882 ;;		On exit  : 0/0
  9883 ;;		Unchanged: 0/0
  9884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9885 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9888 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9889 ;;Total ram usage:        2 bytes
  9890 ;; Hardware stack levels used:    1
  9891 ;; Hardware stack levels required when called:    2
  9892 ;; This function calls:
  9893 ;;		i2_i2c_setBuffer
  9894 ;;		i2_i2c_setDataCompleteCallback
  9895 ;; This function is called by:
  9896 ;; This function uses a non-reentrant model
  9897 ;;
  9898                           
  9899                           	psect	text93
  9900  000CF2                     __ptext93:
  9901                           	opt stack 0
  9902  000CF2                     i2_rd2RegCompleteHandler:
  9903                           	opt stack 13
  9904                           
  9905                           ;i2c_simple_master.c: 89: i2c_setBuffer(p,2);
  9906                           
  9907                           ;incstack = 0
  9908  000CF2  C00C  F001         	movff	i2rd2RegCompleteHandler@p,i2i2c_setBuffer@buffer
  9909  000CF6  C00D  F002         	movff	i2rd2RegCompleteHandler@p+1,i2i2c_setBuffer@buffer+1
  9910  000CFA  0E00               	movlw	0
  9911  000CFC  6E04               	movwf	i2i2c_setBuffer@bufferSize+1,c
  9912  000CFE  0E02               	movlw	2
  9913  000D00  6E03               	movwf	i2i2c_setBuffer@bufferSize,c
  9914  000D02  EC4E  F007         	call	i2_i2c_setBuffer	;wreg free
  9915                           
  9916                           ;i2c_simple_master.c: 90: i2c_setDataCompleteCallback((0),(0));
  9917  000D06  0E00               	movlw	0
  9918  000D08  6E07               	movwf	i2i2c_setDataCompleteCallback@cb,c
  9919  000D0A  0E00               	movlw	0
  9920  000D0C  6E08               	movwf	i2i2c_setDataCompleteCallback@cb+1,c
  9921  000D0E  0E00               	movlw	0
  9922  000D10  6E09               	movwf	i2i2c_setDataCompleteCallback@cb+2,c
  9923  000D12  0E00               	movlw	0
  9924  000D14  6E0A               	movwf	i2i2c_setDataCompleteCallback@p,c
  9925  000D16  0E00               	movlw	0
  9926  000D18  6E0B               	movwf	i2i2c_setDataCompleteCallback@p+1,c
  9927  000D1A  EC26  F007         	call	i2_i2c_setDataCompleteCallback	;wreg free
  9928                           
  9929                           ;i2c_simple_master.c: 91: return i2c_restart_read;
  9930  000D1E  0E02               	movlw	2
  9931  000D20  0012               	return	
  9932  000D22                     __end_ofi2_rd2RegCompleteHandler:
  9933                           	opt stack 0
  9934                           tosu	equ	0xFFF
  9935                           tosh	equ	0xFFE
  9936                           tosl	equ	0xFFD
  9937                           pclatu	equ	0xFFB
  9938                           pclath	equ	0xFFA
  9939                           tblptru	equ	0xFF8
  9940                           tblptrh	equ	0xFF7
  9941                           tblptrl	equ	0xFF6
  9942                           tablat	equ	0xFF5
  9943                           prodh	equ	0xFF4
  9944                           prodl	equ	0xFF3
  9945                           intcon	equ	0xFF2
  9946                           postinc0	equ	0xFEE
  9947                           fsr0h	equ	0xFEA
  9948                           fsr0l	equ	0xFE9
  9949                           wreg	equ	0xFE8
  9950                           postdec1	equ	0xFE5
  9951                           plusw1	equ	0xFE3
  9952                           fsr1h	equ	0xFE2
  9953                           fsr1l	equ	0xFE1
  9954                           indf2	equ	0xFDF
  9955                           postinc2	equ	0xFDE
  9956                           postdec2	equ	0xFDD
  9957                           plusw2	equ	0xFDB
  9958                           fsr2h	equ	0xFDA
  9959                           fsr2l	equ	0xFD9
  9960                           status	equ	0xFD8
  9961                           
  9962 ;; *************** function i2_rd1RegCompleteHandler *****************
  9963 ;; Defined at:
  9964 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  9965 ;; Parameters:    Size  Location     Type
  9966 ;;  p               2   11[COMRAM] PTR void 
  9967 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
  9968 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
  9969 ;; Auto vars:     Size  Location     Type
  9970 ;;		None
  9971 ;; Return value:  Size  Location     Type
  9972 ;;                  1    wreg      enum E97
  9973 ;; Registers used:
  9974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9975 ;; Tracked objects:
  9976 ;;		On entry : 0/0
  9977 ;;		On exit  : 0/0
  9978 ;;		Unchanged: 0/0
  9979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9980 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9983 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9984 ;;Total ram usage:        2 bytes
  9985 ;; Hardware stack levels used:    1
  9986 ;; Hardware stack levels required when called:    2
  9987 ;; This function calls:
  9988 ;;		i2_i2c_setBuffer
  9989 ;;		i2_i2c_setDataCompleteCallback
  9990 ;; This function is called by:
  9991 ;; This function uses a non-reentrant model
  9992 ;;
  9993                           
  9994                           	psect	text94
  9995  000D22                     __ptext94:
  9996                           	opt stack 0
  9997  000D22                     i2_rd1RegCompleteHandler:
  9998                           	opt stack 13
  9999                           
 10000                           ;i2c_simple_master.c: 60: i2c_setBuffer(p,1);
 10001                           
 10002                           ;incstack = 0
 10003  000D22  C00C  F001         	movff	i2rd1RegCompleteHandler@p,i2i2c_setBuffer@buffer
 10004  000D26  C00D  F002         	movff	i2rd1RegCompleteHandler@p+1,i2i2c_setBuffer@buffer+1
 10005  000D2A  0E00               	movlw	0
 10006  000D2C  6E04               	movwf	i2i2c_setBuffer@bufferSize+1,c
 10007  000D2E  0E01               	movlw	1
 10008  000D30  6E03               	movwf	i2i2c_setBuffer@bufferSize,c
 10009  000D32  EC4E  F007         	call	i2_i2c_setBuffer	;wreg free
 10010                           
 10011                           ;i2c_simple_master.c: 61: i2c_setDataCompleteCallback((0),(0));
 10012  000D36  0E00               	movlw	0
 10013  000D38  6E07               	movwf	i2i2c_setDataCompleteCallback@cb,c
 10014  000D3A  0E00               	movlw	0
 10015  000D3C  6E08               	movwf	i2i2c_setDataCompleteCallback@cb+1,c
 10016  000D3E  0E00               	movlw	0
 10017  000D40  6E09               	movwf	i2i2c_setDataCompleteCallback@cb+2,c
 10018  000D42  0E00               	movlw	0
 10019  000D44  6E0A               	movwf	i2i2c_setDataCompleteCallback@p,c
 10020  000D46  0E00               	movlw	0
 10021  000D48  6E0B               	movwf	i2i2c_setDataCompleteCallback@p+1,c
 10022  000D4A  EC26  F007         	call	i2_i2c_setDataCompleteCallback	;wreg free
 10023                           
 10024                           ;i2c_simple_master.c: 62: return i2c_restart_read;
 10025  000D4E  0E02               	movlw	2
 10026  000D50  0012               	return	
 10027  000D52                     __end_ofi2_rd1RegCompleteHandler:
 10028                           	opt stack 0
 10029                           tosu	equ	0xFFF
 10030                           tosh	equ	0xFFE
 10031                           tosl	equ	0xFFD
 10032                           pclatu	equ	0xFFB
 10033                           pclath	equ	0xFFA
 10034                           tblptru	equ	0xFF8
 10035                           tblptrh	equ	0xFF7
 10036                           tblptrl	equ	0xFF6
 10037                           tablat	equ	0xFF5
 10038                           prodh	equ	0xFF4
 10039                           prodl	equ	0xFF3
 10040                           intcon	equ	0xFF2
 10041                           postinc0	equ	0xFEE
 10042                           fsr0h	equ	0xFEA
 10043                           fsr0l	equ	0xFE9
 10044                           wreg	equ	0xFE8
 10045                           postdec1	equ	0xFE5
 10046                           plusw1	equ	0xFE3
 10047                           fsr1h	equ	0xFE2
 10048                           fsr1l	equ	0xFE1
 10049                           indf2	equ	0xFDF
 10050                           postinc2	equ	0xFDE
 10051                           postdec2	equ	0xFDD
 10052                           plusw2	equ	0xFDB
 10053                           fsr2h	equ	0xFDA
 10054                           fsr2l	equ	0xFD9
 10055                           status	equ	0xFD8
 10056                           
 10057 ;; *************** function i2_wr1RegCompleteHandler *****************
 10058 ;; Defined at:
 10059 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10060 ;; Parameters:    Size  Location     Type
 10061 ;;  p               2   11[COMRAM] PTR void 
 10062 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10063 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10064 ;; Auto vars:     Size  Location     Type
 10065 ;;		None
 10066 ;; Return value:  Size  Location     Type
 10067 ;;                  1    wreg      enum E97
 10068 ;; Registers used:
 10069 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10070 ;; Tracked objects:
 10071 ;;		On entry : 0/0
 10072 ;;		On exit  : 0/0
 10073 ;;		Unchanged: 0/0
 10074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10075 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10078 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10079 ;;Total ram usage:        2 bytes
 10080 ;; Hardware stack levels used:    1
 10081 ;; Hardware stack levels required when called:    2
 10082 ;; This function calls:
 10083 ;;		i2_i2c_setBuffer
 10084 ;;		i2_i2c_setDataCompleteCallback
 10085 ;; This function is called by:
 10086 ;; This function uses a non-reentrant model
 10087 ;;
 10088                           
 10089                           	psect	text95
 10090  000D52                     __ptext95:
 10091                           	opt stack 0
 10092  000D52                     i2_wr1RegCompleteHandler:
 10093                           	opt stack 13
 10094                           
 10095                           ;i2c_simple_master.c: 33: i2c_setBuffer(p,1);
 10096                           
 10097                           ;incstack = 0
 10098  000D52  C00C  F001         	movff	i2wr1RegCompleteHandler@p,i2i2c_setBuffer@buffer
 10099  000D56  C00D  F002         	movff	i2wr1RegCompleteHandler@p+1,i2i2c_setBuffer@buffer+1
 10100  000D5A  0E00               	movlw	0
 10101  000D5C  6E04               	movwf	i2i2c_setBuffer@bufferSize+1,c
 10102  000D5E  0E01               	movlw	1
 10103  000D60  6E03               	movwf	i2i2c_setBuffer@bufferSize,c
 10104  000D62  EC4E  F007         	call	i2_i2c_setBuffer	;wreg free
 10105                           
 10106                           ;i2c_simple_master.c: 34: i2c_setDataCompleteCallback((0),(0));
 10107  000D66  0E00               	movlw	0
 10108  000D68  6E07               	movwf	i2i2c_setDataCompleteCallback@cb,c
 10109  000D6A  0E00               	movlw	0
 10110  000D6C  6E08               	movwf	i2i2c_setDataCompleteCallback@cb+1,c
 10111  000D6E  0E00               	movlw	0
 10112  000D70  6E09               	movwf	i2i2c_setDataCompleteCallback@cb+2,c
 10113  000D72  0E00               	movlw	0
 10114  000D74  6E0A               	movwf	i2i2c_setDataCompleteCallback@p,c
 10115  000D76  0E00               	movlw	0
 10116  000D78  6E0B               	movwf	i2i2c_setDataCompleteCallback@p+1,c
 10117  000D7A  EC26  F007         	call	i2_i2c_setDataCompleteCallback	;wreg free
 10118                           
 10119                           ;i2c_simple_master.c: 35: return i2c_continue;
 10120  000D7E  0E04               	movlw	4
 10121  000D80  0012               	return	
 10122  000D82                     __end_ofi2_wr1RegCompleteHandler:
 10123                           	opt stack 0
 10124                           tosu	equ	0xFFF
 10125                           tosh	equ	0xFFE
 10126                           tosl	equ	0xFFD
 10127                           pclatu	equ	0xFFB
 10128                           pclath	equ	0xFFA
 10129                           tblptru	equ	0xFF8
 10130                           tblptrh	equ	0xFF7
 10131                           tblptrl	equ	0xFF6
 10132                           tablat	equ	0xFF5
 10133                           prodh	equ	0xFF4
 10134                           prodl	equ	0xFF3
 10135                           intcon	equ	0xFF2
 10136                           postinc0	equ	0xFEE
 10137                           fsr0h	equ	0xFEA
 10138                           fsr0l	equ	0xFE9
 10139                           wreg	equ	0xFE8
 10140                           postdec1	equ	0xFE5
 10141                           plusw1	equ	0xFE3
 10142                           fsr1h	equ	0xFE2
 10143                           fsr1l	equ	0xFE1
 10144                           indf2	equ	0xFDF
 10145                           postinc2	equ	0xFDE
 10146                           postdec2	equ	0xFDD
 10147                           plusw2	equ	0xFDB
 10148                           fsr2h	equ	0xFDA
 10149                           fsr2l	equ	0xFD9
 10150                           status	equ	0xFD8
 10151                           
 10152 ;; *************** function i2_i2c_restartWrite *****************
 10153 ;; Defined at:
 10154 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
 10155 ;; Parameters:    Size  Location     Type
 10156 ;;  p               2   11[COMRAM] PTR void 
 10157 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10158 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10159 ;; Auto vars:     Size  Location     Type
 10160 ;;		None
 10161 ;; Return value:  Size  Location     Type
 10162 ;;                  1    wreg      enum E96
 10163 ;; Registers used:
 10164 ;;		wreg
 10165 ;; Tracked objects:
 10166 ;;		On entry : 0/0
 10167 ;;		On exit  : 0/0
 10168 ;;		Unchanged: 0/0
 10169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10170 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10173 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10174 ;;Total ram usage:        2 bytes
 10175 ;; Hardware stack levels used:    1
 10176 ;; This function calls:
 10177 ;;		Nothing
 10178 ;; This function is called by:
 10179 ;; This function uses a non-reentrant model
 10180 ;;
 10181                           
 10182                           	psect	text96
 10183  00116A                     __ptext96:
 10184                           	opt stack 0
 10185  00116A                     i2_i2c_restartWrite:
 10186                           	opt stack 15
 10187                           
 10188                           ;i2c_types.c: 37: return i2c_restart_write;
 10189                           
 10190                           ;incstack = 0
 10191  00116A  0E03               	movlw	3
 10192  00116C  0012               	return	
 10193  00116E                     __end_ofi2_i2c_restartWrite:
 10194                           	opt stack 0
 10195                           tosu	equ	0xFFF
 10196                           tosh	equ	0xFFE
 10197                           tosl	equ	0xFFD
 10198                           pclatu	equ	0xFFB
 10199                           pclath	equ	0xFFA
 10200                           tblptru	equ	0xFF8
 10201                           tblptrh	equ	0xFF7
 10202                           tblptrl	equ	0xFF6
 10203                           tablat	equ	0xFF5
 10204                           prodh	equ	0xFF4
 10205                           prodl	equ	0xFF3
 10206                           intcon	equ	0xFF2
 10207                           postinc0	equ	0xFEE
 10208                           fsr0h	equ	0xFEA
 10209                           fsr0l	equ	0xFE9
 10210                           wreg	equ	0xFE8
 10211                           postdec1	equ	0xFE5
 10212                           plusw1	equ	0xFE3
 10213                           fsr1h	equ	0xFE2
 10214                           fsr1l	equ	0xFE1
 10215                           indf2	equ	0xFDF
 10216                           postinc2	equ	0xFDE
 10217                           postdec2	equ	0xFDD
 10218                           plusw2	equ	0xFDB
 10219                           fsr2h	equ	0xFDA
 10220                           fsr2l	equ	0xFD9
 10221                           status	equ	0xFD8
 10222                           
 10223 ;; *************** function i2_returnReset *****************
 10224 ;; Defined at:
 10225 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 10226 ;; Parameters:    Size  Location     Type
 10227 ;;  p               2   11[COMRAM] PTR void 
 10228 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10229 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10230 ;; Auto vars:     Size  Location     Type
 10231 ;;		None
 10232 ;; Return value:  Size  Location     Type
 10233 ;;                  1    wreg      enum E11790
 10234 ;; Registers used:
 10235 ;;		wreg
 10236 ;; Tracked objects:
 10237 ;;		On entry : 0/0
 10238 ;;		On exit  : 0/0
 10239 ;;		Unchanged: 0/0
 10240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10241 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10244 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10245 ;;Total ram usage:        2 bytes
 10246 ;; Hardware stack levels used:    1
 10247 ;; This function calls:
 10248 ;;		Nothing
 10249 ;; This function is called by:
 10250 ;; This function uses a non-reentrant model
 10251 ;;
 10252                           
 10253                           	psect	text97
 10254  00116E                     __ptext97:
 10255                           	opt stack 0
 10256  00116E                     i2_returnReset:
 10257                           	opt stack 15
 10258                           
 10259                           ;i2c_master.c: 450: return i2c_reset_link;
 10260                           
 10261                           ;incstack = 0
 10262  00116E  0E05               	movlw	5
 10263  001170  0012               	return	
 10264  001172                     __end_ofi2_returnReset:
 10265                           	opt stack 0
 10266                           tosu	equ	0xFFF
 10267                           tosh	equ	0xFFE
 10268                           tosl	equ	0xFFD
 10269                           pclatu	equ	0xFFB
 10270                           pclath	equ	0xFFA
 10271                           tblptru	equ	0xFF8
 10272                           tblptrh	equ	0xFF7
 10273                           tblptrl	equ	0xFF6
 10274                           tablat	equ	0xFF5
 10275                           prodh	equ	0xFF4
 10276                           prodl	equ	0xFF3
 10277                           intcon	equ	0xFF2
 10278                           postinc0	equ	0xFEE
 10279                           fsr0h	equ	0xFEA
 10280                           fsr0l	equ	0xFE9
 10281                           wreg	equ	0xFE8
 10282                           postdec1	equ	0xFE5
 10283                           plusw1	equ	0xFE3
 10284                           fsr1h	equ	0xFE2
 10285                           fsr1l	equ	0xFE1
 10286                           indf2	equ	0xFDF
 10287                           postinc2	equ	0xFDE
 10288                           postdec2	equ	0xFDD
 10289                           plusw2	equ	0xFDB
 10290                           fsr2h	equ	0xFDA
 10291                           fsr2l	equ	0xFD9
 10292                           status	equ	0xFD8
 10293                           
 10294 ;; *************** function i2_returnStop *****************
 10295 ;; Defined at:
 10296 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 10297 ;; Parameters:    Size  Location     Type
 10298 ;;  p               2   11[COMRAM] PTR void 
 10299 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10300 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10301 ;; Auto vars:     Size  Location     Type
 10302 ;;		None
 10303 ;; Return value:  Size  Location     Type
 10304 ;;                  1    wreg      enum E11790
 10305 ;; Registers used:
 10306 ;;		wreg
 10307 ;; Tracked objects:
 10308 ;;		On entry : 0/0
 10309 ;;		On exit  : 0/0
 10310 ;;		Unchanged: 0/0
 10311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10312 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10315 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10316 ;;Total ram usage:        2 bytes
 10317 ;; Hardware stack levels used:    1
 10318 ;; This function calls:
 10319 ;;		Nothing
 10320 ;; This function is called by:
 10321 ;;		i2_setCallBack
 10322 ;;		_do_I2C_DO_ADDRESS_NACK
 10323 ;;		_do_I2C_TX
 10324 ;;		_do_I2C_RX
 10325 ;;		_do_I2C_TX_EMPTY
 10326 ;;		i2_do_I2C_DO_ADDRESS_NACK
 10327 ;;		i2_do_I2C_TX
 10328 ;;		i2_do_I2C_RX
 10329 ;;		i2_do_I2C_TX_EMPTY
 10330 ;; This function uses a non-reentrant model
 10331 ;;
 10332                           
 10333                           	psect	text98
 10334  001172                     __ptext98:
 10335                           	opt stack 0
 10336  001172                     i2_returnStop:
 10337                           	opt stack 15
 10338                           
 10339                           ;i2c_master.c: 445: return i2c_stop;
 10340                           
 10341                           ;incstack = 0
 10342  001172  0E01               	movlw	1
 10343  001174  0012               	return	
 10344  001176                     __end_ofi2_returnStop:
 10345                           	opt stack 0
 10346                           tosu	equ	0xFFF
 10347                           tosh	equ	0xFFE
 10348                           tosl	equ	0xFFD
 10349                           pclatu	equ	0xFFB
 10350                           pclath	equ	0xFFA
 10351                           tblptru	equ	0xFF8
 10352                           tblptrh	equ	0xFF7
 10353                           tblptrl	equ	0xFF6
 10354                           tablat	equ	0xFF5
 10355                           prodh	equ	0xFF4
 10356                           prodl	equ	0xFF3
 10357                           intcon	equ	0xFF2
 10358                           postinc0	equ	0xFEE
 10359                           fsr0h	equ	0xFEA
 10360                           fsr0l	equ	0xFE9
 10361                           wreg	equ	0xFE8
 10362                           postdec1	equ	0xFE5
 10363                           plusw1	equ	0xFE3
 10364                           fsr1h	equ	0xFE2
 10365                           fsr1l	equ	0xFE1
 10366                           indf2	equ	0xFDF
 10367                           postinc2	equ	0xFDE
 10368                           postdec2	equ	0xFDD
 10369                           plusw2	equ	0xFDB
 10370                           fsr2h	equ	0xFDA
 10371                           fsr2l	equ	0xFD9
 10372                           status	equ	0xFD8
 10373                           
 10374 ;; *************** function i2_wr2RegCompleteHandler *****************
 10375 ;; Defined at:
 10376 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 10377 ;; Parameters:    Size  Location     Type
 10378 ;;  p               2   11[COMRAM] PTR void 
 10379 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10380 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10381 ;; Auto vars:     Size  Location     Type
 10382 ;;		None
 10383 ;; Return value:  Size  Location     Type
 10384 ;;                  1    wreg      enum E97
 10385 ;; Registers used:
 10386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10387 ;; Tracked objects:
 10388 ;;		On entry : 0/0
 10389 ;;		On exit  : 0/0
 10390 ;;		Unchanged: 0/0
 10391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10392 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10395 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10396 ;;Total ram usage:        2 bytes
 10397 ;; Hardware stack levels used:    1
 10398 ;; Hardware stack levels required when called:    2
 10399 ;; This function calls:
 10400 ;;		i2_i2c_setBuffer
 10401 ;;		i2_i2c_setDataCompleteCallback
 10402 ;; This function is called by:
 10403 ;; This function uses a non-reentrant model
 10404 ;;
 10405                           
 10406                           	psect	text99
 10407  000D82                     __ptext99:
 10408                           	opt stack 0
 10409  000D82                     i2_wr2RegCompleteHandler:
 10410                           	opt stack 13
 10411                           
 10412                           ;i2c_simple_master.c: 112: i2c_setBuffer(p,2);
 10413                           
 10414                           ;incstack = 0
 10415  000D82  C00C  F001         	movff	i2wr2RegCompleteHandler@p,i2i2c_setBuffer@buffer
 10416  000D86  C00D  F002         	movff	i2wr2RegCompleteHandler@p+1,i2i2c_setBuffer@buffer+1
 10417  000D8A  0E00               	movlw	0
 10418  000D8C  6E04               	movwf	i2i2c_setBuffer@bufferSize+1,c
 10419  000D8E  0E02               	movlw	2
 10420  000D90  6E03               	movwf	i2i2c_setBuffer@bufferSize,c
 10421  000D92  EC4E  F007         	call	i2_i2c_setBuffer	;wreg free
 10422                           
 10423                           ;i2c_simple_master.c: 113: i2c_setDataCompleteCallback((0),(0));
 10424  000D96  0E00               	movlw	0
 10425  000D98  6E07               	movwf	i2i2c_setDataCompleteCallback@cb,c
 10426  000D9A  0E00               	movlw	0
 10427  000D9C  6E08               	movwf	i2i2c_setDataCompleteCallback@cb+1,c
 10428  000D9E  0E00               	movlw	0
 10429  000DA0  6E09               	movwf	i2i2c_setDataCompleteCallback@cb+2,c
 10430  000DA2  0E00               	movlw	0
 10431  000DA4  6E0A               	movwf	i2i2c_setDataCompleteCallback@p,c
 10432  000DA6  0E00               	movlw	0
 10433  000DA8  6E0B               	movwf	i2i2c_setDataCompleteCallback@p+1,c
 10434  000DAA  EC26  F007         	call	i2_i2c_setDataCompleteCallback	;wreg free
 10435                           
 10436                           ;i2c_simple_master.c: 114: return i2c_continue;
 10437  000DAE  0E04               	movlw	4
 10438  000DB0  0012               	return	
 10439  000DB2                     __end_ofi2_wr2RegCompleteHandler:
 10440                           	opt stack 0
 10441                           tosu	equ	0xFFF
 10442                           tosh	equ	0xFFE
 10443                           tosl	equ	0xFFD
 10444                           pclatu	equ	0xFFB
 10445                           pclath	equ	0xFFA
 10446                           tblptru	equ	0xFF8
 10447                           tblptrh	equ	0xFF7
 10448                           tblptrl	equ	0xFF6
 10449                           tablat	equ	0xFF5
 10450                           prodh	equ	0xFF4
 10451                           prodl	equ	0xFF3
 10452                           intcon	equ	0xFF2
 10453                           postinc0	equ	0xFEE
 10454                           fsr0h	equ	0xFEA
 10455                           fsr0l	equ	0xFE9
 10456                           wreg	equ	0xFE8
 10457                           postdec1	equ	0xFE5
 10458                           plusw1	equ	0xFE3
 10459                           fsr1h	equ	0xFE2
 10460                           fsr1l	equ	0xFE1
 10461                           indf2	equ	0xFDF
 10462                           postinc2	equ	0xFDE
 10463                           postdec2	equ	0xFDD
 10464                           plusw2	equ	0xFDB
 10465                           fsr2h	equ	0xFDA
 10466                           fsr2l	equ	0xFD9
 10467                           status	equ	0xFD8
 10468                           
 10469 ;; *************** function i2_i2c_setDataCompleteCallback *****************
 10470 ;; Defined at:
 10471 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
 10472 ;; Parameters:    Size  Location     Type
 10473 ;;  cb              3    6[COMRAM] PTR FTN(PTR void ,)enum 
 10474 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 10475 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
 10476 ;;  p               2    9[COMRAM] PTR void 
 10477 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10478 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10479 ;; Auto vars:     Size  Location     Type
 10480 ;;		None
 10481 ;; Return value:  Size  Location     Type
 10482 ;;                  1    wreg      void 
 10483 ;; Registers used:
 10484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10485 ;; Tracked objects:
 10486 ;;		On entry : 0/0
 10487 ;;		On exit  : 0/0
 10488 ;;		Unchanged: 0/0
 10489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10490 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10493 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10494 ;;Total ram usage:        5 bytes
 10495 ;; Hardware stack levels used:    1
 10496 ;; Hardware stack levels required when called:    1
 10497 ;; This function calls:
 10498 ;;		i2_setCallBack
 10499 ;; This function is called by:
 10500 ;;		i2_wr1RegCompleteHandler
 10501 ;;		i2_rd1RegCompleteHandler
 10502 ;;		i2_rd2RegCompleteHandler
 10503 ;;		i2_wr2RegCompleteHandler
 10504 ;;		i2_rdBlkRegCompleteHandler
 10505 ;; This function uses a non-reentrant model
 10506 ;;
 10507                           
 10508                           	psect	text100
 10509  000E4C                     __ptext100:
 10510                           	opt stack 0
 10511  000E4C                     i2_i2c_setDataCompleteCallback:
 10512                           	opt stack 13
 10513                           
 10514                           ;i2c_master.c: 91: setCallBack(i2c_dataComplete,cb,p);
 10515                           
 10516                           ;incstack = 0
 10517  000E4C  C007  F001         	movff	i2i2c_setDataCompleteCallback@cb,i2setCallBack@cb
 10518  000E50  C008  F002         	movff	i2i2c_setDataCompleteCallback@cb+1,i2setCallBack@cb+1
 10519  000E54  C009  F003         	movff	i2i2c_setDataCompleteCallback@cb+2,i2setCallBack@cb+2
 10520  000E58  C00A  F004         	movff	i2i2c_setDataCompleteCallback@p,i2setCallBack@p
 10521  000E5C  C00B  F005         	movff	i2i2c_setDataCompleteCallback@p+1,i2setCallBack@p+1
 10522  000E60  0E00               	movlw	0
 10523  000E62  ECCF  F003         	call	i2_setCallBack
 10524  000E66  0012               	return		;funcret
 10525  000E68                     __end_ofi2_i2c_setDataCompleteCallback:
 10526                           	opt stack 0
 10527                           tosu	equ	0xFFF
 10528                           tosh	equ	0xFFE
 10529                           tosl	equ	0xFFD
 10530                           pclatu	equ	0xFFB
 10531                           pclath	equ	0xFFA
 10532                           tblptru	equ	0xFF8
 10533                           tblptrh	equ	0xFF7
 10534                           tblptrl	equ	0xFF6
 10535                           tablat	equ	0xFF5
 10536                           prodh	equ	0xFF4
 10537                           prodl	equ	0xFF3
 10538                           intcon	equ	0xFF2
 10539                           postinc0	equ	0xFEE
 10540                           fsr0h	equ	0xFEA
 10541                           fsr0l	equ	0xFE9
 10542                           wreg	equ	0xFE8
 10543                           postdec1	equ	0xFE5
 10544                           plusw1	equ	0xFE3
 10545                           fsr1h	equ	0xFE2
 10546                           fsr1l	equ	0xFE1
 10547                           indf2	equ	0xFDF
 10548                           postinc2	equ	0xFDE
 10549                           postdec2	equ	0xFDD
 10550                           plusw2	equ	0xFDB
 10551                           fsr2h	equ	0xFDA
 10552                           fsr2l	equ	0xFD9
 10553                           status	equ	0xFD8
 10554                           
 10555 ;; *************** function i2_setCallBack *****************
 10556 ;; Defined at:
 10557 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
 10558 ;; Parameters:    Size  Location     Type
 10559 ;;  idx             1    wreg     enum E11974
 10560 ;;  cb              3    0[COMRAM] PTR FTN(PTR void ,)enum 
 10561 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 10562 ;;		 -> wr1RegCompleteHandler(1), i2c_restartWrite(1), Absolute function(1), 
 10563 ;;  p               2    3[COMRAM] PTR void 
 10564 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 10565 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 10566 ;; Auto vars:     Size  Location     Type
 10567 ;;  idx             1    5[COMRAM] enum E11974
 10568 ;; Return value:  Size  Location     Type
 10569 ;;                  1    wreg      void 
 10570 ;; Registers used:
 10571 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10572 ;; Tracked objects:
 10573 ;;		On entry : 0/0
 10574 ;;		On exit  : 0/0
 10575 ;;		Unchanged: 0/0
 10576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10577 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10578 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10580 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10581 ;;Total ram usage:        6 bytes
 10582 ;; Hardware stack levels used:    1
 10583 ;; This function calls:
 10584 ;;		Nothing
 10585 ;; This function is called by:
 10586 ;;		i2_i2c_setDataCompleteCallback
 10587 ;; This function uses a non-reentrant model
 10588 ;;
 10589                           
 10590                           	psect	text101
 10591  00079E                     __ptext101:
 10592                           	opt stack 0
 10593  00079E                     i2_setCallBack:
 10594                           	opt stack 13
 10595                           
 10596                           ;incstack = 0
 10597                           ;i2setCallBack@idx stored from wreg
 10598  00079E  6E06               	movwf	i2setCallBack@idx,c
 10599                           
 10600                           ;i2c_master.c: 455: if(cb)
 10601  0007A0  5001               	movf	i2setCallBack@cb,w,c
 10602  0007A2  1002               	iorwf	i2setCallBack@cb+1,w,c
 10603  0007A4  1003               	iorwf	i2setCallBack@cb+2,w,c
 10604  0007A6  B4D8               	btfsc	status,2,c
 10605  0007A8  D01B               	goto	i2l488
 10606                           
 10607                           ;i2c_master.c: 456: {
 10608                           ;i2c_master.c: 457: i2c_status.callbackTable[idx] = cb;
 10609  0007AA  5006               	movf	i2setCallBack@idx,w,c
 10610  0007AC  0D03               	mullw	3
 10611  0007AE  0E6C               	movlw	low (_i2c_status+12)
 10612  0007B0  24F3               	addwf	prodl,w,c
 10613  0007B2  6ED9               	movwf	fsr2l,c
 10614  0007B4  0E00               	movlw	high (_i2c_status+12)
 10615  0007B6  20F4               	addwfc	prodh,w,c
 10616  0007B8  6EDA               	movwf	fsr2h,c
 10617  0007BA  C001  FFDE         	movff	i2setCallBack@cb,postinc2
 10618  0007BE  C002  FFDE         	movff	i2setCallBack@cb+1,postinc2
 10619  0007C2  C003  FFDE         	movff	i2setCallBack@cb+2,postinc2
 10620                           
 10621                           ;i2c_master.c: 458: i2c_status.callbackPayload[idx] = p;
 10622  0007C6  5006               	movf	i2setCallBack@idx,w,c
 10623  0007C8  0D02               	mullw	2
 10624  0007CA  0E7E               	movlw	low (_i2c_status+30)
 10625  0007CC  24F3               	addwf	prodl,w,c
 10626  0007CE  6ED9               	movwf	fsr2l,c
 10627  0007D0  0E00               	movlw	high (_i2c_status+30)
 10628  0007D2  20F4               	addwfc	prodh,w,c
 10629  0007D4  6EDA               	movwf	fsr2h,c
 10630  0007D6  C004  FFDE         	movff	i2setCallBack@p,postinc2
 10631  0007DA  C005  FFDD         	movff	i2setCallBack@p+1,postdec2
 10632                           
 10633                           ;i2c_master.c: 459: }
 10634  0007DE  0012               	return	
 10635  0007E0                     i2l488:
 10636                           
 10637                           ;i2c_master.c: 460: else
 10638                           ;i2c_master.c: 461: {
 10639                           ;i2c_master.c: 462: i2c_status.callbackTable[idx] = returnStop;
 10640  0007E0  5006               	movf	i2setCallBack@idx,w,c
 10641  0007E2  0D03               	mullw	3
 10642  0007E4  0E6C               	movlw	low (_i2c_status+12)
 10643  0007E6  24F3               	addwf	prodl,w,c
 10644  0007E8  6ED9               	movwf	fsr2l,c
 10645  0007EA  0E00               	movlw	high (_i2c_status+12)
 10646  0007EC  20F4               	addwfc	prodh,w,c
 10647  0007EE  6EDA               	movwf	fsr2h,c
 10648  0007F0  0E72               	movlw	low i2_returnStop
 10649  0007F2  6EDE               	movwf	postinc2,c
 10650  0007F4  0E11               	movlw	high i2_returnStop
 10651  0007F6  6EDE               	movwf	postinc2,c
 10652  0007F8  0E00               	movlw	low (i2_returnStop shr (0+16))
 10653  0007FA  6EDE               	movwf	postinc2,c
 10654                           
 10655                           ;i2c_master.c: 463: i2c_status.callbackPayload[idx] = (0);
 10656  0007FC  5006               	movf	i2setCallBack@idx,w,c
 10657  0007FE  0D02               	mullw	2
 10658  000800  0E7E               	movlw	low (_i2c_status+30)
 10659  000802  24F3               	addwf	prodl,w,c
 10660  000804  6ED9               	movwf	fsr2l,c
 10661  000806  0E00               	movlw	high (_i2c_status+30)
 10662  000808  20F4               	addwfc	prodh,w,c
 10663  00080A  6EDA               	movwf	fsr2h,c
 10664  00080C  0E00               	movlw	0
 10665  00080E  6EDE               	movwf	postinc2,c
 10666  000810  0E00               	movlw	0
 10667  000812  6EDD               	movwf	postdec2,c
 10668  000814  0012               	return	
 10669  000816                     __end_ofi2_setCallBack:
 10670                           	opt stack 0
 10671                           tosu	equ	0xFFF
 10672                           tosh	equ	0xFFE
 10673                           tosl	equ	0xFFD
 10674                           pclatu	equ	0xFFB
 10675                           pclath	equ	0xFFA
 10676                           tblptru	equ	0xFF8
 10677                           tblptrh	equ	0xFF7
 10678                           tblptrl	equ	0xFF6
 10679                           tablat	equ	0xFF5
 10680                           prodh	equ	0xFF4
 10681                           prodl	equ	0xFF3
 10682                           intcon	equ	0xFF2
 10683                           postinc0	equ	0xFEE
 10684                           fsr0h	equ	0xFEA
 10685                           fsr0l	equ	0xFE9
 10686                           wreg	equ	0xFE8
 10687                           postdec1	equ	0xFE5
 10688                           plusw1	equ	0xFE3
 10689                           fsr1h	equ	0xFE2
 10690                           fsr1l	equ	0xFE1
 10691                           indf2	equ	0xFDF
 10692                           postinc2	equ	0xFDE
 10693                           postdec2	equ	0xFDD
 10694                           plusw2	equ	0xFDB
 10695                           fsr2h	equ	0xFDA
 10696                           fsr2l	equ	0xFD9
 10697                           status	equ	0xFD8
 10698                           
 10699 ;; *************** function i2_i2c_setBuffer *****************
 10700 ;; Defined at:
 10701 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
 10702 ;; Parameters:    Size  Location     Type
 10703 ;;  buffer          2    0[COMRAM] PTR void 
 10704 ;;		 -> readIoExpander@rec(1), readIoExpander@data(2), i2c_readDataBlock@reg(1), i2c_readDataBlock@d(4), 
 10705 ;;		 -> i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@reg(1), i2c_read2ByteRegist
      +er@result(2), 
 10706 ;;		 -> i2c_read1ByteRegister@reg(1), i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister
      +@data(1), 
 10707 ;;		 -> NULL(0), 
 10708 ;;  bufferSize      2    2[COMRAM] unsigned int 
 10709 ;; Auto vars:     Size  Location     Type
 10710 ;;		None
 10711 ;; Return value:  Size  Location     Type
 10712 ;;                  1    wreg      void 
 10713 ;; Registers used:
 10714 ;;		wreg, status,2, status,0
 10715 ;; Tracked objects:
 10716 ;;		On entry : 0/0
 10717 ;;		On exit  : 0/0
 10718 ;;		Unchanged: 0/0
 10719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10720 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10723 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10724 ;;Total ram usage:        4 bytes
 10725 ;; Hardware stack levels used:    1
 10726 ;; This function calls:
 10727 ;;		Nothing
 10728 ;; This function is called by:
 10729 ;;		i2_wr1RegCompleteHandler
 10730 ;;		i2_rd1RegCompleteHandler
 10731 ;;		i2_rd2RegCompleteHandler
 10732 ;;		i2_wr2RegCompleteHandler
 10733 ;;		i2_rdBlkRegCompleteHandler
 10734 ;; This function uses a non-reentrant model
 10735 ;;
 10736                           
 10737                           	psect	text102
 10738  000E9C                     __ptext102:
 10739                           	opt stack 0
 10740  000E9C                     i2_i2c_setBuffer:
 10741                           	opt stack 14
 10742                           
 10743                           ;i2c_master.c: 186: if(i2c_status.bufferFree)
 10744                           
 10745                           ;incstack = 0
 10746  000E9C  0100               	movlb	0	; () banked
 10747  000E9E  A560               	btfss	_i2c_status& (0+255),2,b
 10748  000EA0  0012               	return	
 10749                           
 10750                           ; BSR set to: 0
 10751                           ;i2c_master.c: 187: {
 10752                           ;i2c_master.c: 188: i2c_status.data_ptr = buffer;
 10753  000EA2  C001  F062         	movff	i2i2c_setBuffer@buffer,_i2c_status+2
 10754  000EA6  C002  F063         	movff	i2i2c_setBuffer@buffer+1,_i2c_status+3
 10755                           
 10756                           ; BSR set to: 0
 10757                           ;i2c_master.c: 189: i2c_status.data_length = bufferSize;
 10758  000EAA  C003  F064         	movff	i2i2c_setBuffer@bufferSize,_i2c_status+4
 10759  000EAE  C004  F065         	movff	i2i2c_setBuffer@bufferSize+1,_i2c_status+5
 10760                           
 10761                           ; BSR set to: 0
 10762                           ;i2c_master.c: 190: i2c_status.bufferFree = 0;
 10763  000EB2  9560               	bcf	_i2c_status& (0+255),2,b
 10764  000EB4  0012               	return	
 10765  000EB6                     __end_ofi2_i2c_setBuffer:
 10766                           	opt stack 0
 10767                           tosu	equ	0xFFF
 10768                           tosh	equ	0xFFE
 10769                           tosl	equ	0xFFD
 10770                           pclatu	equ	0xFFB
 10771                           pclath	equ	0xFFA
 10772                           tblptru	equ	0xFF8
 10773                           tblptrh	equ	0xFF7
 10774                           tblptrl	equ	0xFF6
 10775                           tablat	equ	0xFF5
 10776                           prodh	equ	0xFF4
 10777                           prodl	equ	0xFF3
 10778                           intcon	equ	0xFF2
 10779                           postinc0	equ	0xFEE
 10780                           fsr0h	equ	0xFEA
 10781                           fsr0l	equ	0xFE9
 10782                           wreg	equ	0xFE8
 10783                           postdec1	equ	0xFE5
 10784                           plusw1	equ	0xFE3
 10785                           fsr1h	equ	0xFE2
 10786                           fsr1l	equ	0xFE1
 10787                           indf2	equ	0xFDF
 10788                           postinc2	equ	0xFDE
 10789                           postdec2	equ	0xFDD
 10790                           plusw2	equ	0xFDB
 10791                           fsr2h	equ	0xFDA
 10792                           fsr2l	equ	0xFD9
 10793                           status	equ	0xFD8
 10794                           
 10795 ;; *************** function i2_i2c1_driver_stop *****************
 10796 ;; Defined at:
 10797 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 10798 ;; Parameters:    Size  Location     Type
 10799 ;;		None
 10800 ;; Auto vars:     Size  Location     Type
 10801 ;;		None
 10802 ;; Return value:  Size  Location     Type
 10803 ;;                  1    wreg      void 
 10804 ;; Registers used:
 10805 ;;		None
 10806 ;; Tracked objects:
 10807 ;;		On entry : 0/0
 10808 ;;		On exit  : 0/0
 10809 ;;		Unchanged: 0/0
 10810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10815 ;;Total ram usage:        0 bytes
 10816 ;; Hardware stack levels used:    1
 10817 ;; This function calls:
 10818 ;;		Nothing
 10819 ;; This function is called by:
 10820 ;;		i2_do_I2C_SEND_STOP
 10821 ;; This function uses a non-reentrant model
 10822 ;;
 10823                           
 10824                           	psect	text103
 10825  001176                     __ptext103:
 10826                           	opt stack 0
 10827  001176                     i2_i2c1_driver_stop:
 10828                           	opt stack 14
 10829                           
 10830                           ;i2c1_driver.c: 158: SSP1CON2bits.PEN = 1;
 10831                           
 10832                           ; BSR set to: 0
 10833                           ;incstack = 0
 10834  001176  8497               	bsf	3991,2,c	;volatile
 10835  001178  0012               	return		;funcret
 10836  00117A                     __end_ofi2_i2c1_driver_stop:
 10837                           	opt stack 0
 10838                           tosu	equ	0xFFF
 10839                           tosh	equ	0xFFE
 10840                           tosl	equ	0xFFD
 10841                           pclatu	equ	0xFFB
 10842                           pclath	equ	0xFFA
 10843                           tblptru	equ	0xFF8
 10844                           tblptrh	equ	0xFF7
 10845                           tblptrl	equ	0xFF6
 10846                           tablat	equ	0xFF5
 10847                           prodh	equ	0xFF4
 10848                           prodl	equ	0xFF3
 10849                           intcon	equ	0xFF2
 10850                           postinc0	equ	0xFEE
 10851                           fsr0h	equ	0xFEA
 10852                           fsr0l	equ	0xFE9
 10853                           wreg	equ	0xFE8
 10854                           postdec1	equ	0xFE5
 10855                           plusw1	equ	0xFE3
 10856                           fsr1h	equ	0xFE2
 10857                           fsr1l	equ	0xFE1
 10858                           indf2	equ	0xFDF
 10859                           postinc2	equ	0xFDE
 10860                           postdec2	equ	0xFDD
 10861                           plusw2	equ	0xFDB
 10862                           fsr2h	equ	0xFDA
 10863                           fsr2l	equ	0xFD9
 10864                           status	equ	0xFD8
 10865                           
 10866 ;; *************** function i2_i2c1_driver_restart *****************
 10867 ;; Defined at:
 10868 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 10869 ;; Parameters:    Size  Location     Type
 10870 ;;		None
 10871 ;; Auto vars:     Size  Location     Type
 10872 ;;		None
 10873 ;; Return value:  Size  Location     Type
 10874 ;;                  1    wreg      void 
 10875 ;; Registers used:
 10876 ;;		None
 10877 ;; Tracked objects:
 10878 ;;		On entry : 0/0
 10879 ;;		On exit  : 0/0
 10880 ;;		Unchanged: 0/0
 10881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10886 ;;Total ram usage:        0 bytes
 10887 ;; Hardware stack levels used:    1
 10888 ;; This function calls:
 10889 ;;		Nothing
 10890 ;; This function is called by:
 10891 ;;		i2_do_I2C_SEND_RESTART_READ
 10892 ;;		i2_do_I2C_SEND_RESTART_WRITE
 10893 ;;		i2_do_I2C_SEND_RESTART
 10894 ;; This function uses a non-reentrant model
 10895 ;;
 10896                           
 10897                           	psect	text104
 10898  00117A                     __ptext104:
 10899                           	opt stack 0
 10900  00117A                     i2_i2c1_driver_restart:
 10901                           	opt stack 14
 10902                           
 10903                           ;i2c1_driver.c: 153: SSP1CON2bits.RSEN = 1;
 10904                           
 10905                           ;incstack = 0
 10906  00117A  8297               	bsf	3991,1,c	;volatile
 10907  00117C  0012               	return		;funcret
 10908  00117E                     __end_ofi2_i2c1_driver_restart:
 10909                           	opt stack 0
 10910                           tosu	equ	0xFFF
 10911                           tosh	equ	0xFFE
 10912                           tosl	equ	0xFFD
 10913                           pclatu	equ	0xFFB
 10914                           pclath	equ	0xFFA
 10915                           tblptru	equ	0xFF8
 10916                           tblptrh	equ	0xFF7
 10917                           tblptrl	equ	0xFF6
 10918                           tablat	equ	0xFF5
 10919                           prodh	equ	0xFF4
 10920                           prodl	equ	0xFF3
 10921                           intcon	equ	0xFF2
 10922                           postinc0	equ	0xFEE
 10923                           fsr0h	equ	0xFEA
 10924                           fsr0l	equ	0xFE9
 10925                           wreg	equ	0xFE8
 10926                           postdec1	equ	0xFE5
 10927                           plusw1	equ	0xFE3
 10928                           fsr1h	equ	0xFE2
 10929                           fsr1l	equ	0xFE1
 10930                           indf2	equ	0xFDF
 10931                           postinc2	equ	0xFDE
 10932                           postdec2	equ	0xFDD
 10933                           plusw2	equ	0xFDB
 10934                           fsr2h	equ	0xFDA
 10935                           fsr2l	equ	0xFD9
 10936                           status	equ	0xFD8
 10937                           
 10938 ;; *************** function i2_i2c1_driver_sendACK *****************
 10939 ;; Defined at:
 10940 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
 10941 ;; Parameters:    Size  Location     Type
 10942 ;;		None
 10943 ;; Auto vars:     Size  Location     Type
 10944 ;;		None
 10945 ;; Return value:  Size  Location     Type
 10946 ;;                  1    wreg      void 
 10947 ;; Registers used:
 10948 ;;		None
 10949 ;; Tracked objects:
 10950 ;;		On entry : 0/0
 10951 ;;		On exit  : 0/0
 10952 ;;		Unchanged: 0/0
 10953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10958 ;;Total ram usage:        0 bytes
 10959 ;; Hardware stack levels used:    1
 10960 ;; This function calls:
 10961 ;;		Nothing
 10962 ;; This function is called by:
 10963 ;;		i2_do_I2C_DO_ACK
 10964 ;;		i2_do_I2C_RX
 10965 ;; This function uses a non-reentrant model
 10966 ;;
 10967                           
 10968                           	psect	text105
 10969  001138                     __ptext105:
 10970                           	opt stack 0
 10971  001138                     i2_i2c1_driver_sendACK:
 10972                           	opt stack 15
 10973                           
 10974                           ;i2c1_driver.c: 198: SSP1CON2bits.ACKDT = 0;
 10975                           
 10976                           ;incstack = 0
 10977  001138  9A97               	bcf	3991,5,c	;volatile
 10978                           
 10979                           ;i2c1_driver.c: 199: SSP1CON2bits.ACKEN = 1;
 10980  00113A  8897               	bsf	3991,4,c	;volatile
 10981  00113C  0012               	return		;funcret
 10982  00113E                     __end_ofi2_i2c1_driver_sendACK:
 10983                           	opt stack 0
 10984                           tosu	equ	0xFFF
 10985                           tosh	equ	0xFFE
 10986                           tosl	equ	0xFFD
 10987                           pclatu	equ	0xFFB
 10988                           pclath	equ	0xFFA
 10989                           tblptru	equ	0xFF8
 10990                           tblptrh	equ	0xFF7
 10991                           tblptrl	equ	0xFF6
 10992                           tablat	equ	0xFF5
 10993                           prodh	equ	0xFF4
 10994                           prodl	equ	0xFF3
 10995                           intcon	equ	0xFF2
 10996                           postinc0	equ	0xFEE
 10997                           fsr0h	equ	0xFEA
 10998                           fsr0l	equ	0xFE9
 10999                           wreg	equ	0xFE8
 11000                           postdec1	equ	0xFE5
 11001                           plusw1	equ	0xFE3
 11002                           fsr1h	equ	0xFE2
 11003                           fsr1l	equ	0xFE1
 11004                           indf2	equ	0xFDF
 11005                           postinc2	equ	0xFDE
 11006                           postdec2	equ	0xFDD
 11007                           plusw2	equ	0xFDB
 11008                           fsr2h	equ	0xFDA
 11009                           fsr2l	equ	0xFD9
 11010                           status	equ	0xFD8
 11011                           
 11012 ;; *************** function _i2c_busCollisionISR *****************
 11013 ;; Defined at:
 11014 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 11015 ;; Parameters:    Size  Location     Type
 11016 ;;		None
 11017 ;; Auto vars:     Size  Location     Type
 11018 ;;		None
 11019 ;; Return value:  Size  Location     Type
 11020 ;;                  1    wreg      void 
 11021 ;; Registers used:
 11022 ;;		cstack
 11023 ;; Tracked objects:
 11024 ;;		On entry : 0/0
 11025 ;;		On exit  : 0/0
 11026 ;;		Unchanged: 0/0
 11027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11031 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11032 ;;Total ram usage:        0 bytes
 11033 ;; Hardware stack levels used:    1
 11034 ;; Hardware stack levels required when called:    1
 11035 ;; This function calls:
 11036 ;;		_i2c1_driver_clearBusCollision
 11037 ;; This function is called by:
 11038 ;;		_i2c_open
 11039 ;;		_INTERRUPT_InterruptManager
 11040 ;; This function uses a non-reentrant model
 11041 ;;
 11042                           
 11043                           	psect	text106
 11044  00113E                     __ptext106:
 11045                           	opt stack 0
 11046  00113E                     _i2c_busCollisionISR:
 11047                           	opt stack 16
 11048                           
 11049                           ;i2c_master.c: 437: i2c1_driver_clearBusCollision();
 11050                           
 11051                           ;incstack = 0
 11052  00113E  ECA2  F008         	call	_i2c1_driver_clearBusCollision	;wreg free
 11053  001142  0012               	return		;funcret
 11054  001144                     __end_of_i2c_busCollisionISR:
 11055                           	opt stack 0
 11056                           tosu	equ	0xFFF
 11057                           tosh	equ	0xFFE
 11058                           tosl	equ	0xFFD
 11059                           pclatu	equ	0xFFB
 11060                           pclath	equ	0xFFA
 11061                           tblptru	equ	0xFF8
 11062                           tblptrh	equ	0xFF7
 11063                           tblptrl	equ	0xFF6
 11064                           tablat	equ	0xFF5
 11065                           prodh	equ	0xFF4
 11066                           prodl	equ	0xFF3
 11067                           intcon	equ	0xFF2
 11068                           postinc0	equ	0xFEE
 11069                           fsr0h	equ	0xFEA
 11070                           fsr0l	equ	0xFE9
 11071                           wreg	equ	0xFE8
 11072                           postdec1	equ	0xFE5
 11073                           plusw1	equ	0xFE3
 11074                           fsr1h	equ	0xFE2
 11075                           fsr1l	equ	0xFE1
 11076                           indf2	equ	0xFDF
 11077                           postinc2	equ	0xFDE
 11078                           postdec2	equ	0xFDD
 11079                           plusw2	equ	0xFDB
 11080                           fsr2h	equ	0xFDA
 11081                           fsr2l	equ	0xFD9
 11082                           status	equ	0xFD8
 11083                           
 11084 ;; *************** function _i2c1_driver_clearBusCollision *****************
 11085 ;; Defined at:
 11086 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
 11087 ;; Parameters:    Size  Location     Type
 11088 ;;		None
 11089 ;; Auto vars:     Size  Location     Type
 11090 ;;		None
 11091 ;; Return value:  Size  Location     Type
 11092 ;;                  1    wreg      void 
 11093 ;; Registers used:
 11094 ;;		None
 11095 ;; Tracked objects:
 11096 ;;		On entry : 0/0
 11097 ;;		On exit  : 0/0
 11098 ;;		Unchanged: 0/0
 11099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11103 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11104 ;;Total ram usage:        0 bytes
 11105 ;; Hardware stack levels used:    1
 11106 ;; This function calls:
 11107 ;;		Nothing
 11108 ;; This function is called by:
 11109 ;;		_i2c_busCollisionISR
 11110 ;; This function uses a non-reentrant model
 11111 ;;
 11112                           
 11113                           	psect	text107
 11114  001144                     __ptext107:
 11115                           	opt stack 0
 11116  001144                     _i2c1_driver_clearBusCollision:
 11117                           	opt stack 16
 11118                           
 11119                           ;i2c1_driver.c: 255: PIR3bits.BCL1IF = 0;
 11120                           
 11121                           ;incstack = 0
 11122  001144  010E               	movlb	14	; () banked
 11123  001146  93CD               	bcf	205,1,b	;volatile
 11124                           
 11125                           ; BSR set to: 14
 11126  001148  0012               	return		;funcret
 11127  00114A                     __end_of_i2c1_driver_clearBusCollision:
 11128                           	opt stack 0
 11129  0000                     tosu	equ	0xFFF
 11130                           tosh	equ	0xFFE
 11131                           tosl	equ	0xFFD
 11132                           pclatu	equ	0xFFB
 11133                           pclath	equ	0xFFA
 11134                           tblptru	equ	0xFF8
 11135                           tblptrh	equ	0xFF7
 11136                           tblptrl	equ	0xFF6
 11137                           tablat	equ	0xFF5
 11138                           prodh	equ	0xFF4
 11139                           prodl	equ	0xFF3
 11140                           intcon	equ	0xFF2
 11141                           postinc0	equ	0xFEE
 11142                           fsr0h	equ	0xFEA
 11143                           fsr0l	equ	0xFE9
 11144                           wreg	equ	0xFE8
 11145                           postdec1	equ	0xFE5
 11146                           plusw1	equ	0xFE3
 11147                           fsr1h	equ	0xFE2
 11148                           fsr1l	equ	0xFE1
 11149                           indf2	equ	0xFDF
 11150                           postinc2	equ	0xFDE
 11151                           postdec2	equ	0xFDD
 11152                           plusw2	equ	0xFDB
 11153                           fsr2h	equ	0xFDA
 11154                           fsr2l	equ	0xFD9
 11155                           status	equ	0xFD8
 11156                           tosu	equ	0xFFF
 11157                           tosh	equ	0xFFE
 11158                           tosl	equ	0xFFD
 11159                           pclatu	equ	0xFFB
 11160                           pclath	equ	0xFFA
 11161                           tblptru	equ	0xFF8
 11162                           tblptrh	equ	0xFF7
 11163                           tblptrl	equ	0xFF6
 11164                           tablat	equ	0xFF5
 11165                           prodh	equ	0xFF4
 11166                           prodl	equ	0xFF3
 11167                           intcon	equ	0xFF2
 11168                           postinc0	equ	0xFEE
 11169                           fsr0h	equ	0xFEA
 11170                           fsr0l	equ	0xFE9
 11171                           wreg	equ	0xFE8
 11172                           postdec1	equ	0xFE5
 11173                           plusw1	equ	0xFE3
 11174                           fsr1h	equ	0xFE2
 11175                           fsr1l	equ	0xFE1
 11176                           indf2	equ	0xFDF
 11177                           postinc2	equ	0xFDE
 11178                           postdec2	equ	0xFDD
 11179                           plusw2	equ	0xFDB
 11180                           fsr2h	equ	0xFDA
 11181                           fsr2l	equ	0xFD9
 11182                           status	equ	0xFD8
 11183                           
 11184                           	psect	text108
 11185  000000                     __ptext108:
 11186                           	opt stack 0
 11187                           tosu	equ	0xFFF
 11188                           tosh	equ	0xFFE
 11189                           tosl	equ	0xFFD
 11190                           pclatu	equ	0xFFB
 11191                           pclath	equ	0xFFA
 11192                           tblptru	equ	0xFF8
 11193                           tblptrh	equ	0xFF7
 11194                           tblptrl	equ	0xFF6
 11195                           tablat	equ	0xFF5
 11196                           prodh	equ	0xFF4
 11197                           prodl	equ	0xFF3
 11198                           intcon	equ	0xFF2
 11199                           postinc0	equ	0xFEE
 11200                           fsr0h	equ	0xFEA
 11201                           fsr0l	equ	0xFE9
 11202                           wreg	equ	0xFE8
 11203                           postdec1	equ	0xFE5
 11204                           plusw1	equ	0xFE3
 11205                           fsr1h	equ	0xFE2
 11206                           fsr1l	equ	0xFE1
 11207                           indf2	equ	0xFDF
 11208                           postinc2	equ	0xFDE
 11209                           postdec2	equ	0xFDD
 11210                           plusw2	equ	0xFDB
 11211                           fsr2h	equ	0xFDA
 11212                           fsr2l	equ	0xFD9
 11213                           status	equ	0xFD8
 11214                           
 11215                           	psect	rparam
 11216  0000                     tosu	equ	0xFFF
 11217                           tosh	equ	0xFFE
 11218                           tosl	equ	0xFFD
 11219                           pclatu	equ	0xFFB
 11220                           pclath	equ	0xFFA
 11221                           tblptru	equ	0xFF8
 11222                           tblptrh	equ	0xFF7
 11223                           tblptrl	equ	0xFF6
 11224                           tablat	equ	0xFF5
 11225                           prodh	equ	0xFF4
 11226                           prodl	equ	0xFF3
 11227                           intcon	equ	0xFF2
 11228                           postinc0	equ	0xFEE
 11229                           fsr0h	equ	0xFEA
 11230                           fsr0l	equ	0xFE9
 11231                           wreg	equ	0xFE8
 11232                           postdec1	equ	0xFE5
 11233                           plusw1	equ	0xFE3
 11234                           fsr1h	equ	0xFE2
 11235                           fsr1l	equ	0xFE1
 11236                           indf2	equ	0xFDF
 11237                           postinc2	equ	0xFDE
 11238                           postdec2	equ	0xFDD
 11239                           plusw2	equ	0xFDB
 11240                           fsr2h	equ	0xFDA
 11241                           fsr2l	equ	0xFD9
 11242                           status	equ	0xFD8
 11243                           
 11244                           	psect	temp
 11245  000047                     btemp:
 11246                           	opt stack 0
 11247  000047                     	ds	1
 11248  0000                     int$flags	set	btemp
 11249  0000                     wtemp6	set	btemp+1
 11250                           tosu	equ	0xFFF
 11251                           tosh	equ	0xFFE
 11252                           tosl	equ	0xFFD
 11253                           pclatu	equ	0xFFB
 11254                           pclath	equ	0xFFA
 11255                           tblptru	equ	0xFF8
 11256                           tblptrh	equ	0xFF7
 11257                           tblptrl	equ	0xFF6
 11258                           tablat	equ	0xFF5
 11259                           prodh	equ	0xFF4
 11260                           prodl	equ	0xFF3
 11261                           intcon	equ	0xFF2
 11262                           postinc0	equ	0xFEE
 11263                           fsr0h	equ	0xFEA
 11264                           fsr0l	equ	0xFE9
 11265                           wreg	equ	0xFE8
 11266                           postdec1	equ	0xFE5
 11267                           plusw1	equ	0xFE3
 11268                           fsr1h	equ	0xFE2
 11269                           fsr1l	equ	0xFE1
 11270                           indf2	equ	0xFDF
 11271                           postinc2	equ	0xFDE
 11272                           postdec2	equ	0xFDD
 11273                           plusw2	equ	0xFDB
 11274                           fsr2h	equ	0xFDA
 11275                           fsr2l	equ	0xFD9
 11276                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        48
    BSS         56
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     64      70
    BANK0           160     39     137
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          136      0       0

Pointer List with Targets:

    i2c_write1ByteRegister@data.data	PTR unsigned char  size(2) Largest target is 0

    i2c_read1ByteRegister@d2.data	PTR unsigned char  size(2) Largest target is 0

    i2c_read2ByteRegister@result.data	PTR unsigned char  size(2) Largest target is 0

    i2c_write2ByteRegister@data.data	PTR unsigned char  size(2) Largest target is 0

    do_I2C_TX$2170$0	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    do_I2C_RX$2176$0	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    do_I2C_TX_EMPTY$2182$0	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    i2c_ISR$2188	PTR const FTN()enum E11956 size(3) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    do_I2C_TX_EMPTY$2187	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    do_I2C_TX_EMPTY$2182	PTR FTN(PTR void ,)enum E11790 size(3) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    do_I2C_RX$2181	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    do_I2C_RX$2176	PTR FTN(PTR void ,)enum E11790 size(3) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    do_I2C_TX$2175	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    do_I2C_TX$2170	PTR FTN(PTR void ,)enum E11790 size(3) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    returnStop@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    returnReset@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    Absolute function$0	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    i2c_restartWrite@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    S833$11$0	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    mssp1_waitForEvent@timeout	PTR unsigned int  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_readNBytes@data	PTR void  size(2) Largest target is 1
		 -> readIoExpander@rec(COMRAM[1]), 

    d.data	PTR unsigned char  size(2) Largest target is 0

    S1098$data	PTR unsigned char  size(2) Largest target is 0

    rdBlkRegCompleteHandler@p.data	PTR unsigned char  size(2) Largest target is 0

    rdBlkRegCompleteHandler@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    wr2RegCompleteHandler@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    rd2RegCompleteHandler@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    rd1RegCompleteHandler@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    i2c_writeNBytes@data	PTR void  size(2) Largest target is 2
		 -> readIoExpander@data(COMRAM[2]), 

    wr1RegCompleteHandler@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    setCallBack@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    setCallBack@cb	PTR FTN(PTR void ,)enum E11790 size(3) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), 

    fsmStateTable	PTR const FTN()enum E11956[16] size(3) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    i2c_setBuffer@buffer	PTR void  size(2) Largest target is 5
		 -> readIoExpander@rec(COMRAM[1]), readIoExpander@data(COMRAM[2]), i2c_readDataBlock@reg(COMRAM[1]), i2c_readDataBlock@d(COMRAM[4]), 
		 -> i2c_write2ByteRegister@reg(COMRAM[1]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@reg(COMRAM[1]), i2c_read2ByteRegister@result(COMRAM[2]), 
		 -> i2c_read1ByteRegister@reg(COMRAM[1]), i2c_read1ByteRegister@d2(COMRAM[1]), i2c_write1ByteRegister@reg(COMRAM[1]), i2c_write1ByteRegister@data(COMRAM[1]), 
		 -> NULL(NULL[0]), 

    i2c_setAddressNACKCallback@p	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_setAddressNACKCallback@cb	PTR FTN(PTR void ,)enum E11790 size(3) Largest target is 1
		 -> i2c_restartWrite(), 

    i2c_setDataCompleteCallback@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    i2c_setDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E11790 size(3) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), Absolute function(), 

    S833$callbackPayload	PTR void [6] size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[4]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    S833$callbackTable	PTR FTN(PTR void ,)enum E11790[6] size(3) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E11790[6] size(3) Largest target is 1
		 -> i2_returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> rd1RegCompleteHandler(), wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), 
		 -> returnReset(), returnStop(), 

    S833$data_ptr	PTR unsigned char  size(2) Largest target is 5
		 -> readIoExpander@rec(COMRAM[1]), readIoExpander@data(COMRAM[2]), i2c_readDataBlock@reg(COMRAM[1]), i2c_readDataBlock@d(COMRAM[4]), 
		 -> i2c_write2ByteRegister@reg(COMRAM[1]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@reg(COMRAM[1]), i2c_read2ByteRegister@result(COMRAM[2]), 
		 -> i2c_read1ByteRegister@reg(COMRAM[1]), i2c_read1ByteRegister@d2(COMRAM[1]), i2c_write1ByteRegister@reg(COMRAM[1]), i2c_write1ByteRegister@data(COMRAM[1]), 
		 -> NULL(NULL[0]), 

    i2c_status.data_ptr	PTR unsigned char  size(2) Largest target is 5
		 -> readIoExpander@rec(COMRAM[1]), readIoExpander@data(COMRAM[2]), i2c_readDataBlock@reg(COMRAM[1]), i2c_readDataBlock@d(COMRAM[4]), 
		 -> i2c_write2ByteRegister@reg(COMRAM[1]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@reg(COMRAM[1]), i2c_read2ByteRegister@result(COMRAM[2]), 
		 -> i2c_read1ByteRegister@reg(COMRAM[1]), i2c_read1ByteRegister@d2(COMRAM[1]), i2c_write1ByteRegister@reg(COMRAM[1]), i2c_write1ByteRegister@data(COMRAM[1]), 
		 -> NULL(NULL[0]), 

    i2c1_driver_setI2cISR@f	PTR void  size(3) Largest target is 1
		 -> i2c_ISR(), 

    i2c1_driver_i2cISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_setBusCollisionISR@f	PTR void  size(3) Largest target is 1
		 -> i2c_busCollisionISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 


Critical Paths under _main in COMRAM

    _main->_getSpaces
    _getSpaces->_updateExpanders
    _updateExpanders->_readIoExpander
    _readIoExpander->_i2c_writeNBytes
    _i2c_writeNBytes->_i2c_setAddressNACKCallback
    _i2c_setAddressNACKCallback->_setCallBack
    _i2c_masterWrite->_i2c_masterOperation
    _i2c_readNBytes->_i2c_open
    _i2c_open->_i2c1_driver_setBusCollisionISR
    _i2c_open->_i2c1_driver_setI2cISR
    _i2c_masterRead->_i2c_masterOperation
    _i2c_ISR->_do_I2C_TX
    _do_I2C_TX->_i2c1_driver_TXData
    _do_I2C_TX->_i2c1_driver_isNACK
    _do_I2C_SEND_ADR_WRITE->_i2c1_driver_TXData
    _do_I2C_SEND_ADR_READ->_i2c1_driver_TXData
    _wr2RegCompleteHandler->_i2c_setDataCompleteCallback
    _wr1RegCompleteHandler->_i2c_setDataCompleteCallback
    _rdBlkRegCompleteHandler->_i2c_setDataCompleteCallback
    _rd2RegCompleteHandler->_i2c_setDataCompleteCallback
    _rd1RegCompleteHandler->_i2c_setDataCompleteCallback
    _i2c_setDataCompleteCallback->_setCallBack

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    i2_i2c_ISR->i2_do_I2C_TX
    i2_do_I2C_TX->i2_i2c1_driver_TXData
    i2_do_I2C_TX->i2_i2c1_driver_isNACK
    i2_do_I2C_SEND_ADR_WRITE->i2_i2c1_driver_TXData
    i2_do_I2C_SEND_ADR_READ->i2_i2c1_driver_TXData
    i2_wr2RegCompleteHandler->i2_i2c_setDataCompleteCallback
    i2_wr1RegCompleteHandler->i2_i2c_setDataCompleteCallback
    i2_rdBlkRegCompleteHandler->i2_i2c_setDataCompleteCallback
    i2_rd2RegCompleteHandler->i2_i2c_setDataCompleteCallback
    i2_rd1RegCompleteHandler->i2_i2c_setDataCompleteCallback
    i2_i2c_setDataCompleteCallback->i2_setCallBack

Critical Paths under _main in BANK0

    _main->_getSpaces
    _getSpaces->_updateExpanders

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0  223006
                                             14 BANK0     25    25      0
                 _EUSART2_Initialize
                  _SYSTEM_Initialize
                                _abs
                          _getSpaces
 ---------------------------------------------------------------------------------
 (1) _getSpaces                                            6     6      0  222586
                                             62 COMRAM     2     2      0
                                             10 BANK0      4     4      0
                    _updateExpanders
 ---------------------------------------------------------------------------------
 (2) _updateExpanders                                     16    12      4  222311
                                             56 COMRAM     6     2      4
                                              0 BANK0     10    10      0
                     _readIoExpander
 ---------------------------------------------------------------------------------
 (3) _readIoExpander                                      19    17      2  222073
                                             37 COMRAM    19    17      2
                     _i2c_readNBytes
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (4) _i2c_writeNBytes                                      5     1      4  111193
                                             32 COMRAM     5     1      4
                          _i2c_close
                    _i2c_masterWrite
                           _i2c_open
         _i2c_setAddressNACKCallback
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (5) _i2c_setAddressNACKCallback                           5     0      5    2259
                                             27 COMRAM     5     0      5
                        _setCallBack
 ---------------------------------------------------------------------------------
 (5) _i2c_masterWrite                                      0     0      0  106092
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (4) _i2c_readNBytes                                       5     1      4  108934
                                             26 COMRAM     5     1      4
                          _i2c_close
                     _i2c_masterRead
                           _i2c_open
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (5) _i2c_open                                             2     2      0     310
                                             24 COMRAM     2     2      0
                   _i2c1_driver_open
     _i2c1_driver_setBusCollisionISR
              _i2c1_driver_setI2cISR
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (6) _i2c1_driver_setI2cISR                                3     0      3     121
                                             21 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (6) _i2c1_driver_setBusCollisionISR                       3     0      3     121
                                             21 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (6) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2c_masterRead                                       0     0      0  106092
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (6) _i2c_masterOperation                                  2     2      0  106092
                                             24 COMRAM     2     2      0
                  _i2c1_driver_start
                         _i2c_poller
                 _mssp1_IRQisEnabled
 ---------------------------------------------------------------------------------
 (7) _mssp1_IRQisEnabled                                   1     1      0       0
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _i2c_poller                                           0     0      0  106024
                            _i2c_ISR
                 _mssp1_waitForEvent
 ---------------------------------------------------------------------------------
 (8) _mssp1_waitForEvent                                   2     0      2      90
                                             21 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _i2c_ISR                                              0     0      0  105934
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (9) _do_I2C_TX_EMPTY                                      0     0      0   26451
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
                       _mssp1_setIRQ
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (10) _mssp1_setIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _do_I2C_TX                                            2     2      0   26519
                                             22 COMRAM     2     2      0
                   Absolute function *
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (9) _i2c1_driver_isNACK                                   1     1      0       0
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_RESTART_WRITE                           0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_RESTART_READ                            0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (9) _do_I2C_SEND_ADR_WRITE                                0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (9) _do_I2C_SEND_ADR_READ                                 0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_TXData                                  1     1      0      31
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) _do_I2C_RX                                            0     0      0   26451
                   Absolute function *
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
              _i2c1_driver_getRXData
                _i2c1_driver_sendACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_getRXData                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_NACK_STOP                                 0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_NACK_RESTART                              0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_sendNACK                                0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _do_I2C_RESET                                         0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_resetBus                                0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _do_I2C_RCEN                                          0     0      0       0
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_startRX                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _do_I2C_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _do_I2C_DO_ADDRESS_NACK                               0     0      0   26451
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (10) _wr2RegCompleteHandler                               2     0      2    5232
                                             32 COMRAM     2     0      2
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (10) _wr1RegCompleteHandler                               2     0      2    5232
                                             32 COMRAM     2     0      2
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (10) _returnStop                                          2     0      2     108
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) _returnReset                                         2     0      2       0
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) _rdBlkRegCompleteHandler                             2     0      2    5415
                                             32 COMRAM     2     0      2
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (10) _rd2RegCompleteHandler                               2     0      2    5232
                                             32 COMRAM     2     0      2
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (10) _rd1RegCompleteHandler                               2     0      2    5232
                                             32 COMRAM     2     0      2
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (11) _i2c_setDataCompleteCallback                         5     0      5    2979
                                             27 COMRAM     5     0      5
                        _setCallBack
 ---------------------------------------------------------------------------------
 (6) _setCallBack                                          6     1      5    1117
                                             21 COMRAM     6     1      5
 ---------------------------------------------------------------------------------
 (5) _i2c_setBuffer                                        4     0      4    2222
                                             21 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (10) _i2c_restartWrite                                    2     0      2       0
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_STOP                                    0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_stop                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_RESTART                                 0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_restart                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (16) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 (9) _do_I2C_DO_ACK                                        0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_sendACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2c_close                                            1     1      0      37
                                             21 COMRAM     1     1      0
                     _mssp1_clearIRQ
                   _mssp1_disableIRQ
 ---------------------------------------------------------------------------------
 (6) _mssp1_disableIRQ                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _mssp1_clearIRQ                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _abs                                                  4     2      2     142
                                             21 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _INTERRUPT_InterruptManager                         18    18      0   17327
                                              3 COMRAM    18    18      0
                   Absolute function *
                _i2c_busCollisionISR *
                          i2_i2c_ISR *
 ---------------------------------------------------------------------------------
 (14) i2_i2c_ISR                                           0     0      0   17327
                    i2_do_I2C_DO_ACK *
           i2_do_I2C_DO_ADDRESS_NACK *
           i2_do_I2C_DO_NACK_RESTART *
              i2_do_I2C_DO_NACK_STOP *
                      i2_do_I2C_IDLE *
                      i2_do_I2C_RCEN *
                     i2_do_I2C_RESET *
                        i2_do_I2C_RX *
             i2_do_I2C_SEND_ADR_READ *
            i2_do_I2C_SEND_ADR_WRITE *
              i2_do_I2C_SEND_RESTART *
         i2_do_I2C_SEND_RESTART_READ *
        i2_do_I2C_SEND_RESTART_WRITE *
                 i2_do_I2C_SEND_STOP *
                        i2_do_I2C_TX *
                  i2_do_I2C_TX_EMPTY *
               i2_i2c1_driver_isNACK
                   i2_mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (15) i2_mssp1_clearIRQ                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_do_I2C_TX_EMPTY                                   0     0      0    4306
                   Absolute function *
              i2_do_I2C_SEND_RESTART
                 i2_do_I2C_SEND_STOP
                 i2_i2c_restartWrite *
                     i2_mssp1_setIRQ
            i2_rd1RegCompleteHandler *
            i2_rd2RegCompleteHandler *
          i2_rdBlkRegCompleteHandler *
                      i2_returnReset *
                       i2_returnStop *
            i2_wr1RegCompleteHandler *
            i2_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (16) i2_mssp1_setIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_do_I2C_TX                                         2     2      0    4365
                                              1 COMRAM     2     2      0
                   Absolute function *
         i2_do_I2C_SEND_RESTART_READ
        i2_do_I2C_SEND_RESTART_WRITE
                 i2_do_I2C_SEND_STOP
               i2_i2c1_driver_TXData
               i2_i2c1_driver_isNACK
                 i2_i2c_restartWrite *
            i2_rd1RegCompleteHandler *
            i2_rd2RegCompleteHandler *
          i2_rdBlkRegCompleteHandler *
                      i2_returnReset *
                       i2_returnStop *
            i2_wr1RegCompleteHandler *
            i2_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (15) i2_i2c1_driver_isNACK                                1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (16) i2_do_I2C_SEND_RESTART_WRITE                         0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (16) i2_do_I2C_SEND_RESTART_READ                          0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (15) i2_do_I2C_SEND_ADR_WRITE                             0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (15) i2_do_I2C_SEND_ADR_READ                              0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (16) i2_i2c1_driver_TXData                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (15) i2_do_I2C_RX                                         0     0      0    4306
                   Absolute function *
           i2_do_I2C_DO_NACK_RESTART
              i2_do_I2C_DO_NACK_STOP
            i2_i2c1_driver_getRXData
              i2_i2c1_driver_sendACK
                 i2_i2c_restartWrite *
            i2_rd1RegCompleteHandler *
            i2_rd2RegCompleteHandler *
          i2_rdBlkRegCompleteHandler *
                      i2_returnReset *
                       i2_returnStop *
            i2_wr1RegCompleteHandler *
            i2_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (16) i2_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i2_do_I2C_DO_NACK_STOP                               0     0      0       0
             i2_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (16) i2_do_I2C_DO_NACK_RESTART                            0     0      0       0
             i2_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (17) i2_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_do_I2C_RESET                                      0     0      0       0
             i2_i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (16) i2_i2c1_driver_resetBus                              0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_do_I2C_RCEN                                       0     0      0       0
              i2_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (16) i2_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_do_I2C_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_do_I2C_DO_ADDRESS_NACK                            0     0      0    4306
                   Absolute function *
              i2_do_I2C_SEND_RESTART
                 i2_do_I2C_SEND_STOP
                 i2_i2c_restartWrite *
            i2_rd1RegCompleteHandler *
            i2_rd2RegCompleteHandler *
          i2_rdBlkRegCompleteHandler *
                      i2_returnReset *
                       i2_returnStop *
            i2_wr1RegCompleteHandler *
            i2_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (16) i2_wr2RegCompleteHandler                             2     0      2     836
                                             11 COMRAM     2     0      2
                    i2_i2c_setBuffer
      i2_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (16) i2_wr1RegCompleteHandler                             2     0      2     836
                                             11 COMRAM     2     0      2
                    i2_i2c_setBuffer
      i2_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (16) i2_returnStop                                        2     0      2      76
                                             11 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (16) i2_returnReset                                       2     0      2       0
                                             11 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (16) i2_rdBlkRegCompleteHandler                           2     0      2     886
                                             11 COMRAM     2     0      2
                    i2_i2c_setBuffer
      i2_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (16) i2_rd2RegCompleteHandler                             2     0      2     836
                                             11 COMRAM     2     0      2
                    i2_i2c_setBuffer
      i2_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (16) i2_rd1RegCompleteHandler                             2     0      2     836
                                             11 COMRAM     2     0      2
                    i2_i2c_setBuffer
      i2_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (17) i2_i2c_setDataCompleteCallback                       5     0      5     510
                                              6 COMRAM     5     0      5
                      i2_setCallBack
 ---------------------------------------------------------------------------------
 (18) i2_setCallBack                                       6     1      5     206
                                              0 COMRAM     6     1      5
 ---------------------------------------------------------------------------------
 (17) i2_i2c_setBuffer                                     4     0      4     304
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (16) i2_i2c_restartWrite                                  2     0      2       0
                                             11 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (16) i2_do_I2C_SEND_STOP                                  0     0      0       0
                 i2_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (17) i2_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i2_do_I2C_SEND_RESTART                               0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (17) i2_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (16) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 (15) i2_do_I2C_DO_ACK                                     0     0      0       0
              i2_i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (16) i2_i2c1_driver_sendACK                               0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _i2c_busCollisionISR                                 0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (15) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART2_Initialize
   _SYSTEM_Initialize
     _EUSART2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
   _abs
   _getSpaces
     _updateExpanders
       _readIoExpander
         _i2c_readNBytes
           _i2c_close
             _mssp1_clearIRQ
             _mssp1_disableIRQ
           _i2c_masterRead
             _i2c_masterOperation
               _i2c1_driver_start
               _i2c_poller
                 _i2c_ISR
                   _do_I2C_DO_ACK *
                     _i2c1_driver_sendACK
                   _do_I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _do_I2C_SEND_RESTART *
                       _i2c1_driver_restart
                     _do_I2C_SEND_STOP *
                       _i2c1_driver_stop
                     _i2c_restartWrite *
                     _rd1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rd2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rdBlkRegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _returnReset *
                     _returnStop *
                     _wr1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _wr2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                   _do_I2C_DO_NACK_RESTART *
                     _i2c1_driver_sendNACK
                   _do_I2C_DO_NACK_STOP *
                     _i2c1_driver_sendNACK
                   _do_I2C_IDLE *
                   _do_I2C_RCEN *
                     _i2c1_driver_startRX
                   _do_I2C_RESET *
                     _i2c1_driver_resetBus
                   _do_I2C_RX *
                     Absolute function(Fake) *
                     _do_I2C_DO_NACK_RESTART *
                       _i2c1_driver_sendNACK
                     _do_I2C_DO_NACK_STOP *
                       _i2c1_driver_sendNACK
                     _i2c1_driver_getRXData *
                     _i2c1_driver_sendACK *
                     _i2c_restartWrite *
                     _rd1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rd2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rdBlkRegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _returnReset *
                     _returnStop *
                     _wr1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _wr2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                   _do_I2C_SEND_ADR_READ *
                     _i2c1_driver_TXData
                   _do_I2C_SEND_ADR_WRITE *
                     _i2c1_driver_TXData
                   _do_I2C_SEND_RESTART *
                     _i2c1_driver_restart
                   _do_I2C_SEND_RESTART_READ *
                     _i2c1_driver_restart
                   _do_I2C_SEND_RESTART_WRITE *
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP *
                     _i2c1_driver_stop
                   _do_I2C_TX *
                     Absolute function(Fake) *
                     _do_I2C_SEND_RESTART_READ *
                       _i2c1_driver_restart
                     _do_I2C_SEND_RESTART_WRITE *
                       _i2c1_driver_restart
                     _do_I2C_SEND_STOP *
                       _i2c1_driver_stop
                     _i2c1_driver_TXData *
                     _i2c1_driver_isNACK *
                     _i2c_restartWrite *
                     _rd1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rd2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rdBlkRegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _returnReset *
                     _returnStop *
                     _wr1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _wr2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                   _do_I2C_TX_EMPTY *
                     Absolute function(Fake) *
                     _do_I2C_SEND_RESTART *
                       _i2c1_driver_restart
                     _do_I2C_SEND_STOP *
                       _i2c1_driver_stop
                     _i2c_restartWrite *
                     _mssp1_setIRQ *
                     _rd1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rd2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rdBlkRegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _returnReset *
                     _returnStop *
                     _wr1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _wr2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                   _i2c1_driver_isNACK *
                   _mssp1_clearIRQ *
                 _mssp1_waitForEvent
               _mssp1_IRQisEnabled
           _i2c_open
             _i2c1_driver_open
             _i2c1_driver_setBusCollisionISR
             _i2c1_driver_setI2cISR
             _mssp1_clearIRQ
           _i2c_setBuffer
         _i2c_writeNBytes
           _i2c_close
             _mssp1_clearIRQ
             _mssp1_disableIRQ
           _i2c_masterWrite
             _i2c_masterOperation
               _i2c1_driver_start
               _i2c_poller
                 _i2c_ISR
                   _do_I2C_DO_ACK *
                     _i2c1_driver_sendACK
                   _do_I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _do_I2C_SEND_RESTART *
                       _i2c1_driver_restart
                     _do_I2C_SEND_STOP *
                       _i2c1_driver_stop
                     _i2c_restartWrite *
                     _rd1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rd2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rdBlkRegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _returnReset *
                     _returnStop *
                     _wr1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _wr2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                   _do_I2C_DO_NACK_RESTART *
                     _i2c1_driver_sendNACK
                   _do_I2C_DO_NACK_STOP *
                     _i2c1_driver_sendNACK
                   _do_I2C_IDLE *
                   _do_I2C_RCEN *
                     _i2c1_driver_startRX
                   _do_I2C_RESET *
                     _i2c1_driver_resetBus
                   _do_I2C_RX *
                     Absolute function(Fake) *
                     _do_I2C_DO_NACK_RESTART *
                       _i2c1_driver_sendNACK
                     _do_I2C_DO_NACK_STOP *
                       _i2c1_driver_sendNACK
                     _i2c1_driver_getRXData *
                     _i2c1_driver_sendACK *
                     _i2c_restartWrite *
                     _rd1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rd2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rdBlkRegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _returnReset *
                     _returnStop *
                     _wr1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _wr2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                   _do_I2C_SEND_ADR_READ *
                     _i2c1_driver_TXData
                   _do_I2C_SEND_ADR_WRITE *
                     _i2c1_driver_TXData
                   _do_I2C_SEND_RESTART *
                     _i2c1_driver_restart
                   _do_I2C_SEND_RESTART_READ *
                     _i2c1_driver_restart
                   _do_I2C_SEND_RESTART_WRITE *
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP *
                     _i2c1_driver_stop
                   _do_I2C_TX *
                     Absolute function(Fake) *
                     _do_I2C_SEND_RESTART_READ *
                       _i2c1_driver_restart
                     _do_I2C_SEND_RESTART_WRITE *
                       _i2c1_driver_restart
                     _do_I2C_SEND_STOP *
                       _i2c1_driver_stop
                     _i2c1_driver_TXData *
                     _i2c1_driver_isNACK *
                     _i2c_restartWrite *
                     _rd1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rd2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rdBlkRegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _returnReset *
                     _returnStop *
                     _wr1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _wr2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                   _do_I2C_TX_EMPTY *
                     Absolute function(Fake) *
                     _do_I2C_SEND_RESTART *
                       _i2c1_driver_restart
                     _do_I2C_SEND_STOP *
                       _i2c1_driver_stop
                     _i2c_restartWrite *
                     _mssp1_setIRQ *
                     _rd1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rd2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rdBlkRegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _returnReset *
                     _returnStop *
                     _wr1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _wr2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                   _i2c1_driver_isNACK *
                   _mssp1_clearIRQ *
                 _mssp1_waitForEvent
               _mssp1_IRQisEnabled
           _i2c_open
             _i2c1_driver_open
             _i2c1_driver_setBusCollisionISR
             _i2c1_driver_setI2cISR
             _mssp1_clearIRQ
           _i2c_setAddressNACKCallback
             _setCallBack
           _i2c_setBuffer

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision
   i2_i2c_ISR *
     i2_do_I2C_DO_ACK *
       i2_i2c1_driver_sendACK
     i2_do_I2C_DO_ADDRESS_NACK *
       Absolute function(Fake) *
       i2_do_I2C_SEND_RESTART *
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP *
         i2_i2c1_driver_stop
       i2_i2c_restartWrite *
       i2_rd1RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_rd2RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_rdBlkRegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_returnReset *
       i2_returnStop *
       i2_wr1RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_wr2RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
     i2_do_I2C_DO_NACK_RESTART *
       i2_i2c1_driver_sendNACK
     i2_do_I2C_DO_NACK_STOP *
       i2_i2c1_driver_sendNACK
     i2_do_I2C_IDLE *
     i2_do_I2C_RCEN *
       i2_i2c1_driver_startRX
     i2_do_I2C_RESET *
       i2_i2c1_driver_resetBus
     i2_do_I2C_RX *
       Absolute function(Fake) *
       i2_do_I2C_DO_NACK_RESTART *
         i2_i2c1_driver_sendNACK
       i2_do_I2C_DO_NACK_STOP *
         i2_i2c1_driver_sendNACK
       i2_i2c1_driver_getRXData *
       i2_i2c1_driver_sendACK *
       i2_i2c_restartWrite *
       i2_rd1RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_rd2RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_rdBlkRegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_returnReset *
       i2_returnStop *
       i2_wr1RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_wr2RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
     i2_do_I2C_SEND_ADR_READ *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_ADR_WRITE *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_RESTART *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_RESTART_READ *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_RESTART_WRITE *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_STOP *
       i2_i2c1_driver_stop
     i2_do_I2C_TX *
       Absolute function(Fake) *
       i2_do_I2C_SEND_RESTART_READ *
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_RESTART_WRITE *
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP *
         i2_i2c1_driver_stop
       i2_i2c1_driver_TXData *
       i2_i2c1_driver_isNACK *
       i2_i2c_restartWrite *
       i2_rd1RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_rd2RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_rdBlkRegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_returnReset *
       i2_returnStop *
       i2_wr1RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_wr2RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
     i2_do_I2C_TX_EMPTY *
       Absolute function(Fake) *
       i2_do_I2C_SEND_RESTART *
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP *
         i2_i2c1_driver_stop
       i2_i2c_restartWrite *
       i2_mssp1_setIRQ *
       i2_rd1RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_rd2RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_rdBlkRegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_returnReset *
       i2_returnStop *
       i2_wr1RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_wr2RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
     i2_i2c1_driver_isNACK *
     i2_mssp1_clearIRQ *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E87      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     27      89       5       85.6%
BITBANK14           88      0       0      33        0.0%
BANK14              88      0       0      34        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     40      46       1       74.5%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CF       6        0.0%
DATA                 0      0      CF       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Apr 21 14:59:59 2018

                ??i2_i2c1_driver_startRX 0001                             returnReset@p 0021  
                      updateExpanders@lL 00C6                        updateExpanders@mL 00C8  
                      updateExpanders@lR 00C7                        updateExpanders@mR 00C9  
                      updateExpanders@rL 00CA                        updateExpanders@rR 00CB  
          _do_I2C_SEND_RESTART$intlevel0 1056                              __CFG_CP$OFF 000000  
                   __size_of_do_I2C_IDLE 0012                      _do_I2C_SEND_RESTART 1050  
                   __size_of_do_I2C_RCEN 0012                     readIoExpander@spaces 0034  
                    ?i2_i2c_restartWrite 000C                              __CFG_LVP$ON 000000  
                                    l431 09A4                                      l440 0510  
                                    l361 0DF4                                      l354 0458  
                                    l427 09AA                                      l435 0550  
                                    l451 06DC                                      l428 099E  
                                    l436 0516                                      l437 0504  
                                    l373 0CAC                                      l446 057E  
                                    l454 06EC                                      l622 0314  
                                    l463 08AA                                      l439 050A  
                                    l455 06E0                                      l375 0CBE  
                                    l464 0896                                      l457 06E6  
                                    l385 0E7A                                      l537 0A1A  
                                    l386 0E6A                                      l626 0362  
                                    l634 0498                                      l650 0112  
                                    l467 089C                                      l475 095E  
                                    l635 0478                                      l651 01F2  
                                    l468 08A4                                      l637 04BA  
                                    l639 04D4                                      l488 0768  
                                    l656 01F4                                      l657 020C  
                                    l597 0C84                                      l758 0DD0  
                           __CFG_CPD$OFF 000000          __end_ofi2_i2c1_driver_getRXData 1166  
                                    _abs 0DB2             __size_of_i2c_masterOperation 0032  
                   _returnStop$intlevel0 10AC            i2c_setDataCompleteCallback@cb 001C  
        i2i2c_setDataCompleteCallback@cb 0007                  __size_of_PMD_Initialize 001C  
                  __size_of_do_I2C_RESET 0016                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
               ?i2_rd1RegCompleteHandler 000C          i2c1_driver_setBusCollisionISR@f 0016  
                            i2_do_I2C_RX 0816                              i2_do_I2C_TX 061C  
               ?i2_wr1RegCompleteHandler 000C                             __CFG_ZCD$OFF 000000  
                                   ?_abs 0016                  ??_rd2RegCompleteHandler 0023  
                                   l4006 04F0                                     l4144 0112  
                                   l3814 09DE                                     l3826 0C60  
                                   l3870 03A8                                     l3858 0352  
                                   l3988 04AA                           i2_mssp1_setIRQ 112C  
                 __size_ofi2_do_I2C_IDLE 000C                   __size_ofi2_do_I2C_RCEN 000C  
                                   u2221 010A                                     _LATA 000F83  
                                   u2230 01EE                                     _LATB 000F84  
                                   _LATC 000F85                                     _LATD 000F86  
                                   _LATE 000F87                                     u2250 022E  
                                   u1640 0F02                                     u2267 0214  
                                   u1628 06FC                                     u1629 0710  
                                   u2277 048C                                     u1638 08BA  
                                   u1639 08CE                                     u2287 04DE  
                                   u1840 0310                                     u2297 0F0A  
                                   u1578 09BA                                     u1690 0FA2  
                                   u1579 09CE                                     u1598 0526  
                                   u1870 03A8                                     u1599 053A  
                                   u1688 0974                                     u1864 037E  
                                   u1689 0988                                     u1865 037A  
                                   u1698 0FA4                                     u1980 04F0  
                                   _PMD0 000EE1                                     _PMD1 000EE2  
                                   _PMD2 000EE3                                     _PMD3 000EE4  
                                   _PMD4 000EE5                                     _PMD5 000EE6  
                   ?_do_I2C_SEND_RESTART 0001                                     _WPUA 000F10  
                                   _WPUB 000F18                                     _WPUC 000F20  
                                   _WPUD 000F25                                     _WPUE 000F2D  
                   ??i2_i2c_restartWrite 000E                  ??_wr2RegCompleteHandler 0023  
                          __CFG_FCMEN$ON 000000        __size_of_do_I2C_SEND_RESTART_READ 000E  
                                   abs@a 0016                     __end_ofi2_returnStop 1176  
              ?_do_I2C_SEND_RESTART_READ 0001                                     _main 00E0  
              __size_of_do_I2C_SEND_STOP 000E                   __size_of_do_I2C_DO_ACK 000E  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   fsr2h 000FDA                                     fsr0l 000FE9  
                                   indf2 000FDF                                     fsr1l 000FE1  
                                   fsr2l 000FD9                                     btemp 0047  
                  ?_do_I2C_SEND_ADR_READ 0001                                     prodh 000FF4  
                                   prodl 000FF3          ??_i2c1_driver_clearBusCollision 0001  
               __size_of_i2c_writeNBytes 004A                                     start 00DC  
                          _i2c_setBuffer 0E82                            __CFG_CSWEN$ON 000000  
                        __end_of_i2c_ISR 098E                             ___param_bank 000000  
       __size_of_rdBlkRegCompleteHandler 004A                            __CFG_SCANE$ON 000000  
               ??_do_I2C_DO_NACK_RESTART 0016                __size_of_mssp1_disableIRQ 0006  
                                  ??_abs 0018                  __end_of_updateExpanders 02EE  
                           _do_I2C_RESET 0F3E           __size_of_OSCILLATOR_Initialize 0018  
            i2c_setAddressNACKCallback@p 001F            __end_of_OSCILLATOR_Initialize 0ECE  
               __end_of_i2c1_driver_open 0EFC                                    ?_main 0001  
                         _i2c_readNBytes 0C5E                 __size_ofi2_i2c_setBuffer 001A  
               __end_of_i2c1_driver_stop 1156                            __CFG_WDTE$OFF 000000  
             __end_of_i2c1_driver_TXData 10C8                           __CFG_DEBUG$OFF 000000  
                __size_ofi2_do_I2C_RESET 0010                                    i2l431 0AC8  
                                  i2l440 0632                                    i2l273 0072  
                                  i2l427 0ACE                                    i2l435 0672  
                                  i2l451 0840                                    i2l428 0AC2  
                                  i2l436 0638                                    i2l437 0626  
                                  i2l446 06A0                                    i2l454 0850  
                                  i2l463 0902                                    i2l439 062C  
                                  i2l455 0844                                    i2l464 08EE  
                                  i2l457 084A                                    i2l467 08F4  
                                  i2l475 0A88                                    i2l468 08FC  
                                  i2l488 07E0                                    _OSCEN 000EDC  
                                  _TRISA 000F88                                    _TRISB 000F89  
                                  _TRISC 000F8A                                    _TRISD 000F8B  
                                  _TRISE 000F8C                            __CFG_WRT0$OFF 000000  
                          __CFG_WRT1$OFF 000000                            __CFG_WRT2$OFF 000000  
                          __CFG_WRT3$OFF 000000                            __CFG_WRT4$OFF 000000  
                          __CFG_WRT5$OFF 000000                            __CFG_WRT6$OFF 000000  
                          __CFG_WRT7$OFF 000000                           __CFG_EBTR0$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                              i2c_open@ret 001A  
                         __CFG_EBTR4$OFF 000000                           __CFG_EBTR5$OFF 000000  
                         __CFG_EBTR6$OFF 000000                           __CFG_EBTR7$OFF 000000  
                  updateExpanders@spaces 00C2                           _i2c_masterRead 10B8  
                          __CFG_WRTB$OFF 000000                    __end_ofi2_returnReset 1172  
                          __CFG_WRTC$OFF 000000                            __CFG_WRTD$OFF 000000  
                 __end_ofi2_mssp1_setIRQ 1132                           __CFG_EBTRB$OFF 000000  
             __end_of_i2c1_driver_isNACK 0F6A                       __size_ofi2_i2c_ISR 0048  
             ?_do_I2C_SEND_RESTART_WRITE 0001                       __CFG_MCLRE$EXTMCLR 000000  
                  ??_do_I2C_SEND_RESTART 0016                                    main@i 00E5  
                          i2returnStop@p 000C   __end_of_i2c1_driver_setBusCollisionISR 1018  
__size_of_i2c1_driver_setBusCollisionISR 000E           _i2c1_driver_setBusCollisionISR 100A  
                                  pclath 000FFA                                    tablat 000FF5  
                __size_of_mssp1_clearIRQ 0006                                    plusw1 000FE3  
                                  plusw2 000FDB                   ?_do_I2C_SEND_ADR_WRITE 0001  
                                  status 000FD8                                    wtemp6 0048  
        __size_ofi2_i2c1_driver_sendNACK 0006                           ?_i2c_setBuffer 0016  
                           ?_setCallBack 0016          __size_ofi2_i2c1_driver_resetBus 0002  
                          _fsmStateTable 0092                          __initialization 0B44  
                             _i2c_poller 0E68                               _i2c_status 0060  
                           __end_of_main 0230                            i2_do_I2C_IDLE 1086  
                       i2setCallBack@idx 0006                            i2_do_I2C_RCEN 107A  
                       __end_of_i2c_open 045C                         i2_do_I2C_TX$1036 0002  
                 __end_of_i2c_readNBytes 0C90              ?_INTERRUPT_InterruptManager 0001  
                  i2i2c_setBuffer@buffer 0001                         i2_mssp1_clearIRQ 1126  
       __end_ofi2_do_I2C_DO_ADDRESS_NACK 0B00          __end_ofi2_rd1RegCompleteHandler 0D52  
                          setCallBack@cb 0016                            _do_I2C_DO_ACK 1034  
                                 ??_main 00D0                        ?_i2c_restartWrite 0021  
          __size_of_i2c1_driver_sendNACK 0006                            __activetblptr 000003  
        __end_ofi2_wr1RegCompleteHandler 0D82                             i2c_close@ret 0016  
                 __end_of_i2c_masterRead 10C0                       ??_i2c_restartWrite 0023  
          __size_of_i2c1_driver_resetBus 0002                  ?_do_I2C_DO_ADDRESS_NACK 0001  
                        ?i2_mssp1_setIRQ 0001       __end_ofi2_do_I2C_SEND_RESTART_READ 1100  
             i2_do_I2C_SEND_RESTART_READ 10F8               __end_of_EUSART2_Initialize 0EE6  
                                 _ANSELA 000F11                                   _ANSELB 000F19  
                                 _ANSELC 000F21                                   _ANSELD 000F26  
                                 _ANSELE 000F2E                 __size_ofi2_do_I2C_DO_ACK 0008  
                                 _RC2REG 000E99                                   _RC2STA 000E9D  
                                 _RC3PPS 000EFA                                   _RC4PPS 000EFB  
                                 _ODCONA 000F0F                                   _ODCONB 000F17  
                                 _ODCONC 000F1F                                   _ODCOND 000F24  
                                 _ODCONE 000F2C                                   _RD7PPS 000F06  
                         __CFG_WDTCCS$SC 000000                       __size_of_i2c_close 001E  
                                 _OSCFRQ 000EDE                  i2_do_I2C_SEND_ADR_WRITE 0FCC  
                 ??_do_I2C_SEND_ADR_READ 0017                                   _TX2REG 000E9A  
                                 _TX2STA 000E9E                 rdBlkRegCompleteHandler@p 0021  
                              ??_i2c_ISR 0019                           __CFG_PWRTE$OFF 000000  
                ??i2_do_I2C_SEND_RESTART 0001                           __CFG_XINST$OFF 000000  
       __size_ofi2_i2c1_driver_getRXData 0004                    _i2c1_driver_getRXData 114A  
              __CFG_RSTOSC$HFINTOSC_1MHZ 000000                       i2_i2c1_driver_stop 1176  
                    _do_I2C_RX$intlevel0 06B2              __end_of_do_I2C_DO_NACK_STOP 1034  
    __end_of_i2c_setDataCompleteCallback 0E30           ?i2_i2c_setDataCompleteCallback 0007  
            _i2c_setDataCompleteCallback 0E14                           ?i2_do_I2C_IDLE 0001  
                        _i2c_masterWrite 10B0                           ?i2_do_I2C_RCEN 0001  
  __end_of_i2c1_driver_clearBusCollision 114A   __size_of_i2c1_driver_clearBusCollision 0006  
          _i2c1_driver_clearBusCollision 1144                           __CFG_STVREN$ON 000000  
                      __end_ofi2_i2c_ISR 0AB8          __size_of_do_I2C_DO_NACK_RESTART 000E  
                      ??_i2c_writeNBytes 0025                         ?_updateExpanders 0039  
                        ?_i2c_readNBytes 001B                           i2returnReset@p 000C  
                                 clear_0 0B6A                           ?_do_I2C_DO_ACK 0001  
                    ?i2_i2c1_driver_stop 0001           i2i2c_setDataCompleteCallback@p 000A  
                 i2_i2c1_driver_sendNACK 1132                   i2c1_driver_setI2cISR@f 0016  
            __end_of_i2c1_driver_sendACK 111A                           _PMD_Initialize 0E30  
         __end_of_do_I2C_DO_ADDRESS_NACK 09DC                          ?_i2c_masterRead 0001  
                 i2_i2c1_driver_resetBus 1180              ?_i2c_setAddressNACKCallback 001C  
   __size_ofi2_do_I2C_SEND_RESTART_WRITE 0008              __end_of_i2c1_driver_restart 115A  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                             ?_returnReset 0021  
          _do_I2C_DO_NACK_STOP$intlevel0 102C                    _i2c1_driver_setI2cISR 0FFC  
            __end_of_i2c1_driver_startRX 1152                    __size_ofi2_returnStop 0004  
                      ??i2_i2c_setBuffer 0005           __size_ofi2_do_I2C_DO_NACK_STOP 0008  
          __size_of_INTERRUPT_Initialize 0004            __end_ofi2_do_I2C_DO_NACK_STOP 10D8  
                      _SYSTEM_Initialize 0F6A                               __accesstop 0060  
                   ??i2_i2c1_driver_stop 0001                       readIoExpander@addr 0035  
                __end_of__initialization 0B7C                       readIoExpander@bank 0026  
                     readIoExpander@data 0032                          ??_i2c_setBuffer 001A  
         _do_I2C_SEND_ADR_READ$intlevel0 0F2E                         _do_I2C_SEND_STOP 1042  
                     __size_of_do_I2C_RX 007A                       __size_of_do_I2C_TX 0096  
                     ?_SYSTEM_Initialize 0001                            ___rparam_used 000001  
             __end_of_mssp1_IRQisEnabled 0FA8        _rdBlkRegCompleteHandler$intlevel0 0A2C  
                __size_of_readIoExpander 00BE                      _i2c_masterOperation 0C90  
               __size_of_do_I2C_TX_EMPTY 005E               ?i2_rdBlkRegCompleteHandler 000C  
                _rdBlkRegCompleteHandler 0A26           __size_ofi2_i2c1_driver_sendACK 0006  
             __end_of_mssp1_waitForEvent 0F12            __end_ofi2_i2c1_driver_sendACK 113E  
                            ?_i2c_poller 0001                           __pcstackCOMRAM 0001  
                    _do_I2C_TX$intlevel0 04FA                             __pidataBANK0 0CC2  
                    ??_SYSTEM_Initialize 0016           __size_ofi2_i2c1_driver_restart 0004  
          __end_ofi2_i2c1_driver_restart 117E                         _mssp1_disableIRQ 111A  
         __size_ofi2_i2c1_driver_startRX 0004            __end_ofi2_i2c1_driver_startRX 116A  
                 __end_of_PMD_Initialize 0E4C                        __end_of_i2c_close 0DF8  
                           i2_returnStop 1172                           i2_do_I2C_RESET 0FEC  
                   ?_i2c_masterOperation 0001                       __size_of_getSpaces 0098  
               i2_do_I2C_DO_ADDRESS_NACK 0AB8                             ?i2_do_I2C_RX 0001  
                           ?i2_do_I2C_TX 0001                           main@gamerScore 00DB  
      __size_ofi2_do_I2C_DO_NACK_RESTART 0008                 i2rd2RegCompleteHandler@p 000C  
                         setCallBack@idx 001B                ?i2_do_I2C_DO_NACK_RESTART 0001  
                 _do_I2C_DO_NACK_RESTART 1018                           _do_I2C_TX$1036 0017  
              __end_of_SYSTEM_Initialize 0F80                ??i2_do_I2C_SEND_ADR_WRITE 0002  
             __end_ofi2_do_I2C_SEND_STOP 10E8                           _mssp1_clearIRQ 1120  
                             __pbssBANK0 0060            __size_ofi2_i2c1_driver_TXData 0008  
         __size_of_rd2RegCompleteHandler 0036                                ?_i2c_open 0001  
          __end_of_rd2RegCompleteHandler 0BBC           __size_of_wr2RegCompleteHandler 0036  
          __end_of_wr2RegCompleteHandler 0C5E                  __end_of_i2c_masterWrite 10B8  
       __size_ofi2_rd1RegCompleteHandler 0030                    _rd1RegCompleteHandler 0BBC  
                 ?_i2c1_driver_getRXData 0001                        ??i2_do_I2C_DO_ACK 0001  
               i2wr2RegCompleteHandler@p 000C            __size_ofi2_i2c1_driver_isNACK 0016  
                  _do_I2C_IDLE$intlevel0 0FC0                        i2_do_I2C_TX_EMPTY 08E8  
       __size_ofi2_wr1RegCompleteHandler 0030                          ??i2_do_I2C_IDLE 0001  
                  _wr1RegCompleteHandler 0BF2                           _SSP1DATPPSbits 000EB8  
           __size_of_i2c_busCollisionISR 0006                          ??i2_do_I2C_RCEN 0001  
        _wr1RegCompleteHandler$intlevel0 0BF8          _rd1RegCompleteHandler$intlevel0 0BC2  
                          ??_do_I2C_IDLE 0016                     __size_of_setCallBack 0078  
                          ??_do_I2C_RCEN 0016        __end_ofi2_rdBlkRegCompleteHandler 0B44  
                  i2c_readNBytes@address 001F                       ?i2_do_I2C_TX_EMPTY 0001  
                        __CFG_PPS1WAY$ON 000000                          ??_do_I2C_DO_ACK 0016  
                 __end_ofi2_do_I2C_RESET 0FFC                      i2c_setBuffer@buffer 0016  
                         _SSP1CLKPPSbits 000EB7                          ?_PMD_Initialize 0001  
         ?_i2c1_driver_clearBusCollision 0001                      ??i2_do_I2C_TX_EMPTY 0001  
                  ??_i2c_masterOperation 0019                        ?_i2c1_driver_open 0001  
                      __end_of_do_I2C_RX 0726                        __end_of_do_I2C_TX 058A  
               ??i2_do_I2C_SEND_ADR_READ 0002                        ?_i2c1_driver_stop 0001  
                 ?_i2c1_driver_setI2cISR 0016                                  _SP2BRGH 000E9C  
                                _SP2BRGL 000E9B                       ??_i2c1_driver_open 0016  
               ?i2_rd2RegCompleteHandler 000C                       ??_i2c1_driver_stop 0016  
                                _OSCCON1 000ED8                                  _OSCCON3 000EDA  
                          ?_mssp1_setIRQ 0001                   __size_ofi2_setCallBack 0078  
                                _OSCTUNE 000EDD                                  _SSP1ADD 000F93  
               ?i2_wr2RegCompleteHandler 000C                                  _SSP1BUF 000F92  
                 __end_of_mssp1_clearIRQ 1126                                  _SSP1MSK 000F94  
                    __size_of_i2c_poller 001A                  ??_do_I2C_SEND_ADR_WRITE 0017  
    _do_I2C_SEND_RESTART_WRITE$intlevel0 1064              ??_do_I2C_SEND_RESTART_WRITE 0016  
                     _i2c1_driver_TXData 10C0                               ??_i2c_open 0019  
            __size_ofi2_i2c_restartWrite 0004                 __end_ofi2_mssp1_clearIRQ 112C  
                     _i2c1_driver_i2cISR 0041                                  _i2c_ISR 0940  
              ??_rdBlkRegCompleteHandler 0023                __end_ofi2_do_I2C_TX_EMPTY 0940  
                i2_i2c1_driver_getRXData 1162                                  __Hparam 0000  
                  _returnReset$intlevel0 10A2                        __end_of_getSpaces 04F4  
                  _do_I2C_RCEN$intlevel0 0FAE                       _i2c1_driver_isNACK 0F54  
                    ?_i2c1_driver_TXData 0001                                  __Lparam 0000  
       _do_I2C_DO_ADDRESS_NACK$intlevel0 0994      __size_of_i2c_setAddressNACKCallback 001C  
                      ??_do_I2C_TX_EMPTY 0016                      ?_i2c1_driver_isNACK 0001  
                        ?i2_do_I2C_RESET 0001                                  __pcinit 0B44  
                                __ramtop 0F00                   i2c_writeNBytes@address 0025  
                     i2c_readNBytes@data 001B                                  __ptext0 00E0  
                                __ptext1 045C                                  __ptext2 0230  
                                __ptext3 02EE                                  __ptext4 09DC  
                                __ptext5 0DF8                                  __ptext6 10B0  
                                __ptext7 0C5E                                  __ptext8 03AC  
                                __ptext9 0FFC                      __end_of_do_I2C_IDLE 0FCC  
                    __end_of_do_I2C_RCEN 0FBA                         ??i2_mssp1_setIRQ 0001  
                  _OSCILLATOR_Initialize 0EB6                             __size_of_abs 0028  
            __end_of_do_I2C_SEND_RESTART 105E                           ??_mssp1_setIRQ 0016  
                   ??_i2c1_driver_TXData 0016                 ??_PIN_MANAGER_Initialize 0016  
                 i2c_masterOperation@ret 001A                          ?_mssp1_clearIRQ 0001  
             _do_I2C_SEND_STOP$intlevel0 1048              ?i2_do_I2C_SEND_RESTART_READ 0001  
               _do_I2C_SEND_RESTART_READ 106C               __size_of_SYSTEM_Initialize 0016  
                      main@photonAddress 00DC                     __size_of_returnReset 000A  
                   end_of_initialization 0B7C                     ??_i2c1_driver_isNACK 0016  
              __size_of_i2c_restartWrite 000A             __end_of_i2c1_driver_sendNACK 1114  
                 ?_rd1RegCompleteHandler 0021                          _i2c_writeNBytes 09DC  
                         _readIoExpander 02EE                         ?_i2c_masterWrite 0001  
                 ?_wr1RegCompleteHandler 0021             __end_of_i2c1_driver_resetBus 1180  
                     _EUSART2_Initialize 0ECE                         ??_i2c_readNBytes 001F  
                          i2_setCallBack 079E           __size_ofi2_do_I2C_SEND_RESTART 0008  
          __end_ofi2_do_I2C_SEND_RESTART 10F0                                  postdec1 000FE5  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc2 000FDE                   __size_ofi2_returnReset 0004  
           ?i2_do_I2C_SEND_RESTART_WRITE 0001                _do_I2C_SEND_RESTART_WRITE 105E  
                             main@F12042 008A                  ?i2_i2c1_driver_sendNACK 0001  
                       ??_i2c_masterRead 001B                    __CFG_WDTCPS$WDTCPS_31 000000  
                    ?_EUSART2_Initialize 0001                          i2_i2c_setBuffer 0E9C  
                ?i2_i2c1_driver_resetBus 0001          __end_ofi2_rd2RegCompleteHandler 0D22  
                             _returnStop 10A6          __end_of_rdBlkRegCompleteHandler 0A70  
               __end_of_do_I2C_SEND_STOP 1050                               getSpaces@i 00CD  
                              i2_i2c_ISR 0A70          __end_ofi2_wr2RegCompleteHandler 0DB2  
        __size_ofi2_do_I2C_SEND_ADR_READ 0010     __size_of_i2c_setDataCompleteCallback 001C  
        ??i2_i2c_setDataCompleteCallback 000C                      readIoExpander@index 0027  
                            returnStop@p 0021                         __CFG_FEXTOSC$OFF 000000  
               __end_of_mssp1_disableIRQ 1120                      readIoExpander@spots 002A  
                   __size_ofi2_do_I2C_RX 0074                     __size_ofi2_do_I2C_TX 0090  
                   ??_EUSART2_Initialize 0016             i2c_setDataCompleteCallback@p 001F  
                 __end_of_readIoExpander 03AC                ??i2_i2c1_driver_getRXData 0001  
                i2_rd1RegCompleteHandler 0D22               __size_ofi2_do_I2C_TX_EMPTY 0058  
                i2_wr1RegCompleteHandler 0D52                               main@player 00E7  
          __size_of_do_I2C_SEND_ADR_READ 0016                           ?i2_setCallBack 0001  
                           ??_i2c_poller 0019              ??i2_rdBlkRegCompleteHandler 000E  
         __end_ofi2_i2c1_driver_sendNACK 1138                              _do_I2C_IDLE 0FBA  
                            _do_I2C_RCEN 0FA8             __end_of_INTERRUPT_Initialize 1162  
         __end_ofi2_i2c1_driver_resetBus 1182               ??i2_do_I2C_DO_ADDRESS_NACK 0001  
       __end_ofi2_do_I2C_DO_NACK_RESTART 10D0            ??i2_do_I2C_SEND_RESTART_WRITE 0001  
                     _mssp1_IRQisEnabled 0F96                   ?_OSCILLATOR_Initialize 0001  
                             ?i2_i2c_ISR 0001             __size_of_do_I2C_DO_NACK_STOP 000E  
                     _mssp1_waitForEvent 0EFC                  ?_do_I2C_DO_NACK_RESTART 0001  
                    start_initialization 0B44                                _i2c_close 0DDA  
                    _i2c_busCollisionISR 113E                 __size_of_updateExpanders 00BE  
        __size_of_PIN_MANAGER_Initialize 0092                      ?_mssp1_IRQisEnabled 0001  
                            __end_of_abs 0DDA                          i2setCallBack@cb 0001  
                __end_of_i2c_writeNBytes 0A26                          i2_do_I2C_DO_ACK 10D8  
                          i2_returnReset 116E                      ?_mssp1_waitForEvent 0016  
                           setCallBack@p 0019                       __end_of_i2c_poller 0E82  
           __size_of_i2c1_driver_sendACK 0006                          i2c_open@address 0019  
                i2c_setBuffer@bufferSize 0018                  ??_i2c1_driver_getRXData 0016  
                        ?_readIoExpander 0026                   rd1RegCompleteHandler@p 0021  
           __size_of_i2c1_driver_restart 0004              __size_ofi2_i2c1_driver_stop 0004  
           __size_of_i2c1_driver_startRX 0004                    i2_do_I2C_DO_NACK_STOP 10D0  
                 i2_do_I2C_SEND_ADR_READ 0FDC                    __end_of_i2c_setBuffer 0E9C  
                      __size_of_i2c_open 00B0                     ?_i2c_busCollisionISR 0001  
                       __CFG_LPBOREN$OFF 000000                     __end_of_mssp1_setIRQ 110E  
                __end_ofi2_i2c_setBuffer 0EB6                     ??_mssp1_IRQisEnabled 0016  
                     i2_do_I2C_SEND_STOP 10E0                         ??_PMD_Initialize 0016  
                   ??_mssp1_waitForEvent 0018                   wr1RegCompleteHandler@p 0021  
                  i2_i2c1_driver_sendACK 1138                            ?_do_I2C_RESET 0001  
           __end_ofi2_i2c1_driver_TXData 1108                              __pdataBANK0 0092  
                  i2i2c1_driver_TXData@d 0001                _do_I2C_TX_EMPTY$intlevel0 0890  
    __size_ofi2_do_I2C_SEND_RESTART_READ 0008                    i2_i2c1_driver_restart 117A  
                            ?_returnStop 0021                      ?i2_do_I2C_SEND_STOP 0001  
                ??_i2c1_driver_setI2cISR 0019                    i2_i2c1_driver_startRX 1166  
                    i2i2c_restartWrite@p 000C           __end_of_do_I2C_DO_NACK_RESTART 1026  
                   _i2c1_driver_sendNACK 110E             __end_ofi2_i2c1_driver_isNACK 0F96  
                      readIoExpander@rec 0036                              __pbssCOMRAM 0041  
                             ?_i2c_close 0001                     _i2c1_driver_resetBus 117E  
              i2_rdBlkRegCompleteHandler 0B00                            __pcstackBANK0 00C2  
                         ?i2_returnReset 000C                                _do_I2C_RX 06AC  
                              _do_I2C_TX 04F4                ??i2_rd1RegCompleteHandler 000E  
         __size_of_do_I2C_SEND_ADR_WRITE 0016    __end_ofi2_i2c_setDataCompleteCallback 0E68  
 __size_ofi2_i2c_setDataCompleteCallback 001C            i2_i2c_setDataCompleteCallback 0E4C  
          __end_of_do_I2C_SEND_ADR_WRITE 0F28                ??i2_wr1RegCompleteHandler 000E  
                       _i2c_restartWrite 1092                     ??i2_do_I2C_SEND_STOP 0001  
             _i2c_restartWrite$intlevel0 1098                __size_of_i2c1_driver_open 0016  
                      ?i2_mssp1_clearIRQ 0001                __size_of_i2c1_driver_stop 0004  
                        ??i2_setCallBack 0006                                 ?_i2c_ISR 0001  
        _do_I2C_SEND_ADR_WRITE$intlevel0 0F18                          _do_I2C_TX_EMPTY 088A  
                          ??_setCallBack 001B         __size_ofi2_rd2RegCompleteHandler 0030  
                  _rd2RegCompleteHandler 0B86                       ??i2_mssp1_clearIRQ 0001  
                  ??_i2c_busCollisionISR 0001         __size_ofi2_wr2RegCompleteHandler 0030  
                 _PIN_MANAGER_Initialize 058A                    _wr2RegCompleteHandler 0C28  
                       ??i2_do_I2C_RESET 0001                                __pintcode 0008  
                  __end_ofi2_do_I2C_IDLE 1092                    __end_ofi2_do_I2C_RCEN 1086  
                         ??_do_I2C_RESET 0016                                __ptext100 0E4C  
                              __ptext101 079E                                __ptext102 0E9C  
                              __ptext103 1176                                __ptext104 117A  
                              __ptext105 1138                                __ptext106 113E  
                              __ptext107 1144                                __ptext108 0000  
            __end_of_i2c_masterOperation 0CC2                                _getSpaces 045C  
               ??_do_I2C_DO_ADDRESS_NACK 0016              _i2c1_driver_busCollisionISR 0044  
                  __end_of_do_I2C_DO_ACK 1042             ??_INTERRUPT_InterruptManager 0004  
             ??_do_I2C_SEND_RESTART_READ 0016                    ?_i2c1_driver_sendNACK 0001  
                            ??i2_i2c_ISR 0004                  __end_ofi2_do_I2C_DO_ACK 10E0  
                       ??_mssp1_clearIRQ 0016                                 _BAUD2CON 000E9F  
               i2_do_I2C_DO_NACK_RESTART 10C8                    ?_i2c1_driver_resetBus 0001  
     __size_of_do_I2C_SEND_RESTART_WRITE 000E                 ?i2_do_I2C_SEND_ADR_WRITE 0001  
                             ?_do_I2C_RX 0001                               ?_do_I2C_TX 0001  
                      _i2c1_driver_start 115A                         ?_i2c_writeNBytes 0021  
             __end_ofi2_i2c_restartWrite 116E                  ??_rd1RegCompleteHandler 0023  
                      i2c_readNBytes@len 001D                     _INTERRUPT_Initialize 115E  
                      _i2c_ISR$intlevel0 0946                       ?_i2c1_driver_start 0001  
                ??_wr1RegCompleteHandler 0023                   ?i2_do_I2C_DO_NACK_STOP 0001  
                      ??_updateExpanders 003D                                 _LATAbits 000F83  
                    __size_of_returnStop 000A                                 _PIE3bits 000EC5  
                    __CFG_BORV$VBOR_2P45 000000                      ??_i2c1_driver_start 0016  
                               i2u201_48 0A9E                                 i2u201_49 0AB2  
                               i2u205_48 0062      __size_of_INTERRUPT_InterruptManager 00D4  
                               i2u208_48 007C                                 i2u208_49 0090  
                               i2u190_48 0648                                 i2u190_49 065C  
                               i2u193_48 0860                                 i2u193_49 0874  
                               i2u194_48 0912                                 i2u194_49 0926  
                               i2u188_48 0ADE                                 i2u188_49 0AF2  
                               _PIR3bits 000ECD                         ?i2_i2c_setBuffer 0001  
                 ?i2_i2c1_driver_sendACK 0001                                 _SSP1CON1 000F96  
                               _SSP1CON2 000F97             ?_i2c_setDataCompleteCallback 001C  
                               _SSP1STAT 000F95                               ?_getSpaces 0001  
                    __end_of_setCallBack 079E                   ?i2_i2c1_driver_restart 0001  
                 ?i2_i2c1_driver_startRX 0001             i2c_setAddressNACKCallback@cb 001C  
                      ?_do_I2C_SEND_STOP 0001                          ??i2_returnReset 000E  
                            ??_i2c_close 0016                __end_of_i2c1_driver_start 115E  
                          ??_returnReset 0023                       ??_do_I2C_SEND_STOP 0016  
            __size_of_i2c1_driver_TXData 0008             ??_i2c_setAddressNACKCallback 0021  
      __end_of_do_I2C_SEND_RESTART_WRITE 106C                  __end_of_do_I2C_TX_EMPTY 08E8  
                              copy_data0 0B58                    ?_INTERRUPT_Initialize 0001  
               ?_rdBlkRegCompleteHandler 0021                        ?_mssp1_disableIRQ 0001  
           __size_of_do_I2C_SEND_RESTART 000E              __size_of_i2c1_driver_isNACK 0016  
                   i2_i2c1_driver_TXData 1100                  _do_I2C_DO_ACK$intlevel0 103A  
                               _i2c_open 03AC                    __size_of_mssp1_setIRQ 0006  
                         i2setCallBack@p 0004                       ??_mssp1_disableIRQ 0016  
                 ?_rd2RegCompleteHandler 0021                      _do_I2C_DO_NACK_STOP 1026  
                       __size_of_i2c_ISR 004E                   ?_wr2RegCompleteHandler 0021  
        _wr2RegCompleteHandler$intlevel0 0C2E          _rd2RegCompleteHandler$intlevel0 0B8C  
                               __Hrparam 0000                     i2_i2c1_driver_isNACK 0F80  
                               __Lrparam 0000                           getSpaces@space 00CF  
                     __CFG_BOREN$SBORDIS 000000                      i2c_writeNBytes@data 0021  
                           ?_do_I2C_IDLE 0001                             ?_do_I2C_RCEN 0001  
                ??_OSCILLATOR_Initialize 0016                      _i2c1_driver_sendACK 1114  
               __size_of_i2c_masterWrite 0008                    i2_do_I2C_SEND_RESTART 10E8  
        __size_of_do_I2C_DO_ADDRESS_NACK 004E                      i2c1_driver_TXData@d 0016  
                 ??_i2c1_driver_sendNACK 0016            ??_i2c_setDataCompleteCallback 0021  
        __end_ofi2_do_I2C_SEND_ADR_WRITE 0FDC         ??_i2c1_driver_setBusCollisionISR 0019  
        ?_i2c1_driver_setBusCollisionISR 0016       _do_I2C_SEND_RESTART_READ$intlevel0 1072  
                    _i2c1_driver_restart 1156                            ?i2_returnStop 000C  
                   ?_do_I2C_DO_NACK_STOP 0001                      _i2c1_driver_startRX 114E  
           __end_of_do_I2C_SEND_ADR_READ 0F3E                   ??_i2c1_driver_resetBus 0016  
                       ?i2_do_I2C_DO_ACK 0001                       getSpaces@spaceLast 00CC  
                          ??i2_do_I2C_RX 0001                            ??i2_do_I2C_TX 0002  
                           _mssp1_setIRQ 1108                              ??_do_I2C_RX 0016  
                       ??_readIoExpander 0028                              ??_do_I2C_TX 0017  
                               __ptext10 100A                                 __ptext11 0EE6  
                               __ptext20 098E                                 __ptext12 10B8  
                               __ptext21 1018                                 __ptext13 0C90  
                               __ptext30 106C                                 __ptext22 1026  
                               __ptext14 0F96                                 __ptext31 0FBA  
                               __ptext23 1034                                 __ptext15 0E68  
                               __ptext40 114E                                 __ptext32 0F3E  
                               __ptext24 0FA8                                 __ptext16 0EFC  
                               __ptext41 0A26                                 __ptext33 088A  
                               __ptext25 0F12                                 __ptext17 0940  
                               __ptext50 0726                                 __ptext42 0B86  
                               __ptext34 1108                                 __ptext26 0F28  
                               __ptext18 06AC                                 __ptext51 0E82  
                               __ptext43 0BBC                                 __ptext35 0F54  
                               __ptext27 1042                                 __ptext19 04F4  
                               __ptext60 0F6A                                 __ptext52 1152  
                               __ptext44 0BF2                                 __ptext36 10C0  
                               __ptext28 1050                                 __ptext61 0E30  
                               __ptext53 1156                                 __ptext45 1092  
                               __ptext37 114A                                 __ptext29 105E  
                               __ptext70 061C                                 __ptext62 058A  
                               __ptext54 1114                                 __ptext46 109C  
                               __ptext38 110E                                 __ptext71 0AB8  
                               __ptext63 0EB6                                 __ptext55 115A  
                               __ptext47 10A6                                 __ptext39 117E  
                               __ptext80 10F0                                 __ptext72 10C8  
                               __ptext64 115E                                 __ptext56 0DDA  
                               __ptext48 0C28                                 __ptext81 10F8  
                               __ptext73 10D0                                 __ptext65 0ECE  
                               __ptext57 111A                                 __ptext49 0E14  
                               __ptext90 1180                                 __ptext82 1086  
                               __ptext74 10D8                                 __ptext58 1120  
                               __ptext91 1166                                 __ptext83 0FEC  
                               __ptext75 107A                                 __ptext67 0A70  
                               __ptext59 0DB2                                 __ptext92 0B00  
                               __ptext84 08E8                                 __ptext76 0FCC  
                               __ptext68 1126                                 __ptext93 0CF2  
                               __ptext85 112C                                 __ptext77 0FDC  
                               __ptext69 0816                                 __ptext94 0D22  
                               __ptext86 0F80                                 __ptext78 10E0  
                               __ptext95 0D52                                 __ptext87 1100  
                               __ptext79 10E8                                 __ptext96 116A  
                               __ptext88 1162                                 __ptext97 116E  
                               __ptext89 1132                                 __ptext98 1172  
                               __ptext99 0D82                             _SSP1CON1bits 000F96  
                           _SSP1CON2bits 000F97                     ?_i2c1_driver_sendACK 0001  
                   __end_of_do_I2C_RESET 0F54                    ?i2_i2c1_driver_TXData 0001  
                ?i2_do_I2C_SEND_ADR_READ 0001                  __size_ofi2_mssp1_setIRQ 0006  
            __size_of_EUSART2_Initialize 0018                     ?_i2c1_driver_restart 0001  
                    __end_of_returnReset 10A6                         _i2c1_driver_open 0EE6  
     __size_ofi2_rdBlkRegCompleteHandler 0044                  i2_rd2RegCompleteHandler 0CF2  
                       _i2c1_driver_stop 1152                            __size_of_main 0150  
                   ?_i2c1_driver_startRX 0001           __size_of_i2c1_driver_getRXData 0004  
          __end_of_i2c1_driver_getRXData 114E                  i2_wr2RegCompleteHandler 0D82  
                   __CFG_WDTCWS$WDTCWS_7 000000                              _setCallBack 0726  
                  ?i2_i2c1_driver_isNACK 0001                  i2c_masterOperation@read 0019  
                             _RC2STAbits 000E9D                                 int$flags 0047  
                            ??_getSpaces 003F       __end_of_INTERRUPT_InterruptManager 00DC  
             _INTERRUPT_InterruptManager 0008                             _SSP1STATbits 000F95  
                         ??i2_returnStop 000E                                 main@spot 00DD  
       __end_of_do_I2C_SEND_RESTART_READ 107A                             ??_returnStop 0023  
               __end_of_i2c_restartWrite 109C                    ??_do_I2C_DO_NACK_STOP 0016  
                __size_of_i2c_readNBytes 0032                mssp1_waitForEvent@timeout 0016  
         __size_of_i2c1_driver_setI2cISR 000E            __end_of_i2c1_driver_setI2cISR 100A  
                             _INTCONbits 000FF2               __size_of_i2c1_driver_start 0004  
                     i2c_writeNBytes@len 0023                   ??_INTERRUPT_Initialize 0016  
               ?i2_i2c1_driver_getRXData 0001                  __size_of_i2c_masterRead 0008  
         __end_ofi2_do_I2C_SEND_ADR_READ 0FEC                          readIoExpander@i 0037  
                  ??_i2c1_driver_sendACK 0016                         ?_do_I2C_TX_EMPTY 0001  
      __size_ofi2_do_I2C_DO_ADDRESS_NACK 0048               __end_ofi2_i2c1_driver_stop 117A  
              ?i2_do_I2C_DO_ADDRESS_NACK 0001                   _do_I2C_DO_ADDRESS_NACK 098E  
                               intlevel2 0000                   _do_I2C_RESET$intlevel0 0F44  
                  ??_i2c1_driver_restart 0016                   rd2RegCompleteHandler@p 0021  
                  ??_i2c1_driver_startRX 0016               i2rdBlkRegCompleteHandler@p 000C  
                    __end_ofi2_do_I2C_RX 088A                      __end_ofi2_do_I2C_TX 06AC  
                ?_PIN_MANAGER_Initialize 0001                        i2c_restartWrite@p 0021  
                      __CFG_CLKOUTEN$OFF 000000                       __end_of_returnStop 10B0  
            __size_of_mssp1_IRQisEnabled 0012      __end_ofi2_do_I2C_SEND_RESTART_WRITE 10F8  
            i2_do_I2C_SEND_RESTART_WRITE 10F0                   ?i2_do_I2C_SEND_RESTART 0001  
             ??i2_do_I2C_DO_NACK_RESTART 0001                   wr2RegCompleteHandler@p 0021  
            __size_of_mssp1_waitForEvent 0016                i2i2c_setBuffer@bufferSize 0003  
              __size_ofi2_mssp1_clearIRQ 0006                               _RX2PPSbits 000E8D  
                        _updateExpanders 0230                        ??_i2c_masterWrite 001B  
     __end_of_i2c_setAddressNACKCallback 0E14               _i2c_setAddressNACKCallback 0DF8  
                 __size_of_i2c_setBuffer 001A                              _returnReset 109C  
       _do_I2C_DO_NACK_RESTART$intlevel0 101E                 i2rd1RegCompleteHandler@p 000C  
                ??i2_do_I2C_DO_NACK_STOP 0001                   ??i2_i2c1_driver_TXData 0001  
                             _TX2STAbits 000E9E                ??i2_rd2RegCompleteHandler 000E  
           ??i2_do_I2C_SEND_RESTART_READ 0001           __end_of_PIN_MANAGER_Initialize 061C  
            __end_of_i2c_busCollisionISR 1144           __size_of_rd1RegCompleteHandler 0036  
              ??i2_wr2RegCompleteHandler 000E            __end_of_rd1RegCompleteHandler 0BF2  
            __size_ofi2_do_I2C_SEND_STOP 0008                 ??i2_i2c1_driver_sendNACK 0001  
         __size_of_wr1RegCompleteHandler 0036                   ??i2_i2c1_driver_isNACK 0001  
          __end_of_wr1RegCompleteHandler 0C28         __size_ofi2_do_I2C_SEND_ADR_WRITE 0010  
                  _do_I2C_SEND_ADR_WRITE 0F12                  ??i2_i2c1_driver_sendACK 0001  
                   _do_I2C_SEND_ADR_READ 0F28                    __end_ofi2_setCallBack 0816  
               ??i2_i2c1_driver_resetBus 0001                 i2wr1RegCompleteHandler@p 000C  
                ??i2_i2c1_driver_restart 0001                       i2_i2c_restartWrite 116A  
