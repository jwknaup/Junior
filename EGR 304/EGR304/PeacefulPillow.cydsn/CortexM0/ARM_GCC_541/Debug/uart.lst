ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"uart.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.uart_Init,"ax",%progbits
  20              		.align	2
  21              		.global	uart_Init
  22              		.code	16
  23              		.thumb_func
  24              		.type	uart_Init, %function
  25              	uart_Init:
  26              	.LFB3:
  27              		.file 1 "Generated_Source\\PSoC4\\uart.c"
   1:Generated_Source\PSoC4/uart.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/uart.c **** * File Name: uart.c
   3:Generated_Source\PSoC4/uart.c **** * Version 2.50
   4:Generated_Source\PSoC4/uart.c **** *
   5:Generated_Source\PSoC4/uart.c **** * Description:
   6:Generated_Source\PSoC4/uart.c **** *  This file provides all API functionality of the UART component
   7:Generated_Source\PSoC4/uart.c **** *
   8:Generated_Source\PSoC4/uart.c **** * Note:
   9:Generated_Source\PSoC4/uart.c **** *
  10:Generated_Source\PSoC4/uart.c **** ********************************************************************************
  11:Generated_Source\PSoC4/uart.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  12:Generated_Source\PSoC4/uart.c **** * You may use this file only in accordance with the license, terms, conditions,
  13:Generated_Source\PSoC4/uart.c **** * disclaimers, and limitations in the end user license agreement accompanying
  14:Generated_Source\PSoC4/uart.c **** * the software package with which this file was provided.
  15:Generated_Source\PSoC4/uart.c **** *******************************************************************************/
  16:Generated_Source\PSoC4/uart.c **** 
  17:Generated_Source\PSoC4/uart.c **** #include "uart.h"
  18:Generated_Source\PSoC4/uart.c **** #if (uart_INTERNAL_CLOCK_USED)
  19:Generated_Source\PSoC4/uart.c ****     #include "uart_IntClock.h"
  20:Generated_Source\PSoC4/uart.c **** #endif /* End uart_INTERNAL_CLOCK_USED */
  21:Generated_Source\PSoC4/uart.c **** 
  22:Generated_Source\PSoC4/uart.c **** 
  23:Generated_Source\PSoC4/uart.c **** /***************************************
  24:Generated_Source\PSoC4/uart.c **** * Global data allocation
  25:Generated_Source\PSoC4/uart.c **** ***************************************/
  26:Generated_Source\PSoC4/uart.c **** 
  27:Generated_Source\PSoC4/uart.c **** uint8 uart_initVar = 0u;
  28:Generated_Source\PSoC4/uart.c **** 
  29:Generated_Source\PSoC4/uart.c **** #if (uart_TX_INTERRUPT_ENABLED && uart_TX_ENABLED)
  30:Generated_Source\PSoC4/uart.c ****     volatile uint8 uart_txBuffer[uart_TX_BUFFER_SIZE];
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 2


  31:Generated_Source\PSoC4/uart.c ****     volatile uint8 uart_txBufferRead = 0u;
  32:Generated_Source\PSoC4/uart.c ****     uint8 uart_txBufferWrite = 0u;
  33:Generated_Source\PSoC4/uart.c **** #endif /* (uart_TX_INTERRUPT_ENABLED && uart_TX_ENABLED) */
  34:Generated_Source\PSoC4/uart.c **** 
  35:Generated_Source\PSoC4/uart.c **** #if (uart_RX_INTERRUPT_ENABLED && (uart_RX_ENABLED || uart_HD_ENABLED))
  36:Generated_Source\PSoC4/uart.c ****     uint8 uart_errorStatus = 0u;
  37:Generated_Source\PSoC4/uart.c ****     volatile uint8 uart_rxBuffer[uart_RX_BUFFER_SIZE];
  38:Generated_Source\PSoC4/uart.c ****     volatile uint8 uart_rxBufferRead  = 0u;
  39:Generated_Source\PSoC4/uart.c ****     volatile uint8 uart_rxBufferWrite = 0u;
  40:Generated_Source\PSoC4/uart.c ****     volatile uint8 uart_rxBufferLoopDetect = 0u;
  41:Generated_Source\PSoC4/uart.c ****     volatile uint8 uart_rxBufferOverflow   = 0u;
  42:Generated_Source\PSoC4/uart.c ****     #if (uart_RXHW_ADDRESS_ENABLED)
  43:Generated_Source\PSoC4/uart.c ****         volatile uint8 uart_rxAddressMode = uart_RX_ADDRESS_MODE;
  44:Generated_Source\PSoC4/uart.c ****         volatile uint8 uart_rxAddressDetected = 0u;
  45:Generated_Source\PSoC4/uart.c ****     #endif /* (uart_RXHW_ADDRESS_ENABLED) */
  46:Generated_Source\PSoC4/uart.c **** #endif /* (uart_RX_INTERRUPT_ENABLED && (uart_RX_ENABLED || uart_HD_ENABLED)) */
  47:Generated_Source\PSoC4/uart.c **** 
  48:Generated_Source\PSoC4/uart.c **** 
  49:Generated_Source\PSoC4/uart.c **** /*******************************************************************************
  50:Generated_Source\PSoC4/uart.c **** * Function Name: uart_Start
  51:Generated_Source\PSoC4/uart.c **** ********************************************************************************
  52:Generated_Source\PSoC4/uart.c **** *
  53:Generated_Source\PSoC4/uart.c **** * Summary:
  54:Generated_Source\PSoC4/uart.c **** *  This is the preferred method to begin component operation.
  55:Generated_Source\PSoC4/uart.c **** *  uart_Start() sets the initVar variable, calls the
  56:Generated_Source\PSoC4/uart.c **** *  uart_Init() function, and then calls the
  57:Generated_Source\PSoC4/uart.c **** *  uart_Enable() function.
  58:Generated_Source\PSoC4/uart.c **** *
  59:Generated_Source\PSoC4/uart.c **** * Parameters:
  60:Generated_Source\PSoC4/uart.c **** *  None.
  61:Generated_Source\PSoC4/uart.c **** *
  62:Generated_Source\PSoC4/uart.c **** * Return:
  63:Generated_Source\PSoC4/uart.c **** *  None.
  64:Generated_Source\PSoC4/uart.c **** *
  65:Generated_Source\PSoC4/uart.c **** * Global variables:
  66:Generated_Source\PSoC4/uart.c **** *  The uart_intiVar variable is used to indicate initial
  67:Generated_Source\PSoC4/uart.c **** *  configuration of this component. The variable is initialized to zero (0u)
  68:Generated_Source\PSoC4/uart.c **** *  and set to one (1u) the first time uart_Start() is called. This
  69:Generated_Source\PSoC4/uart.c **** *  allows for component initialization without re-initialization in all
  70:Generated_Source\PSoC4/uart.c **** *  subsequent calls to the uart_Start() routine.
  71:Generated_Source\PSoC4/uart.c **** *
  72:Generated_Source\PSoC4/uart.c **** * Reentrant:
  73:Generated_Source\PSoC4/uart.c **** *  No.
  74:Generated_Source\PSoC4/uart.c **** *
  75:Generated_Source\PSoC4/uart.c **** *******************************************************************************/
  76:Generated_Source\PSoC4/uart.c **** void uart_Start(void) 
  77:Generated_Source\PSoC4/uart.c **** {
  78:Generated_Source\PSoC4/uart.c ****     /* If not initialized then initialize all required hardware and software */
  79:Generated_Source\PSoC4/uart.c ****     if(uart_initVar == 0u)
  80:Generated_Source\PSoC4/uart.c ****     {
  81:Generated_Source\PSoC4/uart.c ****         uart_Init();
  82:Generated_Source\PSoC4/uart.c ****         uart_initVar = 1u;
  83:Generated_Source\PSoC4/uart.c ****     }
  84:Generated_Source\PSoC4/uart.c **** 
  85:Generated_Source\PSoC4/uart.c ****     uart_Enable();
  86:Generated_Source\PSoC4/uart.c **** }
  87:Generated_Source\PSoC4/uart.c **** 
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 3


  88:Generated_Source\PSoC4/uart.c **** 
  89:Generated_Source\PSoC4/uart.c **** /*******************************************************************************
  90:Generated_Source\PSoC4/uart.c **** * Function Name: uart_Init
  91:Generated_Source\PSoC4/uart.c **** ********************************************************************************
  92:Generated_Source\PSoC4/uart.c **** *
  93:Generated_Source\PSoC4/uart.c **** * Summary:
  94:Generated_Source\PSoC4/uart.c **** *  Initializes or restores the component according to the customizer Configure
  95:Generated_Source\PSoC4/uart.c **** *  dialog settings. It is not necessary to call uart_Init() because
  96:Generated_Source\PSoC4/uart.c **** *  the uart_Start() API calls this function and is the preferred
  97:Generated_Source\PSoC4/uart.c **** *  method to begin component operation.
  98:Generated_Source\PSoC4/uart.c **** *
  99:Generated_Source\PSoC4/uart.c **** * Parameters:
 100:Generated_Source\PSoC4/uart.c **** *  None.
 101:Generated_Source\PSoC4/uart.c **** *
 102:Generated_Source\PSoC4/uart.c **** * Return:
 103:Generated_Source\PSoC4/uart.c **** *  None.
 104:Generated_Source\PSoC4/uart.c **** *
 105:Generated_Source\PSoC4/uart.c **** *******************************************************************************/
 106:Generated_Source\PSoC4/uart.c **** void uart_Init(void) 
 107:Generated_Source\PSoC4/uart.c **** {
  28              		.loc 1 107 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 108:Generated_Source\PSoC4/uart.c ****     #if(uart_RX_ENABLED || uart_HD_ENABLED)
 109:Generated_Source\PSoC4/uart.c **** 
 110:Generated_Source\PSoC4/uart.c ****         #if (uart_RX_INTERRUPT_ENABLED)
 111:Generated_Source\PSoC4/uart.c ****             /* Set RX interrupt vector and priority */
 112:Generated_Source\PSoC4/uart.c ****             (void) CyIntSetVector(uart_RX_VECT_NUM, &uart_RXISR);
 113:Generated_Source\PSoC4/uart.c ****             CyIntSetPriority(uart_RX_VECT_NUM, uart_RX_PRIOR_NUM);
 114:Generated_Source\PSoC4/uart.c ****             uart_errorStatus = 0u;
 115:Generated_Source\PSoC4/uart.c ****         #endif /* (uart_RX_INTERRUPT_ENABLED) */
 116:Generated_Source\PSoC4/uart.c **** 
 117:Generated_Source\PSoC4/uart.c ****         #if (uart_RXHW_ADDRESS_ENABLED)
 118:Generated_Source\PSoC4/uart.c ****             uart_SetRxAddressMode(uart_RX_ADDRESS_MODE);
 119:Generated_Source\PSoC4/uart.c ****             uart_SetRxAddress1(uart_RX_HW_ADDRESS1);
 120:Generated_Source\PSoC4/uart.c ****             uart_SetRxAddress2(uart_RX_HW_ADDRESS2);
 121:Generated_Source\PSoC4/uart.c ****         #endif /* End uart_RXHW_ADDRESS_ENABLED */
 122:Generated_Source\PSoC4/uart.c **** 
 123:Generated_Source\PSoC4/uart.c ****         /* Init Count7 period */
 124:Generated_Source\PSoC4/uart.c ****         uart_RXBITCTR_PERIOD_REG = uart_RXBITCTR_INIT;
  33              		.loc 1 124 0
  34 0000 7222     		movs	r2, #114
  35 0002 074B     		ldr	r3, .L2
  36 0004 1A70     		strb	r2, [r3]
 125:Generated_Source\PSoC4/uart.c ****         /* Configure the Initial RX interrupt mask */
 126:Generated_Source\PSoC4/uart.c ****         uart_RXSTATUS_MASK_REG  = uart_INIT_RX_INTERRUPTS_MASK;
  37              		.loc 1 126 0
  38 0006 523A     		subs	r2, r2, #82
  39 0008 064B     		ldr	r3, .L2+4
  40 000a 1A70     		strb	r2, [r3]
 127:Generated_Source\PSoC4/uart.c ****     #endif /* End uart_RX_ENABLED || uart_HD_ENABLED*/
 128:Generated_Source\PSoC4/uart.c **** 
 129:Generated_Source\PSoC4/uart.c ****     #if(uart_TX_ENABLED)
 130:Generated_Source\PSoC4/uart.c ****         #if (uart_TX_INTERRUPT_ENABLED)
 131:Generated_Source\PSoC4/uart.c ****             /* Set TX interrupt vector and priority */
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 4


 132:Generated_Source\PSoC4/uart.c ****             (void) CyIntSetVector(uart_TX_VECT_NUM, &uart_TXISR);
 133:Generated_Source\PSoC4/uart.c ****             CyIntSetPriority(uart_TX_VECT_NUM, uart_TX_PRIOR_NUM);
 134:Generated_Source\PSoC4/uart.c ****         #endif /* (uart_TX_INTERRUPT_ENABLED) */
 135:Generated_Source\PSoC4/uart.c **** 
 136:Generated_Source\PSoC4/uart.c ****         /* Write Counter Value for TX Bit Clk Generator*/
 137:Generated_Source\PSoC4/uart.c ****         #if (uart_TXCLKGEN_DP)
 138:Generated_Source\PSoC4/uart.c ****             uart_TXBITCLKGEN_CTR_REG = uart_BIT_CENTER;
  41              		.loc 1 138 0
  42 000c 1A3A     		subs	r2, r2, #26
  43 000e 064B     		ldr	r3, .L2+8
  44 0010 1A70     		strb	r2, [r3]
 139:Generated_Source\PSoC4/uart.c ****             uart_TXBITCLKTX_COMPLETE_REG = ((uart_NUMBER_OF_DATA_BITS +
  45              		.loc 1 139 0
  46 0012 4132     		adds	r2, r2, #65
  47 0014 054B     		ldr	r3, .L2+12
  48 0016 1A70     		strb	r2, [r3]
 140:Generated_Source\PSoC4/uart.c ****                         uart_NUMBER_OF_START_BIT) * uart_OVER_SAMPLE_COUNT) - 1u;
 141:Generated_Source\PSoC4/uart.c ****         #else
 142:Generated_Source\PSoC4/uart.c ****             uart_TXBITCTR_PERIOD_REG = ((uart_NUMBER_OF_DATA_BITS +
 143:Generated_Source\PSoC4/uart.c ****                         uart_NUMBER_OF_START_BIT) * uart_OVER_SAMPLE_8) - 1u;
 144:Generated_Source\PSoC4/uart.c ****         #endif /* End uart_TXCLKGEN_DP */
 145:Generated_Source\PSoC4/uart.c **** 
 146:Generated_Source\PSoC4/uart.c ****         /* Configure the Initial TX interrupt mask */
 147:Generated_Source\PSoC4/uart.c ****         #if (uart_TX_INTERRUPT_ENABLED)
 148:Generated_Source\PSoC4/uart.c ****             uart_TXSTATUS_MASK_REG = uart_TX_STS_FIFO_EMPTY;
 149:Generated_Source\PSoC4/uart.c ****         #else
 150:Generated_Source\PSoC4/uart.c ****             uart_TXSTATUS_MASK_REG = uart_INIT_TX_INTERRUPTS_MASK;
  49              		.loc 1 150 0
  50 0018 0022     		movs	r2, #0
  51 001a 054B     		ldr	r3, .L2+16
  52 001c 1A70     		strb	r2, [r3]
 151:Generated_Source\PSoC4/uart.c ****         #endif /*End uart_TX_INTERRUPT_ENABLED*/
 152:Generated_Source\PSoC4/uart.c **** 
 153:Generated_Source\PSoC4/uart.c ****     #endif /* End uart_TX_ENABLED */
 154:Generated_Source\PSoC4/uart.c **** 
 155:Generated_Source\PSoC4/uart.c ****     #if(uart_PARITY_TYPE_SW)  /* Write Parity to Control Register */
 156:Generated_Source\PSoC4/uart.c ****         uart_WriteControlRegister( \
 157:Generated_Source\PSoC4/uart.c ****             (uart_ReadControlRegister() & (uint8)~uart_CTRL_PARITY_TYPE_MASK) | \
 158:Generated_Source\PSoC4/uart.c ****             (uint8)(uart_PARITY_TYPE << uart_CTRL_PARITY_TYPE0_SHIFT) );
 159:Generated_Source\PSoC4/uart.c ****     #endif /* End uart_PARITY_TYPE_SW */
 160:Generated_Source\PSoC4/uart.c **** }
  53              		.loc 1 160 0
  54              		@ sp needed
  55 001e 7047     		bx	lr
  56              	.L3:
  57              		.align	2
  58              	.L2:
  59 0020 81000F40 		.word	1074724993
  60 0024 82000F40 		.word	1074724994
  61 0028 21000F40 		.word	1074724897
  62 002c 31000F40 		.word	1074724913
  63 0030 83000F40 		.word	1074724995
  64              		.cfi_endproc
  65              	.LFE3:
  66              		.size	uart_Init, .-uart_Init
  67              		.section	.text.uart_Enable,"ax",%progbits
  68              		.align	2
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 5


  69              		.global	uart_Enable
  70              		.code	16
  71              		.thumb_func
  72              		.type	uart_Enable, %function
  73              	uart_Enable:
  74              	.LFB4:
 161:Generated_Source\PSoC4/uart.c **** 
 162:Generated_Source\PSoC4/uart.c **** 
 163:Generated_Source\PSoC4/uart.c **** /*******************************************************************************
 164:Generated_Source\PSoC4/uart.c **** * Function Name: uart_Enable
 165:Generated_Source\PSoC4/uart.c **** ********************************************************************************
 166:Generated_Source\PSoC4/uart.c **** *
 167:Generated_Source\PSoC4/uart.c **** * Summary:
 168:Generated_Source\PSoC4/uart.c **** *  Activates the hardware and begins component operation. It is not necessary
 169:Generated_Source\PSoC4/uart.c **** *  to call uart_Enable() because the uart_Start() API
 170:Generated_Source\PSoC4/uart.c **** *  calls this function, which is the preferred method to begin component
 171:Generated_Source\PSoC4/uart.c **** *  operation.
 172:Generated_Source\PSoC4/uart.c **** 
 173:Generated_Source\PSoC4/uart.c **** * Parameters:
 174:Generated_Source\PSoC4/uart.c **** *  None.
 175:Generated_Source\PSoC4/uart.c **** *
 176:Generated_Source\PSoC4/uart.c **** * Return:
 177:Generated_Source\PSoC4/uart.c **** *  None.
 178:Generated_Source\PSoC4/uart.c **** *
 179:Generated_Source\PSoC4/uart.c **** * Global Variables:
 180:Generated_Source\PSoC4/uart.c **** *  uart_rxAddressDetected - set to initial state (0).
 181:Generated_Source\PSoC4/uart.c **** *
 182:Generated_Source\PSoC4/uart.c **** *******************************************************************************/
 183:Generated_Source\PSoC4/uart.c **** void uart_Enable(void) 
 184:Generated_Source\PSoC4/uart.c **** {
  75              		.loc 1 184 0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79 0000 10B5     		push	{r4, lr}
  80              		.cfi_def_cfa_offset 8
  81              		.cfi_offset 4, -8
  82              		.cfi_offset 14, -4
 185:Generated_Source\PSoC4/uart.c ****     uint8 enableInterrupts;
 186:Generated_Source\PSoC4/uart.c ****     enableInterrupts = CyEnterCriticalSection();
  83              		.loc 1 186 0
  84 0002 FFF7FEFF 		bl	CyEnterCriticalSection
  85              	.LVL0:
  86 0006 0400     		movs	r4, r0
  87              	.LVL1:
 187:Generated_Source\PSoC4/uart.c **** 
 188:Generated_Source\PSoC4/uart.c ****     #if (uart_RX_ENABLED || uart_HD_ENABLED)
 189:Generated_Source\PSoC4/uart.c ****         /* RX Counter (Count7) Enable */
 190:Generated_Source\PSoC4/uart.c ****         uart_RXBITCTR_CONTROL_REG |= uart_CNTR_ENABLE;
  88              		.loc 1 190 0
  89 0008 0B4A     		ldr	r2, .L5
  90 000a 1178     		ldrb	r1, [r2]
  91 000c 2023     		movs	r3, #32
  92 000e 0B43     		orrs	r3, r1
  93 0010 DBB2     		uxtb	r3, r3
  94 0012 1370     		strb	r3, [r2]
 191:Generated_Source\PSoC4/uart.c **** 
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 6


 192:Generated_Source\PSoC4/uart.c ****         /* Enable the RX Interrupt */
 193:Generated_Source\PSoC4/uart.c ****         uart_RXSTATUS_ACTL_REG  |= uart_INT_ENABLE;
  95              		.loc 1 193 0
  96 0014 0949     		ldr	r1, .L5+4
  97 0016 0A78     		ldrb	r2, [r1]
  98 0018 1023     		movs	r3, #16
  99 001a 1A43     		orrs	r2, r3
 100 001c D2B2     		uxtb	r2, r2
 101 001e 0A70     		strb	r2, [r1]
 194:Generated_Source\PSoC4/uart.c **** 
 195:Generated_Source\PSoC4/uart.c ****         #if (uart_RX_INTERRUPT_ENABLED)
 196:Generated_Source\PSoC4/uart.c ****             uart_EnableRxInt();
 197:Generated_Source\PSoC4/uart.c **** 
 198:Generated_Source\PSoC4/uart.c ****             #if (uart_RXHW_ADDRESS_ENABLED)
 199:Generated_Source\PSoC4/uart.c ****                 uart_rxAddressDetected = 0u;
 200:Generated_Source\PSoC4/uart.c ****             #endif /* (uart_RXHW_ADDRESS_ENABLED) */
 201:Generated_Source\PSoC4/uart.c ****         #endif /* (uart_RX_INTERRUPT_ENABLED) */
 202:Generated_Source\PSoC4/uart.c ****     #endif /* (uart_RX_ENABLED || uart_HD_ENABLED) */
 203:Generated_Source\PSoC4/uart.c **** 
 204:Generated_Source\PSoC4/uart.c ****     #if(uart_TX_ENABLED)
 205:Generated_Source\PSoC4/uart.c ****         /* TX Counter (DP/Count7) Enable */
 206:Generated_Source\PSoC4/uart.c ****         #if(!uart_TXCLKGEN_DP)
 207:Generated_Source\PSoC4/uart.c ****             uart_TXBITCTR_CONTROL_REG |= uart_CNTR_ENABLE;
 208:Generated_Source\PSoC4/uart.c ****         #endif /* End uart_TXCLKGEN_DP */
 209:Generated_Source\PSoC4/uart.c **** 
 210:Generated_Source\PSoC4/uart.c ****         /* Enable the TX Interrupt */
 211:Generated_Source\PSoC4/uart.c ****         uart_TXSTATUS_ACTL_REG |= uart_INT_ENABLE;
 102              		.loc 1 211 0
 103 0020 074A     		ldr	r2, .L5+8
 104 0022 1178     		ldrb	r1, [r2]
 105 0024 0B43     		orrs	r3, r1
 106 0026 DBB2     		uxtb	r3, r3
 107 0028 1370     		strb	r3, [r2]
 212:Generated_Source\PSoC4/uart.c ****         #if (uart_TX_INTERRUPT_ENABLED)
 213:Generated_Source\PSoC4/uart.c ****             uart_ClearPendingTxInt(); /* Clear history of TX_NOT_EMPTY */
 214:Generated_Source\PSoC4/uart.c ****             uart_EnableTxInt();
 215:Generated_Source\PSoC4/uart.c ****         #endif /* (uart_TX_INTERRUPT_ENABLED) */
 216:Generated_Source\PSoC4/uart.c ****      #endif /* (uart_TX_INTERRUPT_ENABLED) */
 217:Generated_Source\PSoC4/uart.c **** 
 218:Generated_Source\PSoC4/uart.c ****     #if (uart_INTERNAL_CLOCK_USED)
 219:Generated_Source\PSoC4/uart.c ****         uart_IntClock_Start();  /* Enable the clock */
 108              		.loc 1 219 0
 109 002a FF20     		movs	r0, #255
 110 002c FFF7FEFF 		bl	uart_IntClock_StartEx
 111              	.LVL2:
 220:Generated_Source\PSoC4/uart.c ****     #endif /* (uart_INTERNAL_CLOCK_USED) */
 221:Generated_Source\PSoC4/uart.c **** 
 222:Generated_Source\PSoC4/uart.c ****     CyExitCriticalSection(enableInterrupts);
 112              		.loc 1 222 0
 113 0030 2000     		movs	r0, r4
 114 0032 FFF7FEFF 		bl	CyExitCriticalSection
 115              	.LVL3:
 223:Generated_Source\PSoC4/uart.c **** }
 116              		.loc 1 223 0
 117              		@ sp needed
 118              	.LVL4:
 119 0036 10BD     		pop	{r4, pc}
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 7


 120              	.L6:
 121              		.align	2
 122              	.L5:
 123 0038 91000F40 		.word	1074725009
 124 003c 92000F40 		.word	1074725010
 125 0040 93000F40 		.word	1074725011
 126              		.cfi_endproc
 127              	.LFE4:
 128              		.size	uart_Enable, .-uart_Enable
 129              		.section	.text.uart_Start,"ax",%progbits
 130              		.align	2
 131              		.global	uart_Start
 132              		.code	16
 133              		.thumb_func
 134              		.type	uart_Start, %function
 135              	uart_Start:
 136              	.LFB2:
  77:Generated_Source\PSoC4/uart.c ****     /* If not initialized then initialize all required hardware and software */
 137              		.loc 1 77 0
 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 0
 140              		@ frame_needed = 0, uses_anonymous_args = 0
 141 0000 10B5     		push	{r4, lr}
 142              		.cfi_def_cfa_offset 8
 143              		.cfi_offset 4, -8
 144              		.cfi_offset 14, -4
  79:Generated_Source\PSoC4/uart.c ****     {
 145              		.loc 1 79 0
 146 0002 064B     		ldr	r3, .L9
 147 0004 1B78     		ldrb	r3, [r3]
 148 0006 002B     		cmp	r3, #0
 149 0008 04D1     		bne	.L8
  81:Generated_Source\PSoC4/uart.c ****         uart_initVar = 1u;
 150              		.loc 1 81 0
 151 000a FFF7FEFF 		bl	uart_Init
 152              	.LVL5:
  82:Generated_Source\PSoC4/uart.c ****     }
 153              		.loc 1 82 0
 154 000e 0122     		movs	r2, #1
 155 0010 024B     		ldr	r3, .L9
 156 0012 1A70     		strb	r2, [r3]
 157              	.L8:
  85:Generated_Source\PSoC4/uart.c **** }
 158              		.loc 1 85 0
 159 0014 FFF7FEFF 		bl	uart_Enable
 160              	.LVL6:
  86:Generated_Source\PSoC4/uart.c **** 
 161              		.loc 1 86 0
 162              		@ sp needed
 163 0018 10BD     		pop	{r4, pc}
 164              	.L10:
 165 001a C046     		.align	2
 166              	.L9:
 167 001c 00000000 		.word	.LANCHOR0
 168              		.cfi_endproc
 169              	.LFE2:
 170              		.size	uart_Start, .-uart_Start
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 8


 171              		.section	.text.uart_Stop,"ax",%progbits
 172              		.align	2
 173              		.global	uart_Stop
 174              		.code	16
 175              		.thumb_func
 176              		.type	uart_Stop, %function
 177              	uart_Stop:
 178              	.LFB5:
 224:Generated_Source\PSoC4/uart.c **** 
 225:Generated_Source\PSoC4/uart.c **** 
 226:Generated_Source\PSoC4/uart.c **** /*******************************************************************************
 227:Generated_Source\PSoC4/uart.c **** * Function Name: uart_Stop
 228:Generated_Source\PSoC4/uart.c **** ********************************************************************************
 229:Generated_Source\PSoC4/uart.c **** *
 230:Generated_Source\PSoC4/uart.c **** * Summary:
 231:Generated_Source\PSoC4/uart.c **** *  Disables the UART operation.
 232:Generated_Source\PSoC4/uart.c **** *
 233:Generated_Source\PSoC4/uart.c **** * Parameters:
 234:Generated_Source\PSoC4/uart.c **** *  None.
 235:Generated_Source\PSoC4/uart.c **** *
 236:Generated_Source\PSoC4/uart.c **** * Return:
 237:Generated_Source\PSoC4/uart.c **** *  None.
 238:Generated_Source\PSoC4/uart.c **** *
 239:Generated_Source\PSoC4/uart.c **** *******************************************************************************/
 240:Generated_Source\PSoC4/uart.c **** void uart_Stop(void) 
 241:Generated_Source\PSoC4/uart.c **** {
 179              		.loc 1 241 0
 180              		.cfi_startproc
 181              		@ args = 0, pretend = 0, frame = 0
 182              		@ frame_needed = 0, uses_anonymous_args = 0
 183 0000 10B5     		push	{r4, lr}
 184              		.cfi_def_cfa_offset 8
 185              		.cfi_offset 4, -8
 186              		.cfi_offset 14, -4
 242:Generated_Source\PSoC4/uart.c ****     uint8 enableInterrupts;
 243:Generated_Source\PSoC4/uart.c ****     enableInterrupts = CyEnterCriticalSection();
 187              		.loc 1 243 0
 188 0002 FFF7FEFF 		bl	CyEnterCriticalSection
 189              	.LVL7:
 190 0006 0400     		movs	r4, r0
 191              	.LVL8:
 244:Generated_Source\PSoC4/uart.c **** 
 245:Generated_Source\PSoC4/uart.c ****     /* Write Bit Counter Disable */
 246:Generated_Source\PSoC4/uart.c ****     #if (uart_RX_ENABLED || uart_HD_ENABLED)
 247:Generated_Source\PSoC4/uart.c ****         uart_RXBITCTR_CONTROL_REG &= (uint8) ~uart_CNTR_ENABLE;
 192              		.loc 1 247 0
 193 0008 094A     		ldr	r2, .L12
 194 000a 1378     		ldrb	r3, [r2]
 195 000c 2021     		movs	r1, #32
 196 000e 8B43     		bics	r3, r1
 197 0010 1370     		strb	r3, [r2]
 248:Generated_Source\PSoC4/uart.c ****     #endif /* (uart_RX_ENABLED || uart_HD_ENABLED) */
 249:Generated_Source\PSoC4/uart.c **** 
 250:Generated_Source\PSoC4/uart.c ****     #if (uart_TX_ENABLED)
 251:Generated_Source\PSoC4/uart.c ****         #if(!uart_TXCLKGEN_DP)
 252:Generated_Source\PSoC4/uart.c ****             uart_TXBITCTR_CONTROL_REG &= (uint8) ~uart_CNTR_ENABLE;
 253:Generated_Source\PSoC4/uart.c ****         #endif /* (!uart_TXCLKGEN_DP) */
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 9


 254:Generated_Source\PSoC4/uart.c ****     #endif /* (uart_TX_ENABLED) */
 255:Generated_Source\PSoC4/uart.c **** 
 256:Generated_Source\PSoC4/uart.c ****     #if (uart_INTERNAL_CLOCK_USED)
 257:Generated_Source\PSoC4/uart.c ****         uart_IntClock_Stop();   /* Disable the clock */
 198              		.loc 1 257 0
 199 0012 FFF7FEFF 		bl	uart_IntClock_Stop
 200              	.LVL9:
 258:Generated_Source\PSoC4/uart.c ****     #endif /* (uart_INTERNAL_CLOCK_USED) */
 259:Generated_Source\PSoC4/uart.c **** 
 260:Generated_Source\PSoC4/uart.c ****     /* Disable internal interrupt component */
 261:Generated_Source\PSoC4/uart.c ****     #if (uart_RX_ENABLED || uart_HD_ENABLED)
 262:Generated_Source\PSoC4/uart.c ****         uart_RXSTATUS_ACTL_REG  &= (uint8) ~uart_INT_ENABLE;
 201              		.loc 1 262 0
 202 0016 074A     		ldr	r2, .L12+4
 203 0018 1378     		ldrb	r3, [r2]
 204 001a 1021     		movs	r1, #16
 205 001c 8B43     		bics	r3, r1
 206 001e 1370     		strb	r3, [r2]
 263:Generated_Source\PSoC4/uart.c **** 
 264:Generated_Source\PSoC4/uart.c ****         #if (uart_RX_INTERRUPT_ENABLED)
 265:Generated_Source\PSoC4/uart.c ****             uart_DisableRxInt();
 266:Generated_Source\PSoC4/uart.c ****         #endif /* (uart_RX_INTERRUPT_ENABLED) */
 267:Generated_Source\PSoC4/uart.c ****     #endif /* (uart_RX_ENABLED || uart_HD_ENABLED) */
 268:Generated_Source\PSoC4/uart.c **** 
 269:Generated_Source\PSoC4/uart.c ****     #if (uart_TX_ENABLED)
 270:Generated_Source\PSoC4/uart.c ****         uart_TXSTATUS_ACTL_REG &= (uint8) ~uart_INT_ENABLE;
 207              		.loc 1 270 0
 208 0020 054A     		ldr	r2, .L12+8
 209 0022 1378     		ldrb	r3, [r2]
 210 0024 8B43     		bics	r3, r1
 211 0026 1370     		strb	r3, [r2]
 271:Generated_Source\PSoC4/uart.c **** 
 272:Generated_Source\PSoC4/uart.c ****         #if (uart_TX_INTERRUPT_ENABLED)
 273:Generated_Source\PSoC4/uart.c ****             uart_DisableTxInt();
 274:Generated_Source\PSoC4/uart.c ****         #endif /* (uart_TX_INTERRUPT_ENABLED) */
 275:Generated_Source\PSoC4/uart.c ****     #endif /* (uart_TX_ENABLED) */
 276:Generated_Source\PSoC4/uart.c **** 
 277:Generated_Source\PSoC4/uart.c ****     CyExitCriticalSection(enableInterrupts);
 212              		.loc 1 277 0
 213 0028 2000     		movs	r0, r4
 214 002a FFF7FEFF 		bl	CyExitCriticalSection
 215              	.LVL10:
 278:Generated_Source\PSoC4/uart.c **** }
 216              		.loc 1 278 0
 217              		@ sp needed
 218              	.LVL11:
 219 002e 10BD     		pop	{r4, pc}
 220              	.L13:
 221              		.align	2
 222              	.L12:
 223 0030 91000F40 		.word	1074725009
 224 0034 92000F40 		.word	1074725010
 225 0038 93000F40 		.word	1074725011
 226              		.cfi_endproc
 227              	.LFE5:
 228              		.size	uart_Stop, .-uart_Stop
 229              		.section	.text.uart_ReadControlRegister,"ax",%progbits
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 10


 230              		.align	2
 231              		.global	uart_ReadControlRegister
 232              		.code	16
 233              		.thumb_func
 234              		.type	uart_ReadControlRegister, %function
 235              	uart_ReadControlRegister:
 236              	.LFB6:
 279:Generated_Source\PSoC4/uart.c **** 
 280:Generated_Source\PSoC4/uart.c **** 
 281:Generated_Source\PSoC4/uart.c **** /*******************************************************************************
 282:Generated_Source\PSoC4/uart.c **** * Function Name: uart_ReadControlRegister
 283:Generated_Source\PSoC4/uart.c **** ********************************************************************************
 284:Generated_Source\PSoC4/uart.c **** *
 285:Generated_Source\PSoC4/uart.c **** * Summary:
 286:Generated_Source\PSoC4/uart.c **** *  Returns the current value of the control register.
 287:Generated_Source\PSoC4/uart.c **** *
 288:Generated_Source\PSoC4/uart.c **** * Parameters:
 289:Generated_Source\PSoC4/uart.c **** *  None.
 290:Generated_Source\PSoC4/uart.c **** *
 291:Generated_Source\PSoC4/uart.c **** * Return:
 292:Generated_Source\PSoC4/uart.c **** *  Contents of the control register.
 293:Generated_Source\PSoC4/uart.c **** *
 294:Generated_Source\PSoC4/uart.c **** *******************************************************************************/
 295:Generated_Source\PSoC4/uart.c **** uint8 uart_ReadControlRegister(void) 
 296:Generated_Source\PSoC4/uart.c **** {
 237              		.loc 1 296 0
 238              		.cfi_startproc
 239              		@ args = 0, pretend = 0, frame = 0
 240              		@ frame_needed = 0, uses_anonymous_args = 0
 241              		@ link register save eliminated.
 297:Generated_Source\PSoC4/uart.c ****     #if (uart_CONTROL_REG_REMOVED)
 298:Generated_Source\PSoC4/uart.c ****         return(0u);
 299:Generated_Source\PSoC4/uart.c ****     #else
 300:Generated_Source\PSoC4/uart.c ****         return(uart_CONTROL_REG);
 301:Generated_Source\PSoC4/uart.c ****     #endif /* (uart_CONTROL_REG_REMOVED) */
 302:Generated_Source\PSoC4/uart.c **** }
 242              		.loc 1 302 0
 243 0000 0020     		movs	r0, #0
 244              		@ sp needed
 245 0002 7047     		bx	lr
 246              		.cfi_endproc
 247              	.LFE6:
 248              		.size	uart_ReadControlRegister, .-uart_ReadControlRegister
 249              		.section	.text.uart_WriteControlRegister,"ax",%progbits
 250              		.align	2
 251              		.global	uart_WriteControlRegister
 252              		.code	16
 253              		.thumb_func
 254              		.type	uart_WriteControlRegister, %function
 255              	uart_WriteControlRegister:
 256              	.LFB7:
 303:Generated_Source\PSoC4/uart.c **** 
 304:Generated_Source\PSoC4/uart.c **** 
 305:Generated_Source\PSoC4/uart.c **** /*******************************************************************************
 306:Generated_Source\PSoC4/uart.c **** * Function Name: uart_WriteControlRegister
 307:Generated_Source\PSoC4/uart.c **** ********************************************************************************
 308:Generated_Source\PSoC4/uart.c **** *
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 11


 309:Generated_Source\PSoC4/uart.c **** * Summary:
 310:Generated_Source\PSoC4/uart.c **** *  Writes an 8-bit value into the control register
 311:Generated_Source\PSoC4/uart.c **** *
 312:Generated_Source\PSoC4/uart.c **** * Parameters:
 313:Generated_Source\PSoC4/uart.c **** *  control:  control register value
 314:Generated_Source\PSoC4/uart.c **** *
 315:Generated_Source\PSoC4/uart.c **** * Return:
 316:Generated_Source\PSoC4/uart.c **** *  None.
 317:Generated_Source\PSoC4/uart.c **** *
 318:Generated_Source\PSoC4/uart.c **** *******************************************************************************/
 319:Generated_Source\PSoC4/uart.c **** void  uart_WriteControlRegister(uint8 control) 
 320:Generated_Source\PSoC4/uart.c **** {
 257              		.loc 1 320 0
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 0
 260              		@ frame_needed = 0, uses_anonymous_args = 0
 261              		@ link register save eliminated.
 262              	.LVL12:
 321:Generated_Source\PSoC4/uart.c ****     #if (uart_CONTROL_REG_REMOVED)
 322:Generated_Source\PSoC4/uart.c ****         if(0u != control)
 323:Generated_Source\PSoC4/uart.c ****         {
 324:Generated_Source\PSoC4/uart.c ****             /* Suppress compiler warning */
 325:Generated_Source\PSoC4/uart.c ****         }
 326:Generated_Source\PSoC4/uart.c ****     #else
 327:Generated_Source\PSoC4/uart.c ****        uart_CONTROL_REG = control;
 328:Generated_Source\PSoC4/uart.c ****     #endif /* (uart_CONTROL_REG_REMOVED) */
 329:Generated_Source\PSoC4/uart.c **** }
 263              		.loc 1 329 0
 264              		@ sp needed
 265 0000 7047     		bx	lr
 266              		.cfi_endproc
 267              	.LFE7:
 268              		.size	uart_WriteControlRegister, .-uart_WriteControlRegister
 269 0002 C046     		.section	.text.uart_SetRxInterruptMode,"ax",%progbits
 270              		.align	2
 271              		.global	uart_SetRxInterruptMode
 272              		.code	16
 273              		.thumb_func
 274              		.type	uart_SetRxInterruptMode, %function
 275              	uart_SetRxInterruptMode:
 276              	.LFB8:
 330:Generated_Source\PSoC4/uart.c **** 
 331:Generated_Source\PSoC4/uart.c **** 
 332:Generated_Source\PSoC4/uart.c **** #if(uart_RX_ENABLED || uart_HD_ENABLED)
 333:Generated_Source\PSoC4/uart.c ****     /*******************************************************************************
 334:Generated_Source\PSoC4/uart.c ****     * Function Name: uart_SetRxInterruptMode
 335:Generated_Source\PSoC4/uart.c ****     ********************************************************************************
 336:Generated_Source\PSoC4/uart.c ****     *
 337:Generated_Source\PSoC4/uart.c ****     * Summary:
 338:Generated_Source\PSoC4/uart.c ****     *  Configures the RX interrupt sources enabled.
 339:Generated_Source\PSoC4/uart.c ****     *
 340:Generated_Source\PSoC4/uart.c ****     * Parameters:
 341:Generated_Source\PSoC4/uart.c ****     *  IntSrc:  Bit field containing the RX interrupts to enable. Based on the 
 342:Generated_Source\PSoC4/uart.c ****     *  bit-field arrangement of the status register. This value must be a 
 343:Generated_Source\PSoC4/uart.c ****     *  combination of status register bit-masks shown below:
 344:Generated_Source\PSoC4/uart.c ****     *      uart_RX_STS_FIFO_NOTEMPTY    Interrupt on byte received.
 345:Generated_Source\PSoC4/uart.c ****     *      uart_RX_STS_PAR_ERROR        Interrupt on parity error.
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 12


 346:Generated_Source\PSoC4/uart.c ****     *      uart_RX_STS_STOP_ERROR       Interrupt on stop error.
 347:Generated_Source\PSoC4/uart.c ****     *      uart_RX_STS_BREAK            Interrupt on break.
 348:Generated_Source\PSoC4/uart.c ****     *      uart_RX_STS_OVERRUN          Interrupt on overrun error.
 349:Generated_Source\PSoC4/uart.c ****     *      uart_RX_STS_ADDR_MATCH       Interrupt on address match.
 350:Generated_Source\PSoC4/uart.c ****     *      uart_RX_STS_MRKSPC           Interrupt on address detect.
 351:Generated_Source\PSoC4/uart.c ****     *
 352:Generated_Source\PSoC4/uart.c ****     * Return:
 353:Generated_Source\PSoC4/uart.c ****     *  None.
 354:Generated_Source\PSoC4/uart.c ****     *
 355:Generated_Source\PSoC4/uart.c ****     * Theory:
 356:Generated_Source\PSoC4/uart.c ****     *  Enables the output of specific status bits to the interrupt controller
 357:Generated_Source\PSoC4/uart.c ****     *
 358:Generated_Source\PSoC4/uart.c ****     *******************************************************************************/
 359:Generated_Source\PSoC4/uart.c ****     void uart_SetRxInterruptMode(uint8 intSrc) 
 360:Generated_Source\PSoC4/uart.c ****     {
 277              		.loc 1 360 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281              		@ link register save eliminated.
 282              	.LVL13:
 361:Generated_Source\PSoC4/uart.c ****         uart_RXSTATUS_MASK_REG  = intSrc;
 283              		.loc 1 361 0
 284 0000 014B     		ldr	r3, .L17
 285 0002 1870     		strb	r0, [r3]
 362:Generated_Source\PSoC4/uart.c ****     }
 286              		.loc 1 362 0
 287              		@ sp needed
 288 0004 7047     		bx	lr
 289              	.L18:
 290 0006 C046     		.align	2
 291              	.L17:
 292 0008 82000F40 		.word	1074724994
 293              		.cfi_endproc
 294              	.LFE8:
 295              		.size	uart_SetRxInterruptMode, .-uart_SetRxInterruptMode
 296              		.section	.text.uart_ReadRxData,"ax",%progbits
 297              		.align	2
 298              		.global	uart_ReadRxData
 299              		.code	16
 300              		.thumb_func
 301              		.type	uart_ReadRxData, %function
 302              	uart_ReadRxData:
 303              	.LFB9:
 363:Generated_Source\PSoC4/uart.c **** 
 364:Generated_Source\PSoC4/uart.c **** 
 365:Generated_Source\PSoC4/uart.c ****     /*******************************************************************************
 366:Generated_Source\PSoC4/uart.c ****     * Function Name: uart_ReadRxData
 367:Generated_Source\PSoC4/uart.c ****     ********************************************************************************
 368:Generated_Source\PSoC4/uart.c ****     *
 369:Generated_Source\PSoC4/uart.c ****     * Summary:
 370:Generated_Source\PSoC4/uart.c ****     *  Returns the next byte of received data. This function returns data without
 371:Generated_Source\PSoC4/uart.c ****     *  checking the status. You must check the status separately.
 372:Generated_Source\PSoC4/uart.c ****     *
 373:Generated_Source\PSoC4/uart.c ****     * Parameters:
 374:Generated_Source\PSoC4/uart.c ****     *  None.
 375:Generated_Source\PSoC4/uart.c ****     *
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 13


 376:Generated_Source\PSoC4/uart.c ****     * Return:
 377:Generated_Source\PSoC4/uart.c ****     *  Received data from RX register
 378:Generated_Source\PSoC4/uart.c ****     *
 379:Generated_Source\PSoC4/uart.c ****     * Global Variables:
 380:Generated_Source\PSoC4/uart.c ****     *  uart_rxBuffer - RAM buffer pointer for save received data.
 381:Generated_Source\PSoC4/uart.c ****     *  uart_rxBufferWrite - cyclic index for write to rxBuffer,
 382:Generated_Source\PSoC4/uart.c ****     *     checked to identify new data.
 383:Generated_Source\PSoC4/uart.c ****     *  uart_rxBufferRead - cyclic index for read from rxBuffer,
 384:Generated_Source\PSoC4/uart.c ****     *     incremented after each byte has been read from buffer.
 385:Generated_Source\PSoC4/uart.c ****     *  uart_rxBufferLoopDetect - cleared if loop condition was detected
 386:Generated_Source\PSoC4/uart.c ****     *     in RX ISR.
 387:Generated_Source\PSoC4/uart.c ****     *
 388:Generated_Source\PSoC4/uart.c ****     * Reentrant:
 389:Generated_Source\PSoC4/uart.c ****     *  No.
 390:Generated_Source\PSoC4/uart.c ****     *
 391:Generated_Source\PSoC4/uart.c ****     *******************************************************************************/
 392:Generated_Source\PSoC4/uart.c ****     uint8 uart_ReadRxData(void) 
 393:Generated_Source\PSoC4/uart.c ****     {
 304              		.loc 1 393 0
 305              		.cfi_startproc
 306              		@ args = 0, pretend = 0, frame = 0
 307              		@ frame_needed = 0, uses_anonymous_args = 0
 308              		@ link register save eliminated.
 394:Generated_Source\PSoC4/uart.c ****         uint8 rxData;
 395:Generated_Source\PSoC4/uart.c **** 
 396:Generated_Source\PSoC4/uart.c ****     #if (uart_RX_INTERRUPT_ENABLED)
 397:Generated_Source\PSoC4/uart.c **** 
 398:Generated_Source\PSoC4/uart.c ****         uint8 locRxBufferRead;
 399:Generated_Source\PSoC4/uart.c ****         uint8 locRxBufferWrite;
 400:Generated_Source\PSoC4/uart.c **** 
 401:Generated_Source\PSoC4/uart.c ****         /* Protect variables that could change on interrupt */
 402:Generated_Source\PSoC4/uart.c ****         uart_DisableRxInt();
 403:Generated_Source\PSoC4/uart.c **** 
 404:Generated_Source\PSoC4/uart.c ****         locRxBufferRead  = uart_rxBufferRead;
 405:Generated_Source\PSoC4/uart.c ****         locRxBufferWrite = uart_rxBufferWrite;
 406:Generated_Source\PSoC4/uart.c **** 
 407:Generated_Source\PSoC4/uart.c ****         if( (uart_rxBufferLoopDetect != 0u) || (locRxBufferRead != locRxBufferWrite) )
 408:Generated_Source\PSoC4/uart.c ****         {
 409:Generated_Source\PSoC4/uart.c ****             rxData = uart_rxBuffer[locRxBufferRead];
 410:Generated_Source\PSoC4/uart.c ****             locRxBufferRead++;
 411:Generated_Source\PSoC4/uart.c **** 
 412:Generated_Source\PSoC4/uart.c ****             if(locRxBufferRead >= uart_RX_BUFFER_SIZE)
 413:Generated_Source\PSoC4/uart.c ****             {
 414:Generated_Source\PSoC4/uart.c ****                 locRxBufferRead = 0u;
 415:Generated_Source\PSoC4/uart.c ****             }
 416:Generated_Source\PSoC4/uart.c ****             /* Update the real pointer */
 417:Generated_Source\PSoC4/uart.c ****             uart_rxBufferRead = locRxBufferRead;
 418:Generated_Source\PSoC4/uart.c **** 
 419:Generated_Source\PSoC4/uart.c ****             if(uart_rxBufferLoopDetect != 0u)
 420:Generated_Source\PSoC4/uart.c ****             {
 421:Generated_Source\PSoC4/uart.c ****                 uart_rxBufferLoopDetect = 0u;
 422:Generated_Source\PSoC4/uart.c ****                 #if ((uart_RX_INTERRUPT_ENABLED) && (uart_FLOW_CONTROL != 0u))
 423:Generated_Source\PSoC4/uart.c ****                     /* When Hardware Flow Control selected - return RX mask */
 424:Generated_Source\PSoC4/uart.c ****                     #if( uart_HD_ENABLED )
 425:Generated_Source\PSoC4/uart.c ****                         if((uart_CONTROL_REG & uart_CTRL_HD_SEND) == 0u)
 426:Generated_Source\PSoC4/uart.c ****                         {   /* In Half duplex mode return RX mask only in RX
 427:Generated_Source\PSoC4/uart.c ****                             *  configuration set, otherwise
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 14


 428:Generated_Source\PSoC4/uart.c ****                             *  mask will be returned in LoadRxConfig() API.
 429:Generated_Source\PSoC4/uart.c ****                             */
 430:Generated_Source\PSoC4/uart.c ****                             uart_RXSTATUS_MASK_REG  |= uart_RX_STS_FIFO_NOTEMPTY;
 431:Generated_Source\PSoC4/uart.c ****                         }
 432:Generated_Source\PSoC4/uart.c ****                     #else
 433:Generated_Source\PSoC4/uart.c ****                         uart_RXSTATUS_MASK_REG  |= uart_RX_STS_FIFO_NOTEMPTY;
 434:Generated_Source\PSoC4/uart.c ****                     #endif /* end uart_HD_ENABLED */
 435:Generated_Source\PSoC4/uart.c ****                 #endif /* ((uart_RX_INTERRUPT_ENABLED) && (uart_FLOW_CONTROL != 0u)) */
 436:Generated_Source\PSoC4/uart.c ****             }
 437:Generated_Source\PSoC4/uart.c ****         }
 438:Generated_Source\PSoC4/uart.c ****         else
 439:Generated_Source\PSoC4/uart.c ****         {   /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit */
 440:Generated_Source\PSoC4/uart.c ****             rxData = uart_RXDATA_REG;
 441:Generated_Source\PSoC4/uart.c ****         }
 442:Generated_Source\PSoC4/uart.c **** 
 443:Generated_Source\PSoC4/uart.c ****         uart_EnableRxInt();
 444:Generated_Source\PSoC4/uart.c **** 
 445:Generated_Source\PSoC4/uart.c ****     #else
 446:Generated_Source\PSoC4/uart.c **** 
 447:Generated_Source\PSoC4/uart.c ****         /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit */
 448:Generated_Source\PSoC4/uart.c ****         rxData = uart_RXDATA_REG;
 309              		.loc 1 448 0
 310 0000 014B     		ldr	r3, .L20
 311 0002 1878     		ldrb	r0, [r3]
 312 0004 C0B2     		uxtb	r0, r0
 313              	.LVL14:
 449:Generated_Source\PSoC4/uart.c **** 
 450:Generated_Source\PSoC4/uart.c ****     #endif /* (uart_RX_INTERRUPT_ENABLED) */
 451:Generated_Source\PSoC4/uart.c **** 
 452:Generated_Source\PSoC4/uart.c ****         return(rxData);
 453:Generated_Source\PSoC4/uart.c ****     }
 314              		.loc 1 453 0
 315              		@ sp needed
 316 0006 7047     		bx	lr
 317              	.L21:
 318              		.align	2
 319              	.L20:
 320 0008 42000F40 		.word	1074724930
 321              		.cfi_endproc
 322              	.LFE9:
 323              		.size	uart_ReadRxData, .-uart_ReadRxData
 324              		.section	.text.uart_ReadRxStatus,"ax",%progbits
 325              		.align	2
 326              		.global	uart_ReadRxStatus
 327              		.code	16
 328              		.thumb_func
 329              		.type	uart_ReadRxStatus, %function
 330              	uart_ReadRxStatus:
 331              	.LFB10:
 454:Generated_Source\PSoC4/uart.c **** 
 455:Generated_Source\PSoC4/uart.c **** 
 456:Generated_Source\PSoC4/uart.c ****     /*******************************************************************************
 457:Generated_Source\PSoC4/uart.c ****     * Function Name: uart_ReadRxStatus
 458:Generated_Source\PSoC4/uart.c ****     ********************************************************************************
 459:Generated_Source\PSoC4/uart.c ****     *
 460:Generated_Source\PSoC4/uart.c ****     * Summary:
 461:Generated_Source\PSoC4/uart.c ****     *  Returns the current state of the receiver status register and the software
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 15


 462:Generated_Source\PSoC4/uart.c ****     *  buffer overflow status.
 463:Generated_Source\PSoC4/uart.c ****     *
 464:Generated_Source\PSoC4/uart.c ****     * Parameters:
 465:Generated_Source\PSoC4/uart.c ****     *  None.
 466:Generated_Source\PSoC4/uart.c ****     *
 467:Generated_Source\PSoC4/uart.c ****     * Return:
 468:Generated_Source\PSoC4/uart.c ****     *  Current state of the status register.
 469:Generated_Source\PSoC4/uart.c ****     *
 470:Generated_Source\PSoC4/uart.c ****     * Side Effect:
 471:Generated_Source\PSoC4/uart.c ****     *  All status register bits are clear-on-read except
 472:Generated_Source\PSoC4/uart.c ****     *  uart_RX_STS_FIFO_NOTEMPTY.
 473:Generated_Source\PSoC4/uart.c ****     *  uart_RX_STS_FIFO_NOTEMPTY clears immediately after RX data
 474:Generated_Source\PSoC4/uart.c ****     *  register read.
 475:Generated_Source\PSoC4/uart.c ****     *
 476:Generated_Source\PSoC4/uart.c ****     * Global Variables:
 477:Generated_Source\PSoC4/uart.c ****     *  uart_rxBufferOverflow - used to indicate overload condition.
 478:Generated_Source\PSoC4/uart.c ****     *   It set to one in RX interrupt when there isn't free space in
 479:Generated_Source\PSoC4/uart.c ****     *   uart_rxBufferRead to write new data. This condition returned
 480:Generated_Source\PSoC4/uart.c ****     *   and cleared to zero by this API as an
 481:Generated_Source\PSoC4/uart.c ****     *   uart_RX_STS_SOFT_BUFF_OVER bit along with RX Status register
 482:Generated_Source\PSoC4/uart.c ****     *   bits.
 483:Generated_Source\PSoC4/uart.c ****     *
 484:Generated_Source\PSoC4/uart.c ****     *******************************************************************************/
 485:Generated_Source\PSoC4/uart.c ****     uint8 uart_ReadRxStatus(void) 
 486:Generated_Source\PSoC4/uart.c ****     {
 332              		.loc 1 486 0
 333              		.cfi_startproc
 334              		@ args = 0, pretend = 0, frame = 0
 335              		@ frame_needed = 0, uses_anonymous_args = 0
 336              		@ link register save eliminated.
 487:Generated_Source\PSoC4/uart.c ****         uint8 status;
 488:Generated_Source\PSoC4/uart.c **** 
 489:Generated_Source\PSoC4/uart.c ****         status = uart_RXSTATUS_REG & uart_RX_HW_MASK;
 337              		.loc 1 489 0
 338 0000 024B     		ldr	r3, .L23
 339 0002 1878     		ldrb	r0, [r3]
 340 0004 7F23     		movs	r3, #127
 341 0006 1840     		ands	r0, r3
 342              	.LVL15:
 490:Generated_Source\PSoC4/uart.c **** 
 491:Generated_Source\PSoC4/uart.c ****     #if (uart_RX_INTERRUPT_ENABLED)
 492:Generated_Source\PSoC4/uart.c ****         if(uart_rxBufferOverflow != 0u)
 493:Generated_Source\PSoC4/uart.c ****         {
 494:Generated_Source\PSoC4/uart.c ****             status |= uart_RX_STS_SOFT_BUFF_OVER;
 495:Generated_Source\PSoC4/uart.c ****             uart_rxBufferOverflow = 0u;
 496:Generated_Source\PSoC4/uart.c ****         }
 497:Generated_Source\PSoC4/uart.c ****     #endif /* (uart_RX_INTERRUPT_ENABLED) */
 498:Generated_Source\PSoC4/uart.c **** 
 499:Generated_Source\PSoC4/uart.c ****         return(status);
 500:Generated_Source\PSoC4/uart.c ****     }
 343              		.loc 1 500 0
 344              		@ sp needed
 345 0008 7047     		bx	lr
 346              	.L24:
 347 000a C046     		.align	2
 348              	.L23:
 349 000c 62000F40 		.word	1074724962
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 16


 350              		.cfi_endproc
 351              	.LFE10:
 352              		.size	uart_ReadRxStatus, .-uart_ReadRxStatus
 353              		.section	.text.uart_GetChar,"ax",%progbits
 354              		.align	2
 355              		.global	uart_GetChar
 356              		.code	16
 357              		.thumb_func
 358              		.type	uart_GetChar, %function
 359              	uart_GetChar:
 360              	.LFB11:
 501:Generated_Source\PSoC4/uart.c **** 
 502:Generated_Source\PSoC4/uart.c **** 
 503:Generated_Source\PSoC4/uart.c ****     /*******************************************************************************
 504:Generated_Source\PSoC4/uart.c ****     * Function Name: uart_GetChar
 505:Generated_Source\PSoC4/uart.c ****     ********************************************************************************
 506:Generated_Source\PSoC4/uart.c ****     *
 507:Generated_Source\PSoC4/uart.c ****     * Summary:
 508:Generated_Source\PSoC4/uart.c ****     *  Returns the last received byte of data. uart_GetChar() is
 509:Generated_Source\PSoC4/uart.c ****     *  designed for ASCII characters and returns a uint8 where 1 to 255 are values
 510:Generated_Source\PSoC4/uart.c ****     *  for valid characters and 0 indicates an error occurred or no data is present.
 511:Generated_Source\PSoC4/uart.c ****     *
 512:Generated_Source\PSoC4/uart.c ****     * Parameters:
 513:Generated_Source\PSoC4/uart.c ****     *  None.
 514:Generated_Source\PSoC4/uart.c ****     *
 515:Generated_Source\PSoC4/uart.c ****     * Return:
 516:Generated_Source\PSoC4/uart.c ****     *  Character read from UART RX buffer. ASCII characters from 1 to 255 are valid.
 517:Generated_Source\PSoC4/uart.c ****     *  A returned zero signifies an error condition or no data available.
 518:Generated_Source\PSoC4/uart.c ****     *
 519:Generated_Source\PSoC4/uart.c ****     * Global Variables:
 520:Generated_Source\PSoC4/uart.c ****     *  uart_rxBuffer - RAM buffer pointer for save received data.
 521:Generated_Source\PSoC4/uart.c ****     *  uart_rxBufferWrite - cyclic index for write to rxBuffer,
 522:Generated_Source\PSoC4/uart.c ****     *     checked to identify new data.
 523:Generated_Source\PSoC4/uart.c ****     *  uart_rxBufferRead - cyclic index for read from rxBuffer,
 524:Generated_Source\PSoC4/uart.c ****     *     incremented after each byte has been read from buffer.
 525:Generated_Source\PSoC4/uart.c ****     *  uart_rxBufferLoopDetect - cleared if loop condition was detected
 526:Generated_Source\PSoC4/uart.c ****     *     in RX ISR.
 527:Generated_Source\PSoC4/uart.c ****     *
 528:Generated_Source\PSoC4/uart.c ****     * Reentrant:
 529:Generated_Source\PSoC4/uart.c ****     *  No.
 530:Generated_Source\PSoC4/uart.c ****     *
 531:Generated_Source\PSoC4/uart.c ****     *******************************************************************************/
 532:Generated_Source\PSoC4/uart.c ****     uint8 uart_GetChar(void) 
 533:Generated_Source\PSoC4/uart.c ****     {
 361              		.loc 1 533 0
 362              		.cfi_startproc
 363              		@ args = 0, pretend = 0, frame = 0
 364              		@ frame_needed = 0, uses_anonymous_args = 0
 365              		@ link register save eliminated.
 366              	.LVL16:
 534:Generated_Source\PSoC4/uart.c ****         uint8 rxData = 0u;
 535:Generated_Source\PSoC4/uart.c ****         uint8 rxStatus;
 536:Generated_Source\PSoC4/uart.c **** 
 537:Generated_Source\PSoC4/uart.c ****     #if (uart_RX_INTERRUPT_ENABLED)
 538:Generated_Source\PSoC4/uart.c ****         uint8 locRxBufferRead;
 539:Generated_Source\PSoC4/uart.c ****         uint8 locRxBufferWrite;
 540:Generated_Source\PSoC4/uart.c **** 
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 17


 541:Generated_Source\PSoC4/uart.c ****         /* Protect variables that could change on interrupt */
 542:Generated_Source\PSoC4/uart.c ****         uart_DisableRxInt();
 543:Generated_Source\PSoC4/uart.c **** 
 544:Generated_Source\PSoC4/uart.c ****         locRxBufferRead  = uart_rxBufferRead;
 545:Generated_Source\PSoC4/uart.c ****         locRxBufferWrite = uart_rxBufferWrite;
 546:Generated_Source\PSoC4/uart.c **** 
 547:Generated_Source\PSoC4/uart.c ****         if( (uart_rxBufferLoopDetect != 0u) || (locRxBufferRead != locRxBufferWrite) )
 548:Generated_Source\PSoC4/uart.c ****         {
 549:Generated_Source\PSoC4/uart.c ****             rxData = uart_rxBuffer[locRxBufferRead];
 550:Generated_Source\PSoC4/uart.c ****             locRxBufferRead++;
 551:Generated_Source\PSoC4/uart.c ****             if(locRxBufferRead >= uart_RX_BUFFER_SIZE)
 552:Generated_Source\PSoC4/uart.c ****             {
 553:Generated_Source\PSoC4/uart.c ****                 locRxBufferRead = 0u;
 554:Generated_Source\PSoC4/uart.c ****             }
 555:Generated_Source\PSoC4/uart.c ****             /* Update the real pointer */
 556:Generated_Source\PSoC4/uart.c ****             uart_rxBufferRead = locRxBufferRead;
 557:Generated_Source\PSoC4/uart.c **** 
 558:Generated_Source\PSoC4/uart.c ****             if(uart_rxBufferLoopDetect != 0u)
 559:Generated_Source\PSoC4/uart.c ****             {
 560:Generated_Source\PSoC4/uart.c ****                 uart_rxBufferLoopDetect = 0u;
 561:Generated_Source\PSoC4/uart.c ****                 #if( (uart_RX_INTERRUPT_ENABLED) && (uart_FLOW_CONTROL != 0u) )
 562:Generated_Source\PSoC4/uart.c ****                     /* When Hardware Flow Control selected - return RX mask */
 563:Generated_Source\PSoC4/uart.c ****                     #if( uart_HD_ENABLED )
 564:Generated_Source\PSoC4/uart.c ****                         if((uart_CONTROL_REG & uart_CTRL_HD_SEND) == 0u)
 565:Generated_Source\PSoC4/uart.c ****                         {   /* In Half duplex mode return RX mask only if
 566:Generated_Source\PSoC4/uart.c ****                             *  RX configuration set, otherwise
 567:Generated_Source\PSoC4/uart.c ****                             *  mask will be returned in LoadRxConfig() API.
 568:Generated_Source\PSoC4/uart.c ****                             */
 569:Generated_Source\PSoC4/uart.c ****                             uart_RXSTATUS_MASK_REG |= uart_RX_STS_FIFO_NOTEMPTY;
 570:Generated_Source\PSoC4/uart.c ****                         }
 571:Generated_Source\PSoC4/uart.c ****                     #else
 572:Generated_Source\PSoC4/uart.c ****                         uart_RXSTATUS_MASK_REG |= uart_RX_STS_FIFO_NOTEMPTY;
 573:Generated_Source\PSoC4/uart.c ****                     #endif /* end uart_HD_ENABLED */
 574:Generated_Source\PSoC4/uart.c ****                 #endif /* uart_RX_INTERRUPT_ENABLED and Hardware flow control*/
 575:Generated_Source\PSoC4/uart.c ****             }
 576:Generated_Source\PSoC4/uart.c **** 
 577:Generated_Source\PSoC4/uart.c ****         }
 578:Generated_Source\PSoC4/uart.c ****         else
 579:Generated_Source\PSoC4/uart.c ****         {   rxStatus = uart_RXSTATUS_REG;
 580:Generated_Source\PSoC4/uart.c ****             if((rxStatus & uart_RX_STS_FIFO_NOTEMPTY) != 0u)
 581:Generated_Source\PSoC4/uart.c ****             {   /* Read received data from FIFO */
 582:Generated_Source\PSoC4/uart.c ****                 rxData = uart_RXDATA_REG;
 583:Generated_Source\PSoC4/uart.c ****                 /*Check status on error*/
 584:Generated_Source\PSoC4/uart.c ****                 if((rxStatus & (uart_RX_STS_BREAK | uart_RX_STS_PAR_ERROR |
 585:Generated_Source\PSoC4/uart.c ****                                 uart_RX_STS_STOP_ERROR | uart_RX_STS_OVERRUN)) != 0u)
 586:Generated_Source\PSoC4/uart.c ****                 {
 587:Generated_Source\PSoC4/uart.c ****                     rxData = 0u;
 588:Generated_Source\PSoC4/uart.c ****                 }
 589:Generated_Source\PSoC4/uart.c ****             }
 590:Generated_Source\PSoC4/uart.c ****         }
 591:Generated_Source\PSoC4/uart.c **** 
 592:Generated_Source\PSoC4/uart.c ****         uart_EnableRxInt();
 593:Generated_Source\PSoC4/uart.c **** 
 594:Generated_Source\PSoC4/uart.c ****     #else
 595:Generated_Source\PSoC4/uart.c **** 
 596:Generated_Source\PSoC4/uart.c ****         rxStatus =uart_RXSTATUS_REG;
 367              		.loc 1 596 0
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 18


 368 0000 074B     		ldr	r3, .L29
 369 0002 1B78     		ldrb	r3, [r3]
 370 0004 DBB2     		uxtb	r3, r3
 371              	.LVL17:
 597:Generated_Source\PSoC4/uart.c ****         if((rxStatus & uart_RX_STS_FIFO_NOTEMPTY) != 0u)
 372              		.loc 1 597 0
 373 0006 9A06     		lsls	r2, r3, #26
 374 0008 06D5     		bpl	.L27
 598:Generated_Source\PSoC4/uart.c ****         {
 599:Generated_Source\PSoC4/uart.c ****             /* Read received data from FIFO */
 600:Generated_Source\PSoC4/uart.c ****             rxData = uart_RXDATA_REG;
 375              		.loc 1 600 0
 376 000a 064A     		ldr	r2, .L29+4
 377 000c 1078     		ldrb	r0, [r2]
 378 000e C0B2     		uxtb	r0, r0
 379              	.LVL18:
 601:Generated_Source\PSoC4/uart.c **** 
 602:Generated_Source\PSoC4/uart.c ****             /*Check status on error*/
 603:Generated_Source\PSoC4/uart.c ****             if((rxStatus & (uart_RX_STS_BREAK | uart_RX_STS_PAR_ERROR |
 380              		.loc 1 603 0
 381 0010 1E22     		movs	r2, #30
 382 0012 1A42     		tst	r2, r3
 383 0014 02D1     		bne	.L28
 384 0016 02E0     		b	.L26
 385              	.LVL19:
 386              	.L27:
 534:Generated_Source\PSoC4/uart.c ****         uint8 rxStatus;
 387              		.loc 1 534 0
 388 0018 0020     		movs	r0, #0
 389 001a 00E0     		b	.L26
 390              	.LVL20:
 391              	.L28:
 604:Generated_Source\PSoC4/uart.c ****                             uart_RX_STS_STOP_ERROR | uart_RX_STS_OVERRUN)) != 0u)
 605:Generated_Source\PSoC4/uart.c ****             {
 606:Generated_Source\PSoC4/uart.c ****                 rxData = 0u;
 392              		.loc 1 606 0
 393 001c 0020     		movs	r0, #0
 394              	.LVL21:
 395              	.L26:
 607:Generated_Source\PSoC4/uart.c ****             }
 608:Generated_Source\PSoC4/uart.c ****         }
 609:Generated_Source\PSoC4/uart.c ****     #endif /* (uart_RX_INTERRUPT_ENABLED) */
 610:Generated_Source\PSoC4/uart.c **** 
 611:Generated_Source\PSoC4/uart.c ****         return(rxData);
 612:Generated_Source\PSoC4/uart.c ****     }
 396              		.loc 1 612 0
 397              		@ sp needed
 398 001e 7047     		bx	lr
 399              	.L30:
 400              		.align	2
 401              	.L29:
 402 0020 62000F40 		.word	1074724962
 403 0024 42000F40 		.word	1074724930
 404              		.cfi_endproc
 405              	.LFE11:
 406              		.size	uart_GetChar, .-uart_GetChar
 407              		.section	.text.uart_GetByte,"ax",%progbits
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 19


 408              		.align	2
 409              		.global	uart_GetByte
 410              		.code	16
 411              		.thumb_func
 412              		.type	uart_GetByte, %function
 413              	uart_GetByte:
 414              	.LFB12:
 613:Generated_Source\PSoC4/uart.c **** 
 614:Generated_Source\PSoC4/uart.c **** 
 615:Generated_Source\PSoC4/uart.c ****     /*******************************************************************************
 616:Generated_Source\PSoC4/uart.c ****     * Function Name: uart_GetByte
 617:Generated_Source\PSoC4/uart.c ****     ********************************************************************************
 618:Generated_Source\PSoC4/uart.c ****     *
 619:Generated_Source\PSoC4/uart.c ****     * Summary:
 620:Generated_Source\PSoC4/uart.c ****     *  Reads UART RX buffer immediately, returns received character and error
 621:Generated_Source\PSoC4/uart.c ****     *  condition.
 622:Generated_Source\PSoC4/uart.c ****     *
 623:Generated_Source\PSoC4/uart.c ****     * Parameters:
 624:Generated_Source\PSoC4/uart.c ****     *  None.
 625:Generated_Source\PSoC4/uart.c ****     *
 626:Generated_Source\PSoC4/uart.c ****     * Return:
 627:Generated_Source\PSoC4/uart.c ****     *  MSB contains status and LSB contains UART RX data. If the MSB is nonzero,
 628:Generated_Source\PSoC4/uart.c ****     *  an error has occurred.
 629:Generated_Source\PSoC4/uart.c ****     *
 630:Generated_Source\PSoC4/uart.c ****     * Reentrant:
 631:Generated_Source\PSoC4/uart.c ****     *  No.
 632:Generated_Source\PSoC4/uart.c ****     *
 633:Generated_Source\PSoC4/uart.c ****     *******************************************************************************/
 634:Generated_Source\PSoC4/uart.c ****     uint16 uart_GetByte(void) 
 635:Generated_Source\PSoC4/uart.c ****     {
 415              		.loc 1 635 0
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 0
 418              		@ frame_needed = 0, uses_anonymous_args = 0
 419 0000 10B5     		push	{r4, lr}
 420              		.cfi_def_cfa_offset 8
 421              		.cfi_offset 4, -8
 422              		.cfi_offset 14, -4
 636:Generated_Source\PSoC4/uart.c ****         
 637:Generated_Source\PSoC4/uart.c ****     #if (uart_RX_INTERRUPT_ENABLED)
 638:Generated_Source\PSoC4/uart.c ****         uint16 locErrorStatus;
 639:Generated_Source\PSoC4/uart.c ****         /* Protect variables that could change on interrupt */
 640:Generated_Source\PSoC4/uart.c ****         uart_DisableRxInt();
 641:Generated_Source\PSoC4/uart.c ****         locErrorStatus = (uint16)uart_errorStatus;
 642:Generated_Source\PSoC4/uart.c ****         uart_errorStatus = 0u;
 643:Generated_Source\PSoC4/uart.c ****         uart_EnableRxInt();
 644:Generated_Source\PSoC4/uart.c ****         return ( (uint16)(locErrorStatus << 8u) | uart_ReadRxData() );
 645:Generated_Source\PSoC4/uart.c ****     #else
 646:Generated_Source\PSoC4/uart.c ****         return ( ((uint16)uart_ReadRxStatus() << 8u) | uart_ReadRxData() );
 423              		.loc 1 646 0
 424 0002 FFF7FEFF 		bl	uart_ReadRxStatus
 425              	.LVL22:
 426 0006 0402     		lsls	r4, r0, #8
 427 0008 FFF7FEFF 		bl	uart_ReadRxData
 428              	.LVL23:
 429 000c 2043     		orrs	r0, r4
 430 000e 80B2     		uxth	r0, r0
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 20


 647:Generated_Source\PSoC4/uart.c ****     #endif /* uart_RX_INTERRUPT_ENABLED */
 648:Generated_Source\PSoC4/uart.c ****         
 649:Generated_Source\PSoC4/uart.c ****     }
 431              		.loc 1 649 0
 432              		@ sp needed
 433 0010 10BD     		pop	{r4, pc}
 434              		.cfi_endproc
 435              	.LFE12:
 436              		.size	uart_GetByte, .-uart_GetByte
 437 0012 C046     		.section	.text.uart_GetRxBufferSize,"ax",%progbits
 438              		.align	2
 439              		.global	uart_GetRxBufferSize
 440              		.code	16
 441              		.thumb_func
 442              		.type	uart_GetRxBufferSize, %function
 443              	uart_GetRxBufferSize:
 444              	.LFB13:
 650:Generated_Source\PSoC4/uart.c **** 
 651:Generated_Source\PSoC4/uart.c **** 
 652:Generated_Source\PSoC4/uart.c ****     /*******************************************************************************
 653:Generated_Source\PSoC4/uart.c ****     * Function Name: uart_GetRxBufferSize
 654:Generated_Source\PSoC4/uart.c ****     ********************************************************************************
 655:Generated_Source\PSoC4/uart.c ****     *
 656:Generated_Source\PSoC4/uart.c ****     * Summary:
 657:Generated_Source\PSoC4/uart.c ****     *  Returns the number of received bytes available in the RX buffer.
 658:Generated_Source\PSoC4/uart.c ****     *  * RX software buffer is disabled (RX Buffer Size parameter is equal to 4): 
 659:Generated_Source\PSoC4/uart.c ****     *    returns 0 for empty RX FIFO or 1 for not empty RX FIFO.
 660:Generated_Source\PSoC4/uart.c ****     *  * RX software buffer is enabled: returns the number of bytes available in 
 661:Generated_Source\PSoC4/uart.c ****     *    the RX software buffer. Bytes available in the RX FIFO do not take to 
 662:Generated_Source\PSoC4/uart.c ****     *    account.
 663:Generated_Source\PSoC4/uart.c ****     *
 664:Generated_Source\PSoC4/uart.c ****     * Parameters:
 665:Generated_Source\PSoC4/uart.c ****     *  None.
 666:Generated_Source\PSoC4/uart.c ****     *
 667:Generated_Source\PSoC4/uart.c ****     * Return:
 668:Generated_Source\PSoC4/uart.c ****     *  uint8: Number of bytes in the RX buffer. 
 669:Generated_Source\PSoC4/uart.c ****     *    Return value type depends on RX Buffer Size parameter.
 670:Generated_Source\PSoC4/uart.c ****     *
 671:Generated_Source\PSoC4/uart.c ****     * Global Variables:
 672:Generated_Source\PSoC4/uart.c ****     *  uart_rxBufferWrite - used to calculate left bytes.
 673:Generated_Source\PSoC4/uart.c ****     *  uart_rxBufferRead - used to calculate left bytes.
 674:Generated_Source\PSoC4/uart.c ****     *  uart_rxBufferLoopDetect - checked to decide left bytes amount.
 675:Generated_Source\PSoC4/uart.c ****     *
 676:Generated_Source\PSoC4/uart.c ****     * Reentrant:
 677:Generated_Source\PSoC4/uart.c ****     *  No.
 678:Generated_Source\PSoC4/uart.c ****     *
 679:Generated_Source\PSoC4/uart.c ****     * Theory:
 680:Generated_Source\PSoC4/uart.c ****     *  Allows the user to find out how full the RX Buffer is.
 681:Generated_Source\PSoC4/uart.c ****     *
 682:Generated_Source\PSoC4/uart.c ****     *******************************************************************************/
 683:Generated_Source\PSoC4/uart.c ****     uint8 uart_GetRxBufferSize(void)
 684:Generated_Source\PSoC4/uart.c ****                                                             
 685:Generated_Source\PSoC4/uart.c ****     {
 445              		.loc 1 685 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 0
 448              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 21


 449              		@ link register save eliminated.
 686:Generated_Source\PSoC4/uart.c ****         uint8 size;
 687:Generated_Source\PSoC4/uart.c **** 
 688:Generated_Source\PSoC4/uart.c ****     #if (uart_RX_INTERRUPT_ENABLED)
 689:Generated_Source\PSoC4/uart.c **** 
 690:Generated_Source\PSoC4/uart.c ****         /* Protect variables that could change on interrupt */
 691:Generated_Source\PSoC4/uart.c ****         uart_DisableRxInt();
 692:Generated_Source\PSoC4/uart.c **** 
 693:Generated_Source\PSoC4/uart.c ****         if(uart_rxBufferRead == uart_rxBufferWrite)
 694:Generated_Source\PSoC4/uart.c ****         {
 695:Generated_Source\PSoC4/uart.c ****             if(uart_rxBufferLoopDetect != 0u)
 696:Generated_Source\PSoC4/uart.c ****             {
 697:Generated_Source\PSoC4/uart.c ****                 size = uart_RX_BUFFER_SIZE;
 698:Generated_Source\PSoC4/uart.c ****             }
 699:Generated_Source\PSoC4/uart.c ****             else
 700:Generated_Source\PSoC4/uart.c ****             {
 701:Generated_Source\PSoC4/uart.c ****                 size = 0u;
 702:Generated_Source\PSoC4/uart.c ****             }
 703:Generated_Source\PSoC4/uart.c ****         }
 704:Generated_Source\PSoC4/uart.c ****         else if(uart_rxBufferRead < uart_rxBufferWrite)
 705:Generated_Source\PSoC4/uart.c ****         {
 706:Generated_Source\PSoC4/uart.c ****             size = (uart_rxBufferWrite - uart_rxBufferRead);
 707:Generated_Source\PSoC4/uart.c ****         }
 708:Generated_Source\PSoC4/uart.c ****         else
 709:Generated_Source\PSoC4/uart.c ****         {
 710:Generated_Source\PSoC4/uart.c ****             size = (uart_RX_BUFFER_SIZE - uart_rxBufferRead) + uart_rxBufferWrite;
 711:Generated_Source\PSoC4/uart.c ****         }
 712:Generated_Source\PSoC4/uart.c **** 
 713:Generated_Source\PSoC4/uart.c ****         uart_EnableRxInt();
 714:Generated_Source\PSoC4/uart.c **** 
 715:Generated_Source\PSoC4/uart.c ****     #else
 716:Generated_Source\PSoC4/uart.c **** 
 717:Generated_Source\PSoC4/uart.c ****         /* We can only know if there is data in the fifo. */
 718:Generated_Source\PSoC4/uart.c ****         size = ((uart_RXSTATUS_REG & uart_RX_STS_FIFO_NOTEMPTY) != 0u) ? 1u : 0u;
 450              		.loc 1 718 0
 451 0000 034B     		ldr	r3, .L35
 452 0002 1B78     		ldrb	r3, [r3]
 453 0004 9B06     		lsls	r3, r3, #26
 454 0006 01D5     		bpl	.L34
 455 0008 0120     		movs	r0, #1
 456 000a 00E0     		b	.L33
 457              	.L34:
 458 000c 0020     		movs	r0, #0
 459              	.L33:
 460              	.LVL24:
 719:Generated_Source\PSoC4/uart.c **** 
 720:Generated_Source\PSoC4/uart.c ****     #endif /* (uart_RX_INTERRUPT_ENABLED) */
 721:Generated_Source\PSoC4/uart.c **** 
 722:Generated_Source\PSoC4/uart.c ****         return(size);
 723:Generated_Source\PSoC4/uart.c ****     }
 461              		.loc 1 723 0 discriminator 4
 462              		@ sp needed
 463 000e 7047     		bx	lr
 464              	.L36:
 465              		.align	2
 466              	.L35:
 467 0010 62000F40 		.word	1074724962
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 22


 468              		.cfi_endproc
 469              	.LFE13:
 470              		.size	uart_GetRxBufferSize, .-uart_GetRxBufferSize
 471              		.section	.text.uart_ClearRxBuffer,"ax",%progbits
 472              		.align	2
 473              		.global	uart_ClearRxBuffer
 474              		.code	16
 475              		.thumb_func
 476              		.type	uart_ClearRxBuffer, %function
 477              	uart_ClearRxBuffer:
 478              	.LFB14:
 724:Generated_Source\PSoC4/uart.c **** 
 725:Generated_Source\PSoC4/uart.c **** 
 726:Generated_Source\PSoC4/uart.c ****     /*******************************************************************************
 727:Generated_Source\PSoC4/uart.c ****     * Function Name: uart_ClearRxBuffer
 728:Generated_Source\PSoC4/uart.c ****     ********************************************************************************
 729:Generated_Source\PSoC4/uart.c ****     *
 730:Generated_Source\PSoC4/uart.c ****     * Summary:
 731:Generated_Source\PSoC4/uart.c ****     *  Clears the receiver memory buffer and hardware RX FIFO of all received data.
 732:Generated_Source\PSoC4/uart.c ****     *
 733:Generated_Source\PSoC4/uart.c ****     * Parameters:
 734:Generated_Source\PSoC4/uart.c ****     *  None.
 735:Generated_Source\PSoC4/uart.c ****     *
 736:Generated_Source\PSoC4/uart.c ****     * Return:
 737:Generated_Source\PSoC4/uart.c ****     *  None.
 738:Generated_Source\PSoC4/uart.c ****     *
 739:Generated_Source\PSoC4/uart.c ****     * Global Variables:
 740:Generated_Source\PSoC4/uart.c ****     *  uart_rxBufferWrite - cleared to zero.
 741:Generated_Source\PSoC4/uart.c ****     *  uart_rxBufferRead - cleared to zero.
 742:Generated_Source\PSoC4/uart.c ****     *  uart_rxBufferLoopDetect - cleared to zero.
 743:Generated_Source\PSoC4/uart.c ****     *  uart_rxBufferOverflow - cleared to zero.
 744:Generated_Source\PSoC4/uart.c ****     *
 745:Generated_Source\PSoC4/uart.c ****     * Reentrant:
 746:Generated_Source\PSoC4/uart.c ****     *  No.
 747:Generated_Source\PSoC4/uart.c ****     *
 748:Generated_Source\PSoC4/uart.c ****     * Theory:
 749:Generated_Source\PSoC4/uart.c ****     *  Setting the pointers to zero makes the system believe there is no data to
 750:Generated_Source\PSoC4/uart.c ****     *  read and writing will resume at address 0 overwriting any data that may
 751:Generated_Source\PSoC4/uart.c ****     *  have remained in the RAM.
 752:Generated_Source\PSoC4/uart.c ****     *
 753:Generated_Source\PSoC4/uart.c ****     * Side Effects:
 754:Generated_Source\PSoC4/uart.c ****     *  Any received data not read from the RAM or FIFO buffer will be lost.
 755:Generated_Source\PSoC4/uart.c ****     *
 756:Generated_Source\PSoC4/uart.c ****     *******************************************************************************/
 757:Generated_Source\PSoC4/uart.c ****     void uart_ClearRxBuffer(void) 
 758:Generated_Source\PSoC4/uart.c ****     {
 479              		.loc 1 758 0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 0
 482              		@ frame_needed = 0, uses_anonymous_args = 0
 483 0000 10B5     		push	{r4, lr}
 484              		.cfi_def_cfa_offset 8
 485              		.cfi_offset 4, -8
 486              		.cfi_offset 14, -4
 759:Generated_Source\PSoC4/uart.c ****         uint8 enableInterrupts;
 760:Generated_Source\PSoC4/uart.c **** 
 761:Generated_Source\PSoC4/uart.c ****         /* Clear the HW FIFO */
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 23


 762:Generated_Source\PSoC4/uart.c ****         enableInterrupts = CyEnterCriticalSection();
 487              		.loc 1 762 0
 488 0002 FFF7FEFF 		bl	CyEnterCriticalSection
 489              	.LVL25:
 763:Generated_Source\PSoC4/uart.c ****         uart_RXDATA_AUX_CTL_REG |= (uint8)  uart_RX_FIFO_CLR;
 490              		.loc 1 763 0
 491 0006 064A     		ldr	r2, .L38
 492 0008 1178     		ldrb	r1, [r2]
 493 000a 0123     		movs	r3, #1
 494 000c 0B43     		orrs	r3, r1
 495 000e DBB2     		uxtb	r3, r3
 496 0010 1370     		strb	r3, [r2]
 764:Generated_Source\PSoC4/uart.c ****         uart_RXDATA_AUX_CTL_REG &= (uint8) ~uart_RX_FIFO_CLR;
 497              		.loc 1 764 0
 498 0012 1378     		ldrb	r3, [r2]
 499 0014 0121     		movs	r1, #1
 500 0016 8B43     		bics	r3, r1
 501 0018 1370     		strb	r3, [r2]
 765:Generated_Source\PSoC4/uart.c ****         CyExitCriticalSection(enableInterrupts);
 502              		.loc 1 765 0
 503 001a FFF7FEFF 		bl	CyExitCriticalSection
 504              	.LVL26:
 766:Generated_Source\PSoC4/uart.c **** 
 767:Generated_Source\PSoC4/uart.c ****     #if (uart_RX_INTERRUPT_ENABLED)
 768:Generated_Source\PSoC4/uart.c **** 
 769:Generated_Source\PSoC4/uart.c ****         /* Protect variables that could change on interrupt. */
 770:Generated_Source\PSoC4/uart.c ****         uart_DisableRxInt();
 771:Generated_Source\PSoC4/uart.c **** 
 772:Generated_Source\PSoC4/uart.c ****         uart_rxBufferRead = 0u;
 773:Generated_Source\PSoC4/uart.c ****         uart_rxBufferWrite = 0u;
 774:Generated_Source\PSoC4/uart.c ****         uart_rxBufferLoopDetect = 0u;
 775:Generated_Source\PSoC4/uart.c ****         uart_rxBufferOverflow = 0u;
 776:Generated_Source\PSoC4/uart.c **** 
 777:Generated_Source\PSoC4/uart.c ****         uart_EnableRxInt();
 778:Generated_Source\PSoC4/uart.c **** 
 779:Generated_Source\PSoC4/uart.c ****     #endif /* (uart_RX_INTERRUPT_ENABLED) */
 780:Generated_Source\PSoC4/uart.c **** 
 781:Generated_Source\PSoC4/uart.c ****     }
 505              		.loc 1 781 0
 506              		@ sp needed
 507 001e 10BD     		pop	{r4, pc}
 508              	.L39:
 509              		.align	2
 510              	.L38:
 511 0020 92000F40 		.word	1074725010
 512              		.cfi_endproc
 513              	.LFE14:
 514              		.size	uart_ClearRxBuffer, .-uart_ClearRxBuffer
 515              		.section	.text.uart_SetRxAddressMode,"ax",%progbits
 516              		.align	2
 517              		.global	uart_SetRxAddressMode
 518              		.code	16
 519              		.thumb_func
 520              		.type	uart_SetRxAddressMode, %function
 521              	uart_SetRxAddressMode:
 522              	.LFB15:
 782:Generated_Source\PSoC4/uart.c **** 
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 24


 783:Generated_Source\PSoC4/uart.c **** 
 784:Generated_Source\PSoC4/uart.c ****     /*******************************************************************************
 785:Generated_Source\PSoC4/uart.c ****     * Function Name: uart_SetRxAddressMode
 786:Generated_Source\PSoC4/uart.c ****     ********************************************************************************
 787:Generated_Source\PSoC4/uart.c ****     *
 788:Generated_Source\PSoC4/uart.c ****     * Summary:
 789:Generated_Source\PSoC4/uart.c ****     *  Sets the software controlled Addressing mode used by the RX portion of the
 790:Generated_Source\PSoC4/uart.c ****     *  UART.
 791:Generated_Source\PSoC4/uart.c ****     *
 792:Generated_Source\PSoC4/uart.c ****     * Parameters:
 793:Generated_Source\PSoC4/uart.c ****     *  addressMode: Enumerated value indicating the mode of RX addressing
 794:Generated_Source\PSoC4/uart.c ****     *  uart__B_UART__AM_SW_BYTE_BYTE -  Software Byte-by-Byte address
 795:Generated_Source\PSoC4/uart.c ****     *                                               detection
 796:Generated_Source\PSoC4/uart.c ****     *  uart__B_UART__AM_SW_DETECT_TO_BUFFER - Software Detect to Buffer
 797:Generated_Source\PSoC4/uart.c ****     *                                               address detection
 798:Generated_Source\PSoC4/uart.c ****     *  uart__B_UART__AM_HW_BYTE_BY_BYTE - Hardware Byte-by-Byte address
 799:Generated_Source\PSoC4/uart.c ****     *                                               detection
 800:Generated_Source\PSoC4/uart.c ****     *  uart__B_UART__AM_HW_DETECT_TO_BUFFER - Hardware Detect to Buffer
 801:Generated_Source\PSoC4/uart.c ****     *                                               address detection
 802:Generated_Source\PSoC4/uart.c ****     *  uart__B_UART__AM_NONE - No address detection
 803:Generated_Source\PSoC4/uart.c ****     *
 804:Generated_Source\PSoC4/uart.c ****     * Return:
 805:Generated_Source\PSoC4/uart.c ****     *  None.
 806:Generated_Source\PSoC4/uart.c ****     *
 807:Generated_Source\PSoC4/uart.c ****     * Global Variables:
 808:Generated_Source\PSoC4/uart.c ****     *  uart_rxAddressMode - the parameter stored in this variable for
 809:Generated_Source\PSoC4/uart.c ****     *   the farther usage in RX ISR.
 810:Generated_Source\PSoC4/uart.c ****     *  uart_rxAddressDetected - set to initial state (0).
 811:Generated_Source\PSoC4/uart.c ****     *
 812:Generated_Source\PSoC4/uart.c ****     *******************************************************************************/
 813:Generated_Source\PSoC4/uart.c ****     void uart_SetRxAddressMode(uint8 addressMode)
 814:Generated_Source\PSoC4/uart.c ****                                                         
 815:Generated_Source\PSoC4/uart.c ****     {
 523              		.loc 1 815 0
 524              		.cfi_startproc
 525              		@ args = 0, pretend = 0, frame = 0
 526              		@ frame_needed = 0, uses_anonymous_args = 0
 527              		@ link register save eliminated.
 528              	.LVL27:
 816:Generated_Source\PSoC4/uart.c ****         #if(uart_RXHW_ADDRESS_ENABLED)
 817:Generated_Source\PSoC4/uart.c ****             #if(uart_CONTROL_REG_REMOVED)
 818:Generated_Source\PSoC4/uart.c ****                 if(0u != addressMode)
 819:Generated_Source\PSoC4/uart.c ****                 {
 820:Generated_Source\PSoC4/uart.c ****                     /* Suppress compiler warning */
 821:Generated_Source\PSoC4/uart.c ****                 }
 822:Generated_Source\PSoC4/uart.c ****             #else /* uart_CONTROL_REG_REMOVED */
 823:Generated_Source\PSoC4/uart.c ****                 uint8 tmpCtrl;
 824:Generated_Source\PSoC4/uart.c ****                 tmpCtrl = uart_CONTROL_REG & (uint8)~uart_CTRL_RXADDR_MODE_MASK;
 825:Generated_Source\PSoC4/uart.c ****                 tmpCtrl |= (uint8)(addressMode << uart_CTRL_RXADDR_MODE0_SHIFT);
 826:Generated_Source\PSoC4/uart.c ****                 uart_CONTROL_REG = tmpCtrl;
 827:Generated_Source\PSoC4/uart.c **** 
 828:Generated_Source\PSoC4/uart.c ****                 #if(uart_RX_INTERRUPT_ENABLED && \
 829:Generated_Source\PSoC4/uart.c ****                    (uart_RXBUFFERSIZE > uart_FIFO_LENGTH) )
 830:Generated_Source\PSoC4/uart.c ****                     uart_rxAddressMode = addressMode;
 831:Generated_Source\PSoC4/uart.c ****                     uart_rxAddressDetected = 0u;
 832:Generated_Source\PSoC4/uart.c ****                 #endif /* End uart_RXBUFFERSIZE > uart_FIFO_LENGTH*/
 833:Generated_Source\PSoC4/uart.c ****             #endif /* End uart_CONTROL_REG_REMOVED */
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 25


 834:Generated_Source\PSoC4/uart.c ****         #else /* uart_RXHW_ADDRESS_ENABLED */
 835:Generated_Source\PSoC4/uart.c ****             if(0u != addressMode)
 836:Generated_Source\PSoC4/uart.c ****             {
 837:Generated_Source\PSoC4/uart.c ****                 /* Suppress compiler warning */
 838:Generated_Source\PSoC4/uart.c ****             }
 839:Generated_Source\PSoC4/uart.c ****         #endif /* End uart_RXHW_ADDRESS_ENABLED */
 840:Generated_Source\PSoC4/uart.c ****     }
 529              		.loc 1 840 0
 530              		@ sp needed
 531 0000 7047     		bx	lr
 532              		.cfi_endproc
 533              	.LFE15:
 534              		.size	uart_SetRxAddressMode, .-uart_SetRxAddressMode
 535 0002 C046     		.section	.text.uart_SetRxAddress1,"ax",%progbits
 536              		.align	2
 537              		.global	uart_SetRxAddress1
 538              		.code	16
 539              		.thumb_func
 540              		.type	uart_SetRxAddress1, %function
 541              	uart_SetRxAddress1:
 542              	.LFB16:
 841:Generated_Source\PSoC4/uart.c **** 
 842:Generated_Source\PSoC4/uart.c **** 
 843:Generated_Source\PSoC4/uart.c ****     /*******************************************************************************
 844:Generated_Source\PSoC4/uart.c ****     * Function Name: uart_SetRxAddress1
 845:Generated_Source\PSoC4/uart.c ****     ********************************************************************************
 846:Generated_Source\PSoC4/uart.c ****     *
 847:Generated_Source\PSoC4/uart.c ****     * Summary:
 848:Generated_Source\PSoC4/uart.c ****     *  Sets the first of two hardware-detectable receiver addresses.
 849:Generated_Source\PSoC4/uart.c ****     *
 850:Generated_Source\PSoC4/uart.c ****     * Parameters:
 851:Generated_Source\PSoC4/uart.c ****     *  address: Address #1 for hardware address detection.
 852:Generated_Source\PSoC4/uart.c ****     *
 853:Generated_Source\PSoC4/uart.c ****     * Return:
 854:Generated_Source\PSoC4/uart.c ****     *  None.
 855:Generated_Source\PSoC4/uart.c ****     *
 856:Generated_Source\PSoC4/uart.c ****     *******************************************************************************/
 857:Generated_Source\PSoC4/uart.c ****     void uart_SetRxAddress1(uint8 address) 
 858:Generated_Source\PSoC4/uart.c ****     {
 543              		.loc 1 858 0
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 0
 546              		@ frame_needed = 0, uses_anonymous_args = 0
 547              		@ link register save eliminated.
 548              	.LVL28:
 859:Generated_Source\PSoC4/uart.c ****         uart_RXADDRESS1_REG = address;
 549              		.loc 1 859 0
 550 0000 014B     		ldr	r3, .L42
 551 0002 1870     		strb	r0, [r3]
 860:Generated_Source\PSoC4/uart.c ****     }
 552              		.loc 1 860 0
 553              		@ sp needed
 554 0004 7047     		bx	lr
 555              	.L43:
 556 0006 C046     		.align	2
 557              	.L42:
 558 0008 22000F40 		.word	1074724898
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 26


 559              		.cfi_endproc
 560              	.LFE16:
 561              		.size	uart_SetRxAddress1, .-uart_SetRxAddress1
 562              		.section	.text.uart_SetRxAddress2,"ax",%progbits
 563              		.align	2
 564              		.global	uart_SetRxAddress2
 565              		.code	16
 566              		.thumb_func
 567              		.type	uart_SetRxAddress2, %function
 568              	uart_SetRxAddress2:
 569              	.LFB17:
 861:Generated_Source\PSoC4/uart.c **** 
 862:Generated_Source\PSoC4/uart.c **** 
 863:Generated_Source\PSoC4/uart.c ****     /*******************************************************************************
 864:Generated_Source\PSoC4/uart.c ****     * Function Name: uart_SetRxAddress2
 865:Generated_Source\PSoC4/uart.c ****     ********************************************************************************
 866:Generated_Source\PSoC4/uart.c ****     *
 867:Generated_Source\PSoC4/uart.c ****     * Summary:
 868:Generated_Source\PSoC4/uart.c ****     *  Sets the second of two hardware-detectable receiver addresses.
 869:Generated_Source\PSoC4/uart.c ****     *
 870:Generated_Source\PSoC4/uart.c ****     * Parameters:
 871:Generated_Source\PSoC4/uart.c ****     *  address: Address #2 for hardware address detection.
 872:Generated_Source\PSoC4/uart.c ****     *
 873:Generated_Source\PSoC4/uart.c ****     * Return:
 874:Generated_Source\PSoC4/uart.c ****     *  None.
 875:Generated_Source\PSoC4/uart.c ****     *
 876:Generated_Source\PSoC4/uart.c ****     *******************************************************************************/
 877:Generated_Source\PSoC4/uart.c ****     void uart_SetRxAddress2(uint8 address) 
 878:Generated_Source\PSoC4/uart.c ****     {
 570              		.loc 1 878 0
 571              		.cfi_startproc
 572              		@ args = 0, pretend = 0, frame = 0
 573              		@ frame_needed = 0, uses_anonymous_args = 0
 574              		@ link register save eliminated.
 575              	.LVL29:
 879:Generated_Source\PSoC4/uart.c ****         uart_RXADDRESS2_REG = address;
 576              		.loc 1 879 0
 577 0000 014B     		ldr	r3, .L45
 578 0002 1870     		strb	r0, [r3]
 880:Generated_Source\PSoC4/uart.c ****     }
 579              		.loc 1 880 0
 580              		@ sp needed
 581 0004 7047     		bx	lr
 582              	.L46:
 583 0006 C046     		.align	2
 584              	.L45:
 585 0008 32000F40 		.word	1074724914
 586              		.cfi_endproc
 587              	.LFE17:
 588              		.size	uart_SetRxAddress2, .-uart_SetRxAddress2
 589              		.section	.text.uart_SetTxInterruptMode,"ax",%progbits
 590              		.align	2
 591              		.global	uart_SetTxInterruptMode
 592              		.code	16
 593              		.thumb_func
 594              		.type	uart_SetTxInterruptMode, %function
 595              	uart_SetTxInterruptMode:
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 27


 596              	.LFB18:
 881:Generated_Source\PSoC4/uart.c **** 
 882:Generated_Source\PSoC4/uart.c **** #endif  /* uart_RX_ENABLED || uart_HD_ENABLED*/
 883:Generated_Source\PSoC4/uart.c **** 
 884:Generated_Source\PSoC4/uart.c **** 
 885:Generated_Source\PSoC4/uart.c **** #if( (uart_TX_ENABLED) || (uart_HD_ENABLED) )
 886:Generated_Source\PSoC4/uart.c ****     /*******************************************************************************
 887:Generated_Source\PSoC4/uart.c ****     * Function Name: uart_SetTxInterruptMode
 888:Generated_Source\PSoC4/uart.c ****     ********************************************************************************
 889:Generated_Source\PSoC4/uart.c ****     *
 890:Generated_Source\PSoC4/uart.c ****     * Summary:
 891:Generated_Source\PSoC4/uart.c ****     *  Configures the TX interrupt sources to be enabled, but does not enable the
 892:Generated_Source\PSoC4/uart.c ****     *  interrupt.
 893:Generated_Source\PSoC4/uart.c ****     *
 894:Generated_Source\PSoC4/uart.c ****     * Parameters:
 895:Generated_Source\PSoC4/uart.c ****     *  intSrc: Bit field containing the TX interrupt sources to enable
 896:Generated_Source\PSoC4/uart.c ****     *   uart_TX_STS_COMPLETE        Interrupt on TX byte complete
 897:Generated_Source\PSoC4/uart.c ****     *   uart_TX_STS_FIFO_EMPTY      Interrupt when TX FIFO is empty
 898:Generated_Source\PSoC4/uart.c ****     *   uart_TX_STS_FIFO_FULL       Interrupt when TX FIFO is full
 899:Generated_Source\PSoC4/uart.c ****     *   uart_TX_STS_FIFO_NOT_FULL   Interrupt when TX FIFO is not full
 900:Generated_Source\PSoC4/uart.c ****     *
 901:Generated_Source\PSoC4/uart.c ****     * Return:
 902:Generated_Source\PSoC4/uart.c ****     *  None.
 903:Generated_Source\PSoC4/uart.c ****     *
 904:Generated_Source\PSoC4/uart.c ****     * Theory:
 905:Generated_Source\PSoC4/uart.c ****     *  Enables the output of specific status bits to the interrupt controller
 906:Generated_Source\PSoC4/uart.c ****     *
 907:Generated_Source\PSoC4/uart.c ****     *******************************************************************************/
 908:Generated_Source\PSoC4/uart.c ****     void uart_SetTxInterruptMode(uint8 intSrc) 
 909:Generated_Source\PSoC4/uart.c ****     {
 597              		.loc 1 909 0
 598              		.cfi_startproc
 599              		@ args = 0, pretend = 0, frame = 0
 600              		@ frame_needed = 0, uses_anonymous_args = 0
 601              		@ link register save eliminated.
 602              	.LVL30:
 910:Generated_Source\PSoC4/uart.c ****         uart_TXSTATUS_MASK_REG = intSrc;
 603              		.loc 1 910 0
 604 0000 014B     		ldr	r3, .L48
 605 0002 1870     		strb	r0, [r3]
 911:Generated_Source\PSoC4/uart.c ****     }
 606              		.loc 1 911 0
 607              		@ sp needed
 608 0004 7047     		bx	lr
 609              	.L49:
 610 0006 C046     		.align	2
 611              	.L48:
 612 0008 83000F40 		.word	1074724995
 613              		.cfi_endproc
 614              	.LFE18:
 615              		.size	uart_SetTxInterruptMode, .-uart_SetTxInterruptMode
 616              		.section	.text.uart_WriteTxData,"ax",%progbits
 617              		.align	2
 618              		.global	uart_WriteTxData
 619              		.code	16
 620              		.thumb_func
 621              		.type	uart_WriteTxData, %function
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 28


 622              	uart_WriteTxData:
 623              	.LFB19:
 912:Generated_Source\PSoC4/uart.c **** 
 913:Generated_Source\PSoC4/uart.c **** 
 914:Generated_Source\PSoC4/uart.c ****     /*******************************************************************************
 915:Generated_Source\PSoC4/uart.c ****     * Function Name: uart_WriteTxData
 916:Generated_Source\PSoC4/uart.c ****     ********************************************************************************
 917:Generated_Source\PSoC4/uart.c ****     *
 918:Generated_Source\PSoC4/uart.c ****     * Summary:
 919:Generated_Source\PSoC4/uart.c ****     *  Places a byte of data into the transmit buffer to be sent when the bus is
 920:Generated_Source\PSoC4/uart.c ****     *  available without checking the TX status register. You must check status
 921:Generated_Source\PSoC4/uart.c ****     *  separately.
 922:Generated_Source\PSoC4/uart.c ****     *
 923:Generated_Source\PSoC4/uart.c ****     * Parameters:
 924:Generated_Source\PSoC4/uart.c ****     *  txDataByte: data byte
 925:Generated_Source\PSoC4/uart.c ****     *
 926:Generated_Source\PSoC4/uart.c ****     * Return:
 927:Generated_Source\PSoC4/uart.c ****     * None.
 928:Generated_Source\PSoC4/uart.c ****     *
 929:Generated_Source\PSoC4/uart.c ****     * Global Variables:
 930:Generated_Source\PSoC4/uart.c ****     *  uart_txBuffer - RAM buffer pointer for save data for transmission
 931:Generated_Source\PSoC4/uart.c ****     *  uart_txBufferWrite - cyclic index for write to txBuffer,
 932:Generated_Source\PSoC4/uart.c ****     *    incremented after each byte saved to buffer.
 933:Generated_Source\PSoC4/uart.c ****     *  uart_txBufferRead - cyclic index for read from txBuffer,
 934:Generated_Source\PSoC4/uart.c ****     *    checked to identify the condition to write to FIFO directly or to TX buffer
 935:Generated_Source\PSoC4/uart.c ****     *  uart_initVar - checked to identify that the component has been
 936:Generated_Source\PSoC4/uart.c ****     *    initialized.
 937:Generated_Source\PSoC4/uart.c ****     *
 938:Generated_Source\PSoC4/uart.c ****     * Reentrant:
 939:Generated_Source\PSoC4/uart.c ****     *  No.
 940:Generated_Source\PSoC4/uart.c ****     *
 941:Generated_Source\PSoC4/uart.c ****     *******************************************************************************/
 942:Generated_Source\PSoC4/uart.c ****     void uart_WriteTxData(uint8 txDataByte) 
 943:Generated_Source\PSoC4/uart.c ****     {
 624              		.loc 1 943 0
 625              		.cfi_startproc
 626              		@ args = 0, pretend = 0, frame = 0
 627              		@ frame_needed = 0, uses_anonymous_args = 0
 628              		@ link register save eliminated.
 629              	.LVL31:
 944:Generated_Source\PSoC4/uart.c ****         /* If not Initialized then skip this function*/
 945:Generated_Source\PSoC4/uart.c ****         if(uart_initVar != 0u)
 630              		.loc 1 945 0
 631 0000 034B     		ldr	r3, .L52
 632 0002 1B78     		ldrb	r3, [r3]
 633 0004 002B     		cmp	r3, #0
 634 0006 01D0     		beq	.L50
 946:Generated_Source\PSoC4/uart.c ****         {
 947:Generated_Source\PSoC4/uart.c ****         #if (uart_TX_INTERRUPT_ENABLED)
 948:Generated_Source\PSoC4/uart.c **** 
 949:Generated_Source\PSoC4/uart.c ****             /* Protect variables that could change on interrupt. */
 950:Generated_Source\PSoC4/uart.c ****             uart_DisableTxInt();
 951:Generated_Source\PSoC4/uart.c **** 
 952:Generated_Source\PSoC4/uart.c ****             if( (uart_txBufferRead == uart_txBufferWrite) &&
 953:Generated_Source\PSoC4/uart.c ****                 ((uart_TXSTATUS_REG & uart_TX_STS_FIFO_FULL) == 0u) )
 954:Generated_Source\PSoC4/uart.c ****             {
 955:Generated_Source\PSoC4/uart.c ****                 /* Add directly to the FIFO. */
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 29


 956:Generated_Source\PSoC4/uart.c ****                 uart_TXDATA_REG = txDataByte;
 957:Generated_Source\PSoC4/uart.c ****             }
 958:Generated_Source\PSoC4/uart.c ****             else
 959:Generated_Source\PSoC4/uart.c ****             {
 960:Generated_Source\PSoC4/uart.c ****                 if(uart_txBufferWrite >= uart_TX_BUFFER_SIZE)
 961:Generated_Source\PSoC4/uart.c ****                 {
 962:Generated_Source\PSoC4/uart.c ****                     uart_txBufferWrite = 0u;
 963:Generated_Source\PSoC4/uart.c ****                 }
 964:Generated_Source\PSoC4/uart.c **** 
 965:Generated_Source\PSoC4/uart.c ****                 uart_txBuffer[uart_txBufferWrite] = txDataByte;
 966:Generated_Source\PSoC4/uart.c **** 
 967:Generated_Source\PSoC4/uart.c ****                 /* Add to the software buffer. */
 968:Generated_Source\PSoC4/uart.c ****                 uart_txBufferWrite++;
 969:Generated_Source\PSoC4/uart.c ****             }
 970:Generated_Source\PSoC4/uart.c **** 
 971:Generated_Source\PSoC4/uart.c ****             uart_EnableTxInt();
 972:Generated_Source\PSoC4/uart.c **** 
 973:Generated_Source\PSoC4/uart.c ****         #else
 974:Generated_Source\PSoC4/uart.c **** 
 975:Generated_Source\PSoC4/uart.c ****             /* Add directly to the FIFO. */
 976:Generated_Source\PSoC4/uart.c ****             uart_TXDATA_REG = txDataByte;
 635              		.loc 1 976 0
 636 0008 024B     		ldr	r3, .L52+4
 637 000a 1870     		strb	r0, [r3]
 638              	.L50:
 977:Generated_Source\PSoC4/uart.c **** 
 978:Generated_Source\PSoC4/uart.c ****         #endif /*(uart_TX_INTERRUPT_ENABLED) */
 979:Generated_Source\PSoC4/uart.c ****         }
 980:Generated_Source\PSoC4/uart.c ****     }
 639              		.loc 1 980 0
 640              		@ sp needed
 641 000c 7047     		bx	lr
 642              	.L53:
 643 000e C046     		.align	2
 644              	.L52:
 645 0010 00000000 		.word	.LANCHOR0
 646 0014 43000F40 		.word	1074724931
 647              		.cfi_endproc
 648              	.LFE19:
 649              		.size	uart_WriteTxData, .-uart_WriteTxData
 650              		.section	.text.uart_ReadTxStatus,"ax",%progbits
 651              		.align	2
 652              		.global	uart_ReadTxStatus
 653              		.code	16
 654              		.thumb_func
 655              		.type	uart_ReadTxStatus, %function
 656              	uart_ReadTxStatus:
 657              	.LFB20:
 981:Generated_Source\PSoC4/uart.c **** 
 982:Generated_Source\PSoC4/uart.c **** 
 983:Generated_Source\PSoC4/uart.c ****     /*******************************************************************************
 984:Generated_Source\PSoC4/uart.c ****     * Function Name: uart_ReadTxStatus
 985:Generated_Source\PSoC4/uart.c ****     ********************************************************************************
 986:Generated_Source\PSoC4/uart.c ****     *
 987:Generated_Source\PSoC4/uart.c ****     * Summary:
 988:Generated_Source\PSoC4/uart.c ****     *  Reads the status register for the TX portion of the UART.
 989:Generated_Source\PSoC4/uart.c ****     *
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 30


 990:Generated_Source\PSoC4/uart.c ****     * Parameters:
 991:Generated_Source\PSoC4/uart.c ****     *  None.
 992:Generated_Source\PSoC4/uart.c ****     *
 993:Generated_Source\PSoC4/uart.c ****     * Return:
 994:Generated_Source\PSoC4/uart.c ****     *  Contents of the status register
 995:Generated_Source\PSoC4/uart.c ****     *
 996:Generated_Source\PSoC4/uart.c ****     * Theory:
 997:Generated_Source\PSoC4/uart.c ****     *  This function reads the TX status register, which is cleared on read.
 998:Generated_Source\PSoC4/uart.c ****     *  It is up to the user to handle all bits in this return value accordingly,
 999:Generated_Source\PSoC4/uart.c ****     *  even if the bit was not enabled as an interrupt source the event happened
1000:Generated_Source\PSoC4/uart.c ****     *  and must be handled accordingly.
1001:Generated_Source\PSoC4/uart.c ****     *
1002:Generated_Source\PSoC4/uart.c ****     *******************************************************************************/
1003:Generated_Source\PSoC4/uart.c ****     uint8 uart_ReadTxStatus(void) 
1004:Generated_Source\PSoC4/uart.c ****     {
 658              		.loc 1 1004 0
 659              		.cfi_startproc
 660              		@ args = 0, pretend = 0, frame = 0
 661              		@ frame_needed = 0, uses_anonymous_args = 0
 662              		@ link register save eliminated.
1005:Generated_Source\PSoC4/uart.c ****         return(uart_TXSTATUS_REG);
 663              		.loc 1 1005 0
 664 0000 014B     		ldr	r3, .L55
 665 0002 1878     		ldrb	r0, [r3]
 666 0004 C0B2     		uxtb	r0, r0
1006:Generated_Source\PSoC4/uart.c ****     }
 667              		.loc 1 1006 0
 668              		@ sp needed
 669 0006 7047     		bx	lr
 670              	.L56:
 671              		.align	2
 672              	.L55:
 673 0008 63000F40 		.word	1074724963
 674              		.cfi_endproc
 675              	.LFE20:
 676              		.size	uart_ReadTxStatus, .-uart_ReadTxStatus
 677              		.section	.text.uart_PutChar,"ax",%progbits
 678              		.align	2
 679              		.global	uart_PutChar
 680              		.code	16
 681              		.thumb_func
 682              		.type	uart_PutChar, %function
 683              	uart_PutChar:
 684              	.LFB21:
1007:Generated_Source\PSoC4/uart.c **** 
1008:Generated_Source\PSoC4/uart.c **** 
1009:Generated_Source\PSoC4/uart.c ****     /*******************************************************************************
1010:Generated_Source\PSoC4/uart.c ****     * Function Name: uart_PutChar
1011:Generated_Source\PSoC4/uart.c ****     ********************************************************************************
1012:Generated_Source\PSoC4/uart.c ****     *
1013:Generated_Source\PSoC4/uart.c ****     * Summary:
1014:Generated_Source\PSoC4/uart.c ****     *  Puts a byte of data into the transmit buffer to be sent when the bus is
1015:Generated_Source\PSoC4/uart.c ****     *  available. This is a blocking API that waits until the TX buffer has room to
1016:Generated_Source\PSoC4/uart.c ****     *  hold the data.
1017:Generated_Source\PSoC4/uart.c ****     *
1018:Generated_Source\PSoC4/uart.c ****     * Parameters:
1019:Generated_Source\PSoC4/uart.c ****     *  txDataByte: Byte containing the data to transmit
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 31


1020:Generated_Source\PSoC4/uart.c ****     *
1021:Generated_Source\PSoC4/uart.c ****     * Return:
1022:Generated_Source\PSoC4/uart.c ****     *  None.
1023:Generated_Source\PSoC4/uart.c ****     *
1024:Generated_Source\PSoC4/uart.c ****     * Global Variables:
1025:Generated_Source\PSoC4/uart.c ****     *  uart_txBuffer - RAM buffer pointer for save data for transmission
1026:Generated_Source\PSoC4/uart.c ****     *  uart_txBufferWrite - cyclic index for write to txBuffer,
1027:Generated_Source\PSoC4/uart.c ****     *     checked to identify free space in txBuffer and incremented after each byte
1028:Generated_Source\PSoC4/uart.c ****     *     saved to buffer.
1029:Generated_Source\PSoC4/uart.c ****     *  uart_txBufferRead - cyclic index for read from txBuffer,
1030:Generated_Source\PSoC4/uart.c ****     *     checked to identify free space in txBuffer.
1031:Generated_Source\PSoC4/uart.c ****     *  uart_initVar - checked to identify that the component has been
1032:Generated_Source\PSoC4/uart.c ****     *     initialized.
1033:Generated_Source\PSoC4/uart.c ****     *
1034:Generated_Source\PSoC4/uart.c ****     * Reentrant:
1035:Generated_Source\PSoC4/uart.c ****     *  No.
1036:Generated_Source\PSoC4/uart.c ****     *
1037:Generated_Source\PSoC4/uart.c ****     * Theory:
1038:Generated_Source\PSoC4/uart.c ****     *  Allows the user to transmit any byte of data in a single transfer
1039:Generated_Source\PSoC4/uart.c ****     *
1040:Generated_Source\PSoC4/uart.c ****     *******************************************************************************/
1041:Generated_Source\PSoC4/uart.c ****     void uart_PutChar(uint8 txDataByte) 
1042:Generated_Source\PSoC4/uart.c ****     {
 685              		.loc 1 1042 0
 686              		.cfi_startproc
 687              		@ args = 0, pretend = 0, frame = 0
 688              		@ frame_needed = 0, uses_anonymous_args = 0
 689              		@ link register save eliminated.
 690              	.LVL32:
 691              	.L58:
1043:Generated_Source\PSoC4/uart.c ****     #if (uart_TX_INTERRUPT_ENABLED)
1044:Generated_Source\PSoC4/uart.c ****         /* The temporary output pointer is used since it takes two instructions
1045:Generated_Source\PSoC4/uart.c ****         *  to increment with a wrap, and we can't risk doing that with the real
1046:Generated_Source\PSoC4/uart.c ****         *  pointer and getting an interrupt in between instructions.
1047:Generated_Source\PSoC4/uart.c ****         */
1048:Generated_Source\PSoC4/uart.c ****         uint8 locTxBufferWrite;
1049:Generated_Source\PSoC4/uart.c ****         uint8 locTxBufferRead;
1050:Generated_Source\PSoC4/uart.c **** 
1051:Generated_Source\PSoC4/uart.c ****         do
1052:Generated_Source\PSoC4/uart.c ****         { /* Block if software buffer is full, so we don't overwrite. */
1053:Generated_Source\PSoC4/uart.c **** 
1054:Generated_Source\PSoC4/uart.c ****         #if ((uart_TX_BUFFER_SIZE > uart_MAX_BYTE_VALUE) && (CY_PSOC3))
1055:Generated_Source\PSoC4/uart.c ****             /* Disable TX interrupt to protect variables from modification */
1056:Generated_Source\PSoC4/uart.c ****             uart_DisableTxInt();
1057:Generated_Source\PSoC4/uart.c ****         #endif /* (uart_TX_BUFFER_SIZE > uart_MAX_BYTE_VALUE) && (CY_PSOC3) */
1058:Generated_Source\PSoC4/uart.c **** 
1059:Generated_Source\PSoC4/uart.c ****             locTxBufferWrite = uart_txBufferWrite;
1060:Generated_Source\PSoC4/uart.c ****             locTxBufferRead  = uart_txBufferRead;
1061:Generated_Source\PSoC4/uart.c **** 
1062:Generated_Source\PSoC4/uart.c ****         #if ((uart_TX_BUFFER_SIZE > uart_MAX_BYTE_VALUE) && (CY_PSOC3))
1063:Generated_Source\PSoC4/uart.c ****             /* Enable interrupt to continue transmission */
1064:Generated_Source\PSoC4/uart.c ****             uart_EnableTxInt();
1065:Generated_Source\PSoC4/uart.c ****         #endif /* (uart_TX_BUFFER_SIZE > uart_MAX_BYTE_VALUE) && (CY_PSOC3) */
1066:Generated_Source\PSoC4/uart.c ****         }
1067:Generated_Source\PSoC4/uart.c ****         while( (locTxBufferWrite < locTxBufferRead) ? (locTxBufferWrite == (locTxBufferRead - 1u)) 
1068:Generated_Source\PSoC4/uart.c ****                                 ((locTxBufferWrite - locTxBufferRead) ==
1069:Generated_Source\PSoC4/uart.c ****                                 (uint8)(uart_TX_BUFFER_SIZE - 1u)) );
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 32


1070:Generated_Source\PSoC4/uart.c **** 
1071:Generated_Source\PSoC4/uart.c ****         if( (locTxBufferRead == locTxBufferWrite) &&
1072:Generated_Source\PSoC4/uart.c ****             ((uart_TXSTATUS_REG & uart_TX_STS_FIFO_FULL) == 0u) )
1073:Generated_Source\PSoC4/uart.c ****         {
1074:Generated_Source\PSoC4/uart.c ****             /* Add directly to the FIFO */
1075:Generated_Source\PSoC4/uart.c ****             uart_TXDATA_REG = txDataByte;
1076:Generated_Source\PSoC4/uart.c ****         }
1077:Generated_Source\PSoC4/uart.c ****         else
1078:Generated_Source\PSoC4/uart.c ****         {
1079:Generated_Source\PSoC4/uart.c ****             if(locTxBufferWrite >= uart_TX_BUFFER_SIZE)
1080:Generated_Source\PSoC4/uart.c ****             {
1081:Generated_Source\PSoC4/uart.c ****                 locTxBufferWrite = 0u;
1082:Generated_Source\PSoC4/uart.c ****             }
1083:Generated_Source\PSoC4/uart.c ****             /* Add to the software buffer. */
1084:Generated_Source\PSoC4/uart.c ****             uart_txBuffer[locTxBufferWrite] = txDataByte;
1085:Generated_Source\PSoC4/uart.c ****             locTxBufferWrite++;
1086:Generated_Source\PSoC4/uart.c **** 
1087:Generated_Source\PSoC4/uart.c ****             /* Finally, update the real output pointer */
1088:Generated_Source\PSoC4/uart.c ****         #if ((uart_TX_BUFFER_SIZE > uart_MAX_BYTE_VALUE) && (CY_PSOC3))
1089:Generated_Source\PSoC4/uart.c ****             uart_DisableTxInt();
1090:Generated_Source\PSoC4/uart.c ****         #endif /* (uart_TX_BUFFER_SIZE > uart_MAX_BYTE_VALUE) && (CY_PSOC3) */
1091:Generated_Source\PSoC4/uart.c **** 
1092:Generated_Source\PSoC4/uart.c ****             uart_txBufferWrite = locTxBufferWrite;
1093:Generated_Source\PSoC4/uart.c **** 
1094:Generated_Source\PSoC4/uart.c ****         #if ((uart_TX_BUFFER_SIZE > uart_MAX_BYTE_VALUE) && (CY_PSOC3))
1095:Generated_Source\PSoC4/uart.c ****             uart_EnableTxInt();
1096:Generated_Source\PSoC4/uart.c ****         #endif /* (uart_TX_BUFFER_SIZE > uart_MAX_BYTE_VALUE) && (CY_PSOC3) */
1097:Generated_Source\PSoC4/uart.c **** 
1098:Generated_Source\PSoC4/uart.c ****             if(0u != (uart_TXSTATUS_REG & uart_TX_STS_FIFO_EMPTY))
1099:Generated_Source\PSoC4/uart.c ****             {
1100:Generated_Source\PSoC4/uart.c ****                 /* Trigger TX interrupt to send software buffer */
1101:Generated_Source\PSoC4/uart.c ****                 uart_SetPendingTxInt();
1102:Generated_Source\PSoC4/uart.c ****             }
1103:Generated_Source\PSoC4/uart.c ****         }
1104:Generated_Source\PSoC4/uart.c **** 
1105:Generated_Source\PSoC4/uart.c ****     #else
1106:Generated_Source\PSoC4/uart.c **** 
1107:Generated_Source\PSoC4/uart.c ****         while((uart_TXSTATUS_REG & uart_TX_STS_FIFO_FULL) != 0u)
 692              		.loc 1 1107 0 discriminator 1
 693 0000 034B     		ldr	r3, .L59
 694 0002 1B78     		ldrb	r3, [r3]
 695 0004 5B07     		lsls	r3, r3, #29
 696 0006 FBD4     		bmi	.L58
1108:Generated_Source\PSoC4/uart.c ****         {
1109:Generated_Source\PSoC4/uart.c ****             /* Wait for room in the FIFO */
1110:Generated_Source\PSoC4/uart.c ****         }
1111:Generated_Source\PSoC4/uart.c **** 
1112:Generated_Source\PSoC4/uart.c ****         /* Add directly to the FIFO */
1113:Generated_Source\PSoC4/uart.c ****         uart_TXDATA_REG = txDataByte;
 697              		.loc 1 1113 0
 698 0008 024B     		ldr	r3, .L59+4
 699 000a 1870     		strb	r0, [r3]
1114:Generated_Source\PSoC4/uart.c **** 
1115:Generated_Source\PSoC4/uart.c ****     #endif /* uart_TX_INTERRUPT_ENABLED */
1116:Generated_Source\PSoC4/uart.c ****     }
 700              		.loc 1 1116 0
 701              		@ sp needed
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 33


 702 000c 7047     		bx	lr
 703              	.L60:
 704 000e C046     		.align	2
 705              	.L59:
 706 0010 63000F40 		.word	1074724963
 707 0014 43000F40 		.word	1074724931
 708              		.cfi_endproc
 709              	.LFE21:
 710              		.size	uart_PutChar, .-uart_PutChar
 711              		.section	.text.uart_PutString,"ax",%progbits
 712              		.align	2
 713              		.global	uart_PutString
 714              		.code	16
 715              		.thumb_func
 716              		.type	uart_PutString, %function
 717              	uart_PutString:
 718              	.LFB22:
1117:Generated_Source\PSoC4/uart.c **** 
1118:Generated_Source\PSoC4/uart.c **** 
1119:Generated_Source\PSoC4/uart.c ****     /*******************************************************************************
1120:Generated_Source\PSoC4/uart.c ****     * Function Name: uart_PutString
1121:Generated_Source\PSoC4/uart.c ****     ********************************************************************************
1122:Generated_Source\PSoC4/uart.c ****     *
1123:Generated_Source\PSoC4/uart.c ****     * Summary:
1124:Generated_Source\PSoC4/uart.c ****     *  Sends a NULL terminated string to the TX buffer for transmission.
1125:Generated_Source\PSoC4/uart.c ****     *
1126:Generated_Source\PSoC4/uart.c ****     * Parameters:
1127:Generated_Source\PSoC4/uart.c ****     *  string[]: Pointer to the null terminated string array residing in RAM or ROM
1128:Generated_Source\PSoC4/uart.c ****     *
1129:Generated_Source\PSoC4/uart.c ****     * Return:
1130:Generated_Source\PSoC4/uart.c ****     *  None.
1131:Generated_Source\PSoC4/uart.c ****     *
1132:Generated_Source\PSoC4/uart.c ****     * Global Variables:
1133:Generated_Source\PSoC4/uart.c ****     *  uart_initVar - checked to identify that the component has been
1134:Generated_Source\PSoC4/uart.c ****     *     initialized.
1135:Generated_Source\PSoC4/uart.c ****     *
1136:Generated_Source\PSoC4/uart.c ****     * Reentrant:
1137:Generated_Source\PSoC4/uart.c ****     *  No.
1138:Generated_Source\PSoC4/uart.c ****     *
1139:Generated_Source\PSoC4/uart.c ****     * Theory:
1140:Generated_Source\PSoC4/uart.c ****     *  If there is not enough memory in the TX buffer for the entire string, this
1141:Generated_Source\PSoC4/uart.c ****     *  function blocks until the last character of the string is loaded into the
1142:Generated_Source\PSoC4/uart.c ****     *  TX buffer.
1143:Generated_Source\PSoC4/uart.c ****     *
1144:Generated_Source\PSoC4/uart.c ****     *******************************************************************************/
1145:Generated_Source\PSoC4/uart.c ****     void uart_PutString(const char8 string[]) 
1146:Generated_Source\PSoC4/uart.c ****     {
 719              		.loc 1 1146 0
 720              		.cfi_startproc
 721              		@ args = 0, pretend = 0, frame = 0
 722              		@ frame_needed = 0, uses_anonymous_args = 0
 723              	.LVL33:
 724 0000 70B5     		push	{r4, r5, r6, lr}
 725              		.cfi_def_cfa_offset 16
 726              		.cfi_offset 4, -16
 727              		.cfi_offset 5, -12
 728              		.cfi_offset 6, -8
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 34


 729              		.cfi_offset 14, -4
 730 0002 0500     		movs	r5, r0
 731              	.LVL34:
1147:Generated_Source\PSoC4/uart.c ****         uint16 bufIndex = 0u;
1148:Generated_Source\PSoC4/uart.c **** 
1149:Generated_Source\PSoC4/uart.c ****         /* If not Initialized then skip this function */
1150:Generated_Source\PSoC4/uart.c ****         if(uart_initVar != 0u)
 732              		.loc 1 1150 0
 733 0004 074B     		ldr	r3, .L66
 734 0006 1B78     		ldrb	r3, [r3]
 735 0008 002B     		cmp	r3, #0
 736 000a 05D1     		bne	.L65
 737 000c 08E0     		b	.L61
 738              	.LVL35:
 739              	.L64:
1151:Generated_Source\PSoC4/uart.c ****         {
1152:Generated_Source\PSoC4/uart.c ****             /* This is a blocking function, it will not exit until all data is sent */
1153:Generated_Source\PSoC4/uart.c ****             while(string[bufIndex] != (char8) 0)
1154:Generated_Source\PSoC4/uart.c ****             {
1155:Generated_Source\PSoC4/uart.c ****                 uart_PutChar((uint8)string[bufIndex]);
 740              		.loc 1 1155 0
 741 000e FFF7FEFF 		bl	uart_PutChar
 742              	.LVL36:
1156:Generated_Source\PSoC4/uart.c ****                 bufIndex++;
 743              		.loc 1 1156 0
 744 0012 0134     		adds	r4, r4, #1
 745              	.LVL37:
 746 0014 A4B2     		uxth	r4, r4
 747              	.LVL38:
 748 0016 00E0     		b	.L62
 749              	.LVL39:
 750              	.L65:
 751 0018 0024     		movs	r4, #0
 752              	.LVL40:
 753              	.L62:
1153:Generated_Source\PSoC4/uart.c ****             {
 754              		.loc 1 1153 0
 755 001a 285D     		ldrb	r0, [r5, r4]
 756 001c 0028     		cmp	r0, #0
 757 001e F6D1     		bne	.L64
 758              	.LVL41:
 759              	.L61:
1157:Generated_Source\PSoC4/uart.c ****             }
1158:Generated_Source\PSoC4/uart.c ****         }
1159:Generated_Source\PSoC4/uart.c ****     }
 760              		.loc 1 1159 0
 761              		@ sp needed
 762              	.LVL42:
 763 0020 70BD     		pop	{r4, r5, r6, pc}
 764              	.L67:
 765 0022 C046     		.align	2
 766              	.L66:
 767 0024 00000000 		.word	.LANCHOR0
 768              		.cfi_endproc
 769              	.LFE22:
 770              		.size	uart_PutString, .-uart_PutString
 771              		.section	.text.uart_PutArray,"ax",%progbits
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 35


 772              		.align	2
 773              		.global	uart_PutArray
 774              		.code	16
 775              		.thumb_func
 776              		.type	uart_PutArray, %function
 777              	uart_PutArray:
 778              	.LFB23:
1160:Generated_Source\PSoC4/uart.c **** 
1161:Generated_Source\PSoC4/uart.c **** 
1162:Generated_Source\PSoC4/uart.c ****     /*******************************************************************************
1163:Generated_Source\PSoC4/uart.c ****     * Function Name: uart_PutArray
1164:Generated_Source\PSoC4/uart.c ****     ********************************************************************************
1165:Generated_Source\PSoC4/uart.c ****     *
1166:Generated_Source\PSoC4/uart.c ****     * Summary:
1167:Generated_Source\PSoC4/uart.c ****     *  Places N bytes of data from a memory array into the TX buffer for
1168:Generated_Source\PSoC4/uart.c ****     *  transmission.
1169:Generated_Source\PSoC4/uart.c ****     *
1170:Generated_Source\PSoC4/uart.c ****     * Parameters:
1171:Generated_Source\PSoC4/uart.c ****     *  string[]: Address of the memory array residing in RAM or ROM.
1172:Generated_Source\PSoC4/uart.c ****     *  byteCount: Number of bytes to be transmitted. The type depends on TX Buffer
1173:Generated_Source\PSoC4/uart.c ****     *             Size parameter.
1174:Generated_Source\PSoC4/uart.c ****     *
1175:Generated_Source\PSoC4/uart.c ****     * Return:
1176:Generated_Source\PSoC4/uart.c ****     *  None.
1177:Generated_Source\PSoC4/uart.c ****     *
1178:Generated_Source\PSoC4/uart.c ****     * Global Variables:
1179:Generated_Source\PSoC4/uart.c ****     *  uart_initVar - checked to identify that the component has been
1180:Generated_Source\PSoC4/uart.c ****     *     initialized.
1181:Generated_Source\PSoC4/uart.c ****     *
1182:Generated_Source\PSoC4/uart.c ****     * Reentrant:
1183:Generated_Source\PSoC4/uart.c ****     *  No.
1184:Generated_Source\PSoC4/uart.c ****     *
1185:Generated_Source\PSoC4/uart.c ****     * Theory:
1186:Generated_Source\PSoC4/uart.c ****     *  If there is not enough memory in the TX buffer for the entire string, this
1187:Generated_Source\PSoC4/uart.c ****     *  function blocks until the last character of the string is loaded into the
1188:Generated_Source\PSoC4/uart.c ****     *  TX buffer.
1189:Generated_Source\PSoC4/uart.c ****     *
1190:Generated_Source\PSoC4/uart.c ****     *******************************************************************************/
1191:Generated_Source\PSoC4/uart.c ****     void uart_PutArray(const uint8 string[], uint8 byteCount)
1192:Generated_Source\PSoC4/uart.c ****                                                                     
1193:Generated_Source\PSoC4/uart.c ****     {
 779              		.loc 1 1193 0
 780              		.cfi_startproc
 781              		@ args = 0, pretend = 0, frame = 0
 782              		@ frame_needed = 0, uses_anonymous_args = 0
 783              	.LVL43:
 784 0000 70B5     		push	{r4, r5, r6, lr}
 785              		.cfi_def_cfa_offset 16
 786              		.cfi_offset 4, -16
 787              		.cfi_offset 5, -12
 788              		.cfi_offset 6, -8
 789              		.cfi_offset 14, -4
 790 0002 0600     		movs	r6, r0
 791 0004 0D00     		movs	r5, r1
 792              	.LVL44:
1194:Generated_Source\PSoC4/uart.c ****         uint8 bufIndex = 0u;
1195:Generated_Source\PSoC4/uart.c **** 
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 36


1196:Generated_Source\PSoC4/uart.c ****         /* If not Initialized then skip this function */
1197:Generated_Source\PSoC4/uart.c ****         if(uart_initVar != 0u)
 793              		.loc 1 1197 0
 794 0006 074B     		ldr	r3, .L73
 795 0008 1B78     		ldrb	r3, [r3]
 796 000a 002B     		cmp	r3, #0
 797 000c 06D1     		bne	.L72
 798 000e 08E0     		b	.L68
 799              	.LVL45:
 800              	.L71:
1198:Generated_Source\PSoC4/uart.c ****         {
1199:Generated_Source\PSoC4/uart.c ****             while(bufIndex < byteCount)
1200:Generated_Source\PSoC4/uart.c ****             {
1201:Generated_Source\PSoC4/uart.c ****                 uart_PutChar(string[bufIndex]);
 801              		.loc 1 1201 0
 802 0010 305D     		ldrb	r0, [r6, r4]
 803 0012 FFF7FEFF 		bl	uart_PutChar
 804              	.LVL46:
1202:Generated_Source\PSoC4/uart.c ****                 bufIndex++;
 805              		.loc 1 1202 0
 806 0016 0134     		adds	r4, r4, #1
 807              	.LVL47:
 808 0018 E4B2     		uxtb	r4, r4
 809              	.LVL48:
 810 001a 00E0     		b	.L69
 811              	.LVL49:
 812              	.L72:
 813 001c 0024     		movs	r4, #0
 814              	.LVL50:
 815              	.L69:
1199:Generated_Source\PSoC4/uart.c ****             {
 816              		.loc 1 1199 0
 817 001e AC42     		cmp	r4, r5
 818 0020 F6D3     		bcc	.L71
 819              	.LVL51:
 820              	.L68:
1203:Generated_Source\PSoC4/uart.c ****             }
1204:Generated_Source\PSoC4/uart.c ****         }
1205:Generated_Source\PSoC4/uart.c ****     }
 821              		.loc 1 1205 0
 822              		@ sp needed
 823              	.LVL52:
 824 0022 70BD     		pop	{r4, r5, r6, pc}
 825              	.L74:
 826              		.align	2
 827              	.L73:
 828 0024 00000000 		.word	.LANCHOR0
 829              		.cfi_endproc
 830              	.LFE23:
 831              		.size	uart_PutArray, .-uart_PutArray
 832              		.section	.text.uart_PutCRLF,"ax",%progbits
 833              		.align	2
 834              		.global	uart_PutCRLF
 835              		.code	16
 836              		.thumb_func
 837              		.type	uart_PutCRLF, %function
 838              	uart_PutCRLF:
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 37


 839              	.LFB24:
1206:Generated_Source\PSoC4/uart.c **** 
1207:Generated_Source\PSoC4/uart.c **** 
1208:Generated_Source\PSoC4/uart.c ****     /*******************************************************************************
1209:Generated_Source\PSoC4/uart.c ****     * Function Name: uart_PutCRLF
1210:Generated_Source\PSoC4/uart.c ****     ********************************************************************************
1211:Generated_Source\PSoC4/uart.c ****     *
1212:Generated_Source\PSoC4/uart.c ****     * Summary:
1213:Generated_Source\PSoC4/uart.c ****     *  Writes a byte of data followed by a carriage return (0x0D) and line feed
1214:Generated_Source\PSoC4/uart.c ****     *  (0x0A) to the transmit buffer.
1215:Generated_Source\PSoC4/uart.c ****     *
1216:Generated_Source\PSoC4/uart.c ****     * Parameters:
1217:Generated_Source\PSoC4/uart.c ****     *  txDataByte: Data byte to transmit before the carriage return and line feed.
1218:Generated_Source\PSoC4/uart.c ****     *
1219:Generated_Source\PSoC4/uart.c ****     * Return:
1220:Generated_Source\PSoC4/uart.c ****     *  None.
1221:Generated_Source\PSoC4/uart.c ****     *
1222:Generated_Source\PSoC4/uart.c ****     * Global Variables:
1223:Generated_Source\PSoC4/uart.c ****     *  uart_initVar - checked to identify that the component has been
1224:Generated_Source\PSoC4/uart.c ****     *     initialized.
1225:Generated_Source\PSoC4/uart.c ****     *
1226:Generated_Source\PSoC4/uart.c ****     * Reentrant:
1227:Generated_Source\PSoC4/uart.c ****     *  No.
1228:Generated_Source\PSoC4/uart.c ****     *
1229:Generated_Source\PSoC4/uart.c ****     *******************************************************************************/
1230:Generated_Source\PSoC4/uart.c ****     void uart_PutCRLF(uint8 txDataByte) 
1231:Generated_Source\PSoC4/uart.c ****     {
 840              		.loc 1 1231 0
 841              		.cfi_startproc
 842              		@ args = 0, pretend = 0, frame = 0
 843              		@ frame_needed = 0, uses_anonymous_args = 0
 844              	.LVL53:
 845 0000 10B5     		push	{r4, lr}
 846              		.cfi_def_cfa_offset 8
 847              		.cfi_offset 4, -8
 848              		.cfi_offset 14, -4
1232:Generated_Source\PSoC4/uart.c ****         /* If not Initialized then skip this function */
1233:Generated_Source\PSoC4/uart.c ****         if(uart_initVar != 0u)
 849              		.loc 1 1233 0
 850 0002 064B     		ldr	r3, .L77
 851 0004 1B78     		ldrb	r3, [r3]
 852 0006 002B     		cmp	r3, #0
 853 0008 07D0     		beq	.L75
1234:Generated_Source\PSoC4/uart.c ****         {
1235:Generated_Source\PSoC4/uart.c ****             uart_PutChar(txDataByte);
 854              		.loc 1 1235 0
 855 000a FFF7FEFF 		bl	uart_PutChar
 856              	.LVL54:
1236:Generated_Source\PSoC4/uart.c ****             uart_PutChar(0x0Du);
 857              		.loc 1 1236 0
 858 000e 0D20     		movs	r0, #13
 859 0010 FFF7FEFF 		bl	uart_PutChar
 860              	.LVL55:
1237:Generated_Source\PSoC4/uart.c ****             uart_PutChar(0x0Au);
 861              		.loc 1 1237 0
 862 0014 0A20     		movs	r0, #10
 863 0016 FFF7FEFF 		bl	uart_PutChar
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 38


 864              	.LVL56:
 865              	.L75:
1238:Generated_Source\PSoC4/uart.c ****         }
1239:Generated_Source\PSoC4/uart.c ****     }
 866              		.loc 1 1239 0
 867              		@ sp needed
 868 001a 10BD     		pop	{r4, pc}
 869              	.L78:
 870              		.align	2
 871              	.L77:
 872 001c 00000000 		.word	.LANCHOR0
 873              		.cfi_endproc
 874              	.LFE24:
 875              		.size	uart_PutCRLF, .-uart_PutCRLF
 876              		.section	.text.uart_GetTxBufferSize,"ax",%progbits
 877              		.align	2
 878              		.global	uart_GetTxBufferSize
 879              		.code	16
 880              		.thumb_func
 881              		.type	uart_GetTxBufferSize, %function
 882              	uart_GetTxBufferSize:
 883              	.LFB25:
1240:Generated_Source\PSoC4/uart.c **** 
1241:Generated_Source\PSoC4/uart.c **** 
1242:Generated_Source\PSoC4/uart.c ****     /*******************************************************************************
1243:Generated_Source\PSoC4/uart.c ****     * Function Name: uart_GetTxBufferSize
1244:Generated_Source\PSoC4/uart.c ****     ********************************************************************************
1245:Generated_Source\PSoC4/uart.c ****     *
1246:Generated_Source\PSoC4/uart.c ****     * Summary:
1247:Generated_Source\PSoC4/uart.c ****     *  Returns the number of bytes in the TX buffer which are waiting to be 
1248:Generated_Source\PSoC4/uart.c ****     *  transmitted.
1249:Generated_Source\PSoC4/uart.c ****     *  * TX software buffer is disabled (TX Buffer Size parameter is equal to 4): 
1250:Generated_Source\PSoC4/uart.c ****     *    returns 0 for empty TX FIFO, 1 for not full TX FIFO or 4 for full TX FIFO.
1251:Generated_Source\PSoC4/uart.c ****     *  * TX software buffer is enabled: returns the number of bytes in the TX 
1252:Generated_Source\PSoC4/uart.c ****     *    software buffer which are waiting to be transmitted. Bytes available in the
1253:Generated_Source\PSoC4/uart.c ****     *    TX FIFO do not count.
1254:Generated_Source\PSoC4/uart.c ****     *
1255:Generated_Source\PSoC4/uart.c ****     * Parameters:
1256:Generated_Source\PSoC4/uart.c ****     *  None.
1257:Generated_Source\PSoC4/uart.c ****     *
1258:Generated_Source\PSoC4/uart.c ****     * Return:
1259:Generated_Source\PSoC4/uart.c ****     *  Number of bytes used in the TX buffer. Return value type depends on the TX 
1260:Generated_Source\PSoC4/uart.c ****     *  Buffer Size parameter.
1261:Generated_Source\PSoC4/uart.c ****     *
1262:Generated_Source\PSoC4/uart.c ****     * Global Variables:
1263:Generated_Source\PSoC4/uart.c ****     *  uart_txBufferWrite - used to calculate left space.
1264:Generated_Source\PSoC4/uart.c ****     *  uart_txBufferRead - used to calculate left space.
1265:Generated_Source\PSoC4/uart.c ****     *
1266:Generated_Source\PSoC4/uart.c ****     * Reentrant:
1267:Generated_Source\PSoC4/uart.c ****     *  No.
1268:Generated_Source\PSoC4/uart.c ****     *
1269:Generated_Source\PSoC4/uart.c ****     * Theory:
1270:Generated_Source\PSoC4/uart.c ****     *  Allows the user to find out how full the TX Buffer is.
1271:Generated_Source\PSoC4/uart.c ****     *
1272:Generated_Source\PSoC4/uart.c ****     *******************************************************************************/
1273:Generated_Source\PSoC4/uart.c ****     uint8 uart_GetTxBufferSize(void)
1274:Generated_Source\PSoC4/uart.c ****                                                             
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 39


1275:Generated_Source\PSoC4/uart.c ****     {
 884              		.loc 1 1275 0
 885              		.cfi_startproc
 886              		@ args = 0, pretend = 0, frame = 0
 887              		@ frame_needed = 0, uses_anonymous_args = 0
 888              		@ link register save eliminated.
1276:Generated_Source\PSoC4/uart.c ****         uint8 size;
1277:Generated_Source\PSoC4/uart.c **** 
1278:Generated_Source\PSoC4/uart.c ****     #if (uart_TX_INTERRUPT_ENABLED)
1279:Generated_Source\PSoC4/uart.c **** 
1280:Generated_Source\PSoC4/uart.c ****         /* Protect variables that could change on interrupt. */
1281:Generated_Source\PSoC4/uart.c ****         uart_DisableTxInt();
1282:Generated_Source\PSoC4/uart.c **** 
1283:Generated_Source\PSoC4/uart.c ****         if(uart_txBufferRead == uart_txBufferWrite)
1284:Generated_Source\PSoC4/uart.c ****         {
1285:Generated_Source\PSoC4/uart.c ****             size = 0u;
1286:Generated_Source\PSoC4/uart.c ****         }
1287:Generated_Source\PSoC4/uart.c ****         else if(uart_txBufferRead < uart_txBufferWrite)
1288:Generated_Source\PSoC4/uart.c ****         {
1289:Generated_Source\PSoC4/uart.c ****             size = (uart_txBufferWrite - uart_txBufferRead);
1290:Generated_Source\PSoC4/uart.c ****         }
1291:Generated_Source\PSoC4/uart.c ****         else
1292:Generated_Source\PSoC4/uart.c ****         {
1293:Generated_Source\PSoC4/uart.c ****             size = (uart_TX_BUFFER_SIZE - uart_txBufferRead) +
1294:Generated_Source\PSoC4/uart.c ****                     uart_txBufferWrite;
1295:Generated_Source\PSoC4/uart.c ****         }
1296:Generated_Source\PSoC4/uart.c **** 
1297:Generated_Source\PSoC4/uart.c ****         uart_EnableTxInt();
1298:Generated_Source\PSoC4/uart.c **** 
1299:Generated_Source\PSoC4/uart.c ****     #else
1300:Generated_Source\PSoC4/uart.c **** 
1301:Generated_Source\PSoC4/uart.c ****         size = uart_TXSTATUS_REG;
 889              		.loc 1 1301 0
 890 0000 064B     		ldr	r3, .L83
 891 0002 1B78     		ldrb	r3, [r3]
 892 0004 DBB2     		uxtb	r3, r3
 893              	.LVL57:
1302:Generated_Source\PSoC4/uart.c **** 
1303:Generated_Source\PSoC4/uart.c ****         /* Is the fifo is full. */
1304:Generated_Source\PSoC4/uart.c ****         if((size & uart_TX_STS_FIFO_FULL) != 0u)
 894              		.loc 1 1304 0
 895 0006 5A07     		lsls	r2, r3, #29
 896 0008 03D4     		bmi	.L81
1305:Generated_Source\PSoC4/uart.c ****         {
1306:Generated_Source\PSoC4/uart.c ****             size = uart_FIFO_LENGTH;
1307:Generated_Source\PSoC4/uart.c ****         }
1308:Generated_Source\PSoC4/uart.c ****         else if((size & uart_TX_STS_FIFO_EMPTY) != 0u)
 897              		.loc 1 1308 0
 898 000a 9B07     		lsls	r3, r3, #30
 899 000c 03D5     		bpl	.L82
 900              	.LVL58:
1309:Generated_Source\PSoC4/uart.c ****         {
1310:Generated_Source\PSoC4/uart.c ****             size = 0u;
 901              		.loc 1 1310 0
 902 000e 0020     		movs	r0, #0
 903 0010 02E0     		b	.L80
 904              	.LVL59:
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 40


 905              	.L81:
1306:Generated_Source\PSoC4/uart.c ****         }
 906              		.loc 1 1306 0
 907 0012 0420     		movs	r0, #4
 908 0014 00E0     		b	.L80
 909              	.LVL60:
 910              	.L82:
1311:Generated_Source\PSoC4/uart.c ****         }
1312:Generated_Source\PSoC4/uart.c ****         else
1313:Generated_Source\PSoC4/uart.c ****         {
1314:Generated_Source\PSoC4/uart.c ****             /* We only know there is data in the fifo. */
1315:Generated_Source\PSoC4/uart.c ****             size = 1u;
 911              		.loc 1 1315 0
 912 0016 0120     		movs	r0, #1
 913              	.L80:
 914              	.LVL61:
1316:Generated_Source\PSoC4/uart.c ****         }
1317:Generated_Source\PSoC4/uart.c **** 
1318:Generated_Source\PSoC4/uart.c ****     #endif /* (uart_TX_INTERRUPT_ENABLED) */
1319:Generated_Source\PSoC4/uart.c **** 
1320:Generated_Source\PSoC4/uart.c ****     return(size);
1321:Generated_Source\PSoC4/uart.c ****     }
 915              		.loc 1 1321 0
 916              		@ sp needed
 917 0018 7047     		bx	lr
 918              	.L84:
 919 001a C046     		.align	2
 920              	.L83:
 921 001c 63000F40 		.word	1074724963
 922              		.cfi_endproc
 923              	.LFE25:
 924              		.size	uart_GetTxBufferSize, .-uart_GetTxBufferSize
 925              		.section	.text.uart_ClearTxBuffer,"ax",%progbits
 926              		.align	2
 927              		.global	uart_ClearTxBuffer
 928              		.code	16
 929              		.thumb_func
 930              		.type	uart_ClearTxBuffer, %function
 931              	uart_ClearTxBuffer:
 932              	.LFB26:
1322:Generated_Source\PSoC4/uart.c **** 
1323:Generated_Source\PSoC4/uart.c **** 
1324:Generated_Source\PSoC4/uart.c ****     /*******************************************************************************
1325:Generated_Source\PSoC4/uart.c ****     * Function Name: uart_ClearTxBuffer
1326:Generated_Source\PSoC4/uart.c ****     ********************************************************************************
1327:Generated_Source\PSoC4/uart.c ****     *
1328:Generated_Source\PSoC4/uart.c ****     * Summary:
1329:Generated_Source\PSoC4/uart.c ****     *  Clears all data from the TX buffer and hardware TX FIFO.
1330:Generated_Source\PSoC4/uart.c ****     *
1331:Generated_Source\PSoC4/uart.c ****     * Parameters:
1332:Generated_Source\PSoC4/uart.c ****     *  None.
1333:Generated_Source\PSoC4/uart.c ****     *
1334:Generated_Source\PSoC4/uart.c ****     * Return:
1335:Generated_Source\PSoC4/uart.c ****     *  None.
1336:Generated_Source\PSoC4/uart.c ****     *
1337:Generated_Source\PSoC4/uart.c ****     * Global Variables:
1338:Generated_Source\PSoC4/uart.c ****     *  uart_txBufferWrite - cleared to zero.
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 41


1339:Generated_Source\PSoC4/uart.c ****     *  uart_txBufferRead - cleared to zero.
1340:Generated_Source\PSoC4/uart.c ****     *
1341:Generated_Source\PSoC4/uart.c ****     * Reentrant:
1342:Generated_Source\PSoC4/uart.c ****     *  No.
1343:Generated_Source\PSoC4/uart.c ****     *
1344:Generated_Source\PSoC4/uart.c ****     * Theory:
1345:Generated_Source\PSoC4/uart.c ****     *  Setting the pointers to zero makes the system believe there is no data to
1346:Generated_Source\PSoC4/uart.c ****     *  read and writing will resume at address 0 overwriting any data that may have
1347:Generated_Source\PSoC4/uart.c ****     *  remained in the RAM.
1348:Generated_Source\PSoC4/uart.c ****     *
1349:Generated_Source\PSoC4/uart.c ****     * Side Effects:
1350:Generated_Source\PSoC4/uart.c ****     *  Data waiting in the transmit buffer is not sent; a byte that is currently
1351:Generated_Source\PSoC4/uart.c ****     *  transmitting finishes transmitting.
1352:Generated_Source\PSoC4/uart.c ****     *
1353:Generated_Source\PSoC4/uart.c ****     *******************************************************************************/
1354:Generated_Source\PSoC4/uart.c ****     void uart_ClearTxBuffer(void) 
1355:Generated_Source\PSoC4/uart.c ****     {
 933              		.loc 1 1355 0
 934              		.cfi_startproc
 935              		@ args = 0, pretend = 0, frame = 0
 936              		@ frame_needed = 0, uses_anonymous_args = 0
 937 0000 10B5     		push	{r4, lr}
 938              		.cfi_def_cfa_offset 8
 939              		.cfi_offset 4, -8
 940              		.cfi_offset 14, -4
1356:Generated_Source\PSoC4/uart.c ****         uint8 enableInterrupts;
1357:Generated_Source\PSoC4/uart.c **** 
1358:Generated_Source\PSoC4/uart.c ****         enableInterrupts = CyEnterCriticalSection();
 941              		.loc 1 1358 0
 942 0002 FFF7FEFF 		bl	CyEnterCriticalSection
 943              	.LVL62:
1359:Generated_Source\PSoC4/uart.c ****         /* Clear the HW FIFO */
1360:Generated_Source\PSoC4/uart.c ****         uart_TXDATA_AUX_CTL_REG |= (uint8)  uart_TX_FIFO_CLR;
 944              		.loc 1 1360 0
 945 0006 064A     		ldr	r2, .L86
 946 0008 1178     		ldrb	r1, [r2]
 947 000a 0123     		movs	r3, #1
 948 000c 0B43     		orrs	r3, r1
 949 000e DBB2     		uxtb	r3, r3
 950 0010 1370     		strb	r3, [r2]
1361:Generated_Source\PSoC4/uart.c ****         uart_TXDATA_AUX_CTL_REG &= (uint8) ~uart_TX_FIFO_CLR;
 951              		.loc 1 1361 0
 952 0012 1378     		ldrb	r3, [r2]
 953 0014 0121     		movs	r1, #1
 954 0016 8B43     		bics	r3, r1
 955 0018 1370     		strb	r3, [r2]
1362:Generated_Source\PSoC4/uart.c ****         CyExitCriticalSection(enableInterrupts);
 956              		.loc 1 1362 0
 957 001a FFF7FEFF 		bl	CyExitCriticalSection
 958              	.LVL63:
1363:Generated_Source\PSoC4/uart.c **** 
1364:Generated_Source\PSoC4/uart.c ****     #if (uart_TX_INTERRUPT_ENABLED)
1365:Generated_Source\PSoC4/uart.c **** 
1366:Generated_Source\PSoC4/uart.c ****         /* Protect variables that could change on interrupt. */
1367:Generated_Source\PSoC4/uart.c ****         uart_DisableTxInt();
1368:Generated_Source\PSoC4/uart.c **** 
1369:Generated_Source\PSoC4/uart.c ****         uart_txBufferRead = 0u;
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 42


1370:Generated_Source\PSoC4/uart.c ****         uart_txBufferWrite = 0u;
1371:Generated_Source\PSoC4/uart.c **** 
1372:Generated_Source\PSoC4/uart.c ****         /* Enable Tx interrupt. */
1373:Generated_Source\PSoC4/uart.c ****         uart_EnableTxInt();
1374:Generated_Source\PSoC4/uart.c **** 
1375:Generated_Source\PSoC4/uart.c ****     #endif /* (uart_TX_INTERRUPT_ENABLED) */
1376:Generated_Source\PSoC4/uart.c ****     }
 959              		.loc 1 1376 0
 960              		@ sp needed
 961 001e 10BD     		pop	{r4, pc}
 962              	.L87:
 963              		.align	2
 964              	.L86:
 965 0020 93000F40 		.word	1074725011
 966              		.cfi_endproc
 967              	.LFE26:
 968              		.size	uart_ClearTxBuffer, .-uart_ClearTxBuffer
 969              		.section	.text.uart_SendBreak,"ax",%progbits
 970              		.align	2
 971              		.global	uart_SendBreak
 972              		.code	16
 973              		.thumb_func
 974              		.type	uart_SendBreak, %function
 975              	uart_SendBreak:
 976              	.LFB27:
1377:Generated_Source\PSoC4/uart.c **** 
1378:Generated_Source\PSoC4/uart.c **** 
1379:Generated_Source\PSoC4/uart.c ****     /*******************************************************************************
1380:Generated_Source\PSoC4/uart.c ****     * Function Name: uart_SendBreak
1381:Generated_Source\PSoC4/uart.c ****     ********************************************************************************
1382:Generated_Source\PSoC4/uart.c ****     *
1383:Generated_Source\PSoC4/uart.c ****     * Summary:
1384:Generated_Source\PSoC4/uart.c ****     *  Transmits a break signal on the bus.
1385:Generated_Source\PSoC4/uart.c ****     *
1386:Generated_Source\PSoC4/uart.c ****     * Parameters:
1387:Generated_Source\PSoC4/uart.c ****     *  uint8 retMode:  Send Break return mode. See the following table for options.
1388:Generated_Source\PSoC4/uart.c ****     *   uart_SEND_BREAK - Initialize registers for break, send the Break
1389:Generated_Source\PSoC4/uart.c ****     *       signal and return immediately.
1390:Generated_Source\PSoC4/uart.c ****     *   uart_WAIT_FOR_COMPLETE_REINIT - Wait until break transmission is
1391:Generated_Source\PSoC4/uart.c ****     *       complete, reinitialize registers to normal transmission mode then return
1392:Generated_Source\PSoC4/uart.c ****     *   uart_REINIT - Reinitialize registers to normal transmission mode
1393:Generated_Source\PSoC4/uart.c ****     *       then return.
1394:Generated_Source\PSoC4/uart.c ****     *   uart_SEND_WAIT_REINIT - Performs both options: 
1395:Generated_Source\PSoC4/uart.c ****     *      uart_SEND_BREAK and uart_WAIT_FOR_COMPLETE_REINIT.
1396:Generated_Source\PSoC4/uart.c ****     *      This option is recommended for most cases.
1397:Generated_Source\PSoC4/uart.c ****     *
1398:Generated_Source\PSoC4/uart.c ****     * Return:
1399:Generated_Source\PSoC4/uart.c ****     *  None.
1400:Generated_Source\PSoC4/uart.c ****     *
1401:Generated_Source\PSoC4/uart.c ****     * Global Variables:
1402:Generated_Source\PSoC4/uart.c ****     *  uart_initVar - checked to identify that the component has been
1403:Generated_Source\PSoC4/uart.c ****     *     initialized.
1404:Generated_Source\PSoC4/uart.c ****     *  txPeriod - static variable, used for keeping TX period configuration.
1405:Generated_Source\PSoC4/uart.c ****     *
1406:Generated_Source\PSoC4/uart.c ****     * Reentrant:
1407:Generated_Source\PSoC4/uart.c ****     *  No.
1408:Generated_Source\PSoC4/uart.c ****     *
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 43


1409:Generated_Source\PSoC4/uart.c ****     * Theory:
1410:Generated_Source\PSoC4/uart.c ****     *  SendBreak function initializes registers to send 13-bit break signal. It is
1411:Generated_Source\PSoC4/uart.c ****     *  important to return the registers configuration to normal for continue 8-bit
1412:Generated_Source\PSoC4/uart.c ****     *  operation.
1413:Generated_Source\PSoC4/uart.c ****     *  There are 3 variants for this API usage:
1414:Generated_Source\PSoC4/uart.c ****     *  1) SendBreak(3) - function will send the Break signal and take care on the
1415:Generated_Source\PSoC4/uart.c ****     *     configuration returning. Function will block CPU until transmission
1416:Generated_Source\PSoC4/uart.c ****     *     complete.
1417:Generated_Source\PSoC4/uart.c ****     *  2) User may want to use blocking time if UART configured to the low speed
1418:Generated_Source\PSoC4/uart.c ****     *     operation
1419:Generated_Source\PSoC4/uart.c ****     *     Example for this case:
1420:Generated_Source\PSoC4/uart.c ****     *     SendBreak(0);     - initialize Break signal transmission
1421:Generated_Source\PSoC4/uart.c ****     *         Add your code here to use CPU time
1422:Generated_Source\PSoC4/uart.c ****     *     SendBreak(1);     - complete Break operation
1423:Generated_Source\PSoC4/uart.c ****     *  3) Same to 2) but user may want to initialize and use the interrupt to
1424:Generated_Source\PSoC4/uart.c ****     *     complete break operation.
1425:Generated_Source\PSoC4/uart.c ****     *     Example for this case:
1426:Generated_Source\PSoC4/uart.c ****     *     Initialize TX interrupt with "TX - On TX Complete" parameter
1427:Generated_Source\PSoC4/uart.c ****     *     SendBreak(0);     - initialize Break signal transmission
1428:Generated_Source\PSoC4/uart.c ****     *         Add your code here to use CPU time
1429:Generated_Source\PSoC4/uart.c ****     *     When interrupt appear with uart_TX_STS_COMPLETE status:
1430:Generated_Source\PSoC4/uart.c ****     *     SendBreak(2);     - complete Break operation
1431:Generated_Source\PSoC4/uart.c ****     *
1432:Generated_Source\PSoC4/uart.c ****     * Side Effects:
1433:Generated_Source\PSoC4/uart.c ****     *  The uart_SendBreak() function initializes registers to send a
1434:Generated_Source\PSoC4/uart.c ****     *  break signal.
1435:Generated_Source\PSoC4/uart.c ****     *  Break signal length depends on the break signal bits configuration.
1436:Generated_Source\PSoC4/uart.c ****     *  The register configuration should be reinitialized before normal 8-bit
1437:Generated_Source\PSoC4/uart.c ****     *  communication can continue.
1438:Generated_Source\PSoC4/uart.c ****     *
1439:Generated_Source\PSoC4/uart.c ****     *******************************************************************************/
1440:Generated_Source\PSoC4/uart.c ****     void uart_SendBreak(uint8 retMode) 
1441:Generated_Source\PSoC4/uart.c ****     {
 977              		.loc 1 1441 0
 978              		.cfi_startproc
 979              		@ args = 0, pretend = 0, frame = 0
 980              		@ frame_needed = 0, uses_anonymous_args = 0
 981              		@ link register save eliminated.
 982              	.LVL64:
1442:Generated_Source\PSoC4/uart.c **** 
1443:Generated_Source\PSoC4/uart.c ****         /* If not Initialized then skip this function*/
1444:Generated_Source\PSoC4/uart.c ****         if(uart_initVar != 0u)
 983              		.loc 1 1444 0
 984 0000 134B     		ldr	r3, .L95
 985 0002 1B78     		ldrb	r3, [r3]
 986 0004 002B     		cmp	r3, #0
 987 0006 21D0     		beq	.L88
 988              	.LBB2:
1445:Generated_Source\PSoC4/uart.c ****         {
1446:Generated_Source\PSoC4/uart.c ****             /* Set the Counter to 13-bits and transmit a 00 byte */
1447:Generated_Source\PSoC4/uart.c ****             /* When that is done then reset the counter value back */
1448:Generated_Source\PSoC4/uart.c ****             uint8 tmpStat;
1449:Generated_Source\PSoC4/uart.c **** 
1450:Generated_Source\PSoC4/uart.c ****         #if(uart_HD_ENABLED) /* Half Duplex mode*/
1451:Generated_Source\PSoC4/uart.c **** 
1452:Generated_Source\PSoC4/uart.c ****             if( (retMode == uart_SEND_BREAK) ||
1453:Generated_Source\PSoC4/uart.c ****                 (retMode == uart_SEND_WAIT_REINIT ) )
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 44


1454:Generated_Source\PSoC4/uart.c ****             {
1455:Generated_Source\PSoC4/uart.c ****                 /* CTRL_HD_SEND_BREAK - sends break bits in HD mode */
1456:Generated_Source\PSoC4/uart.c ****                 uart_WriteControlRegister(uart_ReadControlRegister() |
1457:Generated_Source\PSoC4/uart.c ****                                                       uart_CTRL_HD_SEND_BREAK);
1458:Generated_Source\PSoC4/uart.c ****                 /* Send zeros */
1459:Generated_Source\PSoC4/uart.c ****                 uart_TXDATA_REG = 0u;
1460:Generated_Source\PSoC4/uart.c **** 
1461:Generated_Source\PSoC4/uart.c ****                 do /* Wait until transmit starts */
1462:Generated_Source\PSoC4/uart.c ****                 {
1463:Generated_Source\PSoC4/uart.c ****                     tmpStat = uart_TXSTATUS_REG;
1464:Generated_Source\PSoC4/uart.c ****                 }
1465:Generated_Source\PSoC4/uart.c ****                 while((tmpStat & uart_TX_STS_FIFO_EMPTY) != 0u);
1466:Generated_Source\PSoC4/uart.c ****             }
1467:Generated_Source\PSoC4/uart.c **** 
1468:Generated_Source\PSoC4/uart.c ****             if( (retMode == uart_WAIT_FOR_COMPLETE_REINIT) ||
1469:Generated_Source\PSoC4/uart.c ****                 (retMode == uart_SEND_WAIT_REINIT) )
1470:Generated_Source\PSoC4/uart.c ****             {
1471:Generated_Source\PSoC4/uart.c ****                 do /* Wait until transmit complete */
1472:Generated_Source\PSoC4/uart.c ****                 {
1473:Generated_Source\PSoC4/uart.c ****                     tmpStat = uart_TXSTATUS_REG;
1474:Generated_Source\PSoC4/uart.c ****                 }
1475:Generated_Source\PSoC4/uart.c ****                 while(((uint8)~tmpStat & uart_TX_STS_COMPLETE) != 0u);
1476:Generated_Source\PSoC4/uart.c ****             }
1477:Generated_Source\PSoC4/uart.c **** 
1478:Generated_Source\PSoC4/uart.c ****             if( (retMode == uart_WAIT_FOR_COMPLETE_REINIT) ||
1479:Generated_Source\PSoC4/uart.c ****                 (retMode == uart_REINIT) ||
1480:Generated_Source\PSoC4/uart.c ****                 (retMode == uart_SEND_WAIT_REINIT) )
1481:Generated_Source\PSoC4/uart.c ****             {
1482:Generated_Source\PSoC4/uart.c ****                 uart_WriteControlRegister(uart_ReadControlRegister() &
1483:Generated_Source\PSoC4/uart.c ****                                               (uint8)~uart_CTRL_HD_SEND_BREAK);
1484:Generated_Source\PSoC4/uart.c ****             }
1485:Generated_Source\PSoC4/uart.c **** 
1486:Generated_Source\PSoC4/uart.c ****         #else /* uart_HD_ENABLED Full Duplex mode */
1487:Generated_Source\PSoC4/uart.c **** 
1488:Generated_Source\PSoC4/uart.c ****             static uint8 txPeriod;
1489:Generated_Source\PSoC4/uart.c **** 
1490:Generated_Source\PSoC4/uart.c ****             if( (retMode == uart_SEND_BREAK) ||
 989              		.loc 1 1490 0
 990 0008 0028     		cmp	r0, #0
 991 000a 01D0     		beq	.L90
 992              		.loc 1 1490 0 is_stmt 0 discriminator 1
 993 000c 0328     		cmp	r0, #3
 994 000e 0CD1     		bne	.L91
 995              	.L90:
1491:Generated_Source\PSoC4/uart.c ****                 (retMode == uart_SEND_WAIT_REINIT) )
1492:Generated_Source\PSoC4/uart.c ****             {
1493:Generated_Source\PSoC4/uart.c ****                 /* CTRL_HD_SEND_BREAK - skip to send parity bit at Break signal in Full Duplex mode
1494:Generated_Source\PSoC4/uart.c ****                 #if( (uart_PARITY_TYPE != uart__B_UART__NONE_REVB) || \
1495:Generated_Source\PSoC4/uart.c ****                                     (uart_PARITY_TYPE_SW != 0u) )
1496:Generated_Source\PSoC4/uart.c ****                     uart_WriteControlRegister(uart_ReadControlRegister() |
1497:Generated_Source\PSoC4/uart.c ****                                                           uart_CTRL_HD_SEND_BREAK);
1498:Generated_Source\PSoC4/uart.c ****                 #endif /* End uart_PARITY_TYPE != uart__B_UART__NONE_REVB  */
1499:Generated_Source\PSoC4/uart.c **** 
1500:Generated_Source\PSoC4/uart.c ****                 #if(uart_TXCLKGEN_DP)
1501:Generated_Source\PSoC4/uart.c ****                     txPeriod = uart_TXBITCLKTX_COMPLETE_REG;
 996              		.loc 1 1501 0 is_stmt 1
 997 0010 104B     		ldr	r3, .L95+4
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 45


 998 0012 1978     		ldrb	r1, [r3]
 999 0014 0E4A     		ldr	r2, .L95
 1000 0016 5170     		strb	r1, [r2, #1]
1502:Generated_Source\PSoC4/uart.c ****                     uart_TXBITCLKTX_COMPLETE_REG = uart_TXBITCTR_BREAKBITS;
 1001              		.loc 1 1502 0
 1002 0018 6722     		movs	r2, #103
 1003 001a 1A70     		strb	r2, [r3]
1503:Generated_Source\PSoC4/uart.c ****                 #else
1504:Generated_Source\PSoC4/uart.c ****                     txPeriod = uart_TXBITCTR_PERIOD_REG;
1505:Generated_Source\PSoC4/uart.c ****                     uart_TXBITCTR_PERIOD_REG = uart_TXBITCTR_BREAKBITS8X;
1506:Generated_Source\PSoC4/uart.c ****                 #endif /* End uart_TXCLKGEN_DP */
1507:Generated_Source\PSoC4/uart.c **** 
1508:Generated_Source\PSoC4/uart.c ****                 /* Send zeros */
1509:Generated_Source\PSoC4/uart.c ****                 uart_TXDATA_REG = 0u;
 1004              		.loc 1 1509 0
 1005 001c 0022     		movs	r2, #0
 1006 001e 0E4B     		ldr	r3, .L95+8
 1007 0020 1A70     		strb	r2, [r3]
 1008              	.L92:
1510:Generated_Source\PSoC4/uart.c **** 
1511:Generated_Source\PSoC4/uart.c ****                 do /* Wait until transmit starts */
1512:Generated_Source\PSoC4/uart.c ****                 {
1513:Generated_Source\PSoC4/uart.c ****                     tmpStat = uart_TXSTATUS_REG;
 1009              		.loc 1 1513 0 discriminator 1
 1010 0022 0E4B     		ldr	r3, .L95+12
 1011 0024 1B78     		ldrb	r3, [r3]
 1012              	.LVL65:
1514:Generated_Source\PSoC4/uart.c ****                 }
1515:Generated_Source\PSoC4/uart.c ****                 while((tmpStat & uart_TX_STS_FIFO_EMPTY) != 0u);
 1013              		.loc 1 1515 0 discriminator 1
 1014 0026 9B07     		lsls	r3, r3, #30
 1015 0028 FBD4     		bmi	.L92
 1016              	.LVL66:
 1017              	.L91:
1516:Generated_Source\PSoC4/uart.c ****             }
1517:Generated_Source\PSoC4/uart.c **** 
1518:Generated_Source\PSoC4/uart.c ****             if( (retMode == uart_WAIT_FOR_COMPLETE_REINIT) ||
 1018              		.loc 1 1518 0
 1019 002a 0128     		cmp	r0, #1
 1020 002c 01D0     		beq	.L93
 1021              		.loc 1 1518 0 is_stmt 0 discriminator 1
 1022 002e 0328     		cmp	r0, #3
 1023 0030 04D1     		bne	.L94
 1024              	.L93:
1519:Generated_Source\PSoC4/uart.c ****                 (retMode == uart_SEND_WAIT_REINIT) )
1520:Generated_Source\PSoC4/uart.c ****             {
1521:Generated_Source\PSoC4/uart.c ****                 do /* Wait until transmit complete */
1522:Generated_Source\PSoC4/uart.c ****                 {
1523:Generated_Source\PSoC4/uart.c ****                     tmpStat = uart_TXSTATUS_REG;
 1025              		.loc 1 1523 0 is_stmt 1 discriminator 1
 1026 0032 0A4B     		ldr	r3, .L95+12
 1027 0034 1A78     		ldrb	r2, [r3]
 1028              	.LVL67:
1524:Generated_Source\PSoC4/uart.c ****                 }
1525:Generated_Source\PSoC4/uart.c ****                 while(((uint8)~tmpStat & uart_TX_STS_COMPLETE) != 0u);
 1029              		.loc 1 1525 0 discriminator 1
 1030 0036 0123     		movs	r3, #1
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 46


 1031 0038 9343     		bics	r3, r2
 1032 003a FAD1     		bne	.L93
 1033              	.LVL68:
 1034              	.L94:
1526:Generated_Source\PSoC4/uart.c ****             }
1527:Generated_Source\PSoC4/uart.c **** 
1528:Generated_Source\PSoC4/uart.c ****             if( (retMode == uart_WAIT_FOR_COMPLETE_REINIT) ||
1529:Generated_Source\PSoC4/uart.c ****                 (retMode == uart_REINIT) ||
 1035              		.loc 1 1529 0
 1036 003c 0138     		subs	r0, r0, #1
 1037              	.LVL69:
 1038 003e C0B2     		uxtb	r0, r0
1528:Generated_Source\PSoC4/uart.c ****                 (retMode == uart_REINIT) ||
 1039              		.loc 1 1528 0
 1040 0040 0228     		cmp	r0, #2
 1041 0042 03D8     		bhi	.L88
1530:Generated_Source\PSoC4/uart.c ****                 (retMode == uart_SEND_WAIT_REINIT) )
1531:Generated_Source\PSoC4/uart.c ****             {
1532:Generated_Source\PSoC4/uart.c **** 
1533:Generated_Source\PSoC4/uart.c ****             #if(uart_TXCLKGEN_DP)
1534:Generated_Source\PSoC4/uart.c ****                 uart_TXBITCLKTX_COMPLETE_REG = txPeriod;
 1042              		.loc 1 1534 0
 1043 0044 024B     		ldr	r3, .L95
 1044 0046 5A78     		ldrb	r2, [r3, #1]
 1045 0048 024B     		ldr	r3, .L95+4
 1046 004a 1A70     		strb	r2, [r3]
 1047              	.L88:
 1048              	.LBE2:
1535:Generated_Source\PSoC4/uart.c ****             #else
1536:Generated_Source\PSoC4/uart.c ****                 uart_TXBITCTR_PERIOD_REG = txPeriod;
1537:Generated_Source\PSoC4/uart.c ****             #endif /* End uart_TXCLKGEN_DP */
1538:Generated_Source\PSoC4/uart.c **** 
1539:Generated_Source\PSoC4/uart.c ****             #if( (uart_PARITY_TYPE != uart__B_UART__NONE_REVB) || \
1540:Generated_Source\PSoC4/uart.c ****                  (uart_PARITY_TYPE_SW != 0u) )
1541:Generated_Source\PSoC4/uart.c ****                 uart_WriteControlRegister(uart_ReadControlRegister() &
1542:Generated_Source\PSoC4/uart.c ****                                                       (uint8) ~uart_CTRL_HD_SEND_BREAK);
1543:Generated_Source\PSoC4/uart.c ****             #endif /* End uart_PARITY_TYPE != NONE */
1544:Generated_Source\PSoC4/uart.c ****             }
1545:Generated_Source\PSoC4/uart.c ****         #endif    /* End uart_HD_ENABLED */
1546:Generated_Source\PSoC4/uart.c ****         }
1547:Generated_Source\PSoC4/uart.c ****     }
 1049              		.loc 1 1547 0
 1050              		@ sp needed
 1051 004c 7047     		bx	lr
 1052              	.L96:
 1053 004e C046     		.align	2
 1054              	.L95:
 1055 0050 00000000 		.word	.LANCHOR0
 1056 0054 31000F40 		.word	1074724913
 1057 0058 43000F40 		.word	1074724931
 1058 005c 63000F40 		.word	1074724963
 1059              		.cfi_endproc
 1060              	.LFE27:
 1061              		.size	uart_SendBreak, .-uart_SendBreak
 1062              		.section	.text.uart_SetTxAddressMode,"ax",%progbits
 1063              		.align	2
 1064              		.global	uart_SetTxAddressMode
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 47


 1065              		.code	16
 1066              		.thumb_func
 1067              		.type	uart_SetTxAddressMode, %function
 1068              	uart_SetTxAddressMode:
 1069              	.LFB28:
1548:Generated_Source\PSoC4/uart.c **** 
1549:Generated_Source\PSoC4/uart.c **** 
1550:Generated_Source\PSoC4/uart.c ****     /*******************************************************************************
1551:Generated_Source\PSoC4/uart.c ****     * Function Name: uart_SetTxAddressMode
1552:Generated_Source\PSoC4/uart.c ****     ********************************************************************************
1553:Generated_Source\PSoC4/uart.c ****     *
1554:Generated_Source\PSoC4/uart.c ****     * Summary:
1555:Generated_Source\PSoC4/uart.c ****     *  Configures the transmitter to signal the next bytes is address or data.
1556:Generated_Source\PSoC4/uart.c ****     *
1557:Generated_Source\PSoC4/uart.c ****     * Parameters:
1558:Generated_Source\PSoC4/uart.c ****     *  addressMode: 
1559:Generated_Source\PSoC4/uart.c ****     *       uart_SET_SPACE - Configure the transmitter to send the next
1560:Generated_Source\PSoC4/uart.c ****     *                                    byte as a data.
1561:Generated_Source\PSoC4/uart.c ****     *       uart_SET_MARK  - Configure the transmitter to send the next
1562:Generated_Source\PSoC4/uart.c ****     *                                    byte as an address.
1563:Generated_Source\PSoC4/uart.c ****     *
1564:Generated_Source\PSoC4/uart.c ****     * Return:
1565:Generated_Source\PSoC4/uart.c ****     *  None.
1566:Generated_Source\PSoC4/uart.c ****     *
1567:Generated_Source\PSoC4/uart.c ****     * Side Effects:
1568:Generated_Source\PSoC4/uart.c ****     *  This function sets and clears uart_CTRL_MARK bit in the Control
1569:Generated_Source\PSoC4/uart.c ****     *  register.
1570:Generated_Source\PSoC4/uart.c ****     *
1571:Generated_Source\PSoC4/uart.c ****     *******************************************************************************/
1572:Generated_Source\PSoC4/uart.c ****     void uart_SetTxAddressMode(uint8 addressMode) 
1573:Generated_Source\PSoC4/uart.c ****     {
 1070              		.loc 1 1573 0
 1071              		.cfi_startproc
 1072              		@ args = 0, pretend = 0, frame = 0
 1073              		@ frame_needed = 0, uses_anonymous_args = 0
 1074              		@ link register save eliminated.
 1075              	.LVL70:
1574:Generated_Source\PSoC4/uart.c ****         /* Mark/Space sending enable */
1575:Generated_Source\PSoC4/uart.c ****         if(addressMode != 0u)
1576:Generated_Source\PSoC4/uart.c ****         {
1577:Generated_Source\PSoC4/uart.c ****         #if( uart_CONTROL_REG_REMOVED == 0u )
1578:Generated_Source\PSoC4/uart.c ****             uart_WriteControlRegister(uart_ReadControlRegister() |
1579:Generated_Source\PSoC4/uart.c ****                                                   uart_CTRL_MARK);
1580:Generated_Source\PSoC4/uart.c ****         #endif /* End uart_CONTROL_REG_REMOVED == 0u */
1581:Generated_Source\PSoC4/uart.c ****         }
1582:Generated_Source\PSoC4/uart.c ****         else
1583:Generated_Source\PSoC4/uart.c ****         {
1584:Generated_Source\PSoC4/uart.c ****         #if( uart_CONTROL_REG_REMOVED == 0u )
1585:Generated_Source\PSoC4/uart.c ****             uart_WriteControlRegister(uart_ReadControlRegister() &
1586:Generated_Source\PSoC4/uart.c ****                                                   (uint8) ~uart_CTRL_MARK);
1587:Generated_Source\PSoC4/uart.c ****         #endif /* End uart_CONTROL_REG_REMOVED == 0u */
1588:Generated_Source\PSoC4/uart.c ****         }
1589:Generated_Source\PSoC4/uart.c ****     }
 1076              		.loc 1 1589 0
 1077              		@ sp needed
 1078 0000 7047     		bx	lr
 1079              		.cfi_endproc
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 48


 1080              	.LFE28:
 1081              		.size	uart_SetTxAddressMode, .-uart_SetTxAddressMode
 1082              		.global	uart_initVar
 1083 0002 C046     		.bss
 1084              		.set	.LANCHOR0,. + 0
 1085              		.type	uart_initVar, %object
 1086              		.size	uart_initVar, 1
 1087              	uart_initVar:
 1088 0000 00       		.space	1
 1089              		.type	txPeriod.5029, %object
 1090              		.size	txPeriod.5029, 1
 1091              	txPeriod.5029:
 1092 0001 00       		.space	1
 1093              		.text
 1094              	.Letext0:
 1095              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 1096              		.file 3 "Generated_Source\\PSoC4\\CyLib.h"
 1097              		.file 4 "Generated_Source\\PSoC4\\uart_IntClock.h"
 1098              		.section	.debug_info,"",%progbits
 1099              	.Ldebug_info0:
 1100 0000 11060000 		.4byte	0x611
 1101 0004 0400     		.2byte	0x4
 1102 0006 00000000 		.4byte	.Ldebug_abbrev0
 1103 000a 04       		.byte	0x4
 1104 000b 01       		.uleb128 0x1
 1105 000c 68000000 		.4byte	.LASF64
 1106 0010 0C       		.byte	0xc
 1107 0011 77030000 		.4byte	.LASF65
 1108 0015 1A010000 		.4byte	.LASF66
 1109 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1110 001d 00000000 		.4byte	0
 1111 0021 00000000 		.4byte	.Ldebug_line0
 1112 0025 02       		.uleb128 0x2
 1113 0026 01       		.byte	0x1
 1114 0027 06       		.byte	0x6
 1115 0028 7D010000 		.4byte	.LASF0
 1116 002c 02       		.uleb128 0x2
 1117 002d 01       		.byte	0x1
 1118 002e 08       		.byte	0x8
 1119 002f 95030000 		.4byte	.LASF1
 1120 0033 02       		.uleb128 0x2
 1121 0034 02       		.byte	0x2
 1122 0035 05       		.byte	0x5
 1123 0036 C9030000 		.4byte	.LASF2
 1124 003a 02       		.uleb128 0x2
 1125 003b 02       		.byte	0x2
 1126 003c 07       		.byte	0x7
 1127 003d 65020000 		.4byte	.LASF3
 1128 0041 02       		.uleb128 0x2
 1129 0042 04       		.byte	0x4
 1130 0043 05       		.byte	0x5
 1131 0044 CE010000 		.4byte	.LASF4
 1132 0048 02       		.uleb128 0x2
 1133 0049 04       		.byte	0x4
 1134 004a 07       		.byte	0x7
 1135 004b 37020000 		.4byte	.LASF5
 1136 004f 02       		.uleb128 0x2
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 49


 1137 0050 08       		.byte	0x8
 1138 0051 05       		.byte	0x5
 1139 0052 6F010000 		.4byte	.LASF6
 1140 0056 02       		.uleb128 0x2
 1141 0057 08       		.byte	0x8
 1142 0058 07       		.byte	0x7
 1143 0059 F6000000 		.4byte	.LASF7
 1144 005d 03       		.uleb128 0x3
 1145 005e 04       		.byte	0x4
 1146 005f 05       		.byte	0x5
 1147 0060 696E7400 		.ascii	"int\000"
 1148 0064 02       		.uleb128 0x2
 1149 0065 04       		.byte	0x4
 1150 0066 07       		.byte	0x7
 1151 0067 2A020000 		.4byte	.LASF8
 1152 006b 04       		.uleb128 0x4
 1153 006c D7010000 		.4byte	.LASF9
 1154 0070 02       		.byte	0x2
 1155 0071 D201     		.2byte	0x1d2
 1156 0073 2C000000 		.4byte	0x2c
 1157 0077 04       		.uleb128 0x4
 1158 0078 00000000 		.4byte	.LASF10
 1159 007c 02       		.byte	0x2
 1160 007d D301     		.2byte	0x1d3
 1161 007f 3A000000 		.4byte	0x3a
 1162 0083 02       		.uleb128 0x2
 1163 0084 04       		.byte	0x4
 1164 0085 04       		.byte	0x4
 1165 0086 44030000 		.4byte	.LASF11
 1166 008a 02       		.uleb128 0x2
 1167 008b 08       		.byte	0x8
 1168 008c 04       		.byte	0x4
 1169 008d F5010000 		.4byte	.LASF12
 1170 0091 04       		.uleb128 0x4
 1171 0092 2B040000 		.4byte	.LASF13
 1172 0096 02       		.byte	0x2
 1173 0097 E301     		.2byte	0x1e3
 1174 0099 9D000000 		.4byte	0x9d
 1175 009d 02       		.uleb128 0x2
 1176 009e 01       		.byte	0x1
 1177 009f 08       		.byte	0x8
 1178 00a0 11040000 		.4byte	.LASF14
 1179 00a4 04       		.uleb128 0x4
 1180 00a5 72030000 		.4byte	.LASF15
 1181 00a9 02       		.byte	0x2
 1182 00aa 7C02     		.2byte	0x27c
 1183 00ac B0000000 		.4byte	0xb0
 1184 00b0 05       		.uleb128 0x5
 1185 00b1 6B000000 		.4byte	0x6b
 1186 00b5 02       		.uleb128 0x2
 1187 00b6 08       		.byte	0x8
 1188 00b7 04       		.byte	0x4
 1189 00b8 F5020000 		.4byte	.LASF16
 1190 00bc 02       		.uleb128 0x2
 1191 00bd 04       		.byte	0x4
 1192 00be 07       		.byte	0x7
 1193 00bf EC020000 		.4byte	.LASF17
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 50


 1194 00c3 06       		.uleb128 0x6
 1195 00c4 4A030000 		.4byte	.LASF67
 1196 00c8 01       		.byte	0x1
 1197 00c9 6A       		.byte	0x6a
 1198 00ca 00000000 		.4byte	.LFB3
 1199 00ce 34000000 		.4byte	.LFE3-.LFB3
 1200 00d2 01       		.uleb128 0x1
 1201 00d3 9C       		.byte	0x9c
 1202 00d4 07       		.uleb128 0x7
 1203 00d5 66030000 		.4byte	.LASF18
 1204 00d9 01       		.byte	0x1
 1205 00da B7       		.byte	0xb7
 1206 00db 00000000 		.4byte	.LFB4
 1207 00df 44000000 		.4byte	.LFE4-.LFB4
 1208 00e3 01       		.uleb128 0x1
 1209 00e4 9C       		.byte	0x9c
 1210 00e5 26010000 		.4byte	0x126
 1211 00e9 08       		.uleb128 0x8
 1212 00ea 31040000 		.4byte	.LASF21
 1213 00ee 01       		.byte	0x1
 1214 00ef B9       		.byte	0xb9
 1215 00f0 6B000000 		.4byte	0x6b
 1216 00f4 00000000 		.4byte	.LLST0
 1217 00f8 09       		.uleb128 0x9
 1218 00f9 06000000 		.4byte	.LVL0
 1219 00fd E8050000 		.4byte	0x5e8
 1220 0101 0A       		.uleb128 0xa
 1221 0102 30000000 		.4byte	.LVL2
 1222 0106 F3050000 		.4byte	0x5f3
 1223 010a 15010000 		.4byte	0x115
 1224 010e 0B       		.uleb128 0xb
 1225 010f 01       		.uleb128 0x1
 1226 0110 50       		.byte	0x50
 1227 0111 02       		.uleb128 0x2
 1228 0112 08       		.byte	0x8
 1229 0113 FF       		.byte	0xff
 1230 0114 00       		.byte	0
 1231 0115 0C       		.uleb128 0xc
 1232 0116 36000000 		.4byte	.LVL3
 1233 011a FE050000 		.4byte	0x5fe
 1234 011e 0B       		.uleb128 0xb
 1235 011f 01       		.uleb128 0x1
 1236 0120 50       		.byte	0x50
 1237 0121 02       		.uleb128 0x2
 1238 0122 74       		.byte	0x74
 1239 0123 00       		.sleb128 0
 1240 0124 00       		.byte	0
 1241 0125 00       		.byte	0
 1242 0126 07       		.uleb128 0x7
 1243 0127 F5030000 		.4byte	.LASF19
 1244 012b 01       		.byte	0x1
 1245 012c 4C       		.byte	0x4c
 1246 012d 00000000 		.4byte	.LFB2
 1247 0131 20000000 		.4byte	.LFE2-.LFB2
 1248 0135 01       		.uleb128 0x1
 1249 0136 9C       		.byte	0x9c
 1250 0137 4E010000 		.4byte	0x14e
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 51


 1251 013b 09       		.uleb128 0x9
 1252 013c 0E000000 		.4byte	.LVL5
 1253 0140 C3000000 		.4byte	0xc3
 1254 0144 09       		.uleb128 0x9
 1255 0145 18000000 		.4byte	.LVL6
 1256 0149 D4000000 		.4byte	0xd4
 1257 014d 00       		.byte	0
 1258 014e 07       		.uleb128 0x7
 1259 014f C4010000 		.4byte	.LASF20
 1260 0153 01       		.byte	0x1
 1261 0154 F0       		.byte	0xf0
 1262 0155 00000000 		.4byte	.LFB5
 1263 0159 3C000000 		.4byte	.LFE5-.LFB5
 1264 015d 01       		.uleb128 0x1
 1265 015e 9C       		.byte	0x9c
 1266 015f 95010000 		.4byte	0x195
 1267 0163 08       		.uleb128 0x8
 1268 0164 31040000 		.4byte	.LASF21
 1269 0168 01       		.byte	0x1
 1270 0169 F2       		.byte	0xf2
 1271 016a 6B000000 		.4byte	0x6b
 1272 016e 13000000 		.4byte	.LLST1
 1273 0172 09       		.uleb128 0x9
 1274 0173 06000000 		.4byte	.LVL7
 1275 0177 E8050000 		.4byte	0x5e8
 1276 017b 09       		.uleb128 0x9
 1277 017c 16000000 		.4byte	.LVL9
 1278 0180 09060000 		.4byte	0x609
 1279 0184 0C       		.uleb128 0xc
 1280 0185 2E000000 		.4byte	.LVL10
 1281 0189 FE050000 		.4byte	0x5fe
 1282 018d 0B       		.uleb128 0xb
 1283 018e 01       		.uleb128 0x1
 1284 018f 50       		.byte	0x50
 1285 0190 02       		.uleb128 0x2
 1286 0191 74       		.byte	0x74
 1287 0192 00       		.sleb128 0
 1288 0193 00       		.byte	0
 1289 0194 00       		.byte	0
 1290 0195 0D       		.uleb128 0xd
 1291 0196 D3020000 		.4byte	.LASF44
 1292 019a 01       		.byte	0x1
 1293 019b 2701     		.2byte	0x127
 1294 019d 6B000000 		.4byte	0x6b
 1295 01a1 00000000 		.4byte	.LFB6
 1296 01a5 04000000 		.4byte	.LFE6-.LFB6
 1297 01a9 01       		.uleb128 0x1
 1298 01aa 9C       		.byte	0x9c
 1299 01ab 0E       		.uleb128 0xe
 1300 01ac 49040000 		.4byte	.LASF22
 1301 01b0 01       		.byte	0x1
 1302 01b1 3F01     		.2byte	0x13f
 1303 01b3 00000000 		.4byte	.LFB7
 1304 01b7 02000000 		.4byte	.LFE7-.LFB7
 1305 01bb 01       		.uleb128 0x1
 1306 01bc 9C       		.byte	0x9c
 1307 01bd D0010000 		.4byte	0x1d0
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 52


 1308 01c1 0F       		.uleb128 0xf
 1309 01c2 08020000 		.4byte	.LASF24
 1310 01c6 01       		.byte	0x1
 1311 01c7 3F01     		.2byte	0x13f
 1312 01c9 6B000000 		.4byte	0x6b
 1313 01cd 01       		.uleb128 0x1
 1314 01ce 50       		.byte	0x50
 1315 01cf 00       		.byte	0
 1316 01d0 0E       		.uleb128 0xe
 1317 01d1 DD010000 		.4byte	.LASF23
 1318 01d5 01       		.byte	0x1
 1319 01d6 6701     		.2byte	0x167
 1320 01d8 00000000 		.4byte	.LFB8
 1321 01dc 0C000000 		.4byte	.LFE8-.LFB8
 1322 01e0 01       		.uleb128 0x1
 1323 01e1 9C       		.byte	0x9c
 1324 01e2 F5010000 		.4byte	0x1f5
 1325 01e6 0F       		.uleb128 0xf
 1326 01e7 94020000 		.4byte	.LASF25
 1327 01eb 01       		.byte	0x1
 1328 01ec 6701     		.2byte	0x167
 1329 01ee 6B000000 		.4byte	0x6b
 1330 01f2 01       		.uleb128 0x1
 1331 01f3 50       		.byte	0x50
 1332 01f4 00       		.byte	0
 1333 01f5 10       		.uleb128 0x10
 1334 01f6 BB020000 		.4byte	.LASF27
 1335 01fa 01       		.byte	0x1
 1336 01fb 8801     		.2byte	0x188
 1337 01fd 6B000000 		.4byte	0x6b
 1338 0201 00000000 		.4byte	.LFB9
 1339 0205 0C000000 		.4byte	.LFE9-.LFB9
 1340 0209 01       		.uleb128 0x1
 1341 020a 9C       		.byte	0x9c
 1342 020b 1E020000 		.4byte	0x21e
 1343 020f 11       		.uleb128 0x11
 1344 0210 0A040000 		.4byte	.LASF26
 1345 0214 01       		.byte	0x1
 1346 0215 8A01     		.2byte	0x18a
 1347 0217 6B000000 		.4byte	0x6b
 1348 021b 01       		.uleb128 0x1
 1349 021c 50       		.byte	0x50
 1350 021d 00       		.byte	0
 1351 021e 10       		.uleb128 0x10
 1352 021f 54030000 		.4byte	.LASF28
 1353 0223 01       		.byte	0x1
 1354 0224 E501     		.2byte	0x1e5
 1355 0226 6B000000 		.4byte	0x6b
 1356 022a 00000000 		.4byte	.LFB10
 1357 022e 10000000 		.4byte	.LFE10-.LFB10
 1358 0232 01       		.uleb128 0x1
 1359 0233 9C       		.byte	0x9c
 1360 0234 47020000 		.4byte	0x247
 1361 0238 11       		.uleb128 0x11
 1362 0239 42040000 		.4byte	.LASF29
 1363 023d 01       		.byte	0x1
 1364 023e E701     		.2byte	0x1e7
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 53


 1365 0240 6B000000 		.4byte	0x6b
 1366 0244 01       		.uleb128 0x1
 1367 0245 50       		.byte	0x50
 1368 0246 00       		.byte	0
 1369 0247 10       		.uleb128 0x10
 1370 0248 46000000 		.4byte	.LASF30
 1371 024c 01       		.byte	0x1
 1372 024d 1402     		.2byte	0x214
 1373 024f 6B000000 		.4byte	0x6b
 1374 0253 00000000 		.4byte	.LFB11
 1375 0257 28000000 		.4byte	.LFE11-.LFB11
 1376 025b 01       		.uleb128 0x1
 1377 025c 9C       		.byte	0x9c
 1378 025d 80020000 		.4byte	0x280
 1379 0261 12       		.uleb128 0x12
 1380 0262 0A040000 		.4byte	.LASF26
 1381 0266 01       		.byte	0x1
 1382 0267 1602     		.2byte	0x216
 1383 0269 6B000000 		.4byte	0x6b
 1384 026d 26000000 		.4byte	.LLST2
 1385 0271 11       		.uleb128 0x11
 1386 0272 2E030000 		.4byte	.LASF31
 1387 0276 01       		.byte	0x1
 1388 0277 1702     		.2byte	0x217
 1389 0279 6B000000 		.4byte	0x6b
 1390 027d 01       		.uleb128 0x1
 1391 027e 53       		.byte	0x53
 1392 027f 00       		.byte	0
 1393 0280 10       		.uleb128 0x10
 1394 0281 21030000 		.4byte	.LASF32
 1395 0285 01       		.byte	0x1
 1396 0286 7A02     		.2byte	0x27a
 1397 0288 77000000 		.4byte	0x77
 1398 028c 00000000 		.4byte	.LFB12
 1399 0290 12000000 		.4byte	.LFE12-.LFB12
 1400 0294 01       		.uleb128 0x1
 1401 0295 9C       		.byte	0x9c
 1402 0296 AD020000 		.4byte	0x2ad
 1403 029a 09       		.uleb128 0x9
 1404 029b 06000000 		.4byte	.LVL22
 1405 029f 1E020000 		.4byte	0x21e
 1406 02a3 09       		.uleb128 0x9
 1407 02a4 0C000000 		.4byte	.LVL23
 1408 02a8 F5010000 		.4byte	0x1f5
 1409 02ac 00       		.byte	0
 1410 02ad 10       		.uleb128 0x10
 1411 02ae 28000000 		.4byte	.LASF33
 1412 02b2 01       		.byte	0x1
 1413 02b3 AB02     		.2byte	0x2ab
 1414 02b5 6B000000 		.4byte	0x6b
 1415 02b9 00000000 		.4byte	.LFB13
 1416 02bd 14000000 		.4byte	.LFE13-.LFB13
 1417 02c1 01       		.uleb128 0x1
 1418 02c2 9C       		.byte	0x9c
 1419 02c3 D6020000 		.4byte	0x2d6
 1420 02c7 11       		.uleb128 0x11
 1421 02c8 60020000 		.4byte	.LASF34
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 54


 1422 02cc 01       		.byte	0x1
 1423 02cd AE02     		.2byte	0x2ae
 1424 02cf 6B000000 		.4byte	0x6b
 1425 02d3 01       		.uleb128 0x1
 1426 02d4 50       		.byte	0x50
 1427 02d5 00       		.byte	0
 1428 02d6 0E       		.uleb128 0xe
 1429 02d7 D3030000 		.4byte	.LASF35
 1430 02db 01       		.byte	0x1
 1431 02dc F502     		.2byte	0x2f5
 1432 02de 00000000 		.4byte	.LFB14
 1433 02e2 24000000 		.4byte	.LFE14-.LFB14
 1434 02e6 01       		.uleb128 0x1
 1435 02e7 9C       		.byte	0x9c
 1436 02e8 0F030000 		.4byte	0x30f
 1437 02ec 12       		.uleb128 0x12
 1438 02ed 31040000 		.4byte	.LASF21
 1439 02f1 01       		.byte	0x1
 1440 02f2 F702     		.2byte	0x2f7
 1441 02f4 6B000000 		.4byte	0x6b
 1442 02f8 5C000000 		.4byte	.LLST3
 1443 02fc 09       		.uleb128 0x9
 1444 02fd 06000000 		.4byte	.LVL25
 1445 0301 E8050000 		.4byte	0x5e8
 1446 0305 09       		.uleb128 0x9
 1447 0306 1E000000 		.4byte	.LVL26
 1448 030a FE050000 		.4byte	0x5fe
 1449 030e 00       		.byte	0
 1450 030f 0E       		.uleb128 0xe
 1451 0310 AE010000 		.4byte	.LASF36
 1452 0314 01       		.byte	0x1
 1453 0315 2D03     		.2byte	0x32d
 1454 0317 00000000 		.4byte	.LFB15
 1455 031b 02000000 		.4byte	.LFE15-.LFB15
 1456 031f 01       		.uleb128 0x1
 1457 0320 9C       		.byte	0x9c
 1458 0321 34030000 		.4byte	0x334
 1459 0325 0F       		.uleb128 0xf
 1460 0326 FC010000 		.4byte	.LASF37
 1461 032a 01       		.byte	0x1
 1462 032b 2D03     		.2byte	0x32d
 1463 032d 6B000000 		.4byte	0x6b
 1464 0331 01       		.uleb128 0x1
 1465 0332 50       		.byte	0x50
 1466 0333 00       		.byte	0
 1467 0334 0E       		.uleb128 0xe
 1468 0335 A3030000 		.4byte	.LASF38
 1469 0339 01       		.byte	0x1
 1470 033a 5903     		.2byte	0x359
 1471 033c 00000000 		.4byte	.LFB16
 1472 0340 0C000000 		.4byte	.LFE16-.LFB16
 1473 0344 01       		.uleb128 0x1
 1474 0345 9C       		.byte	0x9c
 1475 0346 59030000 		.4byte	0x359
 1476 034a 0F       		.uleb128 0xf
 1477 034b 01030000 		.4byte	.LASF39
 1478 034f 01       		.byte	0x1
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 55


 1479 0350 5903     		.2byte	0x359
 1480 0352 6B000000 		.4byte	0x6b
 1481 0356 01       		.uleb128 0x1
 1482 0357 50       		.byte	0x50
 1483 0358 00       		.byte	0
 1484 0359 0E       		.uleb128 0xe
 1485 035a B6030000 		.4byte	.LASF40
 1486 035e 01       		.byte	0x1
 1487 035f 6D03     		.2byte	0x36d
 1488 0361 00000000 		.4byte	.LFB17
 1489 0365 0C000000 		.4byte	.LFE17-.LFB17
 1490 0369 01       		.uleb128 0x1
 1491 036a 9C       		.byte	0x9c
 1492 036b 7E030000 		.4byte	0x37e
 1493 036f 0F       		.uleb128 0xf
 1494 0370 01030000 		.4byte	.LASF39
 1495 0374 01       		.byte	0x1
 1496 0375 6D03     		.2byte	0x36d
 1497 0377 6B000000 		.4byte	0x6b
 1498 037b 01       		.uleb128 0x1
 1499 037c 50       		.byte	0x50
 1500 037d 00       		.byte	0
 1501 037e 0E       		.uleb128 0xe
 1502 037f 09030000 		.4byte	.LASF41
 1503 0383 01       		.byte	0x1
 1504 0384 8C03     		.2byte	0x38c
 1505 0386 00000000 		.4byte	.LFB18
 1506 038a 0C000000 		.4byte	.LFE18-.LFB18
 1507 038e 01       		.uleb128 0x1
 1508 038f 9C       		.byte	0x9c
 1509 0390 A3030000 		.4byte	0x3a3
 1510 0394 0F       		.uleb128 0xf
 1511 0395 94020000 		.4byte	.LASF25
 1512 0399 01       		.byte	0x1
 1513 039a 8C03     		.2byte	0x38c
 1514 039c 6B000000 		.4byte	0x6b
 1515 03a0 01       		.uleb128 0x1
 1516 03a1 50       		.byte	0x50
 1517 03a2 00       		.byte	0
 1518 03a3 0E       		.uleb128 0xe
 1519 03a4 5E010000 		.4byte	.LASF42
 1520 03a8 01       		.byte	0x1
 1521 03a9 AE03     		.2byte	0x3ae
 1522 03ab 00000000 		.4byte	.LFB19
 1523 03af 18000000 		.4byte	.LFE19-.LFB19
 1524 03b3 01       		.uleb128 0x1
 1525 03b4 9C       		.byte	0x9c
 1526 03b5 C8030000 		.4byte	0x3c8
 1527 03b9 0F       		.uleb128 0xf
 1528 03ba 1D000000 		.4byte	.LASF43
 1529 03be 01       		.byte	0x1
 1530 03bf AE03     		.2byte	0x3ae
 1531 03c1 6B000000 		.4byte	0x6b
 1532 03c5 01       		.uleb128 0x1
 1533 03c6 50       		.byte	0x50
 1534 03c7 00       		.byte	0
 1535 03c8 0D       		.uleb128 0xd
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 56


 1536 03c9 10020000 		.4byte	.LASF45
 1537 03cd 01       		.byte	0x1
 1538 03ce EB03     		.2byte	0x3eb
 1539 03d0 6B000000 		.4byte	0x6b
 1540 03d4 00000000 		.4byte	.LFB20
 1541 03d8 0C000000 		.4byte	.LFE20-.LFB20
 1542 03dc 01       		.uleb128 0x1
 1543 03dd 9C       		.byte	0x9c
 1544 03de 0E       		.uleb128 0xe
 1545 03df 9B020000 		.4byte	.LASF46
 1546 03e3 01       		.byte	0x1
 1547 03e4 1104     		.2byte	0x411
 1548 03e6 00000000 		.4byte	.LFB21
 1549 03ea 18000000 		.4byte	.LFE21-.LFB21
 1550 03ee 01       		.uleb128 0x1
 1551 03ef 9C       		.byte	0x9c
 1552 03f0 03040000 		.4byte	0x403
 1553 03f4 0F       		.uleb128 0xf
 1554 03f5 1D000000 		.4byte	.LASF43
 1555 03f9 01       		.byte	0x1
 1556 03fa 1104     		.2byte	0x411
 1557 03fc 6B000000 		.4byte	0x6b
 1558 0400 01       		.uleb128 0x1
 1559 0401 50       		.byte	0x50
 1560 0402 00       		.byte	0
 1561 0403 0E       		.uleb128 0xe
 1562 0404 E6030000 		.4byte	.LASF47
 1563 0408 01       		.byte	0x1
 1564 0409 7904     		.2byte	0x479
 1565 040b 00000000 		.4byte	.LFB22
 1566 040f 28000000 		.4byte	.LFE22-.LFB22
 1567 0413 01       		.uleb128 0x1
 1568 0414 9C       		.byte	0x9c
 1569 0415 43040000 		.4byte	0x443
 1570 0419 13       		.uleb128 0x13
 1571 041a 53000000 		.4byte	.LASF48
 1572 041e 01       		.byte	0x1
 1573 041f 7904     		.2byte	0x479
 1574 0421 43040000 		.4byte	0x443
 1575 0425 6F000000 		.4byte	.LLST4
 1576 0429 12       		.uleb128 0x12
 1577 042a 8B020000 		.4byte	.LASF49
 1578 042e 01       		.byte	0x1
 1579 042f 7B04     		.2byte	0x47b
 1580 0431 77000000 		.4byte	0x77
 1581 0435 B1000000 		.4byte	.LLST5
 1582 0439 09       		.uleb128 0x9
 1583 043a 12000000 		.4byte	.LVL36
 1584 043e DE030000 		.4byte	0x3de
 1585 0442 00       		.byte	0
 1586 0443 14       		.uleb128 0x14
 1587 0444 04       		.byte	0x4
 1588 0445 49040000 		.4byte	0x449
 1589 0449 15       		.uleb128 0x15
 1590 044a 91000000 		.4byte	0x91
 1591 044e 0E       		.uleb128 0xe
 1592 044f 5A000000 		.4byte	.LASF50
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 57


 1593 0453 01       		.byte	0x1
 1594 0454 A704     		.2byte	0x4a7
 1595 0456 00000000 		.4byte	.LFB23
 1596 045a 28000000 		.4byte	.LFE23-.LFB23
 1597 045e 01       		.uleb128 0x1
 1598 045f 9C       		.byte	0x9c
 1599 0460 9E040000 		.4byte	0x49e
 1600 0464 13       		.uleb128 0x13
 1601 0465 53000000 		.4byte	.LASF48
 1602 0469 01       		.byte	0x1
 1603 046a A704     		.2byte	0x4a7
 1604 046c 9E040000 		.4byte	0x49e
 1605 0470 F2000000 		.4byte	.LLST6
 1606 0474 13       		.uleb128 0x13
 1607 0475 00040000 		.4byte	.LASF51
 1608 0479 01       		.byte	0x1
 1609 047a A704     		.2byte	0x4a7
 1610 047c 6B000000 		.4byte	0x6b
 1611 0480 34010000 		.4byte	.LLST7
 1612 0484 12       		.uleb128 0x12
 1613 0485 8B020000 		.4byte	.LASF49
 1614 0489 01       		.byte	0x1
 1615 048a AA04     		.2byte	0x4aa
 1616 048c 6B000000 		.4byte	0x6b
 1617 0490 6E010000 		.4byte	.LLST8
 1618 0494 09       		.uleb128 0x9
 1619 0495 16000000 		.4byte	.LVL46
 1620 0499 DE030000 		.4byte	0x3de
 1621 049d 00       		.byte	0
 1622 049e 14       		.uleb128 0x14
 1623 049f 04       		.byte	0x4
 1624 04a0 A4040000 		.4byte	0x4a4
 1625 04a4 15       		.uleb128 0x15
 1626 04a5 6B000000 		.4byte	0x6b
 1627 04a9 0E       		.uleb128 0xe
 1628 04aa 37030000 		.4byte	.LASF52
 1629 04ae 01       		.byte	0x1
 1630 04af CE04     		.2byte	0x4ce
 1631 04b1 00000000 		.4byte	.LFB24
 1632 04b5 20000000 		.4byte	.LFE24-.LFB24
 1633 04b9 01       		.uleb128 0x1
 1634 04ba 9C       		.byte	0x9c
 1635 04bb FB040000 		.4byte	0x4fb
 1636 04bf 13       		.uleb128 0x13
 1637 04c0 1D000000 		.4byte	.LASF43
 1638 04c4 01       		.byte	0x1
 1639 04c5 CE04     		.2byte	0x4ce
 1640 04c7 6B000000 		.4byte	0x6b
 1641 04cb AF010000 		.4byte	.LLST9
 1642 04cf 09       		.uleb128 0x9
 1643 04d0 0E000000 		.4byte	.LVL54
 1644 04d4 DE030000 		.4byte	0x3de
 1645 04d8 0A       		.uleb128 0xa
 1646 04d9 14000000 		.4byte	.LVL55
 1647 04dd DE030000 		.4byte	0x3de
 1648 04e1 EB040000 		.4byte	0x4eb
 1649 04e5 0B       		.uleb128 0xb
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 58


 1650 04e6 01       		.uleb128 0x1
 1651 04e7 50       		.byte	0x50
 1652 04e8 01       		.uleb128 0x1
 1653 04e9 3D       		.byte	0x3d
 1654 04ea 00       		.byte	0
 1655 04eb 0C       		.uleb128 0xc
 1656 04ec 1A000000 		.4byte	.LVL56
 1657 04f0 DE030000 		.4byte	0x3de
 1658 04f4 0B       		.uleb128 0xb
 1659 04f5 01       		.uleb128 0x1
 1660 04f6 50       		.byte	0x50
 1661 04f7 01       		.uleb128 0x1
 1662 04f8 3A       		.byte	0x3a
 1663 04f9 00       		.byte	0
 1664 04fa 00       		.byte	0
 1665 04fb 10       		.uleb128 0x10
 1666 04fc 16040000 		.4byte	.LASF53
 1667 0500 01       		.byte	0x1
 1668 0501 F904     		.2byte	0x4f9
 1669 0503 6B000000 		.4byte	0x6b
 1670 0507 00000000 		.4byte	.LFB25
 1671 050b 20000000 		.4byte	.LFE25-.LFB25
 1672 050f 01       		.uleb128 0x1
 1673 0510 9C       		.byte	0x9c
 1674 0511 26050000 		.4byte	0x526
 1675 0515 12       		.uleb128 0x12
 1676 0516 60020000 		.4byte	.LASF34
 1677 051a 01       		.byte	0x1
 1678 051b FC04     		.2byte	0x4fc
 1679 051d 6B000000 		.4byte	0x6b
 1680 0521 D0010000 		.4byte	.LLST10
 1681 0525 00       		.byte	0
 1682 0526 0E       		.uleb128 0xe
 1683 0527 A8020000 		.4byte	.LASF54
 1684 052b 01       		.byte	0x1
 1685 052c 4A05     		.2byte	0x54a
 1686 052e 00000000 		.4byte	.LFB26
 1687 0532 24000000 		.4byte	.LFE26-.LFB26
 1688 0536 01       		.uleb128 0x1
 1689 0537 9C       		.byte	0x9c
 1690 0538 5F050000 		.4byte	0x55f
 1691 053c 12       		.uleb128 0x12
 1692 053d 31040000 		.4byte	.LASF21
 1693 0541 01       		.byte	0x1
 1694 0542 4C05     		.2byte	0x54c
 1695 0544 6B000000 		.4byte	0x6b
 1696 0548 F9010000 		.4byte	.LLST11
 1697 054c 09       		.uleb128 0x9
 1698 054d 06000000 		.4byte	.LVL62
 1699 0551 E8050000 		.4byte	0x5e8
 1700 0555 09       		.uleb128 0x9
 1701 0556 1E000000 		.4byte	.LVL63
 1702 055a FE050000 		.4byte	0x5fe
 1703 055e 00       		.byte	0
 1704 055f 0E       		.uleb128 0xe
 1705 0560 89010000 		.4byte	.LASF55
 1706 0564 01       		.byte	0x1
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 59


 1707 0565 A005     		.2byte	0x5a0
 1708 0567 00000000 		.4byte	.LFB27
 1709 056b 60000000 		.4byte	.LFE27-.LFB27
 1710 056f 01       		.uleb128 0x1
 1711 0570 9C       		.byte	0x9c
 1712 0571 B2050000 		.4byte	0x5b2
 1713 0575 13       		.uleb128 0x13
 1714 0576 22020000 		.4byte	.LASF56
 1715 057a 01       		.byte	0x1
 1716 057b A005     		.2byte	0x5a0
 1717 057d 6B000000 		.4byte	0x6b
 1718 0581 0C020000 		.4byte	.LLST12
 1719 0585 16       		.uleb128 0x16
 1720 0586 08000000 		.4byte	.LBB2
 1721 058a 44000000 		.4byte	.LBE2-.LBB2
 1722 058e 12       		.uleb128 0x12
 1723 058f CB020000 		.4byte	.LASF57
 1724 0593 01       		.byte	0x1
 1725 0594 A805     		.2byte	0x5a8
 1726 0596 6B000000 		.4byte	0x6b
 1727 059a 2D020000 		.4byte	.LLST13
 1728 059e 11       		.uleb128 0x11
 1729 059f 3D000000 		.4byte	.LASF58
 1730 05a3 01       		.byte	0x1
 1731 05a4 D005     		.2byte	0x5d0
 1732 05a6 6B000000 		.4byte	0x6b
 1733 05aa 05       		.uleb128 0x5
 1734 05ab 03       		.byte	0x3
 1735 05ac 01000000 		.4byte	txPeriod.5029
 1736 05b0 00       		.byte	0
 1737 05b1 00       		.byte	0
 1738 05b2 0E       		.uleb128 0xe
 1739 05b3 63040000 		.4byte	.LASF59
 1740 05b7 01       		.byte	0x1
 1741 05b8 2406     		.2byte	0x624
 1742 05ba 00000000 		.4byte	.LFB28
 1743 05be 02000000 		.4byte	.LFE28-.LFB28
 1744 05c2 01       		.uleb128 0x1
 1745 05c3 9C       		.byte	0x9c
 1746 05c4 D7050000 		.4byte	0x5d7
 1747 05c8 0F       		.uleb128 0xf
 1748 05c9 FC010000 		.4byte	.LASF37
 1749 05cd 01       		.byte	0x1
 1750 05ce 2406     		.2byte	0x624
 1751 05d0 6B000000 		.4byte	0x6b
 1752 05d4 01       		.uleb128 0x1
 1753 05d5 50       		.byte	0x50
 1754 05d6 00       		.byte	0
 1755 05d7 17       		.uleb128 0x17
 1756 05d8 0D010000 		.4byte	.LASF68
 1757 05dc 01       		.byte	0x1
 1758 05dd 1B       		.byte	0x1b
 1759 05de 6B000000 		.4byte	0x6b
 1760 05e2 05       		.uleb128 0x5
 1761 05e3 03       		.byte	0x3
 1762 05e4 00000000 		.4byte	uart_initVar
 1763 05e8 18       		.uleb128 0x18
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 60


 1764 05e9 49020000 		.4byte	.LASF60
 1765 05ed 49020000 		.4byte	.LASF60
 1766 05f1 03       		.byte	0x3
 1767 05f2 E5       		.byte	0xe5
 1768 05f3 18       		.uleb128 0x18
 1769 05f4 98010000 		.4byte	.LASF61
 1770 05f8 98010000 		.4byte	.LASF61
 1771 05fc 04       		.byte	0x4
 1772 05fd 1D       		.byte	0x1d
 1773 05fe 18       		.uleb128 0x18
 1774 05ff 07000000 		.4byte	.LASF62
 1775 0603 07000000 		.4byte	.LASF62
 1776 0607 03       		.byte	0x3
 1777 0608 E6       		.byte	0xe6
 1778 0609 18       		.uleb128 0x18
 1779 060a 78020000 		.4byte	.LASF63
 1780 060e 78020000 		.4byte	.LASF63
 1781 0612 04       		.byte	0x4
 1782 0613 27       		.byte	0x27
 1783 0614 00       		.byte	0
 1784              		.section	.debug_abbrev,"",%progbits
 1785              	.Ldebug_abbrev0:
 1786 0000 01       		.uleb128 0x1
 1787 0001 11       		.uleb128 0x11
 1788 0002 01       		.byte	0x1
 1789 0003 25       		.uleb128 0x25
 1790 0004 0E       		.uleb128 0xe
 1791 0005 13       		.uleb128 0x13
 1792 0006 0B       		.uleb128 0xb
 1793 0007 03       		.uleb128 0x3
 1794 0008 0E       		.uleb128 0xe
 1795 0009 1B       		.uleb128 0x1b
 1796 000a 0E       		.uleb128 0xe
 1797 000b 55       		.uleb128 0x55
 1798 000c 17       		.uleb128 0x17
 1799 000d 11       		.uleb128 0x11
 1800 000e 01       		.uleb128 0x1
 1801 000f 10       		.uleb128 0x10
 1802 0010 17       		.uleb128 0x17
 1803 0011 00       		.byte	0
 1804 0012 00       		.byte	0
 1805 0013 02       		.uleb128 0x2
 1806 0014 24       		.uleb128 0x24
 1807 0015 00       		.byte	0
 1808 0016 0B       		.uleb128 0xb
 1809 0017 0B       		.uleb128 0xb
 1810 0018 3E       		.uleb128 0x3e
 1811 0019 0B       		.uleb128 0xb
 1812 001a 03       		.uleb128 0x3
 1813 001b 0E       		.uleb128 0xe
 1814 001c 00       		.byte	0
 1815 001d 00       		.byte	0
 1816 001e 03       		.uleb128 0x3
 1817 001f 24       		.uleb128 0x24
 1818 0020 00       		.byte	0
 1819 0021 0B       		.uleb128 0xb
 1820 0022 0B       		.uleb128 0xb
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 61


 1821 0023 3E       		.uleb128 0x3e
 1822 0024 0B       		.uleb128 0xb
 1823 0025 03       		.uleb128 0x3
 1824 0026 08       		.uleb128 0x8
 1825 0027 00       		.byte	0
 1826 0028 00       		.byte	0
 1827 0029 04       		.uleb128 0x4
 1828 002a 16       		.uleb128 0x16
 1829 002b 00       		.byte	0
 1830 002c 03       		.uleb128 0x3
 1831 002d 0E       		.uleb128 0xe
 1832 002e 3A       		.uleb128 0x3a
 1833 002f 0B       		.uleb128 0xb
 1834 0030 3B       		.uleb128 0x3b
 1835 0031 05       		.uleb128 0x5
 1836 0032 49       		.uleb128 0x49
 1837 0033 13       		.uleb128 0x13
 1838 0034 00       		.byte	0
 1839 0035 00       		.byte	0
 1840 0036 05       		.uleb128 0x5
 1841 0037 35       		.uleb128 0x35
 1842 0038 00       		.byte	0
 1843 0039 49       		.uleb128 0x49
 1844 003a 13       		.uleb128 0x13
 1845 003b 00       		.byte	0
 1846 003c 00       		.byte	0
 1847 003d 06       		.uleb128 0x6
 1848 003e 2E       		.uleb128 0x2e
 1849 003f 00       		.byte	0
 1850 0040 3F       		.uleb128 0x3f
 1851 0041 19       		.uleb128 0x19
 1852 0042 03       		.uleb128 0x3
 1853 0043 0E       		.uleb128 0xe
 1854 0044 3A       		.uleb128 0x3a
 1855 0045 0B       		.uleb128 0xb
 1856 0046 3B       		.uleb128 0x3b
 1857 0047 0B       		.uleb128 0xb
 1858 0048 27       		.uleb128 0x27
 1859 0049 19       		.uleb128 0x19
 1860 004a 11       		.uleb128 0x11
 1861 004b 01       		.uleb128 0x1
 1862 004c 12       		.uleb128 0x12
 1863 004d 06       		.uleb128 0x6
 1864 004e 40       		.uleb128 0x40
 1865 004f 18       		.uleb128 0x18
 1866 0050 9742     		.uleb128 0x2117
 1867 0052 19       		.uleb128 0x19
 1868 0053 00       		.byte	0
 1869 0054 00       		.byte	0
 1870 0055 07       		.uleb128 0x7
 1871 0056 2E       		.uleb128 0x2e
 1872 0057 01       		.byte	0x1
 1873 0058 3F       		.uleb128 0x3f
 1874 0059 19       		.uleb128 0x19
 1875 005a 03       		.uleb128 0x3
 1876 005b 0E       		.uleb128 0xe
 1877 005c 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 62


 1878 005d 0B       		.uleb128 0xb
 1879 005e 3B       		.uleb128 0x3b
 1880 005f 0B       		.uleb128 0xb
 1881 0060 27       		.uleb128 0x27
 1882 0061 19       		.uleb128 0x19
 1883 0062 11       		.uleb128 0x11
 1884 0063 01       		.uleb128 0x1
 1885 0064 12       		.uleb128 0x12
 1886 0065 06       		.uleb128 0x6
 1887 0066 40       		.uleb128 0x40
 1888 0067 18       		.uleb128 0x18
 1889 0068 9742     		.uleb128 0x2117
 1890 006a 19       		.uleb128 0x19
 1891 006b 01       		.uleb128 0x1
 1892 006c 13       		.uleb128 0x13
 1893 006d 00       		.byte	0
 1894 006e 00       		.byte	0
 1895 006f 08       		.uleb128 0x8
 1896 0070 34       		.uleb128 0x34
 1897 0071 00       		.byte	0
 1898 0072 03       		.uleb128 0x3
 1899 0073 0E       		.uleb128 0xe
 1900 0074 3A       		.uleb128 0x3a
 1901 0075 0B       		.uleb128 0xb
 1902 0076 3B       		.uleb128 0x3b
 1903 0077 0B       		.uleb128 0xb
 1904 0078 49       		.uleb128 0x49
 1905 0079 13       		.uleb128 0x13
 1906 007a 02       		.uleb128 0x2
 1907 007b 17       		.uleb128 0x17
 1908 007c 00       		.byte	0
 1909 007d 00       		.byte	0
 1910 007e 09       		.uleb128 0x9
 1911 007f 898201   		.uleb128 0x4109
 1912 0082 00       		.byte	0
 1913 0083 11       		.uleb128 0x11
 1914 0084 01       		.uleb128 0x1
 1915 0085 31       		.uleb128 0x31
 1916 0086 13       		.uleb128 0x13
 1917 0087 00       		.byte	0
 1918 0088 00       		.byte	0
 1919 0089 0A       		.uleb128 0xa
 1920 008a 898201   		.uleb128 0x4109
 1921 008d 01       		.byte	0x1
 1922 008e 11       		.uleb128 0x11
 1923 008f 01       		.uleb128 0x1
 1924 0090 31       		.uleb128 0x31
 1925 0091 13       		.uleb128 0x13
 1926 0092 01       		.uleb128 0x1
 1927 0093 13       		.uleb128 0x13
 1928 0094 00       		.byte	0
 1929 0095 00       		.byte	0
 1930 0096 0B       		.uleb128 0xb
 1931 0097 8A8201   		.uleb128 0x410a
 1932 009a 00       		.byte	0
 1933 009b 02       		.uleb128 0x2
 1934 009c 18       		.uleb128 0x18
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 63


 1935 009d 9142     		.uleb128 0x2111
 1936 009f 18       		.uleb128 0x18
 1937 00a0 00       		.byte	0
 1938 00a1 00       		.byte	0
 1939 00a2 0C       		.uleb128 0xc
 1940 00a3 898201   		.uleb128 0x4109
 1941 00a6 01       		.byte	0x1
 1942 00a7 11       		.uleb128 0x11
 1943 00a8 01       		.uleb128 0x1
 1944 00a9 31       		.uleb128 0x31
 1945 00aa 13       		.uleb128 0x13
 1946 00ab 00       		.byte	0
 1947 00ac 00       		.byte	0
 1948 00ad 0D       		.uleb128 0xd
 1949 00ae 2E       		.uleb128 0x2e
 1950 00af 00       		.byte	0
 1951 00b0 3F       		.uleb128 0x3f
 1952 00b1 19       		.uleb128 0x19
 1953 00b2 03       		.uleb128 0x3
 1954 00b3 0E       		.uleb128 0xe
 1955 00b4 3A       		.uleb128 0x3a
 1956 00b5 0B       		.uleb128 0xb
 1957 00b6 3B       		.uleb128 0x3b
 1958 00b7 05       		.uleb128 0x5
 1959 00b8 27       		.uleb128 0x27
 1960 00b9 19       		.uleb128 0x19
 1961 00ba 49       		.uleb128 0x49
 1962 00bb 13       		.uleb128 0x13
 1963 00bc 11       		.uleb128 0x11
 1964 00bd 01       		.uleb128 0x1
 1965 00be 12       		.uleb128 0x12
 1966 00bf 06       		.uleb128 0x6
 1967 00c0 40       		.uleb128 0x40
 1968 00c1 18       		.uleb128 0x18
 1969 00c2 9742     		.uleb128 0x2117
 1970 00c4 19       		.uleb128 0x19
 1971 00c5 00       		.byte	0
 1972 00c6 00       		.byte	0
 1973 00c7 0E       		.uleb128 0xe
 1974 00c8 2E       		.uleb128 0x2e
 1975 00c9 01       		.byte	0x1
 1976 00ca 3F       		.uleb128 0x3f
 1977 00cb 19       		.uleb128 0x19
 1978 00cc 03       		.uleb128 0x3
 1979 00cd 0E       		.uleb128 0xe
 1980 00ce 3A       		.uleb128 0x3a
 1981 00cf 0B       		.uleb128 0xb
 1982 00d0 3B       		.uleb128 0x3b
 1983 00d1 05       		.uleb128 0x5
 1984 00d2 27       		.uleb128 0x27
 1985 00d3 19       		.uleb128 0x19
 1986 00d4 11       		.uleb128 0x11
 1987 00d5 01       		.uleb128 0x1
 1988 00d6 12       		.uleb128 0x12
 1989 00d7 06       		.uleb128 0x6
 1990 00d8 40       		.uleb128 0x40
 1991 00d9 18       		.uleb128 0x18
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 64


 1992 00da 9742     		.uleb128 0x2117
 1993 00dc 19       		.uleb128 0x19
 1994 00dd 01       		.uleb128 0x1
 1995 00de 13       		.uleb128 0x13
 1996 00df 00       		.byte	0
 1997 00e0 00       		.byte	0
 1998 00e1 0F       		.uleb128 0xf
 1999 00e2 05       		.uleb128 0x5
 2000 00e3 00       		.byte	0
 2001 00e4 03       		.uleb128 0x3
 2002 00e5 0E       		.uleb128 0xe
 2003 00e6 3A       		.uleb128 0x3a
 2004 00e7 0B       		.uleb128 0xb
 2005 00e8 3B       		.uleb128 0x3b
 2006 00e9 05       		.uleb128 0x5
 2007 00ea 49       		.uleb128 0x49
 2008 00eb 13       		.uleb128 0x13
 2009 00ec 02       		.uleb128 0x2
 2010 00ed 18       		.uleb128 0x18
 2011 00ee 00       		.byte	0
 2012 00ef 00       		.byte	0
 2013 00f0 10       		.uleb128 0x10
 2014 00f1 2E       		.uleb128 0x2e
 2015 00f2 01       		.byte	0x1
 2016 00f3 3F       		.uleb128 0x3f
 2017 00f4 19       		.uleb128 0x19
 2018 00f5 03       		.uleb128 0x3
 2019 00f6 0E       		.uleb128 0xe
 2020 00f7 3A       		.uleb128 0x3a
 2021 00f8 0B       		.uleb128 0xb
 2022 00f9 3B       		.uleb128 0x3b
 2023 00fa 05       		.uleb128 0x5
 2024 00fb 27       		.uleb128 0x27
 2025 00fc 19       		.uleb128 0x19
 2026 00fd 49       		.uleb128 0x49
 2027 00fe 13       		.uleb128 0x13
 2028 00ff 11       		.uleb128 0x11
 2029 0100 01       		.uleb128 0x1
 2030 0101 12       		.uleb128 0x12
 2031 0102 06       		.uleb128 0x6
 2032 0103 40       		.uleb128 0x40
 2033 0104 18       		.uleb128 0x18
 2034 0105 9742     		.uleb128 0x2117
 2035 0107 19       		.uleb128 0x19
 2036 0108 01       		.uleb128 0x1
 2037 0109 13       		.uleb128 0x13
 2038 010a 00       		.byte	0
 2039 010b 00       		.byte	0
 2040 010c 11       		.uleb128 0x11
 2041 010d 34       		.uleb128 0x34
 2042 010e 00       		.byte	0
 2043 010f 03       		.uleb128 0x3
 2044 0110 0E       		.uleb128 0xe
 2045 0111 3A       		.uleb128 0x3a
 2046 0112 0B       		.uleb128 0xb
 2047 0113 3B       		.uleb128 0x3b
 2048 0114 05       		.uleb128 0x5
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 65


 2049 0115 49       		.uleb128 0x49
 2050 0116 13       		.uleb128 0x13
 2051 0117 02       		.uleb128 0x2
 2052 0118 18       		.uleb128 0x18
 2053 0119 00       		.byte	0
 2054 011a 00       		.byte	0
 2055 011b 12       		.uleb128 0x12
 2056 011c 34       		.uleb128 0x34
 2057 011d 00       		.byte	0
 2058 011e 03       		.uleb128 0x3
 2059 011f 0E       		.uleb128 0xe
 2060 0120 3A       		.uleb128 0x3a
 2061 0121 0B       		.uleb128 0xb
 2062 0122 3B       		.uleb128 0x3b
 2063 0123 05       		.uleb128 0x5
 2064 0124 49       		.uleb128 0x49
 2065 0125 13       		.uleb128 0x13
 2066 0126 02       		.uleb128 0x2
 2067 0127 17       		.uleb128 0x17
 2068 0128 00       		.byte	0
 2069 0129 00       		.byte	0
 2070 012a 13       		.uleb128 0x13
 2071 012b 05       		.uleb128 0x5
 2072 012c 00       		.byte	0
 2073 012d 03       		.uleb128 0x3
 2074 012e 0E       		.uleb128 0xe
 2075 012f 3A       		.uleb128 0x3a
 2076 0130 0B       		.uleb128 0xb
 2077 0131 3B       		.uleb128 0x3b
 2078 0132 05       		.uleb128 0x5
 2079 0133 49       		.uleb128 0x49
 2080 0134 13       		.uleb128 0x13
 2081 0135 02       		.uleb128 0x2
 2082 0136 17       		.uleb128 0x17
 2083 0137 00       		.byte	0
 2084 0138 00       		.byte	0
 2085 0139 14       		.uleb128 0x14
 2086 013a 0F       		.uleb128 0xf
 2087 013b 00       		.byte	0
 2088 013c 0B       		.uleb128 0xb
 2089 013d 0B       		.uleb128 0xb
 2090 013e 49       		.uleb128 0x49
 2091 013f 13       		.uleb128 0x13
 2092 0140 00       		.byte	0
 2093 0141 00       		.byte	0
 2094 0142 15       		.uleb128 0x15
 2095 0143 26       		.uleb128 0x26
 2096 0144 00       		.byte	0
 2097 0145 49       		.uleb128 0x49
 2098 0146 13       		.uleb128 0x13
 2099 0147 00       		.byte	0
 2100 0148 00       		.byte	0
 2101 0149 16       		.uleb128 0x16
 2102 014a 0B       		.uleb128 0xb
 2103 014b 01       		.byte	0x1
 2104 014c 11       		.uleb128 0x11
 2105 014d 01       		.uleb128 0x1
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 66


 2106 014e 12       		.uleb128 0x12
 2107 014f 06       		.uleb128 0x6
 2108 0150 00       		.byte	0
 2109 0151 00       		.byte	0
 2110 0152 17       		.uleb128 0x17
 2111 0153 34       		.uleb128 0x34
 2112 0154 00       		.byte	0
 2113 0155 03       		.uleb128 0x3
 2114 0156 0E       		.uleb128 0xe
 2115 0157 3A       		.uleb128 0x3a
 2116 0158 0B       		.uleb128 0xb
 2117 0159 3B       		.uleb128 0x3b
 2118 015a 0B       		.uleb128 0xb
 2119 015b 49       		.uleb128 0x49
 2120 015c 13       		.uleb128 0x13
 2121 015d 3F       		.uleb128 0x3f
 2122 015e 19       		.uleb128 0x19
 2123 015f 02       		.uleb128 0x2
 2124 0160 18       		.uleb128 0x18
 2125 0161 00       		.byte	0
 2126 0162 00       		.byte	0
 2127 0163 18       		.uleb128 0x18
 2128 0164 2E       		.uleb128 0x2e
 2129 0165 00       		.byte	0
 2130 0166 3F       		.uleb128 0x3f
 2131 0167 19       		.uleb128 0x19
 2132 0168 3C       		.uleb128 0x3c
 2133 0169 19       		.uleb128 0x19
 2134 016a 6E       		.uleb128 0x6e
 2135 016b 0E       		.uleb128 0xe
 2136 016c 03       		.uleb128 0x3
 2137 016d 0E       		.uleb128 0xe
 2138 016e 3A       		.uleb128 0x3a
 2139 016f 0B       		.uleb128 0xb
 2140 0170 3B       		.uleb128 0x3b
 2141 0171 0B       		.uleb128 0xb
 2142 0172 00       		.byte	0
 2143 0173 00       		.byte	0
 2144 0174 00       		.byte	0
 2145              		.section	.debug_loc,"",%progbits
 2146              	.Ldebug_loc0:
 2147              	.LLST0:
 2148 0000 08000000 		.4byte	.LVL1
 2149 0004 36000000 		.4byte	.LVL4
 2150 0008 0100     		.2byte	0x1
 2151 000a 54       		.byte	0x54
 2152 000b 00000000 		.4byte	0
 2153 000f 00000000 		.4byte	0
 2154              	.LLST1:
 2155 0013 08000000 		.4byte	.LVL8
 2156 0017 2E000000 		.4byte	.LVL11
 2157 001b 0100     		.2byte	0x1
 2158 001d 54       		.byte	0x54
 2159 001e 00000000 		.4byte	0
 2160 0022 00000000 		.4byte	0
 2161              	.LLST2:
 2162 0026 00000000 		.4byte	.LVL16
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 67


 2163 002a 10000000 		.4byte	.LVL18
 2164 002e 0200     		.2byte	0x2
 2165 0030 30       		.byte	0x30
 2166 0031 9F       		.byte	0x9f
 2167 0032 10000000 		.4byte	.LVL18
 2168 0036 18000000 		.4byte	.LVL19
 2169 003a 0100     		.2byte	0x1
 2170 003c 50       		.byte	0x50
 2171 003d 18000000 		.4byte	.LVL19
 2172 0041 1C000000 		.4byte	.LVL20
 2173 0045 0200     		.2byte	0x2
 2174 0047 30       		.byte	0x30
 2175 0048 9F       		.byte	0x9f
 2176 0049 1C000000 		.4byte	.LVL20
 2177 004d 28000000 		.4byte	.LFE11
 2178 0051 0100     		.2byte	0x1
 2179 0053 50       		.byte	0x50
 2180 0054 00000000 		.4byte	0
 2181 0058 00000000 		.4byte	0
 2182              	.LLST3:
 2183 005c 06000000 		.4byte	.LVL25
 2184 0060 1D000000 		.4byte	.LVL26-1
 2185 0064 0100     		.2byte	0x1
 2186 0066 50       		.byte	0x50
 2187 0067 00000000 		.4byte	0
 2188 006b 00000000 		.4byte	0
 2189              	.LLST4:
 2190 006f 00000000 		.4byte	.LVL33
 2191 0073 0E000000 		.4byte	.LVL35
 2192 0077 0100     		.2byte	0x1
 2193 0079 50       		.byte	0x50
 2194 007a 0E000000 		.4byte	.LVL35
 2195 007e 18000000 		.4byte	.LVL39
 2196 0082 0100     		.2byte	0x1
 2197 0084 55       		.byte	0x55
 2198 0085 18000000 		.4byte	.LVL39
 2199 0089 1A000000 		.4byte	.LVL40
 2200 008d 0100     		.2byte	0x1
 2201 008f 50       		.byte	0x50
 2202 0090 1A000000 		.4byte	.LVL40
 2203 0094 20000000 		.4byte	.LVL42
 2204 0098 0100     		.2byte	0x1
 2205 009a 55       		.byte	0x55
 2206 009b 20000000 		.4byte	.LVL42
 2207 009f 28000000 		.4byte	.LFE22
 2208 00a3 0400     		.2byte	0x4
 2209 00a5 F3       		.byte	0xf3
 2210 00a6 01       		.uleb128 0x1
 2211 00a7 50       		.byte	0x50
 2212 00a8 9F       		.byte	0x9f
 2213 00a9 00000000 		.4byte	0
 2214 00ad 00000000 		.4byte	0
 2215              	.LLST5:
 2216 00b1 04000000 		.4byte	.LVL34
 2217 00b5 0E000000 		.4byte	.LVL35
 2218 00b9 0200     		.2byte	0x2
 2219 00bb 30       		.byte	0x30
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 68


 2220 00bc 9F       		.byte	0x9f
 2221 00bd 0E000000 		.4byte	.LVL35
 2222 00c1 14000000 		.4byte	.LVL37
 2223 00c5 0100     		.2byte	0x1
 2224 00c7 54       		.byte	0x54
 2225 00c8 16000000 		.4byte	.LVL38
 2226 00cc 18000000 		.4byte	.LVL39
 2227 00d0 0100     		.2byte	0x1
 2228 00d2 54       		.byte	0x54
 2229 00d3 18000000 		.4byte	.LVL39
 2230 00d7 1A000000 		.4byte	.LVL40
 2231 00db 0200     		.2byte	0x2
 2232 00dd 30       		.byte	0x30
 2233 00de 9F       		.byte	0x9f
 2234 00df 1A000000 		.4byte	.LVL40
 2235 00e3 20000000 		.4byte	.LVL41
 2236 00e7 0100     		.2byte	0x1
 2237 00e9 54       		.byte	0x54
 2238 00ea 00000000 		.4byte	0
 2239 00ee 00000000 		.4byte	0
 2240              	.LLST6:
 2241 00f2 00000000 		.4byte	.LVL43
 2242 00f6 10000000 		.4byte	.LVL45
 2243 00fa 0100     		.2byte	0x1
 2244 00fc 50       		.byte	0x50
 2245 00fd 10000000 		.4byte	.LVL45
 2246 0101 1C000000 		.4byte	.LVL49
 2247 0105 0100     		.2byte	0x1
 2248 0107 56       		.byte	0x56
 2249 0108 1C000000 		.4byte	.LVL49
 2250 010c 1E000000 		.4byte	.LVL50
 2251 0110 0100     		.2byte	0x1
 2252 0112 50       		.byte	0x50
 2253 0113 1E000000 		.4byte	.LVL50
 2254 0117 22000000 		.4byte	.LVL52
 2255 011b 0100     		.2byte	0x1
 2256 011d 56       		.byte	0x56
 2257 011e 22000000 		.4byte	.LVL52
 2258 0122 28000000 		.4byte	.LFE23
 2259 0126 0400     		.2byte	0x4
 2260 0128 F3       		.byte	0xf3
 2261 0129 01       		.uleb128 0x1
 2262 012a 50       		.byte	0x50
 2263 012b 9F       		.byte	0x9f
 2264 012c 00000000 		.4byte	0
 2265 0130 00000000 		.4byte	0
 2266              	.LLST7:
 2267 0134 00000000 		.4byte	.LVL43
 2268 0138 10000000 		.4byte	.LVL45
 2269 013c 0100     		.2byte	0x1
 2270 013e 51       		.byte	0x51
 2271 013f 10000000 		.4byte	.LVL45
 2272 0143 1C000000 		.4byte	.LVL49
 2273 0147 0400     		.2byte	0x4
 2274 0149 F3       		.byte	0xf3
 2275 014a 01       		.uleb128 0x1
 2276 014b 51       		.byte	0x51
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 69


 2277 014c 9F       		.byte	0x9f
 2278 014d 1C000000 		.4byte	.LVL49
 2279 0151 1E000000 		.4byte	.LVL50
 2280 0155 0100     		.2byte	0x1
 2281 0157 51       		.byte	0x51
 2282 0158 1E000000 		.4byte	.LVL50
 2283 015c 28000000 		.4byte	.LFE23
 2284 0160 0400     		.2byte	0x4
 2285 0162 F3       		.byte	0xf3
 2286 0163 01       		.uleb128 0x1
 2287 0164 51       		.byte	0x51
 2288 0165 9F       		.byte	0x9f
 2289 0166 00000000 		.4byte	0
 2290 016a 00000000 		.4byte	0
 2291              	.LLST8:
 2292 016e 06000000 		.4byte	.LVL44
 2293 0172 10000000 		.4byte	.LVL45
 2294 0176 0200     		.2byte	0x2
 2295 0178 30       		.byte	0x30
 2296 0179 9F       		.byte	0x9f
 2297 017a 10000000 		.4byte	.LVL45
 2298 017e 18000000 		.4byte	.LVL47
 2299 0182 0100     		.2byte	0x1
 2300 0184 54       		.byte	0x54
 2301 0185 1A000000 		.4byte	.LVL48
 2302 0189 1C000000 		.4byte	.LVL49
 2303 018d 0100     		.2byte	0x1
 2304 018f 54       		.byte	0x54
 2305 0190 1C000000 		.4byte	.LVL49
 2306 0194 1E000000 		.4byte	.LVL50
 2307 0198 0200     		.2byte	0x2
 2308 019a 30       		.byte	0x30
 2309 019b 9F       		.byte	0x9f
 2310 019c 1E000000 		.4byte	.LVL50
 2311 01a0 22000000 		.4byte	.LVL51
 2312 01a4 0100     		.2byte	0x1
 2313 01a6 54       		.byte	0x54
 2314 01a7 00000000 		.4byte	0
 2315 01ab 00000000 		.4byte	0
 2316              	.LLST9:
 2317 01af 00000000 		.4byte	.LVL53
 2318 01b3 0D000000 		.4byte	.LVL54-1
 2319 01b7 0100     		.2byte	0x1
 2320 01b9 50       		.byte	0x50
 2321 01ba 0D000000 		.4byte	.LVL54-1
 2322 01be 20000000 		.4byte	.LFE24
 2323 01c2 0400     		.2byte	0x4
 2324 01c4 F3       		.byte	0xf3
 2325 01c5 01       		.uleb128 0x1
 2326 01c6 50       		.byte	0x50
 2327 01c7 9F       		.byte	0x9f
 2328 01c8 00000000 		.4byte	0
 2329 01cc 00000000 		.4byte	0
 2330              	.LLST10:
 2331 01d0 06000000 		.4byte	.LVL57
 2332 01d4 0E000000 		.4byte	.LVL58
 2333 01d8 0100     		.2byte	0x1
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 70


 2334 01da 53       		.byte	0x53
 2335 01db 12000000 		.4byte	.LVL59
 2336 01df 16000000 		.4byte	.LVL60
 2337 01e3 0100     		.2byte	0x1
 2338 01e5 53       		.byte	0x53
 2339 01e6 18000000 		.4byte	.LVL61
 2340 01ea 20000000 		.4byte	.LFE25
 2341 01ee 0100     		.2byte	0x1
 2342 01f0 50       		.byte	0x50
 2343 01f1 00000000 		.4byte	0
 2344 01f5 00000000 		.4byte	0
 2345              	.LLST11:
 2346 01f9 06000000 		.4byte	.LVL62
 2347 01fd 1D000000 		.4byte	.LVL63-1
 2348 0201 0100     		.2byte	0x1
 2349 0203 50       		.byte	0x50
 2350 0204 00000000 		.4byte	0
 2351 0208 00000000 		.4byte	0
 2352              	.LLST12:
 2353 020c 00000000 		.4byte	.LVL64
 2354 0210 3E000000 		.4byte	.LVL69
 2355 0214 0100     		.2byte	0x1
 2356 0216 50       		.byte	0x50
 2357 0217 3E000000 		.4byte	.LVL69
 2358 021b 60000000 		.4byte	.LFE27
 2359 021f 0400     		.2byte	0x4
 2360 0221 F3       		.byte	0xf3
 2361 0222 01       		.uleb128 0x1
 2362 0223 50       		.byte	0x50
 2363 0224 9F       		.byte	0x9f
 2364 0225 00000000 		.4byte	0
 2365 0229 00000000 		.4byte	0
 2366              	.LLST13:
 2367 022d 26000000 		.4byte	.LVL65
 2368 0231 2A000000 		.4byte	.LVL66
 2369 0235 0100     		.2byte	0x1
 2370 0237 53       		.byte	0x53
 2371 0238 36000000 		.4byte	.LVL67
 2372 023c 3C000000 		.4byte	.LVL68
 2373 0240 0100     		.2byte	0x1
 2374 0242 52       		.byte	0x52
 2375 0243 00000000 		.4byte	0
 2376 0247 00000000 		.4byte	0
 2377              		.section	.debug_aranges,"",%progbits
 2378 0000 EC000000 		.4byte	0xec
 2379 0004 0200     		.2byte	0x2
 2380 0006 00000000 		.4byte	.Ldebug_info0
 2381 000a 04       		.byte	0x4
 2382 000b 00       		.byte	0
 2383 000c 0000     		.2byte	0
 2384 000e 0000     		.2byte	0
 2385 0010 00000000 		.4byte	.LFB3
 2386 0014 34000000 		.4byte	.LFE3-.LFB3
 2387 0018 00000000 		.4byte	.LFB4
 2388 001c 44000000 		.4byte	.LFE4-.LFB4
 2389 0020 00000000 		.4byte	.LFB2
 2390 0024 20000000 		.4byte	.LFE2-.LFB2
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 71


 2391 0028 00000000 		.4byte	.LFB5
 2392 002c 3C000000 		.4byte	.LFE5-.LFB5
 2393 0030 00000000 		.4byte	.LFB6
 2394 0034 04000000 		.4byte	.LFE6-.LFB6
 2395 0038 00000000 		.4byte	.LFB7
 2396 003c 02000000 		.4byte	.LFE7-.LFB7
 2397 0040 00000000 		.4byte	.LFB8
 2398 0044 0C000000 		.4byte	.LFE8-.LFB8
 2399 0048 00000000 		.4byte	.LFB9
 2400 004c 0C000000 		.4byte	.LFE9-.LFB9
 2401 0050 00000000 		.4byte	.LFB10
 2402 0054 10000000 		.4byte	.LFE10-.LFB10
 2403 0058 00000000 		.4byte	.LFB11
 2404 005c 28000000 		.4byte	.LFE11-.LFB11
 2405 0060 00000000 		.4byte	.LFB12
 2406 0064 12000000 		.4byte	.LFE12-.LFB12
 2407 0068 00000000 		.4byte	.LFB13
 2408 006c 14000000 		.4byte	.LFE13-.LFB13
 2409 0070 00000000 		.4byte	.LFB14
 2410 0074 24000000 		.4byte	.LFE14-.LFB14
 2411 0078 00000000 		.4byte	.LFB15
 2412 007c 02000000 		.4byte	.LFE15-.LFB15
 2413 0080 00000000 		.4byte	.LFB16
 2414 0084 0C000000 		.4byte	.LFE16-.LFB16
 2415 0088 00000000 		.4byte	.LFB17
 2416 008c 0C000000 		.4byte	.LFE17-.LFB17
 2417 0090 00000000 		.4byte	.LFB18
 2418 0094 0C000000 		.4byte	.LFE18-.LFB18
 2419 0098 00000000 		.4byte	.LFB19
 2420 009c 18000000 		.4byte	.LFE19-.LFB19
 2421 00a0 00000000 		.4byte	.LFB20
 2422 00a4 0C000000 		.4byte	.LFE20-.LFB20
 2423 00a8 00000000 		.4byte	.LFB21
 2424 00ac 18000000 		.4byte	.LFE21-.LFB21
 2425 00b0 00000000 		.4byte	.LFB22
 2426 00b4 28000000 		.4byte	.LFE22-.LFB22
 2427 00b8 00000000 		.4byte	.LFB23
 2428 00bc 28000000 		.4byte	.LFE23-.LFB23
 2429 00c0 00000000 		.4byte	.LFB24
 2430 00c4 20000000 		.4byte	.LFE24-.LFB24
 2431 00c8 00000000 		.4byte	.LFB25
 2432 00cc 20000000 		.4byte	.LFE25-.LFB25
 2433 00d0 00000000 		.4byte	.LFB26
 2434 00d4 24000000 		.4byte	.LFE26-.LFB26
 2435 00d8 00000000 		.4byte	.LFB27
 2436 00dc 60000000 		.4byte	.LFE27-.LFB27
 2437 00e0 00000000 		.4byte	.LFB28
 2438 00e4 02000000 		.4byte	.LFE28-.LFB28
 2439 00e8 00000000 		.4byte	0
 2440 00ec 00000000 		.4byte	0
 2441              		.section	.debug_ranges,"",%progbits
 2442              	.Ldebug_ranges0:
 2443 0000 00000000 		.4byte	.LFB3
 2444 0004 34000000 		.4byte	.LFE3
 2445 0008 00000000 		.4byte	.LFB4
 2446 000c 44000000 		.4byte	.LFE4
 2447 0010 00000000 		.4byte	.LFB2
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 72


 2448 0014 20000000 		.4byte	.LFE2
 2449 0018 00000000 		.4byte	.LFB5
 2450 001c 3C000000 		.4byte	.LFE5
 2451 0020 00000000 		.4byte	.LFB6
 2452 0024 04000000 		.4byte	.LFE6
 2453 0028 00000000 		.4byte	.LFB7
 2454 002c 02000000 		.4byte	.LFE7
 2455 0030 00000000 		.4byte	.LFB8
 2456 0034 0C000000 		.4byte	.LFE8
 2457 0038 00000000 		.4byte	.LFB9
 2458 003c 0C000000 		.4byte	.LFE9
 2459 0040 00000000 		.4byte	.LFB10
 2460 0044 10000000 		.4byte	.LFE10
 2461 0048 00000000 		.4byte	.LFB11
 2462 004c 28000000 		.4byte	.LFE11
 2463 0050 00000000 		.4byte	.LFB12
 2464 0054 12000000 		.4byte	.LFE12
 2465 0058 00000000 		.4byte	.LFB13
 2466 005c 14000000 		.4byte	.LFE13
 2467 0060 00000000 		.4byte	.LFB14
 2468 0064 24000000 		.4byte	.LFE14
 2469 0068 00000000 		.4byte	.LFB15
 2470 006c 02000000 		.4byte	.LFE15
 2471 0070 00000000 		.4byte	.LFB16
 2472 0074 0C000000 		.4byte	.LFE16
 2473 0078 00000000 		.4byte	.LFB17
 2474 007c 0C000000 		.4byte	.LFE17
 2475 0080 00000000 		.4byte	.LFB18
 2476 0084 0C000000 		.4byte	.LFE18
 2477 0088 00000000 		.4byte	.LFB19
 2478 008c 18000000 		.4byte	.LFE19
 2479 0090 00000000 		.4byte	.LFB20
 2480 0094 0C000000 		.4byte	.LFE20
 2481 0098 00000000 		.4byte	.LFB21
 2482 009c 18000000 		.4byte	.LFE21
 2483 00a0 00000000 		.4byte	.LFB22
 2484 00a4 28000000 		.4byte	.LFE22
 2485 00a8 00000000 		.4byte	.LFB23
 2486 00ac 28000000 		.4byte	.LFE23
 2487 00b0 00000000 		.4byte	.LFB24
 2488 00b4 20000000 		.4byte	.LFE24
 2489 00b8 00000000 		.4byte	.LFB25
 2490 00bc 20000000 		.4byte	.LFE25
 2491 00c0 00000000 		.4byte	.LFB26
 2492 00c4 24000000 		.4byte	.LFE26
 2493 00c8 00000000 		.4byte	.LFB27
 2494 00cc 60000000 		.4byte	.LFE27
 2495 00d0 00000000 		.4byte	.LFB28
 2496 00d4 02000000 		.4byte	.LFE28
 2497 00d8 00000000 		.4byte	0
 2498 00dc 00000000 		.4byte	0
 2499              		.section	.debug_line,"",%progbits
 2500              	.Ldebug_line0:
 2501 0000 DA020000 		.section	.debug_str,"MS",%progbits,1
 2501      02005F00 
 2501      00000201 
 2501      FB0E0D00 
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 73


 2501      01010101 
 2502              	.LASF10:
 2503 0000 75696E74 		.ascii	"uint16\000"
 2503      313600
 2504              	.LASF62:
 2505 0007 43794578 		.ascii	"CyExitCriticalSection\000"
 2505      69744372 
 2505      69746963 
 2505      616C5365 
 2505      6374696F 
 2506              	.LASF43:
 2507 001d 74784461 		.ascii	"txDataByte\000"
 2507      74614279 
 2507      746500
 2508              	.LASF33:
 2509 0028 75617274 		.ascii	"uart_GetRxBufferSize\000"
 2509      5F476574 
 2509      52784275 
 2509      66666572 
 2509      53697A65 
 2510              	.LASF58:
 2511 003d 74785065 		.ascii	"txPeriod\000"
 2511      72696F64 
 2511      00
 2512              	.LASF30:
 2513 0046 75617274 		.ascii	"uart_GetChar\000"
 2513      5F476574 
 2513      43686172 
 2513      00
 2514              	.LASF48:
 2515 0053 73747269 		.ascii	"string\000"
 2515      6E6700
 2516              	.LASF50:
 2517 005a 75617274 		.ascii	"uart_PutArray\000"
 2517      5F507574 
 2517      41727261 
 2517      7900
 2518              	.LASF64:
 2519 0068 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2519      43313120 
 2519      352E342E 
 2519      31203230 
 2519      31363036 
 2520 009b 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 2520      20726576 
 2520      6973696F 
 2520      6E203233 
 2520      37373135 
 2521 00ce 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 2521      66756E63 
 2521      74696F6E 
 2521      2D736563 
 2521      74696F6E 
 2522              	.LASF7:
 2523 00f6 6C6F6E67 		.ascii	"long long unsigned int\000"
 2523      206C6F6E 
 2523      6720756E 
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 74


 2523      7369676E 
 2523      65642069 
 2524              	.LASF68:
 2525 010d 75617274 		.ascii	"uart_initVar\000"
 2525      5F696E69 
 2525      74566172 
 2525      00
 2526              	.LASF66:
 2527 011a 433A5C55 		.ascii	"C:\\Users\\Jacob\\Documents\\Junior\\EGR 304\\EGR30"
 2527      73657273 
 2527      5C4A6163 
 2527      6F625C44 
 2527      6F63756D 
 2528 0147 345C5065 		.ascii	"4\\PeacefulPillow.cydsn\000"
 2528      61636566 
 2528      756C5069 
 2528      6C6C6F77 
 2528      2E637964 
 2529              	.LASF42:
 2530 015e 75617274 		.ascii	"uart_WriteTxData\000"
 2530      5F577269 
 2530      74655478 
 2530      44617461 
 2530      00
 2531              	.LASF6:
 2532 016f 6C6F6E67 		.ascii	"long long int\000"
 2532      206C6F6E 
 2532      6720696E 
 2532      7400
 2533              	.LASF0:
 2534 017d 7369676E 		.ascii	"signed char\000"
 2534      65642063 
 2534      68617200 
 2535              	.LASF55:
 2536 0189 75617274 		.ascii	"uart_SendBreak\000"
 2536      5F53656E 
 2536      64427265 
 2536      616B00
 2537              	.LASF61:
 2538 0198 75617274 		.ascii	"uart_IntClock_StartEx\000"
 2538      5F496E74 
 2538      436C6F63 
 2538      6B5F5374 
 2538      61727445 
 2539              	.LASF36:
 2540 01ae 75617274 		.ascii	"uart_SetRxAddressMode\000"
 2540      5F536574 
 2540      52784164 
 2540      64726573 
 2540      734D6F64 
 2541              	.LASF20:
 2542 01c4 75617274 		.ascii	"uart_Stop\000"
 2542      5F53746F 
 2542      7000
 2543              	.LASF4:
 2544 01ce 6C6F6E67 		.ascii	"long int\000"
 2544      20696E74 
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 75


 2544      00
 2545              	.LASF9:
 2546 01d7 75696E74 		.ascii	"uint8\000"
 2546      3800
 2547              	.LASF23:
 2548 01dd 75617274 		.ascii	"uart_SetRxInterruptMode\000"
 2548      5F536574 
 2548      5278496E 
 2548      74657272 
 2548      7570744D 
 2549              	.LASF12:
 2550 01f5 646F7562 		.ascii	"double\000"
 2550      6C6500
 2551              	.LASF37:
 2552 01fc 61646472 		.ascii	"addressMode\000"
 2552      6573734D 
 2552      6F646500 
 2553              	.LASF24:
 2554 0208 636F6E74 		.ascii	"control\000"
 2554      726F6C00 
 2555              	.LASF45:
 2556 0210 75617274 		.ascii	"uart_ReadTxStatus\000"
 2556      5F526561 
 2556      64547853 
 2556      74617475 
 2556      7300
 2557              	.LASF56:
 2558 0222 7265744D 		.ascii	"retMode\000"
 2558      6F646500 
 2559              	.LASF8:
 2560 022a 756E7369 		.ascii	"unsigned int\000"
 2560      676E6564 
 2560      20696E74 
 2560      00
 2561              	.LASF5:
 2562 0237 6C6F6E67 		.ascii	"long unsigned int\000"
 2562      20756E73 
 2562      69676E65 
 2562      6420696E 
 2562      7400
 2563              	.LASF60:
 2564 0249 4379456E 		.ascii	"CyEnterCriticalSection\000"
 2564      74657243 
 2564      72697469 
 2564      63616C53 
 2564      65637469 
 2565              	.LASF34:
 2566 0260 73697A65 		.ascii	"size\000"
 2566      00
 2567              	.LASF3:
 2568 0265 73686F72 		.ascii	"short unsigned int\000"
 2568      7420756E 
 2568      7369676E 
 2568      65642069 
 2568      6E7400
 2569              	.LASF63:
 2570 0278 75617274 		.ascii	"uart_IntClock_Stop\000"
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 76


 2570      5F496E74 
 2570      436C6F63 
 2570      6B5F5374 
 2570      6F7000
 2571              	.LASF49:
 2572 028b 62756649 		.ascii	"bufIndex\000"
 2572      6E646578 
 2572      00
 2573              	.LASF25:
 2574 0294 696E7453 		.ascii	"intSrc\000"
 2574      726300
 2575              	.LASF46:
 2576 029b 75617274 		.ascii	"uart_PutChar\000"
 2576      5F507574 
 2576      43686172 
 2576      00
 2577              	.LASF54:
 2578 02a8 75617274 		.ascii	"uart_ClearTxBuffer\000"
 2578      5F436C65 
 2578      61725478 
 2578      42756666 
 2578      657200
 2579              	.LASF27:
 2580 02bb 75617274 		.ascii	"uart_ReadRxData\000"
 2580      5F526561 
 2580      64527844 
 2580      61746100 
 2581              	.LASF57:
 2582 02cb 746D7053 		.ascii	"tmpStat\000"
 2582      74617400 
 2583              	.LASF44:
 2584 02d3 75617274 		.ascii	"uart_ReadControlRegister\000"
 2584      5F526561 
 2584      64436F6E 
 2584      74726F6C 
 2584      52656769 
 2585              	.LASF17:
 2586 02ec 73697A65 		.ascii	"sizetype\000"
 2586      74797065 
 2586      00
 2587              	.LASF16:
 2588 02f5 6C6F6E67 		.ascii	"long double\000"
 2588      20646F75 
 2588      626C6500 
 2589              	.LASF39:
 2590 0301 61646472 		.ascii	"address\000"
 2590      65737300 
 2591              	.LASF41:
 2592 0309 75617274 		.ascii	"uart_SetTxInterruptMode\000"
 2592      5F536574 
 2592      5478496E 
 2592      74657272 
 2592      7570744D 
 2593              	.LASF32:
 2594 0321 75617274 		.ascii	"uart_GetByte\000"
 2594      5F476574 
 2594      42797465 
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 77


 2594      00
 2595              	.LASF31:
 2596 032e 72785374 		.ascii	"rxStatus\000"
 2596      61747573 
 2596      00
 2597              	.LASF52:
 2598 0337 75617274 		.ascii	"uart_PutCRLF\000"
 2598      5F507574 
 2598      43524C46 
 2598      00
 2599              	.LASF11:
 2600 0344 666C6F61 		.ascii	"float\000"
 2600      7400
 2601              	.LASF67:
 2602 034a 75617274 		.ascii	"uart_Init\000"
 2602      5F496E69 
 2602      7400
 2603              	.LASF28:
 2604 0354 75617274 		.ascii	"uart_ReadRxStatus\000"
 2604      5F526561 
 2604      64527853 
 2604      74617475 
 2604      7300
 2605              	.LASF18:
 2606 0366 75617274 		.ascii	"uart_Enable\000"
 2606      5F456E61 
 2606      626C6500 
 2607              	.LASF15:
 2608 0372 72656738 		.ascii	"reg8\000"
 2608      00
 2609              	.LASF65:
 2610 0377 47656E65 		.ascii	"Generated_Source\\PSoC4\\uart.c\000"
 2610      72617465 
 2610      645F536F 
 2610      75726365 
 2610      5C50536F 
 2611              	.LASF1:
 2612 0395 756E7369 		.ascii	"unsigned char\000"
 2612      676E6564 
 2612      20636861 
 2612      7200
 2613              	.LASF38:
 2614 03a3 75617274 		.ascii	"uart_SetRxAddress1\000"
 2614      5F536574 
 2614      52784164 
 2614      64726573 
 2614      733100
 2615              	.LASF40:
 2616 03b6 75617274 		.ascii	"uart_SetRxAddress2\000"
 2616      5F536574 
 2616      52784164 
 2616      64726573 
 2616      733200
 2617              	.LASF2:
 2618 03c9 73686F72 		.ascii	"short int\000"
 2618      7420696E 
 2618      7400
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\ccZMNUa1.s 			page 78


 2619              	.LASF35:
 2620 03d3 75617274 		.ascii	"uart_ClearRxBuffer\000"
 2620      5F436C65 
 2620      61725278 
 2620      42756666 
 2620      657200
 2621              	.LASF47:
 2622 03e6 75617274 		.ascii	"uart_PutString\000"
 2622      5F507574 
 2622      53747269 
 2622      6E6700
 2623              	.LASF19:
 2624 03f5 75617274 		.ascii	"uart_Start\000"
 2624      5F537461 
 2624      727400
 2625              	.LASF51:
 2626 0400 62797465 		.ascii	"byteCount\000"
 2626      436F756E 
 2626      7400
 2627              	.LASF26:
 2628 040a 72784461 		.ascii	"rxData\000"
 2628      746100
 2629              	.LASF14:
 2630 0411 63686172 		.ascii	"char\000"
 2630      00
 2631              	.LASF53:
 2632 0416 75617274 		.ascii	"uart_GetTxBufferSize\000"
 2632      5F476574 
 2632      54784275 
 2632      66666572 
 2632      53697A65 
 2633              	.LASF13:
 2634 042b 63686172 		.ascii	"char8\000"
 2634      3800
 2635              	.LASF21:
 2636 0431 656E6162 		.ascii	"enableInterrupts\000"
 2636      6C65496E 
 2636      74657272 
 2636      75707473 
 2636      00
 2637              	.LASF29:
 2638 0442 73746174 		.ascii	"status\000"
 2638      757300
 2639              	.LASF22:
 2640 0449 75617274 		.ascii	"uart_WriteControlRegister\000"
 2640      5F577269 
 2640      7465436F 
 2640      6E74726F 
 2640      6C526567 
 2641              	.LASF59:
 2642 0463 75617274 		.ascii	"uart_SetTxAddressMode\000"
 2642      5F536574 
 2642      54784164 
 2642      64726573 
 2642      734D6F64 
 2643              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
