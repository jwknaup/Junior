ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"adc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	adc_initVar
  20              		.bss
  21              		.type	adc_initVar, %object
  22              		.size	adc_initVar, 1
  23              	adc_initVar:
  24 0000 00       		.space	1
  25              		.comm	adc_offset,4,4
  26              		.comm	adc_countsPer10Volt,8,4
  27              		.section	.rodata
  28              		.align	2
  29              		.type	adc_channelsConfig, %object
  30              		.size	adc_channelsConfig, 8
  31              	adc_channelsConfig:
  32 0000 00000000 		.space	8
  32      00000000 
  33              		.section	.text.adc_Start,"ax",%progbits
  34              		.align	2
  35              		.global	adc_Start
  36              		.code	16
  37              		.thumb_func
  38              		.type	adc_Start, %function
  39              	adc_Start:
  40              	.LFB2:
  41              		.file 1 "Generated_Source\\PSoC4\\adc.c"
   1:Generated_Source\PSoC4/adc.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/adc.c **** * File Name: adc.c
   3:Generated_Source\PSoC4/adc.c **** * Version 2.50
   4:Generated_Source\PSoC4/adc.c **** *
   5:Generated_Source\PSoC4/adc.c **** * Description:
   6:Generated_Source\PSoC4/adc.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:Generated_Source\PSoC4/adc.c **** *  Approximation ADC Component Component.
   8:Generated_Source\PSoC4/adc.c **** *
   9:Generated_Source\PSoC4/adc.c **** * Note:
  10:Generated_Source\PSoC4/adc.c **** *
  11:Generated_Source\PSoC4/adc.c **** ********************************************************************************
  12:Generated_Source\PSoC4/adc.c **** * Copyright 2008-2017, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/adc.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/adc.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/adc.c **** * the software package with which this file was provided.
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 2


  16:Generated_Source\PSoC4/adc.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/adc.c **** 
  18:Generated_Source\PSoC4/adc.c **** #include "adc.h"
  19:Generated_Source\PSoC4/adc.c **** 
  20:Generated_Source\PSoC4/adc.c **** 
  21:Generated_Source\PSoC4/adc.c **** /***************************************
  22:Generated_Source\PSoC4/adc.c **** * Global data allocation
  23:Generated_Source\PSoC4/adc.c **** ***************************************/
  24:Generated_Source\PSoC4/adc.c **** uint8 adc_initVar = 0u;
  25:Generated_Source\PSoC4/adc.c **** volatile int16 adc_offset[adc_TOTAL_CHANNELS_NUM];
  26:Generated_Source\PSoC4/adc.c **** volatile int32 adc_countsPer10Volt[adc_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:Generated_Source\PSoC4/adc.c **** 
  28:Generated_Source\PSoC4/adc.c **** 
  29:Generated_Source\PSoC4/adc.c **** /***************************************
  30:Generated_Source\PSoC4/adc.c **** * Local data allocation
  31:Generated_Source\PSoC4/adc.c **** ***************************************/
  32:Generated_Source\PSoC4/adc.c **** /* Channels configuration generated by customiser */
  33:Generated_Source\PSoC4/adc.c **** static const uint32 CYCODE adc_channelsConfig[] = { 0x00000000u, 0x00000000u };
  34:Generated_Source\PSoC4/adc.c **** 
  35:Generated_Source\PSoC4/adc.c **** 
  36:Generated_Source\PSoC4/adc.c **** /*******************************************************************************
  37:Generated_Source\PSoC4/adc.c **** * Function Name: adc_Start
  38:Generated_Source\PSoC4/adc.c **** ********************************************************************************
  39:Generated_Source\PSoC4/adc.c **** *
  40:Generated_Source\PSoC4/adc.c **** * Summary:
  41:Generated_Source\PSoC4/adc.c **** *  Performs all required initialization for this component
  42:Generated_Source\PSoC4/adc.c **** *  and enables the power. The power will be set to the appropriate
  43:Generated_Source\PSoC4/adc.c **** *  power based on the clock frequency.
  44:Generated_Source\PSoC4/adc.c **** *
  45:Generated_Source\PSoC4/adc.c **** * Parameters:
  46:Generated_Source\PSoC4/adc.c **** *  None.
  47:Generated_Source\PSoC4/adc.c **** *
  48:Generated_Source\PSoC4/adc.c **** * Return:
  49:Generated_Source\PSoC4/adc.c **** *  None.
  50:Generated_Source\PSoC4/adc.c **** *
  51:Generated_Source\PSoC4/adc.c **** * Global variables:
  52:Generated_Source\PSoC4/adc.c **** *  The adc_initVar variable is used to indicate when/if initial
  53:Generated_Source\PSoC4/adc.c **** *  configuration of this component has happened. The variable is initialized to
  54:Generated_Source\PSoC4/adc.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:Generated_Source\PSoC4/adc.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:Generated_Source\PSoC4/adc.c **** *  adc_Start() routine.
  57:Generated_Source\PSoC4/adc.c **** *  If re-initialization of the component is required the variable should be set
  58:Generated_Source\PSoC4/adc.c **** *  to zero before call of adc_Start() routine, or the user may call
  59:Generated_Source\PSoC4/adc.c **** *  adc_Init() and adc_Enable() as done in the
  60:Generated_Source\PSoC4/adc.c **** *  adc_Start() routine.
  61:Generated_Source\PSoC4/adc.c **** *
  62:Generated_Source\PSoC4/adc.c **** *******************************************************************************/
  63:Generated_Source\PSoC4/adc.c **** void adc_Start(void)
  64:Generated_Source\PSoC4/adc.c **** {
  42              		.loc 1 64 0
  43              		.cfi_startproc
  44              		@ args = 0, pretend = 0, frame = 0
  45              		@ frame_needed = 1, uses_anonymous_args = 0
  46 0000 80B5     		push	{r7, lr}
  47              		.cfi_def_cfa_offset 8
  48              		.cfi_offset 7, -8
  49              		.cfi_offset 14, -4
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 3


  50 0002 00AF     		add	r7, sp, #0
  51              		.cfi_def_cfa_register 7
  65:Generated_Source\PSoC4/adc.c ****     /* If not Initialized then initialize all required hardware and software */
  66:Generated_Source\PSoC4/adc.c ****     if(adc_initVar == 0u)
  52              		.loc 1 66 0
  53 0004 064B     		ldr	r3, .L3
  54 0006 1B78     		ldrb	r3, [r3]
  55 0008 002B     		cmp	r3, #0
  56 000a 04D1     		bne	.L2
  67:Generated_Source\PSoC4/adc.c ****     {
  68:Generated_Source\PSoC4/adc.c ****         adc_Init();
  57              		.loc 1 68 0
  58 000c FFF7FEFF 		bl	adc_Init
  69:Generated_Source\PSoC4/adc.c ****         adc_initVar = 1u;
  59              		.loc 1 69 0
  60 0010 034B     		ldr	r3, .L3
  61 0012 0122     		movs	r2, #1
  62 0014 1A70     		strb	r2, [r3]
  63              	.L2:
  70:Generated_Source\PSoC4/adc.c ****     }
  71:Generated_Source\PSoC4/adc.c ****     adc_Enable();
  64              		.loc 1 71 0
  65 0016 FFF7FEFF 		bl	adc_Enable
  72:Generated_Source\PSoC4/adc.c **** }
  66              		.loc 1 72 0
  67 001a C046     		nop
  68 001c BD46     		mov	sp, r7
  69              		@ sp needed
  70 001e 80BD     		pop	{r7, pc}
  71              	.L4:
  72              		.align	2
  73              	.L3:
  74 0020 00000000 		.word	adc_initVar
  75              		.cfi_endproc
  76              	.LFE2:
  77              		.size	adc_Start, .-adc_Start
  78              		.global	__aeabi_idiv
  79              		.section	.text.adc_Init,"ax",%progbits
  80              		.align	2
  81              		.global	adc_Init
  82              		.code	16
  83              		.thumb_func
  84              		.type	adc_Init, %function
  85              	adc_Init:
  86              	.LFB3:
  73:Generated_Source\PSoC4/adc.c **** 
  74:Generated_Source\PSoC4/adc.c **** 
  75:Generated_Source\PSoC4/adc.c **** /*******************************************************************************
  76:Generated_Source\PSoC4/adc.c **** * Function Name: adc_Init
  77:Generated_Source\PSoC4/adc.c **** ********************************************************************************
  78:Generated_Source\PSoC4/adc.c **** *
  79:Generated_Source\PSoC4/adc.c **** * Summary:
  80:Generated_Source\PSoC4/adc.c **** *  Initialize component's parameters to the parameters set by user in the
  81:Generated_Source\PSoC4/adc.c **** *  customizer of the component placed onto schematic. Usually called in
  82:Generated_Source\PSoC4/adc.c **** *  adc_Start().
  83:Generated_Source\PSoC4/adc.c **** *
  84:Generated_Source\PSoC4/adc.c **** * Parameters:
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 4


  85:Generated_Source\PSoC4/adc.c **** *  None.
  86:Generated_Source\PSoC4/adc.c **** *
  87:Generated_Source\PSoC4/adc.c **** * Return:
  88:Generated_Source\PSoC4/adc.c **** *  None.
  89:Generated_Source\PSoC4/adc.c **** *
  90:Generated_Source\PSoC4/adc.c **** * Global variables:
  91:Generated_Source\PSoC4/adc.c **** *  The adc_offset variable is initialized.
  92:Generated_Source\PSoC4/adc.c **** *
  93:Generated_Source\PSoC4/adc.c **** *******************************************************************************/
  94:Generated_Source\PSoC4/adc.c **** void adc_Init(void)
  95:Generated_Source\PSoC4/adc.c **** {
  87              		.loc 1 95 0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 16
  90              		@ frame_needed = 1, uses_anonymous_args = 0
  91 0000 80B5     		push	{r7, lr}
  92              		.cfi_def_cfa_offset 8
  93              		.cfi_offset 7, -8
  94              		.cfi_offset 14, -4
  95 0002 84B0     		sub	sp, sp, #16
  96              		.cfi_def_cfa_offset 24
  97 0004 00AF     		add	r7, sp, #0
  98              		.cfi_def_cfa_register 7
  96:Generated_Source\PSoC4/adc.c ****     uint32 chNum;
  97:Generated_Source\PSoC4/adc.c ****     uint32 tmpRegVal;
  98:Generated_Source\PSoC4/adc.c ****     int32 counts;
  99:Generated_Source\PSoC4/adc.c **** 
 100:Generated_Source\PSoC4/adc.c ****     #if(adc_TOTAL_CHANNELS_NUM > 1u)
 101:Generated_Source\PSoC4/adc.c ****         static const uint8 CYCODE adc_InputsPlacement[] =
 102:Generated_Source\PSoC4/adc.c ****         {
 103:Generated_Source\PSoC4/adc.c ****             (uint8)(adc_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:Generated_Source\PSoC4/adc.c ****             (uint8)adc_cy_psoc4_sarmux_8__CH_0_PIN
 105:Generated_Source\PSoC4/adc.c ****             ,(uint8)(adc_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:Generated_Source\PSoC4/adc.c ****              (uint8)adc_cy_psoc4_sarmux_8__CH_1_PIN
 107:Generated_Source\PSoC4/adc.c ****             #if(adc_TOTAL_CHANNELS_NUM > 2u)
 108:Generated_Source\PSoC4/adc.c ****                 ,(uint8)(adc_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:Generated_Source\PSoC4/adc.c ****                  (uint8)adc_cy_psoc4_sarmux_8__CH_2_PIN
 110:Generated_Source\PSoC4/adc.c ****             #endif /* End adc_TOTAL_CHANNELS_NUM > 2u */
 111:Generated_Source\PSoC4/adc.c ****             #if(adc_TOTAL_CHANNELS_NUM > 3u)
 112:Generated_Source\PSoC4/adc.c ****                 ,(uint8)(adc_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:Generated_Source\PSoC4/adc.c ****                  (uint8)adc_cy_psoc4_sarmux_8__CH_3_PIN
 114:Generated_Source\PSoC4/adc.c ****             #endif /* End adc_TOTAL_CHANNELS_NUM > 3u */
 115:Generated_Source\PSoC4/adc.c ****             #if(adc_TOTAL_CHANNELS_NUM > 4u)
 116:Generated_Source\PSoC4/adc.c ****                 ,(uint8)(adc_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:Generated_Source\PSoC4/adc.c ****                  (uint8)adc_cy_psoc4_sarmux_8__CH_4_PIN
 118:Generated_Source\PSoC4/adc.c ****             #endif /* End adc_TOTAL_CHANNELS_NUM > 4u */
 119:Generated_Source\PSoC4/adc.c ****             #if(adc_TOTAL_CHANNELS_NUM > 5u)
 120:Generated_Source\PSoC4/adc.c ****                 ,(uint8)(adc_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:Generated_Source\PSoC4/adc.c ****                  (uint8)adc_cy_psoc4_sarmux_8__CH_5_PIN
 122:Generated_Source\PSoC4/adc.c ****             #endif /* End adc_TOTAL_CHANNELS_NUM > 5u */
 123:Generated_Source\PSoC4/adc.c ****             #if(adc_TOTAL_CHANNELS_NUM > 6u)
 124:Generated_Source\PSoC4/adc.c ****                 ,(uint8)(adc_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:Generated_Source\PSoC4/adc.c ****                  (uint8)adc_cy_psoc4_sarmux_8__CH_6_PIN
 126:Generated_Source\PSoC4/adc.c ****             #endif /* End adc_TOTAL_CHANNELS_NUM > 6u */
 127:Generated_Source\PSoC4/adc.c ****             #if(adc_TOTAL_CHANNELS_NUM > 7u)
 128:Generated_Source\PSoC4/adc.c ****                 ,(uint8)(adc_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:Generated_Source\PSoC4/adc.c ****                  (uint8)adc_cy_psoc4_sarmux_8__CH_7_PIN
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 5


 130:Generated_Source\PSoC4/adc.c ****             #endif /* End adc_TOTAL_CHANNELS_NUM > 7u */
 131:Generated_Source\PSoC4/adc.c ****             #if(adc_TOTAL_CHANNELS_NUM > 8u)
 132:Generated_Source\PSoC4/adc.c ****                 ,(uint8)(adc_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:Generated_Source\PSoC4/adc.c ****                  (uint8)adc_cy_psoc4_sarmux_8__CH_8_PIN
 134:Generated_Source\PSoC4/adc.c ****             #endif /* End adc_TOTAL_CHANNELS_NUM > 8u */
 135:Generated_Source\PSoC4/adc.c ****             #if(adc_TOTAL_CHANNELS_NUM > 9u)
 136:Generated_Source\PSoC4/adc.c ****                 ,(uint8)(adc_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
 137:Generated_Source\PSoC4/adc.c ****                  (uint8)adc_cy_psoc4_sarmux_8__CH_9_PIN
 138:Generated_Source\PSoC4/adc.c ****             #endif /* End adc_TOTAL_CHANNELS_NUM > 9u */
 139:Generated_Source\PSoC4/adc.c ****             #if(adc_TOTAL_CHANNELS_NUM > 10u)
 140:Generated_Source\PSoC4/adc.c ****                 ,(uint8)(adc_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 141:Generated_Source\PSoC4/adc.c ****                  (uint8)adc_cy_psoc4_sarmux_8__CH_10_PIN
 142:Generated_Source\PSoC4/adc.c ****             #endif /* End adc_TOTAL_CHANNELS_NUM > 10u */
 143:Generated_Source\PSoC4/adc.c ****             #if(adc_TOTAL_CHANNELS_NUM > 11u)
 144:Generated_Source\PSoC4/adc.c ****                 ,(uint8)(adc_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:Generated_Source\PSoC4/adc.c ****                  (uint8)adc_cy_psoc4_sarmux_8__CH_11_PIN
 146:Generated_Source\PSoC4/adc.c ****             #endif /* End adc_TOTAL_CHANNELS_NUM > 11u */
 147:Generated_Source\PSoC4/adc.c ****             #if(adc_TOTAL_CHANNELS_NUM > 12u)
 148:Generated_Source\PSoC4/adc.c ****                 ,(uint8)(adc_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:Generated_Source\PSoC4/adc.c ****                  (uint8)adc_cy_psoc4_sarmux_8__CH_12_PIN
 150:Generated_Source\PSoC4/adc.c ****             #endif /* End adc_TOTAL_CHANNELS_NUM > 12u */
 151:Generated_Source\PSoC4/adc.c ****             #if(adc_TOTAL_CHANNELS_NUM > 13u)
 152:Generated_Source\PSoC4/adc.c ****                 ,(uint8)(adc_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:Generated_Source\PSoC4/adc.c ****                  (uint8)adc_cy_psoc4_sarmux_8__CH_13_PIN
 154:Generated_Source\PSoC4/adc.c ****             #endif /* End adc_TOTAL_CHANNELS_NUM > 13u */
 155:Generated_Source\PSoC4/adc.c ****             #if(adc_TOTAL_CHANNELS_NUM > 14u)
 156:Generated_Source\PSoC4/adc.c ****                 ,(uint8)(adc_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:Generated_Source\PSoC4/adc.c ****                  (uint8)adc_cy_psoc4_sarmux_8__CH_14_PIN
 158:Generated_Source\PSoC4/adc.c ****             #endif /* End adc_TOTAL_CHANNELS_NUM > 14u */
 159:Generated_Source\PSoC4/adc.c ****             #if(adc_TOTAL_CHANNELS_NUM > 15u)
 160:Generated_Source\PSoC4/adc.c ****                 ,(uint8)(adc_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:Generated_Source\PSoC4/adc.c ****                  (uint8)adc_cy_psoc4_sarmux_8__CH_15_PIN
 162:Generated_Source\PSoC4/adc.c ****             #endif /* End adc_TOTAL_CHANNELS_NUM > 15u */
 163:Generated_Source\PSoC4/adc.c ****             #if(adc_TOTAL_CHANNELS_NUM > 16u)
 164:Generated_Source\PSoC4/adc.c ****                 ,(uint8)(adc_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:Generated_Source\PSoC4/adc.c ****                  (uint8)adc_cy_psoc4_sarmux_8__CH_16_PIN
 166:Generated_Source\PSoC4/adc.c ****             #endif /* End adc_TOTAL_CHANNELS_NUM > 16u */
 167:Generated_Source\PSoC4/adc.c ****         };
 168:Generated_Source\PSoC4/adc.c ****     #endif /* End adc_TOTAL_CHANNELS_NUM > 1u */
 169:Generated_Source\PSoC4/adc.c **** 
 170:Generated_Source\PSoC4/adc.c ****     #if(adc_IRQ_REMOVE == 0u)
 171:Generated_Source\PSoC4/adc.c ****         /* Start and set interrupt vector */
 172:Generated_Source\PSoC4/adc.c ****         CyIntSetPriority(adc_INTC_NUMBER, adc_INTC_PRIOR_NUMBER);
  99              		.loc 1 172 0
 100 0006 0321     		movs	r1, #3
 101 0008 0F20     		movs	r0, #15
 102 000a FFF7FEFF 		bl	CyIntSetPriority
 173:Generated_Source\PSoC4/adc.c ****         (void)CyIntSetVector(adc_INTC_NUMBER, &adc_ISR);
 103              		.loc 1 173 0
 104 000e 644B     		ldr	r3, .L16
 105 0010 1900     		movs	r1, r3
 106 0012 0F20     		movs	r0, #15
 107 0014 FFF7FEFF 		bl	CyIntSetVector
 174:Generated_Source\PSoC4/adc.c ****     #endif   /* End adc_IRQ_REMOVE */
 175:Generated_Source\PSoC4/adc.c **** 
 176:Generated_Source\PSoC4/adc.c ****     /* Init SAR and MUX registers */
 177:Generated_Source\PSoC4/adc.c ****     adc_SAR_CHAN_EN_REG = adc_DEFAULT_EN_CHANNELS;
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 6


 108              		.loc 1 177 0
 109 0018 624B     		ldr	r3, .L16+4
 110 001a 0322     		movs	r2, #3
 111 001c 1A60     		str	r2, [r3]
 178:Generated_Source\PSoC4/adc.c ****     adc_SAR_CTRL_REG |= adc_DEFAULT_CTRL_REG_CFG | 
 179:Generated_Source\PSoC4/adc.c ****         /* Enable the SAR internal pump when global pump is enabled */
 180:Generated_Source\PSoC4/adc.c ****         (((adc_PUMP_CTRL_REG & adc_PUMP_CTRL_ENABLED) != 0u) ? 
 112              		.loc 1 180 0
 113 001e 624B     		ldr	r3, .L16+8
 114 0020 1B68     		ldr	r3, [r3]
 178:Generated_Source\PSoC4/adc.c ****     adc_SAR_CTRL_REG |= adc_DEFAULT_CTRL_REG_CFG | 
 115              		.loc 1 178 0
 116 0022 002B     		cmp	r3, #0
 117 0024 01DA     		bge	.L6
 178:Generated_Source\PSoC4/adc.c ****     adc_SAR_CTRL_REG |= adc_DEFAULT_CTRL_REG_CFG | 
 118              		.loc 1 178 0 is_stmt 0 discriminator 1
 119 0026 6149     		ldr	r1, .L16+12
 120 0028 00E0     		b	.L7
 121              	.L6:
 178:Generated_Source\PSoC4/adc.c ****     adc_SAR_CTRL_REG |= adc_DEFAULT_CTRL_REG_CFG | 
 122              		.loc 1 178 0 discriminator 2
 123 002a 6149     		ldr	r1, .L16+16
 124              	.L7:
 178:Generated_Source\PSoC4/adc.c ****     adc_SAR_CTRL_REG |= adc_DEFAULT_CTRL_REG_CFG | 
 125              		.loc 1 178 0 discriminator 4
 126 002c 614B     		ldr	r3, .L16+20
 127 002e 614A     		ldr	r2, .L16+20
 128 0030 1268     		ldr	r2, [r2]
 129 0032 0A43     		orrs	r2, r1
 130 0034 1A60     		str	r2, [r3]
 181:Generated_Source\PSoC4/adc.c ****         adc_BOOSTPUMP_EN : 0u);
 182:Generated_Source\PSoC4/adc.c ****     adc_SAR_SAMPLE_CTRL_REG = adc_DEFAULT_SAMPLE_CTRL_REG_CFG;
 131              		.loc 1 182 0 is_stmt 1 discriminator 4
 132 0036 604B     		ldr	r3, .L16+24
 133 0038 604A     		ldr	r2, .L16+28
 134 003a 1A60     		str	r2, [r3]
 183:Generated_Source\PSoC4/adc.c ****     adc_SAR_RANGE_THRES_REG = adc_DEFAULT_RANGE_THRES_REG_CFG;
 135              		.loc 1 183 0 discriminator 4
 136 003c 604B     		ldr	r3, .L16+32
 137 003e 614A     		ldr	r2, .L16+36
 138 0040 1A60     		str	r2, [r3]
 184:Generated_Source\PSoC4/adc.c ****     adc_SAR_RANGE_COND_REG  = adc_COMPARE_MODE;
 139              		.loc 1 184 0 discriminator 4
 140 0042 614B     		ldr	r3, .L16+40
 141 0044 0022     		movs	r2, #0
 142 0046 1A60     		str	r2, [r3]
 185:Generated_Source\PSoC4/adc.c ****     adc_SAR_SAMPLE_TIME01_REG = adc_DEFAULT_SAMPLE_TIME01_REG_CFG;
 143              		.loc 1 185 0 discriminator 4
 144 0048 604B     		ldr	r3, .L16+44
 145 004a 614A     		ldr	r2, .L16+48
 146 004c 1A60     		str	r2, [r3]
 186:Generated_Source\PSoC4/adc.c ****     adc_SAR_SAMPLE_TIME23_REG = adc_DEFAULT_SAMPLE_TIME23_REG_CFG;
 147              		.loc 1 186 0 discriminator 4
 148 004e 614B     		ldr	r3, .L16+52
 149 0050 614A     		ldr	r2, .L16+56
 150 0052 1A60     		str	r2, [r3]
 187:Generated_Source\PSoC4/adc.c ****     
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 7


 188:Generated_Source\PSoC4/adc.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 189:Generated_Source\PSoC4/adc.c ****     #if(adc_DEFAULT_MUX_SWITCH0 != 0u)
 190:Generated_Source\PSoC4/adc.c ****         adc_MUX_SWITCH0_REG |= adc_DEFAULT_MUX_SWITCH0;
 151              		.loc 1 190 0 discriminator 4
 152 0054 614B     		ldr	r3, .L16+60
 153 0056 614A     		ldr	r2, .L16+60
 154 0058 1268     		ldr	r2, [r2]
 155 005a 8021     		movs	r1, #128
 156 005c 4902     		lsls	r1, r1, #9
 157 005e 0A43     		orrs	r2, r1
 158 0060 1A60     		str	r2, [r3]
 191:Generated_Source\PSoC4/adc.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:Generated_Source\PSoC4/adc.c ****         #if(adc_TOTAL_CHANNELS_NUM > 1u)
 193:Generated_Source\PSoC4/adc.c ****             adc_MUX_SWITCH_HW_CTRL_REG |= adc_DEFAULT_MUX_SWITCH0;
 159              		.loc 1 193 0 discriminator 4
 160 0062 5F4B     		ldr	r3, .L16+64
 161 0064 5E4A     		ldr	r2, .L16+64
 162 0066 1268     		ldr	r2, [r2]
 163 0068 8021     		movs	r1, #128
 164 006a 4902     		lsls	r1, r1, #9
 165 006c 0A43     		orrs	r2, r1
 166 006e 1A60     		str	r2, [r3]
 194:Generated_Source\PSoC4/adc.c ****         #endif /* adc_TOTAL_CHANNELS_NUM > 1u */
 195:Generated_Source\PSoC4/adc.c ****     #endif /*adc_CHANNELS_MODE !=0 */
 196:Generated_Source\PSoC4/adc.c **** 
 197:Generated_Source\PSoC4/adc.c ****     adc_SAR_SATURATE_INTR_MASK_REG = 0u;
 167              		.loc 1 197 0 discriminator 4
 168 0070 5C4B     		ldr	r3, .L16+68
 169 0072 0022     		movs	r2, #0
 170 0074 1A60     		str	r2, [r3]
 198:Generated_Source\PSoC4/adc.c ****     adc_SAR_RANGE_INTR_MASK_REG = 0u;
 171              		.loc 1 198 0 discriminator 4
 172 0076 5C4B     		ldr	r3, .L16+72
 173 0078 0022     		movs	r2, #0
 174 007a 1A60     		str	r2, [r3]
 199:Generated_Source\PSoC4/adc.c ****     adc_SAR_INTR_MASK_REG = adc_SAR_INTR_MASK;
 175              		.loc 1 199 0 discriminator 4
 176 007c 5B4B     		ldr	r3, .L16+76
 177 007e 0122     		movs	r2, #1
 178 0080 1A60     		str	r2, [r3]
 200:Generated_Source\PSoC4/adc.c **** 
 201:Generated_Source\PSoC4/adc.c ****     #if(adc_CY_SAR_IP_VER == adc_CY_SAR_IP_VER0)
 202:Generated_Source\PSoC4/adc.c ****         adc_ANA_TRIM_REG = adc_TRIM_COEF;
 203:Generated_Source\PSoC4/adc.c ****     #endif /* (adc_CY_SAR_IP_VER == adc_CY_SAR_IP_VER0) */
 204:Generated_Source\PSoC4/adc.c **** 
 205:Generated_Source\PSoC4/adc.c ****     /* Read and modify default configuration based on characterization */
 206:Generated_Source\PSoC4/adc.c ****     tmpRegVal = adc_SAR_DFT_CTRL_REG;
 179              		.loc 1 206 0 discriminator 4
 180 0082 5B4B     		ldr	r3, .L16+80
 181 0084 1B68     		ldr	r3, [r3]
 182 0086 7B60     		str	r3, [r7, #4]
 207:Generated_Source\PSoC4/adc.c ****     tmpRegVal &= (uint32)~adc_DCEN;
 183              		.loc 1 207 0 discriminator 4
 184 0088 7B68     		ldr	r3, [r7, #4]
 185 008a 5A4A     		ldr	r2, .L16+84
 186 008c 1340     		ands	r3, r2
 187 008e 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 8


 208:Generated_Source\PSoC4/adc.c ****     
 209:Generated_Source\PSoC4/adc.c ****     #if(adc_CY_SAR_IP_VER == adc_CY_SAR_IP_VER0)
 210:Generated_Source\PSoC4/adc.c ****         #if(adc_NOMINAL_CLOCK_FREQ > (adc_MAX_FREQUENCY / 2))
 211:Generated_Source\PSoC4/adc.c ****             tmpRegVal |= adc_SEL_CSEL_DFT_CHAR;
 212:Generated_Source\PSoC4/adc.c ****         #else  /* clock speed < 9 Mhz */
 213:Generated_Source\PSoC4/adc.c ****             tmpRegVal |= adc_DLY_INC;
 214:Generated_Source\PSoC4/adc.c ****         #endif /* clock speed > 9 Mhz */
 215:Generated_Source\PSoC4/adc.c ****     #else
 216:Generated_Source\PSoC4/adc.c ****         #if ((adc_DEFAULT_VREF_SEL == adc__INTERNAL1024) || \
 217:Generated_Source\PSoC4/adc.c ****              (adc_DEFAULT_VREF_SEL == adc__INTERNALVREF))
 218:Generated_Source\PSoC4/adc.c ****             tmpRegVal |= adc_DLY_INC;
 219:Generated_Source\PSoC4/adc.c ****         #else
 220:Generated_Source\PSoC4/adc.c ****             tmpRegVal |= adc_DCEN;
 188              		.loc 1 220 0 discriminator 4
 189 0090 7B68     		ldr	r3, [r7, #4]
 190 0092 8022     		movs	r2, #128
 191 0094 9205     		lsls	r2, r2, #22
 192 0096 1343     		orrs	r3, r2
 193 0098 7B60     		str	r3, [r7, #4]
 221:Generated_Source\PSoC4/adc.c ****             tmpRegVal &= (uint32)~adc_DLY_INC;
 194              		.loc 1 221 0 discriminator 4
 195 009a 7B68     		ldr	r3, [r7, #4]
 196 009c 0122     		movs	r2, #1
 197 009e 9343     		bics	r3, r2
 198 00a0 7B60     		str	r3, [r7, #4]
 222:Generated_Source\PSoC4/adc.c ****         #endif /* ((adc_DEFAULT_VREF_SEL == adc__INTERNAL1024) || \
 223:Generated_Source\PSoC4/adc.c ****                    (adc_DEFAULT_VREF_SEL == adc__INTERNALVREF)) */
 224:Generated_Source\PSoC4/adc.c ****     #endif /* (adc_CY_SAR_IP_VER == adc_CY_SAR_IP_VER0) */
 225:Generated_Source\PSoC4/adc.c ****     
 226:Generated_Source\PSoC4/adc.c ****     adc_SAR_DFT_CTRL_REG = tmpRegVal;
 199              		.loc 1 226 0 discriminator 4
 200 00a2 534B     		ldr	r3, .L16+80
 201 00a4 7A68     		ldr	r2, [r7, #4]
 202 00a6 1A60     		str	r2, [r3]
 227:Generated_Source\PSoC4/adc.c **** 
 228:Generated_Source\PSoC4/adc.c ****     #if(adc_MAX_RESOLUTION != adc_RESOLUTION_12)
 229:Generated_Source\PSoC4/adc.c ****         adc_WOUNDING_REG = adc_ALT_WOUNDING;
 230:Generated_Source\PSoC4/adc.c ****     #endif /* adc_MAX_RESOLUTION != adc_RESOLUTION_12 */
 231:Generated_Source\PSoC4/adc.c **** 
 232:Generated_Source\PSoC4/adc.c ****     for(chNum = 0u; chNum < adc_TOTAL_CHANNELS_NUM; chNum++)
 203              		.loc 1 232 0 discriminator 4
 204 00a8 0023     		movs	r3, #0
 205 00aa FB60     		str	r3, [r7, #12]
 206 00ac 70E0     		b	.L8
 207              	.L15:
 233:Generated_Source\PSoC4/adc.c ****     {
 234:Generated_Source\PSoC4/adc.c ****         tmpRegVal = (adc_channelsConfig[chNum] & adc_CHANNEL_CONFIG_MASK);
 208              		.loc 1 234 0
 209 00ae 524B     		ldr	r3, .L16+88
 210 00b0 FA68     		ldr	r2, [r7, #12]
 211 00b2 9200     		lsls	r2, r2, #2
 212 00b4 D258     		ldr	r2, [r2, r3]
 213 00b6 DC23     		movs	r3, #220
 214 00b8 9B01     		lsls	r3, r3, #6
 215 00ba 1340     		ands	r3, r2
 216 00bc 7B60     		str	r3, [r7, #4]
 235:Generated_Source\PSoC4/adc.c ****         #if(adc_TOTAL_CHANNELS_NUM > 1u)
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 9


 236:Generated_Source\PSoC4/adc.c ****             tmpRegVal |= adc_InputsPlacement[chNum];
 217              		.loc 1 236 0
 218 00be 4F4A     		ldr	r2, .L16+92
 219 00c0 FB68     		ldr	r3, [r7, #12]
 220 00c2 D318     		adds	r3, r2, r3
 221 00c4 1B78     		ldrb	r3, [r3]
 222 00c6 1A00     		movs	r2, r3
 223 00c8 7B68     		ldr	r3, [r7, #4]
 224 00ca 1343     		orrs	r3, r2
 225 00cc 7B60     		str	r3, [r7, #4]
 237:Generated_Source\PSoC4/adc.c ****         #endif /* End adc_TOTAL_CHANNELS_NUM > 1u */
 238:Generated_Source\PSoC4/adc.c ****         
 239:Generated_Source\PSoC4/adc.c ****         
 240:Generated_Source\PSoC4/adc.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:Generated_Source\PSoC4/adc.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:Generated_Source\PSoC4/adc.c ****         *  (0) and 8-bit (1) resolution.
 243:Generated_Source\PSoC4/adc.c ****         */
 244:Generated_Source\PSoC4/adc.c ****         #if((adc_MAX_RESOLUTION != adc_RESOLUTION_12) && \
 245:Generated_Source\PSoC4/adc.c ****             (adc_ALT_WOUNDING == adc_WOUNDING_10BIT))
 246:Generated_Source\PSoC4/adc.c ****             tmpRegVal &= (uint32)(~adc_ALT_RESOLUTION_ON);
 247:Generated_Source\PSoC4/adc.c ****         #endif /* adc_MAX_RESOLUTION != adc_RESOLUTION_12 */
 248:Generated_Source\PSoC4/adc.c **** 
 249:Generated_Source\PSoC4/adc.c ****         #if(adc_INJ_CHANNEL_ENABLED)
 250:Generated_Source\PSoC4/adc.c ****         if(chNum < adc_SEQUENCED_CHANNELS_NUM)
 251:Generated_Source\PSoC4/adc.c ****         #endif /* adc_INJ_CHANNEL_ENABLED */
 252:Generated_Source\PSoC4/adc.c ****         {
 253:Generated_Source\PSoC4/adc.c ****             CY_SET_REG32((reg32 *)(adc_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 226              		.loc 1 253 0
 227 00ce FB68     		ldr	r3, [r7, #12]
 228 00d0 9B00     		lsls	r3, r3, #2
 229 00d2 4B4A     		ldr	r2, .L16+96
 230 00d4 9446     		mov	ip, r2
 231 00d6 6344     		add	r3, r3, ip
 232 00d8 7A68     		ldr	r2, [r7, #4]
 233 00da 1A60     		str	r2, [r3]
 254:Generated_Source\PSoC4/adc.c **** 
 255:Generated_Source\PSoC4/adc.c ****             if((adc_channelsConfig[chNum] & adc_IS_SATURATE_EN_MASK) != 0u)
 234              		.loc 1 255 0
 235 00dc 464B     		ldr	r3, .L16+88
 236 00de FA68     		ldr	r2, [r7, #12]
 237 00e0 9200     		lsls	r2, r2, #2
 238 00e2 D358     		ldr	r3, [r2, r3]
 239 00e4 0122     		movs	r2, #1
 240 00e6 1340     		ands	r3, r2
 241 00e8 0AD0     		beq	.L9
 256:Generated_Source\PSoC4/adc.c ****             {
 257:Generated_Source\PSoC4/adc.c ****                 adc_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 242              		.loc 1 257 0
 243 00ea 3E4B     		ldr	r3, .L16+68
 244 00ec 3D4A     		ldr	r2, .L16+68
 245 00ee 1168     		ldr	r1, [r2]
 246 00f0 0120     		movs	r0, #1
 247 00f2 FA68     		ldr	r2, [r7, #12]
 248 00f4 9040     		lsls	r0, r0, r2
 249 00f6 0200     		movs	r2, r0
 250 00f8 1204     		lsls	r2, r2, #16
 251 00fa 120C     		lsrs	r2, r2, #16
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 10


 252 00fc 0A43     		orrs	r2, r1
 253 00fe 1A60     		str	r2, [r3]
 254              	.L9:
 258:Generated_Source\PSoC4/adc.c ****             }
 259:Generated_Source\PSoC4/adc.c **** 
 260:Generated_Source\PSoC4/adc.c ****             if((adc_channelsConfig[chNum] & adc_IS_RANGE_CTRL_EN_MASK) != 0u)
 255              		.loc 1 260 0
 256 0100 3D4B     		ldr	r3, .L16+88
 257 0102 FA68     		ldr	r2, [r7, #12]
 258 0104 9200     		lsls	r2, r2, #2
 259 0106 D358     		ldr	r3, [r2, r3]
 260 0108 0222     		movs	r2, #2
 261 010a 1340     		ands	r3, r2
 262 010c 0AD0     		beq	.L10
 261:Generated_Source\PSoC4/adc.c ****             {
 262:Generated_Source\PSoC4/adc.c ****                 adc_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 263              		.loc 1 262 0
 264 010e 364B     		ldr	r3, .L16+72
 265 0110 354A     		ldr	r2, .L16+72
 266 0112 1168     		ldr	r1, [r2]
 267 0114 0120     		movs	r0, #1
 268 0116 FA68     		ldr	r2, [r7, #12]
 269 0118 9040     		lsls	r0, r0, r2
 270 011a 0200     		movs	r2, r0
 271 011c 1204     		lsls	r2, r2, #16
 272 011e 120C     		lsrs	r2, r2, #16
 273 0120 0A43     		orrs	r2, r1
 274 0122 1A60     		str	r2, [r3]
 275              	.L10:
 263:Generated_Source\PSoC4/adc.c ****             }
 264:Generated_Source\PSoC4/adc.c ****         }
 265:Generated_Source\PSoC4/adc.c ****         #if(adc_INJ_CHANNEL_ENABLED)
 266:Generated_Source\PSoC4/adc.c ****             else
 267:Generated_Source\PSoC4/adc.c ****             {
 268:Generated_Source\PSoC4/adc.c ****                 CY_SET_REG32(adc_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | adc_INJ_TAILGATING);
 269:Generated_Source\PSoC4/adc.c **** 
 270:Generated_Source\PSoC4/adc.c ****                 if((adc_channelsConfig[chNum] & adc_IS_SATURATE_EN_MASK) != 0u)
 271:Generated_Source\PSoC4/adc.c ****                 {
 272:Generated_Source\PSoC4/adc.c ****                     adc_SAR_INTR_MASK_REG |= adc_INJ_SATURATE_MASK;
 273:Generated_Source\PSoC4/adc.c ****                 }
 274:Generated_Source\PSoC4/adc.c **** 
 275:Generated_Source\PSoC4/adc.c ****                 if((adc_channelsConfig[chNum] & adc_IS_RANGE_CTRL_EN_MASK) != 0u)
 276:Generated_Source\PSoC4/adc.c ****                 {
 277:Generated_Source\PSoC4/adc.c ****                     adc_SAR_INTR_MASK_REG |= adc_INJ_RANGE_MASK;
 278:Generated_Source\PSoC4/adc.c ****                 }
 279:Generated_Source\PSoC4/adc.c ****             }
 280:Generated_Source\PSoC4/adc.c ****         #endif /* adc_INJ_CHANNEL_ENABLED */
 281:Generated_Source\PSoC4/adc.c **** 
 282:Generated_Source\PSoC4/adc.c ****         if((adc_channelsConfig[chNum] & adc_ALT_RESOLUTION_ON) != 0u)
 276              		.loc 1 282 0
 277 0124 344B     		ldr	r3, .L16+88
 278 0126 FA68     		ldr	r2, [r7, #12]
 279 0128 9200     		lsls	r2, r2, #2
 280 012a D258     		ldr	r2, [r2, r3]
 281 012c 8023     		movs	r3, #128
 282 012e 9B00     		lsls	r3, r3, #2
 283 0130 1340     		ands	r3, r2
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 11


 284 0132 03D0     		beq	.L11
 283:Generated_Source\PSoC4/adc.c ****         {
 284:Generated_Source\PSoC4/adc.c ****                counts = (int32)adc_DEFAULT_MAX_WRK_ALT;
 285              		.loc 1 284 0
 286 0134 8023     		movs	r3, #128
 287 0136 5B00     		lsls	r3, r3, #1
 288 0138 BB60     		str	r3, [r7, #8]
 289 013a 02E0     		b	.L12
 290              	.L11:
 285:Generated_Source\PSoC4/adc.c ****         }
 286:Generated_Source\PSoC4/adc.c ****         else
 287:Generated_Source\PSoC4/adc.c ****         {
 288:Generated_Source\PSoC4/adc.c ****                counts = (int32)adc_SAR_WRK_MAX_12BIT;
 291              		.loc 1 288 0
 292 013c 8023     		movs	r3, #128
 293 013e 5B01     		lsls	r3, r3, #5
 294 0140 BB60     		str	r3, [r7, #8]
 295              	.L12:
 289:Generated_Source\PSoC4/adc.c ****         }
 290:Generated_Source\PSoC4/adc.c **** 
 291:Generated_Source\PSoC4/adc.c ****         if((adc_channelsConfig[chNum] & adc_DIFFERENTIAL_EN) == 0u)
 296              		.loc 1 291 0
 297 0142 2D4B     		ldr	r3, .L16+88
 298 0144 FA68     		ldr	r2, [r7, #12]
 299 0146 9200     		lsls	r2, r2, #2
 300 0148 D258     		ldr	r2, [r2, r3]
 301 014a 8023     		movs	r3, #128
 302 014c 5B00     		lsls	r3, r3, #1
 303 014e 1340     		ands	r3, r2
 304 0150 05D1     		bne	.L13
 292:Generated_Source\PSoC4/adc.c ****         {
 293:Generated_Source\PSoC4/adc.c ****             #if((adc_DEFAULT_SE_RESULT_FORMAT_SEL == adc__FSIGNED) && \
 294:Generated_Source\PSoC4/adc.c ****                 (adc_DEFAULT_NEG_INPUT_SEL == adc__VREF))
 295:Generated_Source\PSoC4/adc.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:Generated_Source\PSoC4/adc.c ****                 adc_offset[chNum] = (int16)(counts / -2);
 297:Generated_Source\PSoC4/adc.c ****             #else
 298:Generated_Source\PSoC4/adc.c ****                 adc_offset[chNum] = 0;
 305              		.loc 1 298 0
 306 0152 2C4B     		ldr	r3, .L16+100
 307 0154 FA68     		ldr	r2, [r7, #12]
 308 0156 5200     		lsls	r2, r2, #1
 309 0158 0021     		movs	r1, #0
 310 015a D152     		strh	r1, [r2, r3]
 311 015c 04E0     		b	.L14
 312              	.L13:
 299:Generated_Source\PSoC4/adc.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == adc__FSIGNED */
 300:Generated_Source\PSoC4/adc.c ****         }
 301:Generated_Source\PSoC4/adc.c ****         else    /* Differential channel */
 302:Generated_Source\PSoC4/adc.c ****         {
 303:Generated_Source\PSoC4/adc.c ****             #if(adc_DEFAULT_DIFF_RESULT_FORMAT_SEL == adc__FUNSIGNED)
 304:Generated_Source\PSoC4/adc.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:Generated_Source\PSoC4/adc.c ****                 adc_offset[chNum] = (int16)(counts / 2);
 306:Generated_Source\PSoC4/adc.c ****             #else
 307:Generated_Source\PSoC4/adc.c ****                 adc_offset[chNum] = 0;
 313              		.loc 1 307 0
 314 015e 294B     		ldr	r3, .L16+100
 315 0160 FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 12


 316 0162 5200     		lsls	r2, r2, #1
 317 0164 0021     		movs	r1, #0
 318 0166 D152     		strh	r1, [r2, r3]
 319              	.L14:
 308:Generated_Source\PSoC4/adc.c ****             #endif /* end adc_DEFAULT_DIFF_RESULT_FORMAT_SEL == adc__FUNSIGNED */
 309:Generated_Source\PSoC4/adc.c ****         }
 310:Generated_Source\PSoC4/adc.c ****         /* Calculate gain in counts per 10 volts with rounding */
 311:Generated_Source\PSoC4/adc.c ****         adc_countsPer10Volt[chNum] = (int16)(((counts * adc_10MV_COUNTS) +
 320              		.loc 1 311 0 discriminator 2
 321 0168 BB68     		ldr	r3, [r7, #8]
 322 016a 274A     		ldr	r2, .L16+104
 323 016c 5343     		muls	r3, r2
 324 016e 274A     		ldr	r2, .L16+108
 325 0170 9446     		mov	ip, r2
 326 0172 6344     		add	r3, r3, ip
 312:Generated_Source\PSoC4/adc.c ****                             adc_DEFAULT_VREF_MV_VALUE) / (adc_DEFAULT_VREF_MV_VALUE * 2));
 327              		.loc 1 312 0 discriminator 2
 328 0174 2449     		ldr	r1, .L16+104
 329 0176 1800     		movs	r0, r3
 330 0178 FFF7FEFF 		bl	__aeabi_idiv
 331 017c 0300     		movs	r3, r0
 311:Generated_Source\PSoC4/adc.c ****                             adc_DEFAULT_VREF_MV_VALUE) / (adc_DEFAULT_VREF_MV_VALUE * 2));
 332              		.loc 1 311 0 discriminator 2
 333 017e 1BB2     		sxth	r3, r3
 334 0180 1900     		movs	r1, r3
 335 0182 234B     		ldr	r3, .L16+112
 336 0184 FA68     		ldr	r2, [r7, #12]
 337 0186 9200     		lsls	r2, r2, #2
 338 0188 D150     		str	r1, [r2, r3]
 232:Generated_Source\PSoC4/adc.c ****     {
 339              		.loc 1 232 0 discriminator 2
 340 018a FB68     		ldr	r3, [r7, #12]
 341 018c 0133     		adds	r3, r3, #1
 342 018e FB60     		str	r3, [r7, #12]
 343              	.L8:
 232:Generated_Source\PSoC4/adc.c ****     {
 344              		.loc 1 232 0 is_stmt 0 discriminator 1
 345 0190 FB68     		ldr	r3, [r7, #12]
 346 0192 012B     		cmp	r3, #1
 347 0194 8BD9     		bls	.L15
 313:Generated_Source\PSoC4/adc.c ****     }
 314:Generated_Source\PSoC4/adc.c **** }
 348              		.loc 1 314 0 is_stmt 1
 349 0196 C046     		nop
 350 0198 BD46     		mov	sp, r7
 351 019a 04B0     		add	sp, sp, #16
 352              		@ sp needed
 353 019c 80BD     		pop	{r7, pc}
 354              	.L17:
 355 019e C046     		.align	2
 356              	.L16:
 357 01a0 00000000 		.word	adc_ISR
 358 01a4 20003A40 		.word	1077542944
 359 01a8 80033A40 		.word	1077543808
 360 01ac 70201010 		.word	269492336
 361 01b0 70200010 		.word	268443760
 362 01b4 00003A40 		.word	1077542912
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 13


 363 01b8 04003A40 		.word	1077542916
 364 01bc 8C000080 		.word	-2147483508
 365 01c0 18003A40 		.word	1077542936
 366 01c4 0000FF07 		.word	134152192
 367 01c8 1C003A40 		.word	1077542940
 368 01cc 10003A40 		.word	1077542928
 369 01d0 04000200 		.word	131076
 370 01d4 14003A40 		.word	1077542932
 371 01d8 02000200 		.word	131074
 372 01dc 00033A40 		.word	1077543680
 373 01e0 40033A40 		.word	1077543744
 374 01e4 28023A40 		.word	1077543464
 375 01e8 38023A40 		.word	1077543480
 376 01ec 18023A40 		.word	1077543448
 377 01f0 30003A40 		.word	1077542960
 378 01f4 FFFFFFDF 		.word	-536870913
 379 01f8 00000000 		.word	adc_channelsConfig
 380 01fc 08000000 		.word	adc_InputsPlacement.4920
 381 0200 80003A40 		.word	1077543040
 382 0204 00000000 		.word	adc_offset
 383 0208 10270000 		.word	10000
 384 020c 88130000 		.word	5000
 385 0210 00000000 		.word	adc_countsPer10Volt
 386              		.cfi_endproc
 387              	.LFE3:
 388              		.size	adc_Init, .-adc_Init
 389              		.section	.text.adc_Enable,"ax",%progbits
 390              		.align	2
 391              		.global	adc_Enable
 392              		.code	16
 393              		.thumb_func
 394              		.type	adc_Enable, %function
 395              	adc_Enable:
 396              	.LFB4:
 315:Generated_Source\PSoC4/adc.c **** 
 316:Generated_Source\PSoC4/adc.c **** /*******************************************************************************
 317:Generated_Source\PSoC4/adc.c **** * Function Name: ADC_SAR_1_Enable
 318:Generated_Source\PSoC4/adc.c **** ********************************************************************************
 319:Generated_Source\PSoC4/adc.c **** *
 320:Generated_Source\PSoC4/adc.c **** * Summary:
 321:Generated_Source\PSoC4/adc.c **** *  Enables the clock and analog power for SAR ADC.
 322:Generated_Source\PSoC4/adc.c **** *
 323:Generated_Source\PSoC4/adc.c **** * Parameters:
 324:Generated_Source\PSoC4/adc.c **** *  None.
 325:Generated_Source\PSoC4/adc.c **** *
 326:Generated_Source\PSoC4/adc.c **** * Return:
 327:Generated_Source\PSoC4/adc.c **** *  None.
 328:Generated_Source\PSoC4/adc.c **** *
 329:Generated_Source\PSoC4/adc.c **** *******************************************************************************/
 330:Generated_Source\PSoC4/adc.c **** void adc_Enable(void)
 331:Generated_Source\PSoC4/adc.c **** {
 397              		.loc 1 331 0
 398              		.cfi_startproc
 399              		@ args = 0, pretend = 0, frame = 0
 400              		@ frame_needed = 1, uses_anonymous_args = 0
 401 0000 80B5     		push	{r7, lr}
 402              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 14


 403              		.cfi_offset 7, -8
 404              		.cfi_offset 14, -4
 405 0002 00AF     		add	r7, sp, #0
 406              		.cfi_def_cfa_register 7
 332:Generated_Source\PSoC4/adc.c ****     if (0u == (adc_SAR_CTRL_REG & adc_ENABLE))
 407              		.loc 1 332 0
 408 0004 0A4B     		ldr	r3, .L22
 409 0006 1B68     		ldr	r3, [r3]
 410 0008 002B     		cmp	r3, #0
 411 000a 0EDB     		blt	.L21
 333:Generated_Source\PSoC4/adc.c ****     {
 334:Generated_Source\PSoC4/adc.c ****         #if(adc_CY_SAR_IP_VER != adc_CY_SAR_IP_VER0)
 335:Generated_Source\PSoC4/adc.c **** 
 336:Generated_Source\PSoC4/adc.c ****             while (0u != (adc_SAR_STATUS_REG & adc_STATUS_BUSY))
 412              		.loc 1 336 0
 413 000c C046     		nop
 414              	.L20:
 415              		.loc 1 336 0 is_stmt 0 discriminator 1
 416 000e 094B     		ldr	r3, .L22+4
 417 0010 1B68     		ldr	r3, [r3]
 418 0012 002B     		cmp	r3, #0
 419 0014 FBDB     		blt	.L20
 337:Generated_Source\PSoC4/adc.c ****             {
 338:Generated_Source\PSoC4/adc.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:Generated_Source\PSoC4/adc.c ****             }
 340:Generated_Source\PSoC4/adc.c ****         #endif /* (adc_CY_SAR_IP_VER != adc_CY_SAR_IP_VER0) */
 341:Generated_Source\PSoC4/adc.c ****         
 342:Generated_Source\PSoC4/adc.c ****         adc_SAR_CTRL_REG |= adc_ENABLE;
 420              		.loc 1 342 0 is_stmt 1
 421 0016 064B     		ldr	r3, .L22
 422 0018 054A     		ldr	r2, .L22
 423 001a 1268     		ldr	r2, [r2]
 424 001c 8021     		movs	r1, #128
 425 001e 0906     		lsls	r1, r1, #24
 426 0020 0A43     		orrs	r2, r1
 427 0022 1A60     		str	r2, [r3]
 343:Generated_Source\PSoC4/adc.c ****         
 344:Generated_Source\PSoC4/adc.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 345:Generated_Source\PSoC4/adc.c ****         CyDelayUs(adc_10US_DELAY);         
 428              		.loc 1 345 0
 429 0024 0A20     		movs	r0, #10
 430 0026 FFF7FEFF 		bl	CyDelayUs
 431              	.L21:
 346:Generated_Source\PSoC4/adc.c ****     }
 347:Generated_Source\PSoC4/adc.c **** }
 432              		.loc 1 347 0
 433 002a C046     		nop
 434 002c BD46     		mov	sp, r7
 435              		@ sp needed
 436 002e 80BD     		pop	{r7, pc}
 437              	.L23:
 438              		.align	2
 439              	.L22:
 440 0030 00003A40 		.word	1077542912
 441 0034 08023A40 		.word	1077543432
 442              		.cfi_endproc
 443              	.LFE4:
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 15


 444              		.size	adc_Enable, .-adc_Enable
 445              		.section	.text.adc_Stop,"ax",%progbits
 446              		.align	2
 447              		.global	adc_Stop
 448              		.code	16
 449              		.thumb_func
 450              		.type	adc_Stop, %function
 451              	adc_Stop:
 452              	.LFB5:
 348:Generated_Source\PSoC4/adc.c **** 
 349:Generated_Source\PSoC4/adc.c **** 
 350:Generated_Source\PSoC4/adc.c **** /*******************************************************************************
 351:Generated_Source\PSoC4/adc.c **** * Function Name: adc_Stop
 352:Generated_Source\PSoC4/adc.c **** ********************************************************************************
 353:Generated_Source\PSoC4/adc.c **** *
 354:Generated_Source\PSoC4/adc.c **** * Summary:
 355:Generated_Source\PSoC4/adc.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:Generated_Source\PSoC4/adc.c **** *  mode.
 357:Generated_Source\PSoC4/adc.c **** *
 358:Generated_Source\PSoC4/adc.c **** * Parameters:
 359:Generated_Source\PSoC4/adc.c **** *  None.
 360:Generated_Source\PSoC4/adc.c **** *
 361:Generated_Source\PSoC4/adc.c **** * Return:
 362:Generated_Source\PSoC4/adc.c **** *  None.
 363:Generated_Source\PSoC4/adc.c **** *
 364:Generated_Source\PSoC4/adc.c **** *******************************************************************************/
 365:Generated_Source\PSoC4/adc.c **** void adc_Stop(void)
 366:Generated_Source\PSoC4/adc.c **** {
 453              		.loc 1 366 0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 0
 456              		@ frame_needed = 1, uses_anonymous_args = 0
 457 0000 80B5     		push	{r7, lr}
 458              		.cfi_def_cfa_offset 8
 459              		.cfi_offset 7, -8
 460              		.cfi_offset 14, -4
 461 0002 00AF     		add	r7, sp, #0
 462              		.cfi_def_cfa_register 7
 367:Generated_Source\PSoC4/adc.c ****     adc_SAR_CTRL_REG &= (uint32)~adc_ENABLE;
 463              		.loc 1 367 0
 464 0004 044B     		ldr	r3, .L25
 465 0006 044A     		ldr	r2, .L25
 466 0008 1268     		ldr	r2, [r2]
 467 000a 5200     		lsls	r2, r2, #1
 468 000c 5208     		lsrs	r2, r2, #1
 469 000e 1A60     		str	r2, [r3]
 368:Generated_Source\PSoC4/adc.c **** }
 470              		.loc 1 368 0
 471 0010 C046     		nop
 472 0012 BD46     		mov	sp, r7
 473              		@ sp needed
 474 0014 80BD     		pop	{r7, pc}
 475              	.L26:
 476 0016 C046     		.align	2
 477              	.L25:
 478 0018 00003A40 		.word	1077542912
 479              		.cfi_endproc
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 16


 480              	.LFE5:
 481              		.size	adc_Stop, .-adc_Stop
 482              		.section	.text.adc_StartConvert,"ax",%progbits
 483              		.align	2
 484              		.global	adc_StartConvert
 485              		.code	16
 486              		.thumb_func
 487              		.type	adc_StartConvert, %function
 488              	adc_StartConvert:
 489              	.LFB6:
 369:Generated_Source\PSoC4/adc.c **** 
 370:Generated_Source\PSoC4/adc.c **** 
 371:Generated_Source\PSoC4/adc.c **** /*******************************************************************************
 372:Generated_Source\PSoC4/adc.c **** * Function Name: adc_StartConvert
 373:Generated_Source\PSoC4/adc.c **** ********************************************************************************
 374:Generated_Source\PSoC4/adc.c **** *
 375:Generated_Source\PSoC4/adc.c **** * Summary:
 376:Generated_Source\PSoC4/adc.c **** *  Description:
 377:Generated_Source\PSoC4/adc.c **** *  For free running mode, this API starts the conversion process and it
 378:Generated_Source\PSoC4/adc.c **** *  runs continuously.
 379:Generated_Source\PSoC4/adc.c **** *
 380:Generated_Source\PSoC4/adc.c **** *  In a triggered mode, this routine triggers every conversion by
 381:Generated_Source\PSoC4/adc.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:Generated_Source\PSoC4/adc.c **** *  every conversion has to start by this API.
 383:Generated_Source\PSoC4/adc.c **** *
 384:Generated_Source\PSoC4/adc.c **** * Parameters:
 385:Generated_Source\PSoC4/adc.c **** *  None.
 386:Generated_Source\PSoC4/adc.c **** *
 387:Generated_Source\PSoC4/adc.c **** * Return:
 388:Generated_Source\PSoC4/adc.c **** *  None.
 389:Generated_Source\PSoC4/adc.c **** *
 390:Generated_Source\PSoC4/adc.c **** *******************************************************************************/
 391:Generated_Source\PSoC4/adc.c **** void adc_StartConvert(void)
 392:Generated_Source\PSoC4/adc.c **** {
 490              		.loc 1 392 0
 491              		.cfi_startproc
 492              		@ args = 0, pretend = 0, frame = 0
 493              		@ frame_needed = 1, uses_anonymous_args = 0
 494 0000 80B5     		push	{r7, lr}
 495              		.cfi_def_cfa_offset 8
 496              		.cfi_offset 7, -8
 497              		.cfi_offset 14, -4
 498 0002 00AF     		add	r7, sp, #0
 499              		.cfi_def_cfa_register 7
 393:Generated_Source\PSoC4/adc.c ****     #if(adc_DEFAULT_SAMPLE_MODE_SEL == adc__FREERUNNING)
 394:Generated_Source\PSoC4/adc.c ****         adc_SAR_SAMPLE_CTRL_REG |= adc_CONTINUOUS_EN;
 500              		.loc 1 394 0
 501 0004 044B     		ldr	r3, .L28
 502 0006 044A     		ldr	r2, .L28
 503 0008 1268     		ldr	r2, [r2]
 504 000a 8021     		movs	r1, #128
 505 000c 4902     		lsls	r1, r1, #9
 506 000e 0A43     		orrs	r2, r1
 507 0010 1A60     		str	r2, [r3]
 395:Generated_Source\PSoC4/adc.c ****     #else /* Firmware trigger */
 396:Generated_Source\PSoC4/adc.c ****         adc_SAR_START_CTRL_REG = adc_FW_TRIGGER;
 397:Generated_Source\PSoC4/adc.c ****     #endif /* End adc_DEFAULT_SAMPLE_MODE == adc__FREERUNNING */
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 17


 398:Generated_Source\PSoC4/adc.c **** 
 399:Generated_Source\PSoC4/adc.c **** }
 508              		.loc 1 399 0
 509 0012 C046     		nop
 510 0014 BD46     		mov	sp, r7
 511              		@ sp needed
 512 0016 80BD     		pop	{r7, pc}
 513              	.L29:
 514              		.align	2
 515              	.L28:
 516 0018 04003A40 		.word	1077542916
 517              		.cfi_endproc
 518              	.LFE6:
 519              		.size	adc_StartConvert, .-adc_StartConvert
 520              		.section	.text.adc_StopConvert,"ax",%progbits
 521              		.align	2
 522              		.global	adc_StopConvert
 523              		.code	16
 524              		.thumb_func
 525              		.type	adc_StopConvert, %function
 526              	adc_StopConvert:
 527              	.LFB7:
 400:Generated_Source\PSoC4/adc.c **** 
 401:Generated_Source\PSoC4/adc.c **** 
 402:Generated_Source\PSoC4/adc.c **** /*******************************************************************************
 403:Generated_Source\PSoC4/adc.c **** * Function Name: adc_StopConvert
 404:Generated_Source\PSoC4/adc.c **** ********************************************************************************
 405:Generated_Source\PSoC4/adc.c **** *
 406:Generated_Source\PSoC4/adc.c **** * Summary:
 407:Generated_Source\PSoC4/adc.c **** *  Forces the ADC to stop all conversions.
 408:Generated_Source\PSoC4/adc.c **** *
 409:Generated_Source\PSoC4/adc.c **** * Parameters:
 410:Generated_Source\PSoC4/adc.c **** *  None.
 411:Generated_Source\PSoC4/adc.c **** *
 412:Generated_Source\PSoC4/adc.c **** * Return:
 413:Generated_Source\PSoC4/adc.c **** *  None.
 414:Generated_Source\PSoC4/adc.c **** *
 415:Generated_Source\PSoC4/adc.c **** *******************************************************************************/
 416:Generated_Source\PSoC4/adc.c **** void adc_StopConvert(void)
 417:Generated_Source\PSoC4/adc.c **** {
 528              		.loc 1 417 0
 529              		.cfi_startproc
 530              		@ args = 0, pretend = 0, frame = 0
 531              		@ frame_needed = 1, uses_anonymous_args = 0
 532 0000 80B5     		push	{r7, lr}
 533              		.cfi_def_cfa_offset 8
 534              		.cfi_offset 7, -8
 535              		.cfi_offset 14, -4
 536 0002 00AF     		add	r7, sp, #0
 537              		.cfi_def_cfa_register 7
 418:Generated_Source\PSoC4/adc.c ****     #if(adc_DEFAULT_SAMPLE_MODE_SEL == adc__FREERUNNING)
 419:Generated_Source\PSoC4/adc.c ****         adc_SAR_SAMPLE_CTRL_REG &= (uint32)(~adc_CONTINUOUS_EN);
 538              		.loc 1 419 0
 539 0004 044B     		ldr	r3, .L31
 540 0006 044A     		ldr	r2, .L31
 541 0008 1268     		ldr	r2, [r2]
 542 000a 0449     		ldr	r1, .L31+4
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 18


 543 000c 0A40     		ands	r2, r1
 544 000e 1A60     		str	r2, [r3]
 420:Generated_Source\PSoC4/adc.c ****     #endif /* adc_DEFAULT_SAMPLE_MODE == adc__FREERUNNING */
 421:Generated_Source\PSoC4/adc.c **** }
 545              		.loc 1 421 0
 546 0010 C046     		nop
 547 0012 BD46     		mov	sp, r7
 548              		@ sp needed
 549 0014 80BD     		pop	{r7, pc}
 550              	.L32:
 551 0016 C046     		.align	2
 552              	.L31:
 553 0018 04003A40 		.word	1077542916
 554 001c FFFFFEFF 		.word	-65537
 555              		.cfi_endproc
 556              	.LFE7:
 557              		.size	adc_StopConvert, .-adc_StopConvert
 558              		.section	.text.adc_IsEndConversion,"ax",%progbits
 559              		.align	2
 560              		.global	adc_IsEndConversion
 561              		.code	16
 562              		.thumb_func
 563              		.type	adc_IsEndConversion, %function
 564              	adc_IsEndConversion:
 565              	.LFB8:
 422:Generated_Source\PSoC4/adc.c **** 
 423:Generated_Source\PSoC4/adc.c **** 
 424:Generated_Source\PSoC4/adc.c **** /*******************************************************************************
 425:Generated_Source\PSoC4/adc.c **** * Function Name: adc_IsEndConversion
 426:Generated_Source\PSoC4/adc.c **** ********************************************************************************
 427:Generated_Source\PSoC4/adc.c **** *
 428:Generated_Source\PSoC4/adc.c **** * Summary:
 429:Generated_Source\PSoC4/adc.c **** *  Description: Checks for ADC end of conversion for the case one
 430:Generated_Source\PSoC4/adc.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:Generated_Source\PSoC4/adc.c **** *  as a software version of the EOC. This function provides the
 432:Generated_Source\PSoC4/adc.c **** *  programmer with two options. In one mode this function
 433:Generated_Source\PSoC4/adc.c **** *  immediately returns with the conversion status. In the other mode,
 434:Generated_Source\PSoC4/adc.c **** *  the function does not return (blocking) until the conversion has
 435:Generated_Source\PSoC4/adc.c **** *  completed.
 436:Generated_Source\PSoC4/adc.c **** *
 437:Generated_Source\PSoC4/adc.c **** * Parameters:
 438:Generated_Source\PSoC4/adc.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:Generated_Source\PSoC4/adc.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 440:Generated_Source\PSoC4/adc.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:Generated_Source\PSoC4/adc.c **** *                              for injection channel
 442:Generated_Source\PSoC4/adc.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:Generated_Source\PSoC4/adc.c **** *                              channel conversion
 444:Generated_Source\PSoC4/adc.c **** *
 445:Generated_Source\PSoC4/adc.c **** * Return:
 446:Generated_Source\PSoC4/adc.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:Generated_Source\PSoC4/adc.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:Generated_Source\PSoC4/adc.c **** *
 449:Generated_Source\PSoC4/adc.c **** *******************************************************************************/
 450:Generated_Source\PSoC4/adc.c **** uint32 adc_IsEndConversion(uint32 retMode)
 451:Generated_Source\PSoC4/adc.c **** {
 566              		.loc 1 451 0
 567              		.cfi_startproc
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 19


 568              		@ args = 0, pretend = 0, frame = 16
 569              		@ frame_needed = 1, uses_anonymous_args = 0
 570 0000 80B5     		push	{r7, lr}
 571              		.cfi_def_cfa_offset 8
 572              		.cfi_offset 7, -8
 573              		.cfi_offset 14, -4
 574 0002 84B0     		sub	sp, sp, #16
 575              		.cfi_def_cfa_offset 24
 576 0004 00AF     		add	r7, sp, #0
 577              		.cfi_def_cfa_register 7
 578 0006 7860     		str	r0, [r7, #4]
 452:Generated_Source\PSoC4/adc.c ****     uint32 status = 0u;
 579              		.loc 1 452 0
 580 0008 0023     		movs	r3, #0
 581 000a FB60     		str	r3, [r7, #12]
 453:Generated_Source\PSoC4/adc.c **** 
 454:Generated_Source\PSoC4/adc.c ****     if((retMode & (adc_RETURN_STATUS | adc_WAIT_FOR_RESULT)) != 0u)
 582              		.loc 1 454 0
 583 000c 7B68     		ldr	r3, [r7, #4]
 584 000e 0322     		movs	r2, #3
 585 0010 1340     		ands	r3, r2
 586 0012 11D0     		beq	.L34
 587              	.L36:
 455:Generated_Source\PSoC4/adc.c ****     {
 456:Generated_Source\PSoC4/adc.c ****         do
 457:Generated_Source\PSoC4/adc.c ****         {
 458:Generated_Source\PSoC4/adc.c ****             status = adc_SAR_INTR_REG & adc_EOS_MASK;
 588              		.loc 1 458 0 discriminator 2
 589 0014 0B4B     		ldr	r3, .L38
 590 0016 1B68     		ldr	r3, [r3]
 591 0018 0122     		movs	r2, #1
 592 001a 1340     		ands	r3, r2
 593 001c FB60     		str	r3, [r7, #12]
 459:Generated_Source\PSoC4/adc.c ****         }while((status == 0u) && ((retMode & adc_WAIT_FOR_RESULT) != 0u));
 594              		.loc 1 459 0 discriminator 2
 595 001e FB68     		ldr	r3, [r7, #12]
 596 0020 002B     		cmp	r3, #0
 597 0022 03D1     		bne	.L35
 598              		.loc 1 459 0 is_stmt 0 discriminator 1
 599 0024 7B68     		ldr	r3, [r7, #4]
 600 0026 0222     		movs	r2, #2
 601 0028 1340     		ands	r3, r2
 602 002a F3D1     		bne	.L36
 603              	.L35:
 460:Generated_Source\PSoC4/adc.c **** 
 461:Generated_Source\PSoC4/adc.c ****         if(status != 0u)
 604              		.loc 1 461 0 is_stmt 1
 605 002c FB68     		ldr	r3, [r7, #12]
 606 002e 002B     		cmp	r3, #0
 607 0030 02D0     		beq	.L34
 462:Generated_Source\PSoC4/adc.c ****         {
 463:Generated_Source\PSoC4/adc.c ****             /* Clear EOS bit */
 464:Generated_Source\PSoC4/adc.c ****             adc_SAR_INTR_REG = adc_EOS_MASK;
 608              		.loc 1 464 0
 609 0032 044B     		ldr	r3, .L38
 610 0034 0122     		movs	r2, #1
 611 0036 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 20


 612              	.L34:
 465:Generated_Source\PSoC4/adc.c ****         }
 466:Generated_Source\PSoC4/adc.c ****     }
 467:Generated_Source\PSoC4/adc.c **** 
 468:Generated_Source\PSoC4/adc.c ****     #if(adc_INJ_CHANNEL_ENABLED)
 469:Generated_Source\PSoC4/adc.c ****         if((retMode & (adc_RETURN_STATUS_INJ | adc_WAIT_FOR_RESULT_INJ)) != 0u)
 470:Generated_Source\PSoC4/adc.c ****         {
 471:Generated_Source\PSoC4/adc.c ****             do
 472:Generated_Source\PSoC4/adc.c ****             {
 473:Generated_Source\PSoC4/adc.c ****                 status |= adc_SAR_INTR_REG & adc_INJ_EOC_MASK;
 474:Generated_Source\PSoC4/adc.c ****             }while(((status & adc_INJ_EOC_MASK) == 0u) &&
 475:Generated_Source\PSoC4/adc.c ****                    ((retMode & adc_WAIT_FOR_RESULT_INJ) != 0u));
 476:Generated_Source\PSoC4/adc.c **** 
 477:Generated_Source\PSoC4/adc.c ****             if((status & adc_INJ_EOC_MASK) != 0u)
 478:Generated_Source\PSoC4/adc.c ****             {
 479:Generated_Source\PSoC4/adc.c ****                 /* Clear Injection EOS bit */
 480:Generated_Source\PSoC4/adc.c ****                 adc_SAR_INTR_REG = adc_INJ_EOC_MASK;
 481:Generated_Source\PSoC4/adc.c ****             }
 482:Generated_Source\PSoC4/adc.c ****         }
 483:Generated_Source\PSoC4/adc.c ****     #endif /* adc_INJ_CHANNEL_ENABLED */
 484:Generated_Source\PSoC4/adc.c **** 
 485:Generated_Source\PSoC4/adc.c ****     return (status);
 613              		.loc 1 485 0
 614 0038 FB68     		ldr	r3, [r7, #12]
 486:Generated_Source\PSoC4/adc.c **** }
 615              		.loc 1 486 0
 616 003a 1800     		movs	r0, r3
 617 003c BD46     		mov	sp, r7
 618 003e 04B0     		add	sp, sp, #16
 619              		@ sp needed
 620 0040 80BD     		pop	{r7, pc}
 621              	.L39:
 622 0042 C046     		.align	2
 623              	.L38:
 624 0044 10023A40 		.word	1077543440
 625              		.cfi_endproc
 626              	.LFE8:
 627              		.size	adc_IsEndConversion, .-adc_IsEndConversion
 628              		.section	.text.adc_GetResult16,"ax",%progbits
 629              		.align	2
 630              		.global	adc_GetResult16
 631              		.code	16
 632              		.thumb_func
 633              		.type	adc_GetResult16, %function
 634              	adc_GetResult16:
 635              	.LFB9:
 487:Generated_Source\PSoC4/adc.c **** 
 488:Generated_Source\PSoC4/adc.c **** 
 489:Generated_Source\PSoC4/adc.c **** /*******************************************************************************
 490:Generated_Source\PSoC4/adc.c **** * Function Name: adc_GetResult16
 491:Generated_Source\PSoC4/adc.c **** ********************************************************************************
 492:Generated_Source\PSoC4/adc.c **** *
 493:Generated_Source\PSoC4/adc.c **** * Summary:
 494:Generated_Source\PSoC4/adc.c **** *  Gets the data available in the SAR DATA register.
 495:Generated_Source\PSoC4/adc.c **** *
 496:Generated_Source\PSoC4/adc.c **** * Parameters:
 497:Generated_Source\PSoC4/adc.c **** *  chan: The ADC channel in which to return the result. The first channel
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 21


 498:Generated_Source\PSoC4/adc.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:Generated_Source\PSoC4/adc.c **** *
 500:Generated_Source\PSoC4/adc.c **** * Return:
 501:Generated_Source\PSoC4/adc.c **** *  Returns converted data as a signed 16-bit integer
 502:Generated_Source\PSoC4/adc.c **** *
 503:Generated_Source\PSoC4/adc.c **** *******************************************************************************/
 504:Generated_Source\PSoC4/adc.c **** int16 adc_GetResult16(uint32 chan)
 505:Generated_Source\PSoC4/adc.c **** {
 636              		.loc 1 505 0
 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 16
 639              		@ frame_needed = 1, uses_anonymous_args = 0
 640 0000 80B5     		push	{r7, lr}
 641              		.cfi_def_cfa_offset 8
 642              		.cfi_offset 7, -8
 643              		.cfi_offset 14, -4
 644 0002 84B0     		sub	sp, sp, #16
 645              		.cfi_def_cfa_offset 24
 646 0004 00AF     		add	r7, sp, #0
 647              		.cfi_def_cfa_register 7
 648 0006 7860     		str	r0, [r7, #4]
 506:Generated_Source\PSoC4/adc.c ****     uint32 result;
 507:Generated_Source\PSoC4/adc.c **** 
 508:Generated_Source\PSoC4/adc.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 509:Generated_Source\PSoC4/adc.c ****     CYASSERT(chan < adc_TOTAL_CHANNELS_NUM);
 649              		.loc 1 509 0
 650 0008 7B68     		ldr	r3, [r7, #4]
 651 000a 012B     		cmp	r3, #1
 652 000c 02D9     		bls	.L41
 653              		.loc 1 509 0 is_stmt 0 discriminator 1
 654 000e 0020     		movs	r0, #0
 655 0010 FFF7FEFF 		bl	CyHalt
 656              	.L41:
 510:Generated_Source\PSoC4/adc.c **** 
 511:Generated_Source\PSoC4/adc.c ****     if(chan < adc_SEQUENCED_CHANNELS_NUM)
 657              		.loc 1 511 0 is_stmt 1
 658 0014 7B68     		ldr	r3, [r7, #4]
 659 0016 012B     		cmp	r3, #1
 660 0018 09D8     		bhi	.L42
 512:Generated_Source\PSoC4/adc.c ****     {
 513:Generated_Source\PSoC4/adc.c ****         result = CY_GET_REG32((reg32 *)(adc_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 661              		.loc 1 513 0
 662 001a 7B68     		ldr	r3, [r7, #4]
 663 001c 9B00     		lsls	r3, r3, #2
 664 001e 084A     		ldr	r2, .L45
 665 0020 9446     		mov	ip, r2
 666 0022 6344     		add	r3, r3, ip
 667 0024 1B68     		ldr	r3, [r3]
 668 0026 1B04     		lsls	r3, r3, #16
 669 0028 1B0C     		lsrs	r3, r3, #16
 670 002a FB60     		str	r3, [r7, #12]
 671 002c 01E0     		b	.L43
 672              	.L42:
 514:Generated_Source\PSoC4/adc.c ****                 adc_RESULT_MASK;
 515:Generated_Source\PSoC4/adc.c ****     }
 516:Generated_Source\PSoC4/adc.c ****     else
 517:Generated_Source\PSoC4/adc.c ****     {
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 22


 518:Generated_Source\PSoC4/adc.c ****         #if(adc_INJ_CHANNEL_ENABLED)
 519:Generated_Source\PSoC4/adc.c ****             result = adc_SAR_INJ_RESULT_REG & adc_RESULT_MASK;
 520:Generated_Source\PSoC4/adc.c ****         #else
 521:Generated_Source\PSoC4/adc.c ****             result = 0u;
 673              		.loc 1 521 0
 674 002e 0023     		movs	r3, #0
 675 0030 FB60     		str	r3, [r7, #12]
 676              	.L43:
 522:Generated_Source\PSoC4/adc.c ****         #endif /* adc_INJ_CHANNEL_ENABLED */
 523:Generated_Source\PSoC4/adc.c ****     }
 524:Generated_Source\PSoC4/adc.c **** 
 525:Generated_Source\PSoC4/adc.c ****     return ( (int16)result );
 677              		.loc 1 525 0
 678 0032 FB68     		ldr	r3, [r7, #12]
 679 0034 1BB2     		sxth	r3, r3
 526:Generated_Source\PSoC4/adc.c **** }
 680              		.loc 1 526 0
 681 0036 1800     		movs	r0, r3
 682 0038 BD46     		mov	sp, r7
 683 003a 04B0     		add	sp, sp, #16
 684              		@ sp needed
 685 003c 80BD     		pop	{r7, pc}
 686              	.L46:
 687 003e C046     		.align	2
 688              	.L45:
 689 0040 80013A40 		.word	1077543296
 690              		.cfi_endproc
 691              	.LFE9:
 692              		.size	adc_GetResult16, .-adc_GetResult16
 693              		.section	.text.adc_SetChanMask,"ax",%progbits
 694              		.align	2
 695              		.global	adc_SetChanMask
 696              		.code	16
 697              		.thumb_func
 698              		.type	adc_SetChanMask, %function
 699              	adc_SetChanMask:
 700              	.LFB10:
 527:Generated_Source\PSoC4/adc.c **** 
 528:Generated_Source\PSoC4/adc.c **** 
 529:Generated_Source\PSoC4/adc.c **** /*******************************************************************************
 530:Generated_Source\PSoC4/adc.c **** * Function Name: adc_SetChanMask
 531:Generated_Source\PSoC4/adc.c **** ********************************************************************************
 532:Generated_Source\PSoC4/adc.c **** *
 533:Generated_Source\PSoC4/adc.c **** * Summary:
 534:Generated_Source\PSoC4/adc.c **** *  Sets the channel enable mask.
 535:Generated_Source\PSoC4/adc.c **** *
 536:Generated_Source\PSoC4/adc.c **** * Parameters:
 537:Generated_Source\PSoC4/adc.c **** *  mask: Sets which channels that will be
 538:Generated_Source\PSoC4/adc.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:Generated_Source\PSoC4/adc.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:Generated_Source\PSoC4/adc.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:Generated_Source\PSoC4/adc.c **** *  This API will not enable the injection channel.
 542:Generated_Source\PSoC4/adc.c **** *  Examples: If the component is setup to sequence through 8
 543:Generated_Source\PSoC4/adc.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:Generated_Source\PSoC4/adc.c **** *
 545:Generated_Source\PSoC4/adc.c **** * Return:
 546:Generated_Source\PSoC4/adc.c **** *  None.
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 23


 547:Generated_Source\PSoC4/adc.c **** *
 548:Generated_Source\PSoC4/adc.c **** *******************************************************************************/
 549:Generated_Source\PSoC4/adc.c **** void adc_SetChanMask(uint32 mask)
 550:Generated_Source\PSoC4/adc.c **** {
 701              		.loc 1 550 0
 702              		.cfi_startproc
 703              		@ args = 0, pretend = 0, frame = 8
 704              		@ frame_needed = 1, uses_anonymous_args = 0
 705 0000 80B5     		push	{r7, lr}
 706              		.cfi_def_cfa_offset 8
 707              		.cfi_offset 7, -8
 708              		.cfi_offset 14, -4
 709 0002 82B0     		sub	sp, sp, #8
 710              		.cfi_def_cfa_offset 16
 711 0004 00AF     		add	r7, sp, #0
 712              		.cfi_def_cfa_register 7
 713 0006 7860     		str	r0, [r7, #4]
 551:Generated_Source\PSoC4/adc.c ****     adc_SAR_CHAN_EN_REG = mask & adc_MAX_CHANNELS_EN_MASK;
 714              		.loc 1 551 0
 715 0008 044B     		ldr	r3, .L48
 716 000a 7A68     		ldr	r2, [r7, #4]
 717 000c 0321     		movs	r1, #3
 718 000e 0A40     		ands	r2, r1
 719 0010 1A60     		str	r2, [r3]
 552:Generated_Source\PSoC4/adc.c **** }
 720              		.loc 1 552 0
 721 0012 C046     		nop
 722 0014 BD46     		mov	sp, r7
 723 0016 02B0     		add	sp, sp, #8
 724              		@ sp needed
 725 0018 80BD     		pop	{r7, pc}
 726              	.L49:
 727 001a C046     		.align	2
 728              	.L48:
 729 001c 20003A40 		.word	1077542944
 730              		.cfi_endproc
 731              	.LFE10:
 732              		.size	adc_SetChanMask, .-adc_SetChanMask
 733              		.section	.text.adc_SetLowLimit,"ax",%progbits
 734              		.align	2
 735              		.global	adc_SetLowLimit
 736              		.code	16
 737              		.thumb_func
 738              		.type	adc_SetLowLimit, %function
 739              	adc_SetLowLimit:
 740              	.LFB11:
 553:Generated_Source\PSoC4/adc.c **** 
 554:Generated_Source\PSoC4/adc.c **** #if(adc_INJ_CHANNEL_ENABLED)
 555:Generated_Source\PSoC4/adc.c **** 
 556:Generated_Source\PSoC4/adc.c **** 
 557:Generated_Source\PSoC4/adc.c ****     /*******************************************************************************
 558:Generated_Source\PSoC4/adc.c ****     * Function Name: adc_EnableInjection
 559:Generated_Source\PSoC4/adc.c ****     ********************************************************************************
 560:Generated_Source\PSoC4/adc.c ****     *
 561:Generated_Source\PSoC4/adc.c ****     * Summary:
 562:Generated_Source\PSoC4/adc.c ****     *  Enables the injection channel for the next scan only.
 563:Generated_Source\PSoC4/adc.c ****     *
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 24


 564:Generated_Source\PSoC4/adc.c ****     * Parameters:
 565:Generated_Source\PSoC4/adc.c ****     *  None.
 566:Generated_Source\PSoC4/adc.c ****     *
 567:Generated_Source\PSoC4/adc.c ****     * Return:
 568:Generated_Source\PSoC4/adc.c ****     *  None.
 569:Generated_Source\PSoC4/adc.c ****     *
 570:Generated_Source\PSoC4/adc.c ****     *******************************************************************************/
 571:Generated_Source\PSoC4/adc.c ****     void adc_EnableInjection(void)
 572:Generated_Source\PSoC4/adc.c ****     {
 573:Generated_Source\PSoC4/adc.c ****         adc_SAR_INJ_CHAN_CONFIG_REG |= adc_INJ_CHAN_EN;
 574:Generated_Source\PSoC4/adc.c ****     }
 575:Generated_Source\PSoC4/adc.c **** 
 576:Generated_Source\PSoC4/adc.c **** #endif /* adc_INJ_CHANNEL_ENABLED */
 577:Generated_Source\PSoC4/adc.c **** 
 578:Generated_Source\PSoC4/adc.c **** 
 579:Generated_Source\PSoC4/adc.c **** /*******************************************************************************
 580:Generated_Source\PSoC4/adc.c **** * Function Name: adc_SetLowLimit
 581:Generated_Source\PSoC4/adc.c **** ********************************************************************************
 582:Generated_Source\PSoC4/adc.c **** *
 583:Generated_Source\PSoC4/adc.c **** * Summary:
 584:Generated_Source\PSoC4/adc.c **** *  Sets the low limit parameter for a limit condition.
 585:Generated_Source\PSoC4/adc.c **** *
 586:Generated_Source\PSoC4/adc.c **** * Parameters:
 587:Generated_Source\PSoC4/adc.c **** *  lowLimit: The low limit for a limit condition.
 588:Generated_Source\PSoC4/adc.c **** *
 589:Generated_Source\PSoC4/adc.c **** * Return:
 590:Generated_Source\PSoC4/adc.c **** *  None.
 591:Generated_Source\PSoC4/adc.c **** *
 592:Generated_Source\PSoC4/adc.c **** *******************************************************************************/
 593:Generated_Source\PSoC4/adc.c **** void adc_SetLowLimit(uint32 lowLimit)
 594:Generated_Source\PSoC4/adc.c **** {
 741              		.loc 1 594 0
 742              		.cfi_startproc
 743              		@ args = 0, pretend = 0, frame = 8
 744              		@ frame_needed = 1, uses_anonymous_args = 0
 745 0000 80B5     		push	{r7, lr}
 746              		.cfi_def_cfa_offset 8
 747              		.cfi_offset 7, -8
 748              		.cfi_offset 14, -4
 749 0002 82B0     		sub	sp, sp, #8
 750              		.cfi_def_cfa_offset 16
 751 0004 00AF     		add	r7, sp, #0
 752              		.cfi_def_cfa_register 7
 753 0006 7860     		str	r0, [r7, #4]
 595:Generated_Source\PSoC4/adc.c ****     adc_SAR_RANGE_THRES_REG &= (uint32)(~adc_RANGE_LOW_MASK);
 754              		.loc 1 595 0
 755 0008 084B     		ldr	r3, .L51
 756 000a 084A     		ldr	r2, .L51
 757 000c 1268     		ldr	r2, [r2]
 758 000e 120C     		lsrs	r2, r2, #16
 759 0010 1204     		lsls	r2, r2, #16
 760 0012 1A60     		str	r2, [r3]
 596:Generated_Source\PSoC4/adc.c ****     adc_SAR_RANGE_THRES_REG |= lowLimit & adc_RANGE_LOW_MASK;
 761              		.loc 1 596 0
 762 0014 054B     		ldr	r3, .L51
 763 0016 054A     		ldr	r2, .L51
 764 0018 1168     		ldr	r1, [r2]
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 25


 765 001a 7A68     		ldr	r2, [r7, #4]
 766 001c 1204     		lsls	r2, r2, #16
 767 001e 120C     		lsrs	r2, r2, #16
 768 0020 0A43     		orrs	r2, r1
 769 0022 1A60     		str	r2, [r3]
 597:Generated_Source\PSoC4/adc.c **** }
 770              		.loc 1 597 0
 771 0024 C046     		nop
 772 0026 BD46     		mov	sp, r7
 773 0028 02B0     		add	sp, sp, #8
 774              		@ sp needed
 775 002a 80BD     		pop	{r7, pc}
 776              	.L52:
 777              		.align	2
 778              	.L51:
 779 002c 18003A40 		.word	1077542936
 780              		.cfi_endproc
 781              	.LFE11:
 782              		.size	adc_SetLowLimit, .-adc_SetLowLimit
 783              		.section	.text.adc_SetHighLimit,"ax",%progbits
 784              		.align	2
 785              		.global	adc_SetHighLimit
 786              		.code	16
 787              		.thumb_func
 788              		.type	adc_SetHighLimit, %function
 789              	adc_SetHighLimit:
 790              	.LFB12:
 598:Generated_Source\PSoC4/adc.c **** 
 599:Generated_Source\PSoC4/adc.c **** 
 600:Generated_Source\PSoC4/adc.c **** /*******************************************************************************
 601:Generated_Source\PSoC4/adc.c **** * Function Name: adc_SetHighLimit
 602:Generated_Source\PSoC4/adc.c **** ********************************************************************************
 603:Generated_Source\PSoC4/adc.c **** *
 604:Generated_Source\PSoC4/adc.c **** * Summary:
 605:Generated_Source\PSoC4/adc.c **** *  Sets the low limit parameter for a limit condition.
 606:Generated_Source\PSoC4/adc.c **** *
 607:Generated_Source\PSoC4/adc.c **** * Parameters:
 608:Generated_Source\PSoC4/adc.c **** *  highLimit: The high limit for a limit condition.
 609:Generated_Source\PSoC4/adc.c **** *
 610:Generated_Source\PSoC4/adc.c **** * Return:
 611:Generated_Source\PSoC4/adc.c **** *  None.
 612:Generated_Source\PSoC4/adc.c **** *
 613:Generated_Source\PSoC4/adc.c **** *******************************************************************************/
 614:Generated_Source\PSoC4/adc.c **** void adc_SetHighLimit(uint32 highLimit)
 615:Generated_Source\PSoC4/adc.c **** {
 791              		.loc 1 615 0
 792              		.cfi_startproc
 793              		@ args = 0, pretend = 0, frame = 8
 794              		@ frame_needed = 1, uses_anonymous_args = 0
 795 0000 80B5     		push	{r7, lr}
 796              		.cfi_def_cfa_offset 8
 797              		.cfi_offset 7, -8
 798              		.cfi_offset 14, -4
 799 0002 82B0     		sub	sp, sp, #8
 800              		.cfi_def_cfa_offset 16
 801 0004 00AF     		add	r7, sp, #0
 802              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 26


 803 0006 7860     		str	r0, [r7, #4]
 616:Generated_Source\PSoC4/adc.c ****     adc_SAR_RANGE_THRES_REG &= (uint32)(~adc_RANGE_HIGH_MASK);
 804              		.loc 1 616 0
 805 0008 084B     		ldr	r3, .L54
 806 000a 084A     		ldr	r2, .L54
 807 000c 1268     		ldr	r2, [r2]
 808 000e 1204     		lsls	r2, r2, #16
 809 0010 120C     		lsrs	r2, r2, #16
 810 0012 1A60     		str	r2, [r3]
 617:Generated_Source\PSoC4/adc.c ****     adc_SAR_RANGE_THRES_REG |= (uint32)(highLimit << adc_RANGE_HIGH_OFFSET);
 811              		.loc 1 617 0
 812 0014 054B     		ldr	r3, .L54
 813 0016 054A     		ldr	r2, .L54
 814 0018 1168     		ldr	r1, [r2]
 815 001a 7A68     		ldr	r2, [r7, #4]
 816 001c 1204     		lsls	r2, r2, #16
 817 001e 0A43     		orrs	r2, r1
 818 0020 1A60     		str	r2, [r3]
 618:Generated_Source\PSoC4/adc.c **** }
 819              		.loc 1 618 0
 820 0022 C046     		nop
 821 0024 BD46     		mov	sp, r7
 822 0026 02B0     		add	sp, sp, #8
 823              		@ sp needed
 824 0028 80BD     		pop	{r7, pc}
 825              	.L55:
 826 002a C046     		.align	2
 827              	.L54:
 828 002c 18003A40 		.word	1077542936
 829              		.cfi_endproc
 830              	.LFE12:
 831              		.size	adc_SetHighLimit, .-adc_SetHighLimit
 832              		.section	.text.adc_SetLimitMask,"ax",%progbits
 833              		.align	2
 834              		.global	adc_SetLimitMask
 835              		.code	16
 836              		.thumb_func
 837              		.type	adc_SetLimitMask, %function
 838              	adc_SetLimitMask:
 839              	.LFB13:
 619:Generated_Source\PSoC4/adc.c **** 
 620:Generated_Source\PSoC4/adc.c **** 
 621:Generated_Source\PSoC4/adc.c **** /*******************************************************************************
 622:Generated_Source\PSoC4/adc.c **** * Function Name: adc_SetLimitMask
 623:Generated_Source\PSoC4/adc.c **** ********************************************************************************
 624:Generated_Source\PSoC4/adc.c **** *
 625:Generated_Source\PSoC4/adc.c **** * Summary:
 626:Generated_Source\PSoC4/adc.c **** *  Sets the channel limit condition mask.
 627:Generated_Source\PSoC4/adc.c **** *
 628:Generated_Source\PSoC4/adc.c **** * Parameters:
 629:Generated_Source\PSoC4/adc.c **** *  mask: Sets which channels that may cause a
 630:Generated_Source\PSoC4/adc.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:Generated_Source\PSoC4/adc.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:Generated_Source\PSoC4/adc.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:Generated_Source\PSoC4/adc.c **** *
 634:Generated_Source\PSoC4/adc.c **** * Return:
 635:Generated_Source\PSoC4/adc.c **** *  None.
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 27


 636:Generated_Source\PSoC4/adc.c **** *
 637:Generated_Source\PSoC4/adc.c **** *******************************************************************************/
 638:Generated_Source\PSoC4/adc.c **** void adc_SetLimitMask(uint32 mask)
 639:Generated_Source\PSoC4/adc.c **** {
 840              		.loc 1 639 0
 841              		.cfi_startproc
 842              		@ args = 0, pretend = 0, frame = 8
 843              		@ frame_needed = 1, uses_anonymous_args = 0
 844 0000 80B5     		push	{r7, lr}
 845              		.cfi_def_cfa_offset 8
 846              		.cfi_offset 7, -8
 847              		.cfi_offset 14, -4
 848 0002 82B0     		sub	sp, sp, #8
 849              		.cfi_def_cfa_offset 16
 850 0004 00AF     		add	r7, sp, #0
 851              		.cfi_def_cfa_register 7
 852 0006 7860     		str	r0, [r7, #4]
 640:Generated_Source\PSoC4/adc.c ****     adc_SAR_RANGE_INTR_MASK_REG = mask & adc_MAX_CHANNELS_EN_MASK;
 853              		.loc 1 640 0
 854 0008 044B     		ldr	r3, .L57
 855 000a 7A68     		ldr	r2, [r7, #4]
 856 000c 0321     		movs	r1, #3
 857 000e 0A40     		ands	r2, r1
 858 0010 1A60     		str	r2, [r3]
 641:Generated_Source\PSoC4/adc.c **** }
 859              		.loc 1 641 0
 860 0012 C046     		nop
 861 0014 BD46     		mov	sp, r7
 862 0016 02B0     		add	sp, sp, #8
 863              		@ sp needed
 864 0018 80BD     		pop	{r7, pc}
 865              	.L58:
 866 001a C046     		.align	2
 867              	.L57:
 868 001c 38023A40 		.word	1077543480
 869              		.cfi_endproc
 870              	.LFE13:
 871              		.size	adc_SetLimitMask, .-adc_SetLimitMask
 872              		.section	.text.adc_SetSatMask,"ax",%progbits
 873              		.align	2
 874              		.global	adc_SetSatMask
 875              		.code	16
 876              		.thumb_func
 877              		.type	adc_SetSatMask, %function
 878              	adc_SetSatMask:
 879              	.LFB14:
 642:Generated_Source\PSoC4/adc.c **** 
 643:Generated_Source\PSoC4/adc.c **** 
 644:Generated_Source\PSoC4/adc.c **** /*******************************************************************************
 645:Generated_Source\PSoC4/adc.c **** * Function Name: adc_SetSatMask
 646:Generated_Source\PSoC4/adc.c **** ********************************************************************************
 647:Generated_Source\PSoC4/adc.c **** *
 648:Generated_Source\PSoC4/adc.c **** * Summary:
 649:Generated_Source\PSoC4/adc.c **** *  Sets the channel saturation event mask.
 650:Generated_Source\PSoC4/adc.c **** *
 651:Generated_Source\PSoC4/adc.c **** * Parameters:
 652:Generated_Source\PSoC4/adc.c **** *  mask: Sets which channels that may cause a
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 28


 653:Generated_Source\PSoC4/adc.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:Generated_Source\PSoC4/adc.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:Generated_Source\PSoC4/adc.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:Generated_Source\PSoC4/adc.c **** *
 657:Generated_Source\PSoC4/adc.c **** * Return:
 658:Generated_Source\PSoC4/adc.c **** *  None.
 659:Generated_Source\PSoC4/adc.c **** *
 660:Generated_Source\PSoC4/adc.c **** *******************************************************************************/
 661:Generated_Source\PSoC4/adc.c **** void adc_SetSatMask(uint32 mask)
 662:Generated_Source\PSoC4/adc.c **** {
 880              		.loc 1 662 0
 881              		.cfi_startproc
 882              		@ args = 0, pretend = 0, frame = 8
 883              		@ frame_needed = 1, uses_anonymous_args = 0
 884 0000 80B5     		push	{r7, lr}
 885              		.cfi_def_cfa_offset 8
 886              		.cfi_offset 7, -8
 887              		.cfi_offset 14, -4
 888 0002 82B0     		sub	sp, sp, #8
 889              		.cfi_def_cfa_offset 16
 890 0004 00AF     		add	r7, sp, #0
 891              		.cfi_def_cfa_register 7
 892 0006 7860     		str	r0, [r7, #4]
 663:Generated_Source\PSoC4/adc.c ****     adc_SAR_SATURATE_INTR_MASK_REG = mask & adc_MAX_CHANNELS_EN_MASK;
 893              		.loc 1 663 0
 894 0008 044B     		ldr	r3, .L60
 895 000a 7A68     		ldr	r2, [r7, #4]
 896 000c 0321     		movs	r1, #3
 897 000e 0A40     		ands	r2, r1
 898 0010 1A60     		str	r2, [r3]
 664:Generated_Source\PSoC4/adc.c **** }
 899              		.loc 1 664 0
 900 0012 C046     		nop
 901 0014 BD46     		mov	sp, r7
 902 0016 02B0     		add	sp, sp, #8
 903              		@ sp needed
 904 0018 80BD     		pop	{r7, pc}
 905              	.L61:
 906 001a C046     		.align	2
 907              	.L60:
 908 001c 28023A40 		.word	1077543464
 909              		.cfi_endproc
 910              	.LFE14:
 911              		.size	adc_SetSatMask, .-adc_SetSatMask
 912              		.section	.text.adc_SetOffset,"ax",%progbits
 913              		.align	2
 914              		.global	adc_SetOffset
 915              		.code	16
 916              		.thumb_func
 917              		.type	adc_SetOffset, %function
 918              	adc_SetOffset:
 919              	.LFB15:
 665:Generated_Source\PSoC4/adc.c **** 
 666:Generated_Source\PSoC4/adc.c **** 
 667:Generated_Source\PSoC4/adc.c **** /*******************************************************************************
 668:Generated_Source\PSoC4/adc.c **** * Function Name: adc_SetOffset
 669:Generated_Source\PSoC4/adc.c **** ********************************************************************************
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 29


 670:Generated_Source\PSoC4/adc.c **** *
 671:Generated_Source\PSoC4/adc.c **** * Summary:
 672:Generated_Source\PSoC4/adc.c **** *   Description: Sets the ADC offset which is used by the functions
 673:Generated_Source\PSoC4/adc.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:Generated_Source\PSoC4/adc.c **** *   to substract the offset from the given reading
 675:Generated_Source\PSoC4/adc.c **** *   before calculating the voltage conversion.
 676:Generated_Source\PSoC4/adc.c **** *
 677:Generated_Source\PSoC4/adc.c **** * Parameters:
 678:Generated_Source\PSoC4/adc.c **** *  chan: ADC channel number.
 679:Generated_Source\PSoC4/adc.c **** *  offset: This value is a measured value when the
 680:Generated_Source\PSoC4/adc.c **** *          inputs are shorted or connected to the same input voltage.
 681:Generated_Source\PSoC4/adc.c **** *
 682:Generated_Source\PSoC4/adc.c **** * Return:
 683:Generated_Source\PSoC4/adc.c **** *  None.
 684:Generated_Source\PSoC4/adc.c **** *
 685:Generated_Source\PSoC4/adc.c **** * Global variables:
 686:Generated_Source\PSoC4/adc.c **** *  adc_Offset:  Modified to set the user provided offset.
 687:Generated_Source\PSoC4/adc.c **** *
 688:Generated_Source\PSoC4/adc.c **** *******************************************************************************/
 689:Generated_Source\PSoC4/adc.c **** void adc_SetOffset(uint32 chan, int16 offset)
 690:Generated_Source\PSoC4/adc.c **** {
 920              		.loc 1 690 0
 921              		.cfi_startproc
 922              		@ args = 0, pretend = 0, frame = 8
 923              		@ frame_needed = 1, uses_anonymous_args = 0
 924 0000 80B5     		push	{r7, lr}
 925              		.cfi_def_cfa_offset 8
 926              		.cfi_offset 7, -8
 927              		.cfi_offset 14, -4
 928 0002 82B0     		sub	sp, sp, #8
 929              		.cfi_def_cfa_offset 16
 930 0004 00AF     		add	r7, sp, #0
 931              		.cfi_def_cfa_register 7
 932 0006 7860     		str	r0, [r7, #4]
 933 0008 0A00     		movs	r2, r1
 934 000a BB1C     		adds	r3, r7, #2
 935 000c 1A80     		strh	r2, [r3]
 691:Generated_Source\PSoC4/adc.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 692:Generated_Source\PSoC4/adc.c ****     CYASSERT(chan < adc_TOTAL_CHANNELS_NUM);
 936              		.loc 1 692 0
 937 000e 7B68     		ldr	r3, [r7, #4]
 938 0010 012B     		cmp	r3, #1
 939 0012 02D9     		bls	.L63
 940              		.loc 1 692 0 is_stmt 0 discriminator 1
 941 0014 0020     		movs	r0, #0
 942 0016 FFF7FEFF 		bl	CyHalt
 943              	.L63:
 693:Generated_Source\PSoC4/adc.c **** 
 694:Generated_Source\PSoC4/adc.c ****     adc_offset[chan] = offset;
 944              		.loc 1 694 0 is_stmt 1
 945 001a 054B     		ldr	r3, .L64
 946 001c 7A68     		ldr	r2, [r7, #4]
 947 001e 5200     		lsls	r2, r2, #1
 948 0020 B91C     		adds	r1, r7, #2
 949 0022 0988     		ldrh	r1, [r1]
 950 0024 D152     		strh	r1, [r2, r3]
 695:Generated_Source\PSoC4/adc.c **** }
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 30


 951              		.loc 1 695 0
 952 0026 C046     		nop
 953 0028 BD46     		mov	sp, r7
 954 002a 02B0     		add	sp, sp, #8
 955              		@ sp needed
 956 002c 80BD     		pop	{r7, pc}
 957              	.L65:
 958 002e C046     		.align	2
 959              	.L64:
 960 0030 00000000 		.word	adc_offset
 961              		.cfi_endproc
 962              	.LFE15:
 963              		.size	adc_SetOffset, .-adc_SetOffset
 964              		.section	.text.adc_SetGain,"ax",%progbits
 965              		.align	2
 966              		.global	adc_SetGain
 967              		.code	16
 968              		.thumb_func
 969              		.type	adc_SetGain, %function
 970              	adc_SetGain:
 971              	.LFB16:
 696:Generated_Source\PSoC4/adc.c **** 
 697:Generated_Source\PSoC4/adc.c **** 
 698:Generated_Source\PSoC4/adc.c **** /*******************************************************************************
 699:Generated_Source\PSoC4/adc.c **** * Function Name: adc_SetGain
 700:Generated_Source\PSoC4/adc.c **** ********************************************************************************
 701:Generated_Source\PSoC4/adc.c **** *
 702:Generated_Source\PSoC4/adc.c **** * Summary:
 703:Generated_Source\PSoC4/adc.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:Generated_Source\PSoC4/adc.c **** *  conversion functions below. This value is set by default by the
 705:Generated_Source\PSoC4/adc.c **** *  reference and input range settings. It should only be used to further
 706:Generated_Source\PSoC4/adc.c **** *  calibrate the ADC with a known input or if an external reference is
 707:Generated_Source\PSoC4/adc.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:Generated_Source\PSoC4/adc.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:Generated_Source\PSoC4/adc.c **** *  conversion between ADC counts and voltage.
 710:Generated_Source\PSoC4/adc.c **** *
 711:Generated_Source\PSoC4/adc.c **** * Parameters:
 712:Generated_Source\PSoC4/adc.c **** *  chan: ADC channel number.
 713:Generated_Source\PSoC4/adc.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:Generated_Source\PSoC4/adc.c **** *
 715:Generated_Source\PSoC4/adc.c **** * Return:
 716:Generated_Source\PSoC4/adc.c **** *  None.
 717:Generated_Source\PSoC4/adc.c **** *
 718:Generated_Source\PSoC4/adc.c **** * Global variables:
 719:Generated_Source\PSoC4/adc.c **** *  adc_CountsPer10Volt:  modified to set the ADC gain in counts
 720:Generated_Source\PSoC4/adc.c **** *   per 10 volt.
 721:Generated_Source\PSoC4/adc.c **** *
 722:Generated_Source\PSoC4/adc.c **** *******************************************************************************/
 723:Generated_Source\PSoC4/adc.c **** void adc_SetGain(uint32 chan, int32 adcGain)
 724:Generated_Source\PSoC4/adc.c **** {
 972              		.loc 1 724 0
 973              		.cfi_startproc
 974              		@ args = 0, pretend = 0, frame = 8
 975              		@ frame_needed = 1, uses_anonymous_args = 0
 976 0000 80B5     		push	{r7, lr}
 977              		.cfi_def_cfa_offset 8
 978              		.cfi_offset 7, -8
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 31


 979              		.cfi_offset 14, -4
 980 0002 82B0     		sub	sp, sp, #8
 981              		.cfi_def_cfa_offset 16
 982 0004 00AF     		add	r7, sp, #0
 983              		.cfi_def_cfa_register 7
 984 0006 7860     		str	r0, [r7, #4]
 985 0008 3960     		str	r1, [r7]
 725:Generated_Source\PSoC4/adc.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:Generated_Source\PSoC4/adc.c ****     CYASSERT(chan < adc_TOTAL_CHANNELS_NUM);
 986              		.loc 1 726 0
 987 000a 7B68     		ldr	r3, [r7, #4]
 988 000c 012B     		cmp	r3, #1
 989 000e 02D9     		bls	.L67
 990              		.loc 1 726 0 is_stmt 0 discriminator 1
 991 0010 0020     		movs	r0, #0
 992 0012 FFF7FEFF 		bl	CyHalt
 993              	.L67:
 727:Generated_Source\PSoC4/adc.c **** 
 728:Generated_Source\PSoC4/adc.c ****     adc_countsPer10Volt[chan] = adcGain;
 994              		.loc 1 728 0 is_stmt 1
 995 0016 044B     		ldr	r3, .L68
 996 0018 7A68     		ldr	r2, [r7, #4]
 997 001a 9200     		lsls	r2, r2, #2
 998 001c 3968     		ldr	r1, [r7]
 999 001e D150     		str	r1, [r2, r3]
 729:Generated_Source\PSoC4/adc.c **** }
 1000              		.loc 1 729 0
 1001 0020 C046     		nop
 1002 0022 BD46     		mov	sp, r7
 1003 0024 02B0     		add	sp, sp, #8
 1004              		@ sp needed
 1005 0026 80BD     		pop	{r7, pc}
 1006              	.L69:
 1007              		.align	2
 1008              	.L68:
 1009 0028 00000000 		.word	adc_countsPer10Volt
 1010              		.cfi_endproc
 1011              	.LFE16:
 1012              		.size	adc_SetGain, .-adc_SetGain
 1013              		.section	.text.adc_CountsTo_mVolts,"ax",%progbits
 1014              		.align	2
 1015              		.global	adc_CountsTo_mVolts
 1016              		.code	16
 1017              		.thumb_func
 1018              		.type	adc_CountsTo_mVolts, %function
 1019              	adc_CountsTo_mVolts:
 1020              	.LFB17:
 730:Generated_Source\PSoC4/adc.c **** 
 731:Generated_Source\PSoC4/adc.c **** 
 732:Generated_Source\PSoC4/adc.c **** #if(adc_DEFAULT_JUSTIFICATION_SEL == adc__RIGHT)
 733:Generated_Source\PSoC4/adc.c **** 
 734:Generated_Source\PSoC4/adc.c **** 
 735:Generated_Source\PSoC4/adc.c ****     /*******************************************************************************
 736:Generated_Source\PSoC4/adc.c ****     * Function Name: adc_CountsTo_mVolts
 737:Generated_Source\PSoC4/adc.c ****     ********************************************************************************
 738:Generated_Source\PSoC4/adc.c ****     *
 739:Generated_Source\PSoC4/adc.c ****     * Summary:
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 32


 740:Generated_Source\PSoC4/adc.c ****     *  This function converts ADC counts to mVolts
 741:Generated_Source\PSoC4/adc.c ****     *  This function is not available when left data format justification selected.
 742:Generated_Source\PSoC4/adc.c ****     *
 743:Generated_Source\PSoC4/adc.c ****     * Parameters:
 744:Generated_Source\PSoC4/adc.c ****     *  chan: The ADC channel number.
 745:Generated_Source\PSoC4/adc.c ****     *  adcCounts: Result from the ADC conversion
 746:Generated_Source\PSoC4/adc.c ****     *
 747:Generated_Source\PSoC4/adc.c ****     * Return:
 748:Generated_Source\PSoC4/adc.c ****     *  Results in mVolts
 749:Generated_Source\PSoC4/adc.c ****     *
 750:Generated_Source\PSoC4/adc.c ****     * Global variables:
 751:Generated_Source\PSoC4/adc.c ****     *  adc_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:Generated_Source\PSoC4/adc.c ****     *  adc_Offset:  Used as the offset while converting ADC counts
 753:Generated_Source\PSoC4/adc.c ****     *   to mVolts.
 754:Generated_Source\PSoC4/adc.c ****     *
 755:Generated_Source\PSoC4/adc.c ****     *******************************************************************************/
 756:Generated_Source\PSoC4/adc.c ****     int16 adc_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:Generated_Source\PSoC4/adc.c ****     {
 1021              		.loc 1 757 0
 1022              		.cfi_startproc
 1023              		@ args = 0, pretend = 0, frame = 16
 1024              		@ frame_needed = 1, uses_anonymous_args = 0
 1025 0000 80B5     		push	{r7, lr}
 1026              		.cfi_def_cfa_offset 8
 1027              		.cfi_offset 7, -8
 1028              		.cfi_offset 14, -4
 1029 0002 84B0     		sub	sp, sp, #16
 1030              		.cfi_def_cfa_offset 24
 1031 0004 00AF     		add	r7, sp, #0
 1032              		.cfi_def_cfa_register 7
 1033 0006 7860     		str	r0, [r7, #4]
 1034 0008 0A00     		movs	r2, r1
 1035 000a BB1C     		adds	r3, r7, #2
 1036 000c 1A80     		strh	r2, [r3]
 758:Generated_Source\PSoC4/adc.c ****         int16 mVolts;
 759:Generated_Source\PSoC4/adc.c **** 
 760:Generated_Source\PSoC4/adc.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 761:Generated_Source\PSoC4/adc.c ****         CYASSERT(chan < adc_TOTAL_CHANNELS_NUM);
 1037              		.loc 1 761 0
 1038 000e 7B68     		ldr	r3, [r7, #4]
 1039 0010 012B     		cmp	r3, #1
 1040 0012 02D9     		bls	.L71
 1041              		.loc 1 761 0 is_stmt 0 discriminator 1
 1042 0014 0020     		movs	r0, #0
 1043 0016 FFF7FEFF 		bl	CyHalt
 1044              	.L71:
 762:Generated_Source\PSoC4/adc.c **** 
 763:Generated_Source\PSoC4/adc.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:Generated_Source\PSoC4/adc.c ****         #if(adc_DEFAULT_AVG_MODE == adc__ACCUMULATE)
 765:Generated_Source\PSoC4/adc.c ****             if((adc_channelsConfig[chan] & adc_AVERAGING_EN) != 0u)
 766:Generated_Source\PSoC4/adc.c ****             {
 767:Generated_Source\PSoC4/adc.c ****                 adcCounts /= adc_DEFAULT_AVG_SAMPLES_DIV;
 768:Generated_Source\PSoC4/adc.c ****             }
 769:Generated_Source\PSoC4/adc.c ****         #endif /* adc_DEFAULT_AVG_MODE == adc__ACCUMULATE */
 770:Generated_Source\PSoC4/adc.c **** 
 771:Generated_Source\PSoC4/adc.c ****         /* Subtract ADC offset */
 772:Generated_Source\PSoC4/adc.c ****         adcCounts -= adc_offset[chan];
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 33


 1045              		.loc 1 772 0 is_stmt 1
 1046 001a 1E4B     		ldr	r3, .L77
 1047 001c 7A68     		ldr	r2, [r7, #4]
 1048 001e 5200     		lsls	r2, r2, #1
 1049 0020 D35A     		ldrh	r3, [r2, r3]
 1050 0022 19B2     		sxth	r1, r3
 1051 0024 BB1C     		adds	r3, r7, #2
 1052 0026 1A88     		ldrh	r2, [r3]
 1053 0028 8BB2     		uxth	r3, r1
 1054 002a D31A     		subs	r3, r2, r3
 1055 002c 9AB2     		uxth	r2, r3
 1056 002e BB1C     		adds	r3, r7, #2
 1057 0030 1A80     		strh	r2, [r3]
 773:Generated_Source\PSoC4/adc.c **** 
 774:Generated_Source\PSoC4/adc.c ****         mVolts = (int16)((((int32)adcCounts * adc_10MV_COUNTS) + ( (adcCounts > 0) ?
 1058              		.loc 1 774 0
 1059 0032 BB1C     		adds	r3, r7, #2
 1060 0034 0022     		movs	r2, #0
 1061 0036 9B5E     		ldrsh	r3, [r3, r2]
 1062 0038 174A     		ldr	r2, .L77+4
 1063 003a 5A43     		muls	r2, r3
 775:Generated_Source\PSoC4/adc.c ****                  (adc_countsPer10Volt[chan] / 2) : (-(adc_countsPer10Volt[chan] / 2)) ))
 1064              		.loc 1 775 0
 1065 003c BB1C     		adds	r3, r7, #2
 1066 003e 0021     		movs	r1, #0
 1067 0040 5B5E     		ldrsh	r3, [r3, r1]
 1068 0042 002B     		cmp	r3, #0
 1069 0044 08DD     		ble	.L72
 1070              		.loc 1 775 0 is_stmt 0 discriminator 1
 1071 0046 154B     		ldr	r3, .L77+8
 1072 0048 7968     		ldr	r1, [r7, #4]
 1073 004a 8900     		lsls	r1, r1, #2
 1074 004c CB58     		ldr	r3, [r1, r3]
 1075 004e 002B     		cmp	r3, #0
 1076 0050 00DA     		bge	.L73
 1077 0052 0133     		adds	r3, r3, #1
 1078              	.L73:
 1079 0054 5B10     		asrs	r3, r3, #1
 1080 0056 08E0     		b	.L74
 1081              	.L72:
 1082              		.loc 1 775 0 discriminator 2
 1083 0058 104B     		ldr	r3, .L77+8
 1084 005a 7968     		ldr	r1, [r7, #4]
 1085 005c 8900     		lsls	r1, r1, #2
 1086 005e CB58     		ldr	r3, [r1, r3]
 1087 0060 002B     		cmp	r3, #0
 1088 0062 00DA     		bge	.L75
 1089 0064 0133     		adds	r3, r3, #1
 1090              	.L75:
 1091 0066 5B10     		asrs	r3, r3, #1
 1092 0068 5B42     		rsbs	r3, r3, #0
 1093              	.L74:
 774:Generated_Source\PSoC4/adc.c ****                  (adc_countsPer10Volt[chan] / 2) : (-(adc_countsPer10Volt[chan] / 2)) ))
 1094              		.loc 1 774 0 is_stmt 1
 1095 006a D018     		adds	r0, r2, r3
 776:Generated_Source\PSoC4/adc.c ****                  / adc_countsPer10Volt[chan]);
 1096              		.loc 1 776 0
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 34


 1097 006c 0B4B     		ldr	r3, .L77+8
 1098 006e 7A68     		ldr	r2, [r7, #4]
 1099 0070 9200     		lsls	r2, r2, #2
 1100 0072 D358     		ldr	r3, [r2, r3]
 1101 0074 1900     		movs	r1, r3
 1102 0076 FFF7FEFF 		bl	__aeabi_idiv
 1103 007a 0300     		movs	r3, r0
 1104 007c 1A00     		movs	r2, r3
 774:Generated_Source\PSoC4/adc.c ****                  (adc_countsPer10Volt[chan] / 2) : (-(adc_countsPer10Volt[chan] / 2)) ))
 1105              		.loc 1 774 0
 1106 007e 0E23     		movs	r3, #14
 1107 0080 FB18     		adds	r3, r7, r3
 1108 0082 1A80     		strh	r2, [r3]
 777:Generated_Source\PSoC4/adc.c **** 
 778:Generated_Source\PSoC4/adc.c ****         return( mVolts );
 1109              		.loc 1 778 0
 1110 0084 0E23     		movs	r3, #14
 1111 0086 FB18     		adds	r3, r7, r3
 1112 0088 0022     		movs	r2, #0
 1113 008a 9B5E     		ldrsh	r3, [r3, r2]
 779:Generated_Source\PSoC4/adc.c ****     }
 1114              		.loc 1 779 0
 1115 008c 1800     		movs	r0, r3
 1116 008e BD46     		mov	sp, r7
 1117 0090 04B0     		add	sp, sp, #16
 1118              		@ sp needed
 1119 0092 80BD     		pop	{r7, pc}
 1120              	.L78:
 1121              		.align	2
 1122              	.L77:
 1123 0094 00000000 		.word	adc_offset
 1124 0098 10270000 		.word	10000
 1125 009c 00000000 		.word	adc_countsPer10Volt
 1126              		.cfi_endproc
 1127              	.LFE17:
 1128              		.size	adc_CountsTo_mVolts, .-adc_CountsTo_mVolts
 1129              		.global	__aeabi_lmul
 1130              		.global	__aeabi_ldivmod
 1131              		.section	.text.adc_CountsTo_uVolts,"ax",%progbits
 1132              		.align	2
 1133              		.global	adc_CountsTo_uVolts
 1134              		.code	16
 1135              		.thumb_func
 1136              		.type	adc_CountsTo_uVolts, %function
 1137              	adc_CountsTo_uVolts:
 1138              	.LFB18:
 780:Generated_Source\PSoC4/adc.c **** 
 781:Generated_Source\PSoC4/adc.c **** 
 782:Generated_Source\PSoC4/adc.c ****     /*******************************************************************************
 783:Generated_Source\PSoC4/adc.c ****     * Function Name: adc_CountsTo_uVolts
 784:Generated_Source\PSoC4/adc.c ****     ********************************************************************************
 785:Generated_Source\PSoC4/adc.c ****     *
 786:Generated_Source\PSoC4/adc.c ****     * Summary:
 787:Generated_Source\PSoC4/adc.c ****     *  This function converts ADC counts to micro Volts
 788:Generated_Source\PSoC4/adc.c ****     *  This function is not available when left data format justification selected.
 789:Generated_Source\PSoC4/adc.c ****     *
 790:Generated_Source\PSoC4/adc.c ****     * Parameters:
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 35


 791:Generated_Source\PSoC4/adc.c ****     *  chan: The ADC channel number.
 792:Generated_Source\PSoC4/adc.c ****     *  adcCounts: Result from the ADC conversion
 793:Generated_Source\PSoC4/adc.c ****     *
 794:Generated_Source\PSoC4/adc.c ****     * Return:
 795:Generated_Source\PSoC4/adc.c ****     *  Results in uVolts
 796:Generated_Source\PSoC4/adc.c ****     *
 797:Generated_Source\PSoC4/adc.c ****     * Global variables:
 798:Generated_Source\PSoC4/adc.c ****     *  adc_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:Generated_Source\PSoC4/adc.c ****     *  adc_Offset:  Used as the offset while converting ADC counts
 800:Generated_Source\PSoC4/adc.c ****     *   to mVolts.
 801:Generated_Source\PSoC4/adc.c ****     *
 802:Generated_Source\PSoC4/adc.c ****     * Theory:
 803:Generated_Source\PSoC4/adc.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:Generated_Source\PSoC4/adc.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:Generated_Source\PSoC4/adc.c ****     *  resolution.
 806:Generated_Source\PSoC4/adc.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:Generated_Source\PSoC4/adc.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:Generated_Source\PSoC4/adc.c ****     *
 809:Generated_Source\PSoC4/adc.c ****     *******************************************************************************/
 810:Generated_Source\PSoC4/adc.c ****     int32 adc_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:Generated_Source\PSoC4/adc.c ****     {
 1139              		.loc 1 811 0
 1140              		.cfi_startproc
 1141              		@ args = 0, pretend = 0, frame = 24
 1142              		@ frame_needed = 1, uses_anonymous_args = 0
 1143 0000 B0B5     		push	{r4, r5, r7, lr}
 1144              		.cfi_def_cfa_offset 16
 1145              		.cfi_offset 4, -16
 1146              		.cfi_offset 5, -12
 1147              		.cfi_offset 7, -8
 1148              		.cfi_offset 14, -4
 1149 0002 86B0     		sub	sp, sp, #24
 1150              		.cfi_def_cfa_offset 40
 1151 0004 00AF     		add	r7, sp, #0
 1152              		.cfi_def_cfa_register 7
 1153 0006 F860     		str	r0, [r7, #12]
 1154 0008 0A00     		movs	r2, r1
 1155 000a 0A23     		movs	r3, #10
 1156 000c FB18     		adds	r3, r7, r3
 1157 000e 1A80     		strh	r2, [r3]
 812:Generated_Source\PSoC4/adc.c ****         int64 uVolts;
 813:Generated_Source\PSoC4/adc.c **** 
 814:Generated_Source\PSoC4/adc.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:Generated_Source\PSoC4/adc.c ****         CYASSERT(chan < adc_TOTAL_CHANNELS_NUM);
 1158              		.loc 1 815 0
 1159 0010 FB68     		ldr	r3, [r7, #12]
 1160 0012 012B     		cmp	r3, #1
 1161 0014 02D9     		bls	.L80
 1162              		.loc 1 815 0 is_stmt 0 discriminator 1
 1163 0016 0020     		movs	r0, #0
 1164 0018 FFF7FEFF 		bl	CyHalt
 1165              	.L80:
 816:Generated_Source\PSoC4/adc.c **** 
 817:Generated_Source\PSoC4/adc.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:Generated_Source\PSoC4/adc.c ****         #if(adc_DEFAULT_AVG_MODE == adc__ACCUMULATE)
 819:Generated_Source\PSoC4/adc.c ****             if((adc_channelsConfig[chan] & adc_AVERAGING_EN) != 0u)
 820:Generated_Source\PSoC4/adc.c ****             {
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 36


 821:Generated_Source\PSoC4/adc.c ****                 adcCounts /= adc_DEFAULT_AVG_SAMPLES_DIV;
 822:Generated_Source\PSoC4/adc.c ****             }
 823:Generated_Source\PSoC4/adc.c ****         #endif /* adc_DEFAULT_AVG_MODE == adc__ACCUMULATE */
 824:Generated_Source\PSoC4/adc.c **** 
 825:Generated_Source\PSoC4/adc.c ****         /* Subtract ADC offset */
 826:Generated_Source\PSoC4/adc.c ****         adcCounts -= adc_offset[chan];
 1166              		.loc 1 826 0 is_stmt 1
 1167 001c 194B     		ldr	r3, .L82
 1168 001e FA68     		ldr	r2, [r7, #12]
 1169 0020 5200     		lsls	r2, r2, #1
 1170 0022 D35A     		ldrh	r3, [r2, r3]
 1171 0024 19B2     		sxth	r1, r3
 1172 0026 0A23     		movs	r3, #10
 1173 0028 FB18     		adds	r3, r7, r3
 1174 002a 1A88     		ldrh	r2, [r3]
 1175 002c 8BB2     		uxth	r3, r1
 1176 002e D31A     		subs	r3, r2, r3
 1177 0030 9AB2     		uxth	r2, r3
 1178 0032 0A23     		movs	r3, #10
 1179 0034 FB18     		adds	r3, r7, r3
 1180 0036 1A80     		strh	r2, [r3]
 827:Generated_Source\PSoC4/adc.c **** 
 828:Generated_Source\PSoC4/adc.c ****         uVolts = ((int64)adcCounts * adc_10UV_COUNTS) / adc_countsPer10Volt[chan];
 1181              		.loc 1 828 0
 1182 0038 0A23     		movs	r3, #10
 1183 003a FB18     		adds	r3, r7, r3
 1184 003c 1B88     		ldrh	r3, [r3]
 1185 003e 1BB2     		sxth	r3, r3
 1186 0040 3B60     		str	r3, [r7]
 1187 0042 DB17     		asrs	r3, r3, #31
 1188 0044 7B60     		str	r3, [r7, #4]
 1189 0046 104A     		ldr	r2, .L82+4
 1190 0048 0023     		movs	r3, #0
 1191 004a 3868     		ldr	r0, [r7]
 1192 004c 7968     		ldr	r1, [r7, #4]
 1193 004e FFF7FEFF 		bl	__aeabi_lmul
 1194 0052 0200     		movs	r2, r0
 1195 0054 0B00     		movs	r3, r1
 1196 0056 1000     		movs	r0, r2
 1197 0058 1900     		movs	r1, r3
 1198 005a 0C4B     		ldr	r3, .L82+8
 1199 005c FA68     		ldr	r2, [r7, #12]
 1200 005e 9200     		lsls	r2, r2, #2
 1201 0060 D358     		ldr	r3, [r2, r3]
 1202 0062 1C00     		movs	r4, r3
 1203 0064 DB17     		asrs	r3, r3, #31
 1204 0066 1D00     		movs	r5, r3
 1205 0068 2200     		movs	r2, r4
 1206 006a 2B00     		movs	r3, r5
 1207 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1208 0070 0300     		movs	r3, r0
 1209 0072 0C00     		movs	r4, r1
 1210 0074 3B61     		str	r3, [r7, #16]
 1211 0076 7C61     		str	r4, [r7, #20]
 829:Generated_Source\PSoC4/adc.c **** 
 830:Generated_Source\PSoC4/adc.c ****         return( (int32)uVolts );
 1212              		.loc 1 830 0
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 37


 1213 0078 3B69     		ldr	r3, [r7, #16]
 831:Generated_Source\PSoC4/adc.c ****     }
 1214              		.loc 1 831 0
 1215 007a 1800     		movs	r0, r3
 1216 007c BD46     		mov	sp, r7
 1217 007e 06B0     		add	sp, sp, #24
 1218              		@ sp needed
 1219 0080 B0BD     		pop	{r4, r5, r7, pc}
 1220              	.L83:
 1221 0082 C046     		.align	2
 1222              	.L82:
 1223 0084 00000000 		.word	adc_offset
 1224 0088 80969800 		.word	10000000
 1225 008c 00000000 		.word	adc_countsPer10Volt
 1226              		.cfi_endproc
 1227              	.LFE18:
 1228              		.size	adc_CountsTo_uVolts, .-adc_CountsTo_uVolts
 1229              		.global	__aeabi_i2f
 1230              		.global	__aeabi_fmul
 1231              		.global	__aeabi_fdiv
 1232              		.section	.text.adc_CountsTo_Volts,"ax",%progbits
 1233              		.align	2
 1234              		.global	adc_CountsTo_Volts
 1235              		.code	16
 1236              		.thumb_func
 1237              		.type	adc_CountsTo_Volts, %function
 1238              	adc_CountsTo_Volts:
 1239              	.LFB19:
 832:Generated_Source\PSoC4/adc.c **** 
 833:Generated_Source\PSoC4/adc.c **** 
 834:Generated_Source\PSoC4/adc.c ****     /*******************************************************************************
 835:Generated_Source\PSoC4/adc.c ****     * Function Name: adc_CountsTo_Volts
 836:Generated_Source\PSoC4/adc.c ****     ********************************************************************************
 837:Generated_Source\PSoC4/adc.c ****     *
 838:Generated_Source\PSoC4/adc.c ****     * Summary:
 839:Generated_Source\PSoC4/adc.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:Generated_Source\PSoC4/adc.c ****     *  This function is not available when left data format justification selected.
 841:Generated_Source\PSoC4/adc.c ****     *
 842:Generated_Source\PSoC4/adc.c ****     * Parameters:
 843:Generated_Source\PSoC4/adc.c ****     *  chan: The ADC channel number.
 844:Generated_Source\PSoC4/adc.c ****     *  Result from the ADC conversion
 845:Generated_Source\PSoC4/adc.c ****     *
 846:Generated_Source\PSoC4/adc.c ****     * Return:
 847:Generated_Source\PSoC4/adc.c ****     *  Results in Volts
 848:Generated_Source\PSoC4/adc.c ****     *
 849:Generated_Source\PSoC4/adc.c ****     * Global variables:
 850:Generated_Source\PSoC4/adc.c ****     *  adc_countsPer10Volt:  used to convert ADC counts to Volts.
 851:Generated_Source\PSoC4/adc.c ****     *  adc_Offset:  Used as the offset while converting ADC counts
 852:Generated_Source\PSoC4/adc.c ****     *   to mVolts.
 853:Generated_Source\PSoC4/adc.c ****     *
 854:Generated_Source\PSoC4/adc.c ****     *******************************************************************************/
 855:Generated_Source\PSoC4/adc.c ****     float32 adc_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:Generated_Source\PSoC4/adc.c ****     {
 1240              		.loc 1 856 0
 1241              		.cfi_startproc
 1242              		@ args = 0, pretend = 0, frame = 16
 1243              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 38


 1244 0000 90B5     		push	{r4, r7, lr}
 1245              		.cfi_def_cfa_offset 12
 1246              		.cfi_offset 4, -12
 1247              		.cfi_offset 7, -8
 1248              		.cfi_offset 14, -4
 1249 0002 85B0     		sub	sp, sp, #20
 1250              		.cfi_def_cfa_offset 32
 1251 0004 00AF     		add	r7, sp, #0
 1252              		.cfi_def_cfa_register 7
 1253 0006 7860     		str	r0, [r7, #4]
 1254 0008 0A00     		movs	r2, r1
 1255 000a BB1C     		adds	r3, r7, #2
 1256 000c 1A80     		strh	r2, [r3]
 857:Generated_Source\PSoC4/adc.c ****         float32 volts;
 858:Generated_Source\PSoC4/adc.c **** 
 859:Generated_Source\PSoC4/adc.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:Generated_Source\PSoC4/adc.c ****         CYASSERT(chan < adc_TOTAL_CHANNELS_NUM);
 1257              		.loc 1 860 0
 1258 000e 7B68     		ldr	r3, [r7, #4]
 1259 0010 012B     		cmp	r3, #1
 1260 0012 02D9     		bls	.L85
 1261              		.loc 1 860 0 is_stmt 0 discriminator 1
 1262 0014 0020     		movs	r0, #0
 1263 0016 FFF7FEFF 		bl	CyHalt
 1264              	.L85:
 861:Generated_Source\PSoC4/adc.c **** 
 862:Generated_Source\PSoC4/adc.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:Generated_Source\PSoC4/adc.c ****         #if(adc_DEFAULT_AVG_MODE == adc__ACCUMULATE)
 864:Generated_Source\PSoC4/adc.c ****             if((adc_channelsConfig[chan] & adc_AVERAGING_EN) != 0u)
 865:Generated_Source\PSoC4/adc.c ****             {
 866:Generated_Source\PSoC4/adc.c ****                 adcCounts /= adc_DEFAULT_AVG_SAMPLES_DIV;
 867:Generated_Source\PSoC4/adc.c ****             }
 868:Generated_Source\PSoC4/adc.c ****         #endif /* adc_DEFAULT_AVG_MODE == adc__ACCUMULATE */
 869:Generated_Source\PSoC4/adc.c **** 
 870:Generated_Source\PSoC4/adc.c ****         /* Subtract ADC offset */
 871:Generated_Source\PSoC4/adc.c ****         adcCounts -= adc_offset[chan];
 1265              		.loc 1 871 0 is_stmt 1
 1266 001a 164B     		ldr	r3, .L87
 1267 001c 7A68     		ldr	r2, [r7, #4]
 1268 001e 5200     		lsls	r2, r2, #1
 1269 0020 D35A     		ldrh	r3, [r2, r3]
 1270 0022 19B2     		sxth	r1, r3
 1271 0024 BB1C     		adds	r3, r7, #2
 1272 0026 1A88     		ldrh	r2, [r3]
 1273 0028 8BB2     		uxth	r3, r1
 1274 002a D31A     		subs	r3, r2, r3
 1275 002c 9AB2     		uxth	r2, r3
 1276 002e BB1C     		adds	r3, r7, #2
 1277 0030 1A80     		strh	r2, [r3]
 872:Generated_Source\PSoC4/adc.c **** 
 873:Generated_Source\PSoC4/adc.c ****         volts = ((float32)adcCounts * adc_10V_COUNTS) / (float32)adc_countsPer10Volt[chan];
 1278              		.loc 1 873 0
 1279 0032 BB1C     		adds	r3, r7, #2
 1280 0034 0022     		movs	r2, #0
 1281 0036 9B5E     		ldrsh	r3, [r3, r2]
 1282 0038 1800     		movs	r0, r3
 1283 003a FFF7FEFF 		bl	__aeabi_i2f
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 39


 1284 003e 031C     		adds	r3, r0, #0
 1285 0040 0D49     		ldr	r1, .L87+4
 1286 0042 181C     		adds	r0, r3, #0
 1287 0044 FFF7FEFF 		bl	__aeabi_fmul
 1288 0048 031C     		adds	r3, r0, #0
 1289 004a 1C1C     		adds	r4, r3, #0
 1290 004c 0B4B     		ldr	r3, .L87+8
 1291 004e 7A68     		ldr	r2, [r7, #4]
 1292 0050 9200     		lsls	r2, r2, #2
 1293 0052 D358     		ldr	r3, [r2, r3]
 1294 0054 1800     		movs	r0, r3
 1295 0056 FFF7FEFF 		bl	__aeabi_i2f
 1296 005a 031C     		adds	r3, r0, #0
 1297 005c 191C     		adds	r1, r3, #0
 1298 005e 201C     		adds	r0, r4, #0
 1299 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1300 0064 031C     		adds	r3, r0, #0
 1301 0066 FB60     		str	r3, [r7, #12]
 874:Generated_Source\PSoC4/adc.c **** 
 875:Generated_Source\PSoC4/adc.c ****         return( volts );
 1302              		.loc 1 875 0
 1303 0068 FB68     		ldr	r3, [r7, #12]
 876:Generated_Source\PSoC4/adc.c ****     }
 1304              		.loc 1 876 0
 1305 006a 181C     		adds	r0, r3, #0
 1306 006c BD46     		mov	sp, r7
 1307 006e 05B0     		add	sp, sp, #20
 1308              		@ sp needed
 1309 0070 90BD     		pop	{r4, r7, pc}
 1310              	.L88:
 1311 0072 C046     		.align	2
 1312              	.L87:
 1313 0074 00000000 		.word	adc_offset
 1314 0078 00002041 		.word	1092616192
 1315 007c 00000000 		.word	adc_countsPer10Volt
 1316              		.cfi_endproc
 1317              	.LFE19:
 1318              		.size	adc_CountsTo_Volts, .-adc_CountsTo_Volts
 1319              		.section	.rodata
 1320              		.align	2
 1321              		.type	adc_InputsPlacement.4920, %object
 1322              		.size	adc_InputsPlacement.4920, 2
 1323              	adc_InputsPlacement.4920:
 1324 0008 72       		.byte	114
 1325 0009 73       		.byte	115
 1326              		.text
 1327              	.Letext0:
 1328              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 1329              		.section	.debug_info,"",%progbits
 1330              	.Ldebug_info0:
 1331 0000 B8040000 		.4byte	0x4b8
 1332 0004 0400     		.2byte	0x4
 1333 0006 00000000 		.4byte	.Ldebug_abbrev0
 1334 000a 04       		.byte	0x4
 1335 000b 01       		.uleb128 0x1
 1336 000c 9A010000 		.4byte	.LASF61
 1337 0010 0C       		.byte	0xc
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 40


 1338 0011 5B010000 		.4byte	.LASF62
 1339 0015 5E030000 		.4byte	.LASF63
 1340 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1341 001d 00000000 		.4byte	0
 1342 0021 00000000 		.4byte	.Ldebug_line0
 1343 0025 02       		.uleb128 0x2
 1344 0026 01       		.byte	0x1
 1345 0027 06       		.byte	0x6
 1346 0028 81000000 		.4byte	.LASF0
 1347 002c 02       		.uleb128 0x2
 1348 002d 01       		.byte	0x1
 1349 002e 08       		.byte	0x8
 1350 002f 7A020000 		.4byte	.LASF1
 1351 0033 02       		.uleb128 0x2
 1352 0034 02       		.byte	0x2
 1353 0035 05       		.byte	0x5
 1354 0036 94020000 		.4byte	.LASF2
 1355 003a 02       		.uleb128 0x2
 1356 003b 02       		.byte	0x2
 1357 003c 07       		.byte	0x7
 1358 003d 48010000 		.4byte	.LASF3
 1359 0041 02       		.uleb128 0x2
 1360 0042 04       		.byte	0x4
 1361 0043 05       		.byte	0x5
 1362 0044 9E000000 		.4byte	.LASF4
 1363 0048 02       		.uleb128 0x2
 1364 0049 04       		.byte	0x4
 1365 004a 07       		.byte	0x7
 1366 004b 16010000 		.4byte	.LASF5
 1367 004f 02       		.uleb128 0x2
 1368 0050 08       		.byte	0x8
 1369 0051 05       		.byte	0x5
 1370 0052 73000000 		.4byte	.LASF6
 1371 0056 02       		.uleb128 0x2
 1372 0057 08       		.byte	0x8
 1373 0058 07       		.byte	0x7
 1374 0059 4D000000 		.4byte	.LASF7
 1375 005d 03       		.uleb128 0x3
 1376 005e 04       		.byte	0x4
 1377 005f 05       		.byte	0x5
 1378 0060 696E7400 		.ascii	"int\000"
 1379 0064 02       		.uleb128 0x2
 1380 0065 04       		.byte	0x4
 1381 0066 07       		.byte	0x7
 1382 0067 EE000000 		.4byte	.LASF8
 1383 006b 04       		.uleb128 0x4
 1384 006c B0000000 		.4byte	.LASF9
 1385 0070 02       		.byte	0x2
 1386 0071 D201     		.2byte	0x1d2
 1387 0073 2C000000 		.4byte	0x2c
 1388 0077 04       		.uleb128 0x4
 1389 0078 24000000 		.4byte	.LASF10
 1390 007c 02       		.byte	0x2
 1391 007d D301     		.2byte	0x1d3
 1392 007f 3A000000 		.4byte	0x3a
 1393 0083 04       		.uleb128 0x4
 1394 0084 C7000000 		.4byte	.LASF11
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 41


 1395 0088 02       		.byte	0x2
 1396 0089 D401     		.2byte	0x1d4
 1397 008b 48000000 		.4byte	0x48
 1398 008f 04       		.uleb128 0x4
 1399 0090 17030000 		.4byte	.LASF12
 1400 0094 02       		.byte	0x2
 1401 0095 D601     		.2byte	0x1d6
 1402 0097 33000000 		.4byte	0x33
 1403 009b 04       		.uleb128 0x4
 1404 009c 8D000000 		.4byte	.LASF13
 1405 00a0 02       		.byte	0x2
 1406 00a1 D701     		.2byte	0x1d7
 1407 00a3 41000000 		.4byte	0x41
 1408 00a7 04       		.uleb128 0x4
 1409 00a8 35020000 		.4byte	.LASF14
 1410 00ac 02       		.byte	0x2
 1411 00ad D801     		.2byte	0x1d8
 1412 00af B3000000 		.4byte	0xb3
 1413 00b3 02       		.uleb128 0x2
 1414 00b4 04       		.byte	0x4
 1415 00b5 04       		.byte	0x4
 1416 00b6 61020000 		.4byte	.LASF15
 1417 00ba 02       		.uleb128 0x2
 1418 00bb 08       		.byte	0x8
 1419 00bc 04       		.byte	0x4
 1420 00bd B6000000 		.4byte	.LASF16
 1421 00c1 04       		.uleb128 0x4
 1422 00c2 5B020000 		.4byte	.LASF17
 1423 00c6 02       		.byte	0x2
 1424 00c7 DD01     		.2byte	0x1dd
 1425 00c9 4F000000 		.4byte	0x4f
 1426 00cd 02       		.uleb128 0x2
 1427 00ce 01       		.byte	0x1
 1428 00cf 08       		.byte	0x8
 1429 00d0 C8020000 		.4byte	.LASF18
 1430 00d4 04       		.uleb128 0x4
 1431 00d5 2F020000 		.4byte	.LASF19
 1432 00d9 02       		.byte	0x2
 1433 00da 7E02     		.2byte	0x27e
 1434 00dc E0000000 		.4byte	0xe0
 1435 00e0 05       		.uleb128 0x5
 1436 00e1 83000000 		.4byte	0x83
 1437 00e5 02       		.uleb128 0x2
 1438 00e6 08       		.byte	0x8
 1439 00e7 04       		.byte	0x4
 1440 00e8 4F020000 		.4byte	.LASF20
 1441 00ec 02       		.uleb128 0x2
 1442 00ed 04       		.byte	0x4
 1443 00ee 07       		.byte	0x7
 1444 00ef 3D020000 		.4byte	.LASF21
 1445 00f3 06       		.uleb128 0x6
 1446 00f4 BD000000 		.4byte	.LASF26
 1447 00f8 01       		.byte	0x1
 1448 00f9 3F       		.byte	0x3f
 1449 00fa 00000000 		.4byte	.LFB2
 1450 00fe 24000000 		.4byte	.LFE2-.LFB2
 1451 0102 01       		.uleb128 0x1
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 42


 1452 0103 9C       		.byte	0x9c
 1453 0104 07       		.uleb128 0x7
 1454 0105 67020000 		.4byte	.LASF37
 1455 0109 01       		.byte	0x1
 1456 010a 5E       		.byte	0x5e
 1457 010b 00000000 		.4byte	.LFB3
 1458 010f 14020000 		.4byte	.LFE3-.LFB3
 1459 0113 01       		.uleb128 0x1
 1460 0114 9C       		.byte	0x9c
 1461 0115 55010000 		.4byte	0x155
 1462 0119 08       		.uleb128 0x8
 1463 011a BD020000 		.4byte	.LASF22
 1464 011e 01       		.byte	0x1
 1465 011f 60       		.byte	0x60
 1466 0120 83000000 		.4byte	0x83
 1467 0124 02       		.uleb128 0x2
 1468 0125 91       		.byte	0x91
 1469 0126 74       		.sleb128 -12
 1470 0127 08       		.uleb128 0x8
 1471 0128 3E010000 		.4byte	.LASF23
 1472 012c 01       		.byte	0x1
 1473 012d 61       		.byte	0x61
 1474 012e 83000000 		.4byte	0x83
 1475 0132 02       		.uleb128 0x2
 1476 0133 91       		.byte	0x91
 1477 0134 6C       		.sleb128 -20
 1478 0135 08       		.uleb128 0x8
 1479 0136 33000000 		.4byte	.LASF24
 1480 013a 01       		.byte	0x1
 1481 013b 62       		.byte	0x62
 1482 013c 9B000000 		.4byte	0x9b
 1483 0140 02       		.uleb128 0x2
 1484 0141 91       		.byte	0x91
 1485 0142 70       		.sleb128 -16
 1486 0143 08       		.uleb128 0x8
 1487 0144 1D030000 		.4byte	.LASF25
 1488 0148 01       		.byte	0x1
 1489 0149 65       		.byte	0x65
 1490 014a 6A010000 		.4byte	0x16a
 1491 014e 05       		.uleb128 0x5
 1492 014f 03       		.byte	0x3
 1493 0150 08000000 		.4byte	adc_InputsPlacement.4920
 1494 0154 00       		.byte	0
 1495 0155 09       		.uleb128 0x9
 1496 0156 65010000 		.4byte	0x165
 1497 015a 65010000 		.4byte	0x165
 1498 015e 0A       		.uleb128 0xa
 1499 015f EC000000 		.4byte	0xec
 1500 0163 01       		.byte	0x1
 1501 0164 00       		.byte	0
 1502 0165 0B       		.uleb128 0xb
 1503 0166 6B000000 		.4byte	0x6b
 1504 016a 0B       		.uleb128 0xb
 1505 016b 55010000 		.4byte	0x155
 1506 016f 0C       		.uleb128 0xc
 1507 0170 9E020000 		.4byte	.LASF27
 1508 0174 01       		.byte	0x1
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 43


 1509 0175 4A01     		.2byte	0x14a
 1510 0177 00000000 		.4byte	.LFB4
 1511 017b 38000000 		.4byte	.LFE4-.LFB4
 1512 017f 01       		.uleb128 0x1
 1513 0180 9C       		.byte	0x9c
 1514 0181 0D       		.uleb128 0xd
 1515 0182 A7000000 		.4byte	.LASF28
 1516 0186 01       		.byte	0x1
 1517 0187 6D01     		.2byte	0x16d
 1518 0189 00000000 		.4byte	.LFB5
 1519 018d 1C000000 		.4byte	.LFE5-.LFB5
 1520 0191 01       		.uleb128 0x1
 1521 0192 9C       		.byte	0x9c
 1522 0193 0D       		.uleb128 0xd
 1523 0194 FF020000 		.4byte	.LASF29
 1524 0198 01       		.byte	0x1
 1525 0199 8701     		.2byte	0x187
 1526 019b 00000000 		.4byte	.LFB6
 1527 019f 1C000000 		.4byte	.LFE6-.LFB6
 1528 01a3 01       		.uleb128 0x1
 1529 01a4 9C       		.byte	0x9c
 1530 01a5 0D       		.uleb128 0xd
 1531 01a6 DE020000 		.4byte	.LASF30
 1532 01aa 01       		.byte	0x1
 1533 01ab A001     		.2byte	0x1a0
 1534 01ad 00000000 		.4byte	.LFB7
 1535 01b1 20000000 		.4byte	.LFE7-.LFB7
 1536 01b5 01       		.uleb128 0x1
 1537 01b6 9C       		.byte	0x9c
 1538 01b7 0E       		.uleb128 0xe
 1539 01b8 02010000 		.4byte	.LASF32
 1540 01bc 01       		.byte	0x1
 1541 01bd C201     		.2byte	0x1c2
 1542 01bf 83000000 		.4byte	0x83
 1543 01c3 00000000 		.4byte	.LFB8
 1544 01c7 48000000 		.4byte	.LFE8-.LFB8
 1545 01cb 01       		.uleb128 0x1
 1546 01cc 9C       		.byte	0x9c
 1547 01cd F0010000 		.4byte	0x1f0
 1548 01d1 0F       		.uleb128 0xf
 1549 01d2 D3000000 		.4byte	.LASF34
 1550 01d6 01       		.byte	0x1
 1551 01d7 C201     		.2byte	0x1c2
 1552 01d9 83000000 		.4byte	0x83
 1553 01dd 02       		.uleb128 0x2
 1554 01de 91       		.byte	0x91
 1555 01df 6C       		.sleb128 -20
 1556 01e0 10       		.uleb128 0x10
 1557 01e1 10030000 		.4byte	.LASF31
 1558 01e5 01       		.byte	0x1
 1559 01e6 C401     		.2byte	0x1c4
 1560 01e8 83000000 		.4byte	0x83
 1561 01ec 02       		.uleb128 0x2
 1562 01ed 91       		.byte	0x91
 1563 01ee 74       		.sleb128 -12
 1564 01ef 00       		.byte	0
 1565 01f0 11       		.uleb128 0x11
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 44


 1566 01f1 28010000 		.4byte	.LASF33
 1567 01f5 01       		.byte	0x1
 1568 01f6 F801     		.2byte	0x1f8
 1569 01f8 8F000000 		.4byte	0x8f
 1570 01fc 00000000 		.4byte	.LFB9
 1571 0200 44000000 		.4byte	.LFE9-.LFB9
 1572 0204 01       		.uleb128 0x1
 1573 0205 9C       		.byte	0x9c
 1574 0206 29020000 		.4byte	0x229
 1575 020a 0F       		.uleb128 0xf
 1576 020b C3020000 		.4byte	.LASF35
 1577 020f 01       		.byte	0x1
 1578 0210 F801     		.2byte	0x1f8
 1579 0212 83000000 		.4byte	0x83
 1580 0216 02       		.uleb128 0x2
 1581 0217 91       		.byte	0x91
 1582 0218 6C       		.sleb128 -20
 1583 0219 10       		.uleb128 0x10
 1584 021a AA030000 		.4byte	.LASF36
 1585 021e 01       		.byte	0x1
 1586 021f FA01     		.2byte	0x1fa
 1587 0221 83000000 		.4byte	0x83
 1588 0225 02       		.uleb128 0x2
 1589 0226 91       		.byte	0x91
 1590 0227 74       		.sleb128 -12
 1591 0228 00       		.byte	0
 1592 0229 12       		.uleb128 0x12
 1593 022a 3D030000 		.4byte	.LASF38
 1594 022e 01       		.byte	0x1
 1595 022f 2502     		.2byte	0x225
 1596 0231 00000000 		.4byte	.LFB10
 1597 0235 20000000 		.4byte	.LFE10-.LFB10
 1598 0239 01       		.uleb128 0x1
 1599 023a 9C       		.byte	0x9c
 1600 023b 4F020000 		.4byte	0x24f
 1601 023f 0F       		.uleb128 0xf
 1602 0240 CE000000 		.4byte	.LASF39
 1603 0244 01       		.byte	0x1
 1604 0245 2502     		.2byte	0x225
 1605 0247 83000000 		.4byte	0x83
 1606 024b 02       		.uleb128 0x2
 1607 024c 91       		.byte	0x91
 1608 024d 74       		.sleb128 -12
 1609 024e 00       		.byte	0
 1610 024f 12       		.uleb128 0x12
 1611 0250 14000000 		.4byte	.LASF40
 1612 0254 01       		.byte	0x1
 1613 0255 5102     		.2byte	0x251
 1614 0257 00000000 		.4byte	.LFB11
 1615 025b 30000000 		.4byte	.LFE11-.LFB11
 1616 025f 01       		.uleb128 0x1
 1617 0260 9C       		.byte	0x9c
 1618 0261 75020000 		.4byte	0x275
 1619 0265 0F       		.uleb128 0xf
 1620 0266 46020000 		.4byte	.LASF41
 1621 026a 01       		.byte	0x1
 1622 026b 5102     		.2byte	0x251
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 45


 1623 026d 83000000 		.4byte	0x83
 1624 0271 02       		.uleb128 0x2
 1625 0272 91       		.byte	0x91
 1626 0273 74       		.sleb128 -12
 1627 0274 00       		.byte	0
 1628 0275 12       		.uleb128 0x12
 1629 0276 4D030000 		.4byte	.LASF42
 1630 027a 01       		.byte	0x1
 1631 027b 6602     		.2byte	0x266
 1632 027d 00000000 		.4byte	.LFB12
 1633 0281 30000000 		.4byte	.LFE12-.LFB12
 1634 0285 01       		.uleb128 0x1
 1635 0286 9C       		.byte	0x9c
 1636 0287 9B020000 		.4byte	0x29b
 1637 028b 0F       		.uleb128 0xf
 1638 028c 70020000 		.4byte	.LASF43
 1639 0290 01       		.byte	0x1
 1640 0291 6602     		.2byte	0x266
 1641 0293 83000000 		.4byte	0x83
 1642 0297 02       		.uleb128 0x2
 1643 0298 91       		.byte	0x91
 1644 0299 74       		.sleb128 -12
 1645 029a 00       		.byte	0
 1646 029b 12       		.uleb128 0x12
 1647 029c CD020000 		.4byte	.LASF44
 1648 02a0 01       		.byte	0x1
 1649 02a1 7E02     		.2byte	0x27e
 1650 02a3 00000000 		.4byte	.LFB13
 1651 02a7 20000000 		.4byte	.LFE13-.LFB13
 1652 02ab 01       		.uleb128 0x1
 1653 02ac 9C       		.byte	0x9c
 1654 02ad C1020000 		.4byte	0x2c1
 1655 02b1 0F       		.uleb128 0xf
 1656 02b2 CE000000 		.4byte	.LASF39
 1657 02b6 01       		.byte	0x1
 1658 02b7 7E02     		.2byte	0x27e
 1659 02b9 83000000 		.4byte	0x83
 1660 02bd 02       		.uleb128 0x2
 1661 02be 91       		.byte	0x91
 1662 02bf 74       		.sleb128 -12
 1663 02c0 00       		.byte	0
 1664 02c1 12       		.uleb128 0x12
 1665 02c2 64000000 		.4byte	.LASF45
 1666 02c6 01       		.byte	0x1
 1667 02c7 9502     		.2byte	0x295
 1668 02c9 00000000 		.4byte	.LFB14
 1669 02cd 20000000 		.4byte	.LFE14-.LFB14
 1670 02d1 01       		.uleb128 0x1
 1671 02d2 9C       		.byte	0x9c
 1672 02d3 E7020000 		.4byte	0x2e7
 1673 02d7 0F       		.uleb128 0xf
 1674 02d8 CE000000 		.4byte	.LASF39
 1675 02dc 01       		.byte	0x1
 1676 02dd 9502     		.2byte	0x295
 1677 02df 83000000 		.4byte	0x83
 1678 02e3 02       		.uleb128 0x2
 1679 02e4 91       		.byte	0x91
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 46


 1680 02e5 74       		.sleb128 -12
 1681 02e6 00       		.byte	0
 1682 02e7 13       		.uleb128 0x13
 1683 02e8 78010000 		.4byte	.LASF46
 1684 02ec 01       		.byte	0x1
 1685 02ed B102     		.2byte	0x2b1
 1686 02ef 00000000 		.4byte	.LFB15
 1687 02f3 34000000 		.4byte	.LFE15-.LFB15
 1688 02f7 01       		.uleb128 0x1
 1689 02f8 9C       		.byte	0x9c
 1690 02f9 1C030000 		.4byte	0x31c
 1691 02fd 0F       		.uleb128 0xf
 1692 02fe C3020000 		.4byte	.LASF35
 1693 0302 01       		.byte	0x1
 1694 0303 B102     		.2byte	0x2b1
 1695 0305 83000000 		.4byte	0x83
 1696 0309 02       		.uleb128 0x2
 1697 030a 91       		.byte	0x91
 1698 030b 74       		.sleb128 -12
 1699 030c 0F       		.uleb128 0xf
 1700 030d EE020000 		.4byte	.LASF47
 1701 0311 01       		.byte	0x1
 1702 0312 B102     		.2byte	0x2b1
 1703 0314 8F000000 		.4byte	0x8f
 1704 0318 02       		.uleb128 0x2
 1705 0319 91       		.byte	0x91
 1706 031a 72       		.sleb128 -14
 1707 031b 00       		.byte	0
 1708 031c 13       		.uleb128 0x13
 1709 031d 31030000 		.4byte	.LASF48
 1710 0321 01       		.byte	0x1
 1711 0322 D302     		.2byte	0x2d3
 1712 0324 00000000 		.4byte	.LFB16
 1713 0328 2C000000 		.4byte	.LFE16-.LFB16
 1714 032c 01       		.uleb128 0x1
 1715 032d 9C       		.byte	0x9c
 1716 032e 51030000 		.4byte	0x351
 1717 0332 0F       		.uleb128 0xf
 1718 0333 C3020000 		.4byte	.LASF35
 1719 0337 01       		.byte	0x1
 1720 0338 D302     		.2byte	0x2d3
 1721 033a 83000000 		.4byte	0x83
 1722 033e 02       		.uleb128 0x2
 1723 033f 91       		.byte	0x91
 1724 0340 74       		.sleb128 -12
 1725 0341 0F       		.uleb128 0xf
 1726 0342 2B000000 		.4byte	.LASF49
 1727 0346 01       		.byte	0x1
 1728 0347 D302     		.2byte	0x2d3
 1729 0349 9B000000 		.4byte	0x9b
 1730 034d 02       		.uleb128 0x2
 1731 034e 91       		.byte	0x91
 1732 034f 70       		.sleb128 -16
 1733 0350 00       		.byte	0
 1734 0351 11       		.uleb128 0x11
 1735 0352 86010000 		.4byte	.LASF50
 1736 0356 01       		.byte	0x1
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 47


 1737 0357 F402     		.2byte	0x2f4
 1738 0359 8F000000 		.4byte	0x8f
 1739 035d 00000000 		.4byte	.LFB17
 1740 0361 A0000000 		.4byte	.LFE17-.LFB17
 1741 0365 01       		.uleb128 0x1
 1742 0366 9C       		.byte	0x9c
 1743 0367 99030000 		.4byte	0x399
 1744 036b 0F       		.uleb128 0xf
 1745 036c C3020000 		.4byte	.LASF35
 1746 0370 01       		.byte	0x1
 1747 0371 F402     		.2byte	0x2f4
 1748 0373 83000000 		.4byte	0x83
 1749 0377 02       		.uleb128 0x2
 1750 0378 91       		.byte	0x91
 1751 0379 6C       		.sleb128 -20
 1752 037a 0F       		.uleb128 0xf
 1753 037b F5020000 		.4byte	.LASF51
 1754 037f 01       		.byte	0x1
 1755 0380 F402     		.2byte	0x2f4
 1756 0382 8F000000 		.4byte	0x8f
 1757 0386 02       		.uleb128 0x2
 1758 0387 91       		.byte	0x91
 1759 0388 6A       		.sleb128 -22
 1760 0389 10       		.uleb128 0x10
 1761 038a 28020000 		.4byte	.LASF52
 1762 038e 01       		.byte	0x1
 1763 038f F602     		.2byte	0x2f6
 1764 0391 8F000000 		.4byte	0x8f
 1765 0395 02       		.uleb128 0x2
 1766 0396 91       		.byte	0x91
 1767 0397 76       		.sleb128 -10
 1768 0398 00       		.byte	0
 1769 0399 11       		.uleb128 0x11
 1770 039a 00000000 		.4byte	.LASF53
 1771 039e 01       		.byte	0x1
 1772 039f 2A03     		.2byte	0x32a
 1773 03a1 9B000000 		.4byte	0x9b
 1774 03a5 00000000 		.4byte	.LFB18
 1775 03a9 90000000 		.4byte	.LFE18-.LFB18
 1776 03ad 01       		.uleb128 0x1
 1777 03ae 9C       		.byte	0x9c
 1778 03af E1030000 		.4byte	0x3e1
 1779 03b3 0F       		.uleb128 0xf
 1780 03b4 C3020000 		.4byte	.LASF35
 1781 03b8 01       		.byte	0x1
 1782 03b9 2A03     		.2byte	0x32a
 1783 03bb 83000000 		.4byte	0x83
 1784 03bf 02       		.uleb128 0x2
 1785 03c0 91       		.byte	0x91
 1786 03c1 64       		.sleb128 -28
 1787 03c2 0F       		.uleb128 0xf
 1788 03c3 F5020000 		.4byte	.LASF51
 1789 03c7 01       		.byte	0x1
 1790 03c8 2A03     		.2byte	0x32a
 1791 03ca 8F000000 		.4byte	0x8f
 1792 03ce 02       		.uleb128 0x2
 1793 03cf 91       		.byte	0x91
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 48


 1794 03d0 62       		.sleb128 -30
 1795 03d1 10       		.uleb128 0x10
 1796 03d2 FB000000 		.4byte	.LASF54
 1797 03d6 01       		.byte	0x1
 1798 03d7 2C03     		.2byte	0x32c
 1799 03d9 C1000000 		.4byte	0xc1
 1800 03dd 02       		.uleb128 0x2
 1801 03de 91       		.byte	0x91
 1802 03df 68       		.sleb128 -24
 1803 03e0 00       		.byte	0
 1804 03e1 11       		.uleb128 0x11
 1805 03e2 DB000000 		.4byte	.LASF55
 1806 03e6 01       		.byte	0x1
 1807 03e7 5703     		.2byte	0x357
 1808 03e9 A7000000 		.4byte	0xa7
 1809 03ed 00000000 		.4byte	.LFB19
 1810 03f1 80000000 		.4byte	.LFE19-.LFB19
 1811 03f5 01       		.uleb128 0x1
 1812 03f6 9C       		.byte	0x9c
 1813 03f7 29040000 		.4byte	0x429
 1814 03fb 0F       		.uleb128 0xf
 1815 03fc C3020000 		.4byte	.LASF35
 1816 0400 01       		.byte	0x1
 1817 0401 5703     		.2byte	0x357
 1818 0403 83000000 		.4byte	0x83
 1819 0407 02       		.uleb128 0x2
 1820 0408 91       		.byte	0x91
 1821 0409 64       		.sleb128 -28
 1822 040a 0F       		.uleb128 0xf
 1823 040b F5020000 		.4byte	.LASF51
 1824 040f 01       		.byte	0x1
 1825 0410 5703     		.2byte	0x357
 1826 0412 8F000000 		.4byte	0x8f
 1827 0416 02       		.uleb128 0x2
 1828 0417 91       		.byte	0x91
 1829 0418 62       		.sleb128 -30
 1830 0419 10       		.uleb128 0x10
 1831 041a 38010000 		.4byte	.LASF56
 1832 041e 01       		.byte	0x1
 1833 041f 5903     		.2byte	0x359
 1834 0421 A7000000 		.4byte	0xa7
 1835 0425 02       		.uleb128 0x2
 1836 0426 91       		.byte	0x91
 1837 0427 6C       		.sleb128 -20
 1838 0428 00       		.byte	0
 1839 0429 09       		.uleb128 0x9
 1840 042a 39040000 		.4byte	0x439
 1841 042e 39040000 		.4byte	0x439
 1842 0432 0A       		.uleb128 0xa
 1843 0433 EC000000 		.4byte	0xec
 1844 0437 01       		.byte	0x1
 1845 0438 00       		.byte	0
 1846 0439 0B       		.uleb128 0xb
 1847 043a 83000000 		.4byte	0x83
 1848 043e 08       		.uleb128 0x8
 1849 043f 3A000000 		.4byte	.LASF57
 1850 0443 01       		.byte	0x1
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 49


 1851 0444 21       		.byte	0x21
 1852 0445 4F040000 		.4byte	0x44f
 1853 0449 05       		.uleb128 0x5
 1854 044a 03       		.byte	0x3
 1855 044b 00000000 		.4byte	adc_channelsConfig
 1856 044f 0B       		.uleb128 0xb
 1857 0450 29040000 		.4byte	0x429
 1858 0454 14       		.uleb128 0x14
 1859 0455 88020000 		.4byte	.LASF58
 1860 0459 01       		.byte	0x1
 1861 045a 18       		.byte	0x18
 1862 045b 6B000000 		.4byte	0x6b
 1863 045f 05       		.uleb128 0x5
 1864 0460 03       		.byte	0x3
 1865 0461 00000000 		.4byte	adc_initVar
 1866 0465 09       		.uleb128 0x9
 1867 0466 75040000 		.4byte	0x475
 1868 046a 75040000 		.4byte	0x475
 1869 046e 0A       		.uleb128 0xa
 1870 046f EC000000 		.4byte	0xec
 1871 0473 01       		.byte	0x1
 1872 0474 00       		.byte	0
 1873 0475 05       		.uleb128 0x5
 1874 0476 8F000000 		.4byte	0x8f
 1875 047a 14       		.uleb128 0x14
 1876 047b 93000000 		.4byte	.LASF59
 1877 047f 01       		.byte	0x1
 1878 0480 19       		.byte	0x19
 1879 0481 8B040000 		.4byte	0x48b
 1880 0485 05       		.uleb128 0x5
 1881 0486 03       		.byte	0x3
 1882 0487 00000000 		.4byte	adc_offset
 1883 048b 05       		.uleb128 0x5
 1884 048c 65040000 		.4byte	0x465
 1885 0490 09       		.uleb128 0x9
 1886 0491 A0040000 		.4byte	0x4a0
 1887 0495 A0040000 		.4byte	0x4a0
 1888 0499 0A       		.uleb128 0xa
 1889 049a EC000000 		.4byte	0xec
 1890 049e 01       		.byte	0x1
 1891 049f 00       		.byte	0
 1892 04a0 05       		.uleb128 0x5
 1893 04a1 9B000000 		.4byte	0x9b
 1894 04a5 14       		.uleb128 0x14
 1895 04a6 A9020000 		.4byte	.LASF60
 1896 04aa 01       		.byte	0x1
 1897 04ab 1A       		.byte	0x1a
 1898 04ac B6040000 		.4byte	0x4b6
 1899 04b0 05       		.uleb128 0x5
 1900 04b1 03       		.byte	0x3
 1901 04b2 00000000 		.4byte	adc_countsPer10Volt
 1902 04b6 05       		.uleb128 0x5
 1903 04b7 90040000 		.4byte	0x490
 1904 04bb 00       		.byte	0
 1905              		.section	.debug_abbrev,"",%progbits
 1906              	.Ldebug_abbrev0:
 1907 0000 01       		.uleb128 0x1
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 50


 1908 0001 11       		.uleb128 0x11
 1909 0002 01       		.byte	0x1
 1910 0003 25       		.uleb128 0x25
 1911 0004 0E       		.uleb128 0xe
 1912 0005 13       		.uleb128 0x13
 1913 0006 0B       		.uleb128 0xb
 1914 0007 03       		.uleb128 0x3
 1915 0008 0E       		.uleb128 0xe
 1916 0009 1B       		.uleb128 0x1b
 1917 000a 0E       		.uleb128 0xe
 1918 000b 55       		.uleb128 0x55
 1919 000c 17       		.uleb128 0x17
 1920 000d 11       		.uleb128 0x11
 1921 000e 01       		.uleb128 0x1
 1922 000f 10       		.uleb128 0x10
 1923 0010 17       		.uleb128 0x17
 1924 0011 00       		.byte	0
 1925 0012 00       		.byte	0
 1926 0013 02       		.uleb128 0x2
 1927 0014 24       		.uleb128 0x24
 1928 0015 00       		.byte	0
 1929 0016 0B       		.uleb128 0xb
 1930 0017 0B       		.uleb128 0xb
 1931 0018 3E       		.uleb128 0x3e
 1932 0019 0B       		.uleb128 0xb
 1933 001a 03       		.uleb128 0x3
 1934 001b 0E       		.uleb128 0xe
 1935 001c 00       		.byte	0
 1936 001d 00       		.byte	0
 1937 001e 03       		.uleb128 0x3
 1938 001f 24       		.uleb128 0x24
 1939 0020 00       		.byte	0
 1940 0021 0B       		.uleb128 0xb
 1941 0022 0B       		.uleb128 0xb
 1942 0023 3E       		.uleb128 0x3e
 1943 0024 0B       		.uleb128 0xb
 1944 0025 03       		.uleb128 0x3
 1945 0026 08       		.uleb128 0x8
 1946 0027 00       		.byte	0
 1947 0028 00       		.byte	0
 1948 0029 04       		.uleb128 0x4
 1949 002a 16       		.uleb128 0x16
 1950 002b 00       		.byte	0
 1951 002c 03       		.uleb128 0x3
 1952 002d 0E       		.uleb128 0xe
 1953 002e 3A       		.uleb128 0x3a
 1954 002f 0B       		.uleb128 0xb
 1955 0030 3B       		.uleb128 0x3b
 1956 0031 05       		.uleb128 0x5
 1957 0032 49       		.uleb128 0x49
 1958 0033 13       		.uleb128 0x13
 1959 0034 00       		.byte	0
 1960 0035 00       		.byte	0
 1961 0036 05       		.uleb128 0x5
 1962 0037 35       		.uleb128 0x35
 1963 0038 00       		.byte	0
 1964 0039 49       		.uleb128 0x49
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 51


 1965 003a 13       		.uleb128 0x13
 1966 003b 00       		.byte	0
 1967 003c 00       		.byte	0
 1968 003d 06       		.uleb128 0x6
 1969 003e 2E       		.uleb128 0x2e
 1970 003f 00       		.byte	0
 1971 0040 3F       		.uleb128 0x3f
 1972 0041 19       		.uleb128 0x19
 1973 0042 03       		.uleb128 0x3
 1974 0043 0E       		.uleb128 0xe
 1975 0044 3A       		.uleb128 0x3a
 1976 0045 0B       		.uleb128 0xb
 1977 0046 3B       		.uleb128 0x3b
 1978 0047 0B       		.uleb128 0xb
 1979 0048 27       		.uleb128 0x27
 1980 0049 19       		.uleb128 0x19
 1981 004a 11       		.uleb128 0x11
 1982 004b 01       		.uleb128 0x1
 1983 004c 12       		.uleb128 0x12
 1984 004d 06       		.uleb128 0x6
 1985 004e 40       		.uleb128 0x40
 1986 004f 18       		.uleb128 0x18
 1987 0050 9642     		.uleb128 0x2116
 1988 0052 19       		.uleb128 0x19
 1989 0053 00       		.byte	0
 1990 0054 00       		.byte	0
 1991 0055 07       		.uleb128 0x7
 1992 0056 2E       		.uleb128 0x2e
 1993 0057 01       		.byte	0x1
 1994 0058 3F       		.uleb128 0x3f
 1995 0059 19       		.uleb128 0x19
 1996 005a 03       		.uleb128 0x3
 1997 005b 0E       		.uleb128 0xe
 1998 005c 3A       		.uleb128 0x3a
 1999 005d 0B       		.uleb128 0xb
 2000 005e 3B       		.uleb128 0x3b
 2001 005f 0B       		.uleb128 0xb
 2002 0060 27       		.uleb128 0x27
 2003 0061 19       		.uleb128 0x19
 2004 0062 11       		.uleb128 0x11
 2005 0063 01       		.uleb128 0x1
 2006 0064 12       		.uleb128 0x12
 2007 0065 06       		.uleb128 0x6
 2008 0066 40       		.uleb128 0x40
 2009 0067 18       		.uleb128 0x18
 2010 0068 9642     		.uleb128 0x2116
 2011 006a 19       		.uleb128 0x19
 2012 006b 01       		.uleb128 0x1
 2013 006c 13       		.uleb128 0x13
 2014 006d 00       		.byte	0
 2015 006e 00       		.byte	0
 2016 006f 08       		.uleb128 0x8
 2017 0070 34       		.uleb128 0x34
 2018 0071 00       		.byte	0
 2019 0072 03       		.uleb128 0x3
 2020 0073 0E       		.uleb128 0xe
 2021 0074 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 52


 2022 0075 0B       		.uleb128 0xb
 2023 0076 3B       		.uleb128 0x3b
 2024 0077 0B       		.uleb128 0xb
 2025 0078 49       		.uleb128 0x49
 2026 0079 13       		.uleb128 0x13
 2027 007a 02       		.uleb128 0x2
 2028 007b 18       		.uleb128 0x18
 2029 007c 00       		.byte	0
 2030 007d 00       		.byte	0
 2031 007e 09       		.uleb128 0x9
 2032 007f 01       		.uleb128 0x1
 2033 0080 01       		.byte	0x1
 2034 0081 49       		.uleb128 0x49
 2035 0082 13       		.uleb128 0x13
 2036 0083 01       		.uleb128 0x1
 2037 0084 13       		.uleb128 0x13
 2038 0085 00       		.byte	0
 2039 0086 00       		.byte	0
 2040 0087 0A       		.uleb128 0xa
 2041 0088 21       		.uleb128 0x21
 2042 0089 00       		.byte	0
 2043 008a 49       		.uleb128 0x49
 2044 008b 13       		.uleb128 0x13
 2045 008c 2F       		.uleb128 0x2f
 2046 008d 0B       		.uleb128 0xb
 2047 008e 00       		.byte	0
 2048 008f 00       		.byte	0
 2049 0090 0B       		.uleb128 0xb
 2050 0091 26       		.uleb128 0x26
 2051 0092 00       		.byte	0
 2052 0093 49       		.uleb128 0x49
 2053 0094 13       		.uleb128 0x13
 2054 0095 00       		.byte	0
 2055 0096 00       		.byte	0
 2056 0097 0C       		.uleb128 0xc
 2057 0098 2E       		.uleb128 0x2e
 2058 0099 00       		.byte	0
 2059 009a 3F       		.uleb128 0x3f
 2060 009b 19       		.uleb128 0x19
 2061 009c 03       		.uleb128 0x3
 2062 009d 0E       		.uleb128 0xe
 2063 009e 3A       		.uleb128 0x3a
 2064 009f 0B       		.uleb128 0xb
 2065 00a0 3B       		.uleb128 0x3b
 2066 00a1 05       		.uleb128 0x5
 2067 00a2 27       		.uleb128 0x27
 2068 00a3 19       		.uleb128 0x19
 2069 00a4 11       		.uleb128 0x11
 2070 00a5 01       		.uleb128 0x1
 2071 00a6 12       		.uleb128 0x12
 2072 00a7 06       		.uleb128 0x6
 2073 00a8 40       		.uleb128 0x40
 2074 00a9 18       		.uleb128 0x18
 2075 00aa 9642     		.uleb128 0x2116
 2076 00ac 19       		.uleb128 0x19
 2077 00ad 00       		.byte	0
 2078 00ae 00       		.byte	0
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 53


 2079 00af 0D       		.uleb128 0xd
 2080 00b0 2E       		.uleb128 0x2e
 2081 00b1 00       		.byte	0
 2082 00b2 3F       		.uleb128 0x3f
 2083 00b3 19       		.uleb128 0x19
 2084 00b4 03       		.uleb128 0x3
 2085 00b5 0E       		.uleb128 0xe
 2086 00b6 3A       		.uleb128 0x3a
 2087 00b7 0B       		.uleb128 0xb
 2088 00b8 3B       		.uleb128 0x3b
 2089 00b9 05       		.uleb128 0x5
 2090 00ba 27       		.uleb128 0x27
 2091 00bb 19       		.uleb128 0x19
 2092 00bc 11       		.uleb128 0x11
 2093 00bd 01       		.uleb128 0x1
 2094 00be 12       		.uleb128 0x12
 2095 00bf 06       		.uleb128 0x6
 2096 00c0 40       		.uleb128 0x40
 2097 00c1 18       		.uleb128 0x18
 2098 00c2 9742     		.uleb128 0x2117
 2099 00c4 19       		.uleb128 0x19
 2100 00c5 00       		.byte	0
 2101 00c6 00       		.byte	0
 2102 00c7 0E       		.uleb128 0xe
 2103 00c8 2E       		.uleb128 0x2e
 2104 00c9 01       		.byte	0x1
 2105 00ca 3F       		.uleb128 0x3f
 2106 00cb 19       		.uleb128 0x19
 2107 00cc 03       		.uleb128 0x3
 2108 00cd 0E       		.uleb128 0xe
 2109 00ce 3A       		.uleb128 0x3a
 2110 00cf 0B       		.uleb128 0xb
 2111 00d0 3B       		.uleb128 0x3b
 2112 00d1 05       		.uleb128 0x5
 2113 00d2 27       		.uleb128 0x27
 2114 00d3 19       		.uleb128 0x19
 2115 00d4 49       		.uleb128 0x49
 2116 00d5 13       		.uleb128 0x13
 2117 00d6 11       		.uleb128 0x11
 2118 00d7 01       		.uleb128 0x1
 2119 00d8 12       		.uleb128 0x12
 2120 00d9 06       		.uleb128 0x6
 2121 00da 40       		.uleb128 0x40
 2122 00db 18       		.uleb128 0x18
 2123 00dc 9742     		.uleb128 0x2117
 2124 00de 19       		.uleb128 0x19
 2125 00df 01       		.uleb128 0x1
 2126 00e0 13       		.uleb128 0x13
 2127 00e1 00       		.byte	0
 2128 00e2 00       		.byte	0
 2129 00e3 0F       		.uleb128 0xf
 2130 00e4 05       		.uleb128 0x5
 2131 00e5 00       		.byte	0
 2132 00e6 03       		.uleb128 0x3
 2133 00e7 0E       		.uleb128 0xe
 2134 00e8 3A       		.uleb128 0x3a
 2135 00e9 0B       		.uleb128 0xb
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 54


 2136 00ea 3B       		.uleb128 0x3b
 2137 00eb 05       		.uleb128 0x5
 2138 00ec 49       		.uleb128 0x49
 2139 00ed 13       		.uleb128 0x13
 2140 00ee 02       		.uleb128 0x2
 2141 00ef 18       		.uleb128 0x18
 2142 00f0 00       		.byte	0
 2143 00f1 00       		.byte	0
 2144 00f2 10       		.uleb128 0x10
 2145 00f3 34       		.uleb128 0x34
 2146 00f4 00       		.byte	0
 2147 00f5 03       		.uleb128 0x3
 2148 00f6 0E       		.uleb128 0xe
 2149 00f7 3A       		.uleb128 0x3a
 2150 00f8 0B       		.uleb128 0xb
 2151 00f9 3B       		.uleb128 0x3b
 2152 00fa 05       		.uleb128 0x5
 2153 00fb 49       		.uleb128 0x49
 2154 00fc 13       		.uleb128 0x13
 2155 00fd 02       		.uleb128 0x2
 2156 00fe 18       		.uleb128 0x18
 2157 00ff 00       		.byte	0
 2158 0100 00       		.byte	0
 2159 0101 11       		.uleb128 0x11
 2160 0102 2E       		.uleb128 0x2e
 2161 0103 01       		.byte	0x1
 2162 0104 3F       		.uleb128 0x3f
 2163 0105 19       		.uleb128 0x19
 2164 0106 03       		.uleb128 0x3
 2165 0107 0E       		.uleb128 0xe
 2166 0108 3A       		.uleb128 0x3a
 2167 0109 0B       		.uleb128 0xb
 2168 010a 3B       		.uleb128 0x3b
 2169 010b 05       		.uleb128 0x5
 2170 010c 27       		.uleb128 0x27
 2171 010d 19       		.uleb128 0x19
 2172 010e 49       		.uleb128 0x49
 2173 010f 13       		.uleb128 0x13
 2174 0110 11       		.uleb128 0x11
 2175 0111 01       		.uleb128 0x1
 2176 0112 12       		.uleb128 0x12
 2177 0113 06       		.uleb128 0x6
 2178 0114 40       		.uleb128 0x40
 2179 0115 18       		.uleb128 0x18
 2180 0116 9642     		.uleb128 0x2116
 2181 0118 19       		.uleb128 0x19
 2182 0119 01       		.uleb128 0x1
 2183 011a 13       		.uleb128 0x13
 2184 011b 00       		.byte	0
 2185 011c 00       		.byte	0
 2186 011d 12       		.uleb128 0x12
 2187 011e 2E       		.uleb128 0x2e
 2188 011f 01       		.byte	0x1
 2189 0120 3F       		.uleb128 0x3f
 2190 0121 19       		.uleb128 0x19
 2191 0122 03       		.uleb128 0x3
 2192 0123 0E       		.uleb128 0xe
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 55


 2193 0124 3A       		.uleb128 0x3a
 2194 0125 0B       		.uleb128 0xb
 2195 0126 3B       		.uleb128 0x3b
 2196 0127 05       		.uleb128 0x5
 2197 0128 27       		.uleb128 0x27
 2198 0129 19       		.uleb128 0x19
 2199 012a 11       		.uleb128 0x11
 2200 012b 01       		.uleb128 0x1
 2201 012c 12       		.uleb128 0x12
 2202 012d 06       		.uleb128 0x6
 2203 012e 40       		.uleb128 0x40
 2204 012f 18       		.uleb128 0x18
 2205 0130 9742     		.uleb128 0x2117
 2206 0132 19       		.uleb128 0x19
 2207 0133 01       		.uleb128 0x1
 2208 0134 13       		.uleb128 0x13
 2209 0135 00       		.byte	0
 2210 0136 00       		.byte	0
 2211 0137 13       		.uleb128 0x13
 2212 0138 2E       		.uleb128 0x2e
 2213 0139 01       		.byte	0x1
 2214 013a 3F       		.uleb128 0x3f
 2215 013b 19       		.uleb128 0x19
 2216 013c 03       		.uleb128 0x3
 2217 013d 0E       		.uleb128 0xe
 2218 013e 3A       		.uleb128 0x3a
 2219 013f 0B       		.uleb128 0xb
 2220 0140 3B       		.uleb128 0x3b
 2221 0141 05       		.uleb128 0x5
 2222 0142 27       		.uleb128 0x27
 2223 0143 19       		.uleb128 0x19
 2224 0144 11       		.uleb128 0x11
 2225 0145 01       		.uleb128 0x1
 2226 0146 12       		.uleb128 0x12
 2227 0147 06       		.uleb128 0x6
 2228 0148 40       		.uleb128 0x40
 2229 0149 18       		.uleb128 0x18
 2230 014a 9642     		.uleb128 0x2116
 2231 014c 19       		.uleb128 0x19
 2232 014d 01       		.uleb128 0x1
 2233 014e 13       		.uleb128 0x13
 2234 014f 00       		.byte	0
 2235 0150 00       		.byte	0
 2236 0151 14       		.uleb128 0x14
 2237 0152 34       		.uleb128 0x34
 2238 0153 00       		.byte	0
 2239 0154 03       		.uleb128 0x3
 2240 0155 0E       		.uleb128 0xe
 2241 0156 3A       		.uleb128 0x3a
 2242 0157 0B       		.uleb128 0xb
 2243 0158 3B       		.uleb128 0x3b
 2244 0159 0B       		.uleb128 0xb
 2245 015a 49       		.uleb128 0x49
 2246 015b 13       		.uleb128 0x13
 2247 015c 3F       		.uleb128 0x3f
 2248 015d 19       		.uleb128 0x19
 2249 015e 02       		.uleb128 0x2
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 56


 2250 015f 18       		.uleb128 0x18
 2251 0160 00       		.byte	0
 2252 0161 00       		.byte	0
 2253 0162 00       		.byte	0
 2254              		.section	.debug_aranges,"",%progbits
 2255 0000 A4000000 		.4byte	0xa4
 2256 0004 0200     		.2byte	0x2
 2257 0006 00000000 		.4byte	.Ldebug_info0
 2258 000a 04       		.byte	0x4
 2259 000b 00       		.byte	0
 2260 000c 0000     		.2byte	0
 2261 000e 0000     		.2byte	0
 2262 0010 00000000 		.4byte	.LFB2
 2263 0014 24000000 		.4byte	.LFE2-.LFB2
 2264 0018 00000000 		.4byte	.LFB3
 2265 001c 14020000 		.4byte	.LFE3-.LFB3
 2266 0020 00000000 		.4byte	.LFB4
 2267 0024 38000000 		.4byte	.LFE4-.LFB4
 2268 0028 00000000 		.4byte	.LFB5
 2269 002c 1C000000 		.4byte	.LFE5-.LFB5
 2270 0030 00000000 		.4byte	.LFB6
 2271 0034 1C000000 		.4byte	.LFE6-.LFB6
 2272 0038 00000000 		.4byte	.LFB7
 2273 003c 20000000 		.4byte	.LFE7-.LFB7
 2274 0040 00000000 		.4byte	.LFB8
 2275 0044 48000000 		.4byte	.LFE8-.LFB8
 2276 0048 00000000 		.4byte	.LFB9
 2277 004c 44000000 		.4byte	.LFE9-.LFB9
 2278 0050 00000000 		.4byte	.LFB10
 2279 0054 20000000 		.4byte	.LFE10-.LFB10
 2280 0058 00000000 		.4byte	.LFB11
 2281 005c 30000000 		.4byte	.LFE11-.LFB11
 2282 0060 00000000 		.4byte	.LFB12
 2283 0064 30000000 		.4byte	.LFE12-.LFB12
 2284 0068 00000000 		.4byte	.LFB13
 2285 006c 20000000 		.4byte	.LFE13-.LFB13
 2286 0070 00000000 		.4byte	.LFB14
 2287 0074 20000000 		.4byte	.LFE14-.LFB14
 2288 0078 00000000 		.4byte	.LFB15
 2289 007c 34000000 		.4byte	.LFE15-.LFB15
 2290 0080 00000000 		.4byte	.LFB16
 2291 0084 2C000000 		.4byte	.LFE16-.LFB16
 2292 0088 00000000 		.4byte	.LFB17
 2293 008c A0000000 		.4byte	.LFE17-.LFB17
 2294 0090 00000000 		.4byte	.LFB18
 2295 0094 90000000 		.4byte	.LFE18-.LFB18
 2296 0098 00000000 		.4byte	.LFB19
 2297 009c 80000000 		.4byte	.LFE19-.LFB19
 2298 00a0 00000000 		.4byte	0
 2299 00a4 00000000 		.4byte	0
 2300              		.section	.debug_ranges,"",%progbits
 2301              	.Ldebug_ranges0:
 2302 0000 00000000 		.4byte	.LFB2
 2303 0004 24000000 		.4byte	.LFE2
 2304 0008 00000000 		.4byte	.LFB3
 2305 000c 14020000 		.4byte	.LFE3
 2306 0010 00000000 		.4byte	.LFB4
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 57


 2307 0014 38000000 		.4byte	.LFE4
 2308 0018 00000000 		.4byte	.LFB5
 2309 001c 1C000000 		.4byte	.LFE5
 2310 0020 00000000 		.4byte	.LFB6
 2311 0024 1C000000 		.4byte	.LFE6
 2312 0028 00000000 		.4byte	.LFB7
 2313 002c 20000000 		.4byte	.LFE7
 2314 0030 00000000 		.4byte	.LFB8
 2315 0034 48000000 		.4byte	.LFE8
 2316 0038 00000000 		.4byte	.LFB9
 2317 003c 44000000 		.4byte	.LFE9
 2318 0040 00000000 		.4byte	.LFB10
 2319 0044 20000000 		.4byte	.LFE10
 2320 0048 00000000 		.4byte	.LFB11
 2321 004c 30000000 		.4byte	.LFE11
 2322 0050 00000000 		.4byte	.LFB12
 2323 0054 30000000 		.4byte	.LFE12
 2324 0058 00000000 		.4byte	.LFB13
 2325 005c 20000000 		.4byte	.LFE13
 2326 0060 00000000 		.4byte	.LFB14
 2327 0064 20000000 		.4byte	.LFE14
 2328 0068 00000000 		.4byte	.LFB15
 2329 006c 34000000 		.4byte	.LFE15
 2330 0070 00000000 		.4byte	.LFB16
 2331 0074 2C000000 		.4byte	.LFE16
 2332 0078 00000000 		.4byte	.LFB17
 2333 007c A0000000 		.4byte	.LFE17
 2334 0080 00000000 		.4byte	.LFB18
 2335 0084 90000000 		.4byte	.LFE18
 2336 0088 00000000 		.4byte	.LFB19
 2337 008c 80000000 		.4byte	.LFE19
 2338 0090 00000000 		.4byte	0
 2339 0094 00000000 		.4byte	0
 2340              		.section	.debug_line,"",%progbits
 2341              	.Ldebug_line0:
 2342 0000 9E020000 		.section	.debug_str,"MS",%progbits,1
 2342      02004000 
 2342      00000201 
 2342      FB0E0D00 
 2342      01010101 
 2343              	.LASF53:
 2344 0000 6164635F 		.ascii	"adc_CountsTo_uVolts\000"
 2344      436F756E 
 2344      7473546F 
 2344      5F75566F 
 2344      6C747300 
 2345              	.LASF40:
 2346 0014 6164635F 		.ascii	"adc_SetLowLimit\000"
 2346      5365744C 
 2346      6F774C69 
 2346      6D697400 
 2347              	.LASF10:
 2348 0024 75696E74 		.ascii	"uint16\000"
 2348      313600
 2349              	.LASF49:
 2350 002b 61646347 		.ascii	"adcGain\000"
 2350      61696E00 
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 58


 2351              	.LASF24:
 2352 0033 636F756E 		.ascii	"counts\000"
 2352      747300
 2353              	.LASF57:
 2354 003a 6164635F 		.ascii	"adc_channelsConfig\000"
 2354      6368616E 
 2354      6E656C73 
 2354      436F6E66 
 2354      696700
 2355              	.LASF7:
 2356 004d 6C6F6E67 		.ascii	"long long unsigned int\000"
 2356      206C6F6E 
 2356      6720756E 
 2356      7369676E 
 2356      65642069 
 2357              	.LASF45:
 2358 0064 6164635F 		.ascii	"adc_SetSatMask\000"
 2358      53657453 
 2358      61744D61 
 2358      736B00
 2359              	.LASF6:
 2360 0073 6C6F6E67 		.ascii	"long long int\000"
 2360      206C6F6E 
 2360      6720696E 
 2360      7400
 2361              	.LASF0:
 2362 0081 7369676E 		.ascii	"signed char\000"
 2362      65642063 
 2362      68617200 
 2363              	.LASF13:
 2364 008d 696E7433 		.ascii	"int32\000"
 2364      3200
 2365              	.LASF59:
 2366 0093 6164635F 		.ascii	"adc_offset\000"
 2366      6F666673 
 2366      657400
 2367              	.LASF4:
 2368 009e 6C6F6E67 		.ascii	"long int\000"
 2368      20696E74 
 2368      00
 2369              	.LASF28:
 2370 00a7 6164635F 		.ascii	"adc_Stop\000"
 2370      53746F70 
 2370      00
 2371              	.LASF9:
 2372 00b0 75696E74 		.ascii	"uint8\000"
 2372      3800
 2373              	.LASF16:
 2374 00b6 646F7562 		.ascii	"double\000"
 2374      6C6500
 2375              	.LASF26:
 2376 00bd 6164635F 		.ascii	"adc_Start\000"
 2376      53746172 
 2376      7400
 2377              	.LASF11:
 2378 00c7 75696E74 		.ascii	"uint32\000"
 2378      333200
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 59


 2379              	.LASF39:
 2380 00ce 6D61736B 		.ascii	"mask\000"
 2380      00
 2381              	.LASF34:
 2382 00d3 7265744D 		.ascii	"retMode\000"
 2382      6F646500 
 2383              	.LASF55:
 2384 00db 6164635F 		.ascii	"adc_CountsTo_Volts\000"
 2384      436F756E 
 2384      7473546F 
 2384      5F566F6C 
 2384      747300
 2385              	.LASF8:
 2386 00ee 756E7369 		.ascii	"unsigned int\000"
 2386      676E6564 
 2386      20696E74 
 2386      00
 2387              	.LASF54:
 2388 00fb 75566F6C 		.ascii	"uVolts\000"
 2388      747300
 2389              	.LASF32:
 2390 0102 6164635F 		.ascii	"adc_IsEndConversion\000"
 2390      4973456E 
 2390      64436F6E 
 2390      76657273 
 2390      696F6E00 
 2391              	.LASF5:
 2392 0116 6C6F6E67 		.ascii	"long unsigned int\000"
 2392      20756E73 
 2392      69676E65 
 2392      6420696E 
 2392      7400
 2393              	.LASF33:
 2394 0128 6164635F 		.ascii	"adc_GetResult16\000"
 2394      47657452 
 2394      6573756C 
 2394      74313600 
 2395              	.LASF56:
 2396 0138 766F6C74 		.ascii	"volts\000"
 2396      7300
 2397              	.LASF23:
 2398 013e 746D7052 		.ascii	"tmpRegVal\000"
 2398      65675661 
 2398      6C00
 2399              	.LASF3:
 2400 0148 73686F72 		.ascii	"short unsigned int\000"
 2400      7420756E 
 2400      7369676E 
 2400      65642069 
 2400      6E7400
 2401              	.LASF62:
 2402 015b 47656E65 		.ascii	"Generated_Source\\PSoC4\\adc.c\000"
 2402      72617465 
 2402      645F536F 
 2402      75726365 
 2402      5C50536F 
 2403              	.LASF46:
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 60


 2404 0178 6164635F 		.ascii	"adc_SetOffset\000"
 2404      5365744F 
 2404      66667365 
 2404      7400
 2405              	.LASF50:
 2406 0186 6164635F 		.ascii	"adc_CountsTo_mVolts\000"
 2406      436F756E 
 2406      7473546F 
 2406      5F6D566F 
 2406      6C747300 
 2407              	.LASF61:
 2408 019a 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2408      43313120 
 2408      352E342E 
 2408      31203230 
 2408      31363036 
 2409 01cd 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 2409      20726576 
 2409      6973696F 
 2409      6E203233 
 2409      37373135 
 2410 0200 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2410      66756E63 
 2410      74696F6E 
 2410      2D736563 
 2410      74696F6E 
 2411              	.LASF52:
 2412 0228 6D566F6C 		.ascii	"mVolts\000"
 2412      747300
 2413              	.LASF19:
 2414 022f 72656733 		.ascii	"reg32\000"
 2414      3200
 2415              	.LASF14:
 2416 0235 666C6F61 		.ascii	"float32\000"
 2416      74333200 
 2417              	.LASF21:
 2418 023d 73697A65 		.ascii	"sizetype\000"
 2418      74797065 
 2418      00
 2419              	.LASF41:
 2420 0246 6C6F774C 		.ascii	"lowLimit\000"
 2420      696D6974 
 2420      00
 2421              	.LASF20:
 2422 024f 6C6F6E67 		.ascii	"long double\000"
 2422      20646F75 
 2422      626C6500 
 2423              	.LASF17:
 2424 025b 696E7436 		.ascii	"int64\000"
 2424      3400
 2425              	.LASF15:
 2426 0261 666C6F61 		.ascii	"float\000"
 2426      7400
 2427              	.LASF37:
 2428 0267 6164635F 		.ascii	"adc_Init\000"
 2428      496E6974 
 2428      00
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 61


 2429              	.LASF43:
 2430 0270 68696768 		.ascii	"highLimit\000"
 2430      4C696D69 
 2430      7400
 2431              	.LASF1:
 2432 027a 756E7369 		.ascii	"unsigned char\000"
 2432      676E6564 
 2432      20636861 
 2432      7200
 2433              	.LASF58:
 2434 0288 6164635F 		.ascii	"adc_initVar\000"
 2434      696E6974 
 2434      56617200 
 2435              	.LASF2:
 2436 0294 73686F72 		.ascii	"short int\000"
 2436      7420696E 
 2436      7400
 2437              	.LASF27:
 2438 029e 6164635F 		.ascii	"adc_Enable\000"
 2438      456E6162 
 2438      6C6500
 2439              	.LASF60:
 2440 02a9 6164635F 		.ascii	"adc_countsPer10Volt\000"
 2440      636F756E 
 2440      74735065 
 2440      72313056 
 2440      6F6C7400 
 2441              	.LASF22:
 2442 02bd 63684E75 		.ascii	"chNum\000"
 2442      6D00
 2443              	.LASF35:
 2444 02c3 6368616E 		.ascii	"chan\000"
 2444      00
 2445              	.LASF18:
 2446 02c8 63686172 		.ascii	"char\000"
 2446      00
 2447              	.LASF44:
 2448 02cd 6164635F 		.ascii	"adc_SetLimitMask\000"
 2448      5365744C 
 2448      696D6974 
 2448      4D61736B 
 2448      00
 2449              	.LASF30:
 2450 02de 6164635F 		.ascii	"adc_StopConvert\000"
 2450      53746F70 
 2450      436F6E76 
 2450      65727400 
 2451              	.LASF47:
 2452 02ee 6F666673 		.ascii	"offset\000"
 2452      657400
 2453              	.LASF51:
 2454 02f5 61646343 		.ascii	"adcCounts\000"
 2454      6F756E74 
 2454      7300
 2455              	.LASF29:
 2456 02ff 6164635F 		.ascii	"adc_StartConvert\000"
 2456      53746172 
ARM GAS  C:\Users\Jacob\AppData\Local\Temp\cc0s3k17.s 			page 62


 2456      74436F6E 
 2456      76657274 
 2456      00
 2457              	.LASF31:
 2458 0310 73746174 		.ascii	"status\000"
 2458      757300
 2459              	.LASF12:
 2460 0317 696E7431 		.ascii	"int16\000"
 2460      3600
 2461              	.LASF25:
 2462 031d 6164635F 		.ascii	"adc_InputsPlacement\000"
 2462      496E7075 
 2462      7473506C 
 2462      6163656D 
 2462      656E7400 
 2463              	.LASF48:
 2464 0331 6164635F 		.ascii	"adc_SetGain\000"
 2464      53657447 
 2464      61696E00 
 2465              	.LASF38:
 2466 033d 6164635F 		.ascii	"adc_SetChanMask\000"
 2466      53657443 
 2466      68616E4D 
 2466      61736B00 
 2467              	.LASF42:
 2468 034d 6164635F 		.ascii	"adc_SetHighLimit\000"
 2468      53657448 
 2468      6967684C 
 2468      696D6974 
 2468      00
 2469              	.LASF63:
 2470 035e 433A5C55 		.ascii	"C:\\Users\\Jacob\\Documents\\Junior\\EGR 304\\EGR30"
 2470      73657273 
 2470      5C4A6163 
 2470      6F625C44 
 2470      6F63756D 
 2471 038b 345C5065 		.ascii	"4\\PeacefulPillowShowcase.cydsn\000"
 2471      61636566 
 2471      756C5069 
 2471      6C6C6F77 
 2471      53686F77 
 2472              	.LASF36:
 2473 03aa 72657375 		.ascii	"result\000"
 2473      6C7400
 2474              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
